{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract L2OutputOracle",
          "name": "_l2Oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_finalizationPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOutputRootProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawalInclusionProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonZeroCreationTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalAlreadyFinalized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "gasLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCreation",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "WithdrawalFinalized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FINALIZATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_ORACLE",
      "outputs": [
        {
          "internalType": "contract L2OutputOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_gasLimit",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_isCreation",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "depositTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_l2Timestamp",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "withdrawerStorageRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "latestBlockhash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct WithdrawalVerifier.OutputRootProof",
          "name": "_outputRootProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_withdrawalProof",
          "type": "bytes"
        }
      ],
      "name": "finalizeWithdrawalTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "finalizedWithdrawals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Sender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2270e4a5f04f771e18fdd517535be556259834ed137977c5216a91d80469afe8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1963048",
    "logsBloom": "0x
    "blockHash": "0xeef02fbc9edd413a2b3b5dc21cda26569095dbd3661da9ee3f77b0c4db05a7a8",
    "transactionHash": "0x2270e4a5f04f771e18fdd517535be556259834ed137977c5216a91d80469afe8",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1963048",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "6f1b19ba097550efb2ca70fb1ff05547",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract L2OutputOracle\",\"name\":\"_l2Oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_finalizationPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOutputRootProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawalInclusionProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroCreationTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalAlreadyFinalized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCreation\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINALIZATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE\",\"outputs\":[{\"internalType\":\"contract L2OutputOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isCreation\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_l2Timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawerStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"latestBlockhash\",\"type\":\"bytes32\"}],\"internalType\":\"struct WithdrawalVerifier.OutputRootProof\",\"name\":\"_outputRootProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawalProof\",\"type\":\"bytes\"}],\"name\":\"finalizeWithdrawalTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"finalizedWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositTransaction(address,uint256,uint64,bool,bytes)\":{\"params\":{\"_data\":\"The input data.\",\"_gasLimit\":\"The L2 gasLimit.\",\"_isCreation\":\"Whether or not the transaction should be contract creation.\",\"_to\":\"The L2 destination address.\",\"_value\":\"The ETH value to send in the deposit transaction.\"}},\"finalizeWithdrawalTransaction(uint256,address,address,uint256,uint256,bytes,uint256,(bytes32,bytes32,bytes32,bytes32),bytes)\":{\"params\":{\"_data\":\"Data to send to the target.\",\"_gasLimit\":\"Gas to be forwarded to the target.\",\"_l2Timestamp\":\"L2 timestamp of the outputRoot.\",\"_nonce\":\"Nonce for the provided message.\",\"_outputRootProof\":\"Inclusion proof of the withdrawer contracts storage root.\",\"_sender\":\"Message sender address on L2.\",\"_target\":\"Target address on L1.\",\"_value\":\"ETH to send to the target.\",\"_withdrawalProof\":\"Inclusion proof for the given withdrawal in the withdrawer contract.\"}}},\"title\":\"OptimismPortal This contract should be deployed behind an upgradable proxy.\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidOutputRootProof()\":[{\"notice\":\"Error emitted when the output root proof is invalid.\"}],\"InvalidWithdrawalInclusionProof()\":[{\"notice\":\"Error emitted when the withdrawal inclusion proof is invalid.\"}],\"NonZeroCreationTarget()\":[{\"notice\":\"Error emitted on deposits which create a new contract with a non-zero target.\"}],\"WithdrawalAlreadyFinalized()\":[{\"notice\":\"Error emitted when a withdrawal has already been finalized.\"}]},\"events\":{\"TransactionDeposited(address,address,uint256,uint256,uint64,bool,bytes)\":{\"notice\":\"Emitted when a Transaction is deposited from L1 to L2. The parameters of this event are read by the rollup node and used to derive deposit transactions on L2.\"},\"WithdrawalFinalized(bytes32,bool)\":{\"notice\":\"Emitted when a withdrawal is finalized\"}},\"kind\":\"user\",\"methods\":{\"FINALIZATION_PERIOD()\":{\"notice\":\"Minimum time that must elapse before a withdrawal can be finalized.\"},\"L2_ORACLE()\":{\"notice\":\"Address of the L2OutputOracle.\"},\"depositTransaction(address,uint256,uint64,bool,bytes)\":{\"notice\":\"Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in deriving deposit transactions.\"},\"finalizeWithdrawalTransaction(uint256,address,address,uint256,uint256,bytes,uint256,(bytes32,bytes32,bytes32,bytes32),bytes)\":{\"notice\":\"Finalizes a withdrawal transaction.\"},\"finalizedWithdrawals(bytes32)\":{\"notice\":\"A list of withdrawal hashes which have been successfully finalized. Used for replay protection.\"},\"l2Sender()\":{\"notice\":\"Public variable which can be used to read the address of the L2 account which initated the withdrawal. Can also be used to determine whether or not execution is occuring downstream of a call to finalizeWithdrawalTransaction().\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/OptimismPortal.sol\":\"OptimismPortal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/libraries/bridge/Lib_CrossDomainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_CrossDomainUtils\\n */\\nlibrary Lib_CrossDomainUtils {\\n    /**\\n     * Generates the correct cross domain calldata for a message.\\n     * @param _target Target contract address.\\n     * @param _sender Message sender address.\\n     * @param _message Message to send to the target.\\n     * @param _messageNonce Nonce for the provided message.\\n     * @return ABI encoded cross domain calldata.\\n     */\\n    function encodeXDomainCalldata(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"relayMessage(address,address,bytes,uint256)\\\",\\n                _target,\\n                _sender,\\n                _message,\\n                _messageNonce\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbb7fc8ab995ec8f1abb7a8be6a6d26d765cf9bf2c2c895f65d0c482011f8f200\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/rlp/Lib_RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\\"RLPReader\\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 internal constant MAX_LIST_LENGTH = 32;\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({ length: _in.length, ptr: ptr });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {\\n        (uint256 listOffset, , RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.LIST_ITEM, \\\"Invalid RLP list value.\\\");\\n\\n        // Solidity in-memory arrays can't be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can't know the number of RLP items without looping over\\n        // the entire input, we'd have to loop twice to accurately size this array. It's easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(itemCount < MAX_LIST_LENGTH, \\\"Provided RLP list exceeds max list length.\\\");\\n\\n            (uint256 itemOffset, uint256 itemLength, ) = _decodeLength(\\n                RLPItem({ length: _in.length - offset, ptr: _in.ptr + offset })\\n            );\\n\\n            out[itemCount] = RLPItem({ length: itemLength + itemOffset, ptr: _in.ptr + offset });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {\\n        return readList(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes value.\\\");\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        return readBytes(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(RLPItem memory _in) internal pure returns (string memory) {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(bytes memory _in) internal pure returns (string memory) {\\n        return readString(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(RLPItem memory _in) internal pure returns (bytes32) {\\n        require(_in.length <= 33, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(bytes memory _in) internal pure returns (bytes32) {\\n        return readBytes32(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(RLPItem memory _in) internal pure returns (uint256) {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(bytes memory _in) internal pure returns (uint256) {\\n        return readUint256(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(RLPItem memory _in) internal pure returns (bool) {\\n        require(_in.length == 1, \\\"Invalid RLP boolean value.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(out == 0 || out == 1, \\\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\\");\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(bytes memory _in) internal pure returns (bool) {\\n        return readBool(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(RLPItem memory _in) internal pure returns (address) {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(_in.length == 21, \\\"Invalid RLP address value.\\\");\\n\\n        return address(uint160(readUint256(_in)));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(bytes memory _in) internal pure returns (address) {\\n        return readAddress(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        return _copy(_in);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(RLPItem memory _in)\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(_in.length > 0, \\\"RLP item cannot be null.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            // slither-disable-next-line variable-scope\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(_in.length > strLen, \\\"Invalid RLP short string.\\\");\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(_in.length > lenOfStrLen, \\\"Invalid RLP long string length.\\\");\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfStrLen)))\\n            }\\n\\n            require(_in.length > lenOfStrLen + strLen, \\\"Invalid RLP long string.\\\");\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            // slither-disable-next-line variable-scope\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(_in.length > listLen, \\\"Invalid RLP short list.\\\");\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(_in.length > lenOfListLen, \\\"Invalid RLP long list length.\\\");\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfListLen)))\\n            }\\n\\n            require(_in.length > lenOfListLen + listLen, \\\"Invalid RLP long list.\\\");\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    ) private pure returns (bytes memory) {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - (_length % 32)) - 1;\\n        }\\n\\n        assembly {\\n            mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(RLPItem memory _in) private pure returns (bytes memory) {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n\",\"keccak256\":\"0xd794d1b32c6e31d40e2526b5e519de1b4e8d14d6933889f9b916e69c5d1848c6\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/rlp/Lib_RLPWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(bytes[] memory _in) internal pure returns (bytes memory) {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(string memory _in) internal pure returns (bytes memory) {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(address _in) internal pure returns (bytes memory) {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(uint256 _in) internal pure returns (bytes memory) {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(bool _in) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes1(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes1(uint8(lenLen) + uint8(_offset) + 55);\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes1(uint8((_len / (256**(lenLen - i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n\",\"keccak256\":\"0x215b90672ce126effc3f2df61ca0cdf52d2b1cc9be602877e637829b0bf229fd\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/trie/Lib_MerkleTrie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_BytesUtils } from \\\"../utils/Lib_BytesUtils.sol\\\";\\nimport { Lib_RLPReader } from \\\"../rlp/Lib_RLPReader.sol\\\";\\nimport { Lib_RLPWriter } from \\\"../rlp/Lib_RLPWriter.sol\\\";\\n\\n/**\\n * @title Lib_MerkleTrie\\n */\\nlibrary Lib_MerkleTrie {\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum NodeType {\\n        BranchNode,\\n        ExtensionNode,\\n        LeafNode\\n    }\\n\\n    struct TrieNode {\\n        bytes encoded;\\n        Lib_RLPReader.RLPItem[] decoded;\\n    }\\n\\n    /**********************\\n     * Contract Constants *\\n     **********************/\\n\\n    // TREE_RADIX determines the number of elements per branch node.\\n    uint256 constant TREE_RADIX = 16;\\n    // Branch nodes have TREE_RADIX elements plus an additional `value` slot.\\n    uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;\\n    // Leaf nodes and extension nodes always have two elements, a `path` and a `value`.\\n    uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;\\n\\n    // Prefixes are prepended to the `path` within a leaf or extension node and\\n    // allow us to differentiate between the two node types. `ODD` or `EVEN` is\\n    // determined by the number of nibbles within the unprefixed `path`. If the\\n    // number of nibbles if even, we need to insert an extra padding nibble so\\n    // the resulting prefixed `path` has an even number of nibbles.\\n    uint8 constant PREFIX_EXTENSION_EVEN = 0;\\n    uint8 constant PREFIX_EXTENSION_ODD = 1;\\n    uint8 constant PREFIX_LEAF_EVEN = 2;\\n    uint8 constant PREFIX_LEAF_ODD = 3;\\n\\n    // Just a utility constant. RLP represents `NULL` as 0x80.\\n    bytes1 constant RLP_NULL = bytes1(0x80);\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    ) internal pure returns (bool _verified) {\\n        (bool exists, bytes memory value) = get(_key, _proof, _root);\\n\\n        return (exists && Lib_BytesUtils.equal(_value, value));\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    ) internal pure returns (bool _exists, bytes memory _value) {\\n        TrieNode[] memory proof = _parseProof(_proof);\\n        (uint256 pathLength, bytes memory keyRemainder, bool isFinalNode) = _walkNodePath(\\n            proof,\\n            _key,\\n            _root\\n        );\\n\\n        bool exists = keyRemainder.length == 0;\\n\\n        require(exists || isFinalNode, \\\"Provided proof is invalid.\\\");\\n\\n        bytes memory value = exists ? _getNodeValue(proof[pathLength - 1]) : bytes(\\\"\\\");\\n\\n        return (exists, value);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * @notice Walks through a proof using a provided key.\\n     * @param _proof Inclusion proof to walk through.\\n     * @param _key Key to use for the walk.\\n     * @param _root Known root of the trie.\\n     * @return _pathLength Length of the final path\\n     * @return _keyRemainder Portion of the key remaining after the walk.\\n     * @return _isFinalNode Whether or not we've hit a dead end.\\n     */\\n    function _walkNodePath(\\n        TrieNode[] memory _proof,\\n        bytes memory _key,\\n        bytes32 _root\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 _pathLength,\\n            bytes memory _keyRemainder,\\n            bool _isFinalNode\\n        )\\n    {\\n        uint256 pathLength = 0;\\n        bytes memory key = Lib_BytesUtils.toNibbles(_key);\\n\\n        bytes32 currentNodeID = _root;\\n        uint256 currentKeyIndex = 0;\\n        uint256 currentKeyIncrement = 0;\\n        TrieNode memory currentNode;\\n\\n        // Proof is top-down, so we start at the first element (root).\\n        for (uint256 i = 0; i < _proof.length; i++) {\\n            currentNode = _proof[i];\\n            currentKeyIndex += currentKeyIncrement;\\n\\n            // Keep track of the proof elements we actually need.\\n            // It's expensive to resize arrays, so this simply reduces gas costs.\\n            pathLength += 1;\\n\\n            if (currentKeyIndex == 0) {\\n                // First proof element is always the root node.\\n                require(keccak256(currentNode.encoded) == currentNodeID, \\\"Invalid root hash\\\");\\n            } else if (currentNode.encoded.length >= 32) {\\n                // Nodes 32 bytes or larger are hashed inside branch nodes.\\n                require(\\n                    keccak256(currentNode.encoded) == currentNodeID,\\n                    \\\"Invalid large internal hash\\\"\\n                );\\n            } else {\\n                // Nodes smaller than 31 bytes aren't hashed.\\n                require(\\n                    Lib_BytesUtils.toBytes32(currentNode.encoded) == currentNodeID,\\n                    \\\"Invalid internal node hash\\\"\\n                );\\n            }\\n\\n            if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {\\n                if (currentKeyIndex == key.length) {\\n                    // We've hit the end of the key\\n                    // meaning the value should be within this branch node.\\n                    break;\\n                } else {\\n                    // We're not at the end of the key yet.\\n                    // Figure out what the next node ID should be and continue.\\n                    uint8 branchKey = uint8(key[currentKeyIndex]);\\n                    Lib_RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey];\\n                    currentNodeID = _getNodeID(nextNode);\\n                    currentKeyIncrement = 1;\\n                    continue;\\n                }\\n            } else if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n                bytes memory path = _getNodePath(currentNode);\\n                uint8 prefix = uint8(path[0]);\\n                uint8 offset = 2 - (prefix % 2);\\n                bytes memory pathRemainder = Lib_BytesUtils.slice(path, offset);\\n                bytes memory keyRemainder = Lib_BytesUtils.slice(key, currentKeyIndex);\\n                uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder);\\n\\n                if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n                    if (\\n                        pathRemainder.length == sharedNibbleLength &&\\n                        keyRemainder.length == sharedNibbleLength\\n                    ) {\\n                        // The key within this leaf matches our key exactly.\\n                        // Increment the key index to reflect that we have no remainder.\\n                        currentKeyIndex += sharedNibbleLength;\\n                    }\\n\\n                    // We've hit a leaf node, so our next node should be NULL.\\n                    currentNodeID = bytes32(RLP_NULL);\\n                    break;\\n                } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n                    if (sharedNibbleLength != pathRemainder.length) {\\n                        // Our extension node is not identical to the remainder.\\n                        // We've hit the end of this path\\n                        // updates will need to modify this extension.\\n                        currentNodeID = bytes32(RLP_NULL);\\n                        break;\\n                    } else {\\n                        // Our extension shares some nibbles.\\n                        // Carry on to the next node.\\n                        currentNodeID = _getNodeID(currentNode.decoded[1]);\\n                        currentKeyIncrement = sharedNibbleLength;\\n                        continue;\\n                    }\\n                } else {\\n                    revert(\\\"Received a node with an unknown prefix\\\");\\n                }\\n            } else {\\n                revert(\\\"Received an unparseable node.\\\");\\n            }\\n        }\\n\\n        // If our node ID is NULL, then we're at a dead end.\\n        bool isFinalNode = currentNodeID == bytes32(RLP_NULL);\\n        return (pathLength, Lib_BytesUtils.slice(key, currentKeyIndex), isFinalNode);\\n    }\\n\\n    /**\\n     * @notice Parses an RLP-encoded proof into something more useful.\\n     * @param _proof RLP-encoded proof to parse.\\n     * @return _parsed Proof parsed into easily accessible structs.\\n     */\\n    function _parseProof(bytes memory _proof) private pure returns (TrieNode[] memory _parsed) {\\n        Lib_RLPReader.RLPItem[] memory nodes = Lib_RLPReader.readList(_proof);\\n        TrieNode[] memory proof = new TrieNode[](nodes.length);\\n\\n        for (uint256 i = 0; i < nodes.length; i++) {\\n            bytes memory encoded = Lib_RLPReader.readBytes(nodes[i]);\\n            proof[i] = TrieNode({ encoded: encoded, decoded: Lib_RLPReader.readList(encoded) });\\n        }\\n\\n        return proof;\\n    }\\n\\n    /**\\n     * @notice Picks out the ID for a node. Node ID is referred to as the\\n     * \\\"hash\\\" within the specification, but nodes < 32 bytes are not actually\\n     * hashed.\\n     * @param _node Node to pull an ID for.\\n     * @return _nodeID ID for the node, depending on the size of its contents.\\n     */\\n    function _getNodeID(Lib_RLPReader.RLPItem memory _node) private pure returns (bytes32 _nodeID) {\\n        bytes memory nodeID;\\n\\n        if (_node.length < 32) {\\n            // Nodes smaller than 32 bytes are RLP encoded.\\n            nodeID = Lib_RLPReader.readRawBytes(_node);\\n        } else {\\n            // Nodes 32 bytes or larger are hashed.\\n            nodeID = Lib_RLPReader.readBytes(_node);\\n        }\\n\\n        return Lib_BytesUtils.toBytes32(nodeID);\\n    }\\n\\n    /**\\n     * @notice Gets the path for a leaf or extension node.\\n     * @param _node Node to get a path for.\\n     * @return _path Node path, converted to an array of nibbles.\\n     */\\n    function _getNodePath(TrieNode memory _node) private pure returns (bytes memory _path) {\\n        return Lib_BytesUtils.toNibbles(Lib_RLPReader.readBytes(_node.decoded[0]));\\n    }\\n\\n    /**\\n     * @notice Gets the path for a node.\\n     * @param _node Node to get a value for.\\n     * @return _value Node value, as hex bytes.\\n     */\\n    function _getNodeValue(TrieNode memory _node) private pure returns (bytes memory _value) {\\n        return Lib_RLPReader.readBytes(_node.decoded[_node.decoded.length - 1]);\\n    }\\n\\n    /**\\n     * @notice Utility; determines the number of nibbles shared between two\\n     * nibble arrays.\\n     * @param _a First nibble array.\\n     * @param _b Second nibble array.\\n     * @return _shared Number of shared nibbles.\\n     */\\n    function _getSharedNibbleLength(bytes memory _a, bytes memory _b)\\n        private\\n        pure\\n        returns (uint256 _shared)\\n    {\\n        uint256 i = 0;\\n        while (_a.length > i && _b.length > i && _a[i] == _b[i]) {\\n            i++;\\n        }\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x081304d7627b242e0a5724785a9cc4128b3104460f234ffe404d7bc87c1ad162\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/trie/Lib_SecureMerkleTrie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_MerkleTrie } from \\\"./Lib_MerkleTrie.sol\\\";\\n\\n/**\\n * @title Lib_SecureMerkleTrie\\n */\\nlibrary Lib_SecureMerkleTrie {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    ) internal pure returns (bool _verified) {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.verifyInclusionProof(key, _value, _proof, _root);\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    ) internal pure returns (bool _exists, bytes memory _value) {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.get(key, _proof, _root);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Computes the secure counterpart to a key.\\n     * @param _key Key to get a secure key from.\\n     * @return _secureKey Secure version of the key.\\n     */\\n    function _getSecureKey(bytes memory _key) private pure returns (bytes memory _secureKey) {\\n        return abi.encodePacked(keccak256(_key));\\n    }\\n}\\n\",\"keccak256\":\"0x38e47070ba79b1049b6d623db3377322d98c2217e8fa786bd48116fc7e3bfd9e\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/utils/Lib_BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {\\n        if (_start >= _bytes.length) {\\n            return bytes(\\\"\\\");\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32(bytes memory _bytes) internal pure returns (bytes32) {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes, (bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n\",\"keccak256\":\"0xc39ee13f97e4ccfbc72a5aac571deb3c1aff882fca2dd18be794d43ac5de0a30\",\"license\":\"MIT\"},\"@eth-optimism/contracts/standards/AddressAliasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.7;\\n\\nlibrary AddressAliasHelper {\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        unchecked {\\n            l2Address = address(uint160(l1Address) + offset);\\n        }\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        unchecked {\\n            l1Address = address(uint160(l2Address) - offset);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf330061b0ad081dd4d35a3efaeb3acd0a926c23ebb1ce7115007dac406d61b3f\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/L1/L2OutputOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title L2OutputOracle\\n * @notice The L2 state is committed to in this contract\\n * The payable keyword is used on appendL2Output to save gas on the msg.value check.\\n * This contract should be deployed behind an upgradable proxy\\n */\\n// slither-disable-next-line locked-ether\\ncontract L2OutputOracle is Ownable {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when an output is appended.\\n    event l2OutputAppended(\\n        bytes32 indexed _l2Output,\\n        uint256 indexed _l1Timestamp,\\n        uint256 indexed _l2timestamp\\n    );\\n\\n    /// @notice Emitted when an output is deleted.\\n    event l2OutputDeleted(\\n        bytes32 indexed _l2Output,\\n        uint256 indexed _l1Timestamp,\\n        uint256 indexed _l2timestamp\\n    );\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n\\n    /// @notice The interval in seconds at which checkpoints must be submitted.\\n    uint256 public immutable SUBMISSION_INTERVAL;\\n\\n    /// @notice The time between blocks on L2.\\n    uint256 public immutable L2_BLOCK_TIME;\\n\\n    /// @notice The number of blocks in the chain before the first block in this contract.\\n    uint256 public immutable HISTORICAL_TOTAL_BLOCKS;\\n\\n    /// @notice The timestamp of the first L2 block recorded in this contract.\\n    uint256 public immutable STARTING_BLOCK_TIMESTAMP;\\n\\n    /// @notice The timestamp of the most recent L2 block recorded in this contract.\\n    uint256 public latestBlockTimestamp;\\n\\n    /// @notice A mapping from L2 timestamps to the output root for the block with that timestamp.\\n    mapping(uint256 => OutputProposal) internal l2Outputs;\\n\\n    /// @notice OutputProposal represents a commitment to the L2 state.\\n    /// The timestamp is the L1 timestamp that the output root is posted.\\n    /// This timestamp is used to verify that the finalization period\\n    /// has passed since the output root was submitted.\\n    struct OutputProposal {\\n        bytes32 outputRoot;\\n        uint256 timestamp;\\n    }\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @notice Initialize the L2OutputOracle contract.\\n     * @param _submissionInterval The desired interval in seconds at which\\n     *        checkpoints must be submitted.\\n     * @param _l2BlockTime The desired L2 inter-block time in seconds.\\n     * @param _genesisL2Output The initial L2 output of the L2 chain.\\n     * @param _historicalTotalBlocks The number of blocks that preceding the\\n     *        initialization of the L2 chain.\\n     * @param _startingBlockTimestamp The timestamp to start L2 block at.\\n     */\\n    constructor(\\n        uint256 _submissionInterval,\\n        uint256 _l2BlockTime,\\n        bytes32 _genesisL2Output,\\n        uint256 _historicalTotalBlocks,\\n        uint256 _startingBlockTimestamp,\\n        address sequencer\\n    ) {\\n        require(\\n            _submissionInterval % _l2BlockTime == 0,\\n            \\\"Submission Interval must be a multiple of L2 Block Time\\\"\\n        );\\n\\n        SUBMISSION_INTERVAL = _submissionInterval;\\n        L2_BLOCK_TIME = _l2BlockTime;\\n        // solhint-disable-next-line not-rely-on-time\\n        l2Outputs[_startingBlockTimestamp] = OutputProposal(_genesisL2Output, block.timestamp);\\n        HISTORICAL_TOTAL_BLOCKS = _historicalTotalBlocks;\\n        // solhint-disable-next-line not-rely-on-time\\n        latestBlockTimestamp = _startingBlockTimestamp;\\n        // solhint-disable-next-line not-rely-on-time\\n        STARTING_BLOCK_TIMESTAMP = _startingBlockTimestamp;\\n\\n        _transferOwnership(sequencer);\\n    }\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    /**\\n     * @notice Accepts an L2 outputRoot and the timestamp of the corresponding L2 block. The\\n     * timestamp must be equal to the current value returned by `nextTimestamp()` in order to be\\n     * accepted.\\n     * This function may only be called by the Sequencer.\\n     * @param _l2Output The L2 output of the checkpoint block.\\n     * @param _l2timestamp The L2 block timestamp that resulted in _l2Output.\\n     * @param _l1Blockhash A block hash which must be included in the current chain.\\n     * @param _l1Blocknumber The block number with the specified block hash.\\n     */\\n    function appendL2Output(\\n        bytes32 _l2Output,\\n        uint256 _l2timestamp,\\n        bytes32 _l1Blockhash,\\n        uint256 _l1Blocknumber\\n    ) external payable onlyOwner {\\n        require(_l2timestamp < block.timestamp, \\\"Cannot append L2 output in future\\\");\\n        require(_l2timestamp == nextTimestamp(), \\\"Timestamp not equal to next expected timestamp\\\");\\n        require(_l2Output != bytes32(0), \\\"Cannot submit empty L2 output\\\");\\n\\n        if (_l1Blockhash != bytes32(0)) {\\n            // This check allows the sequencer to append an output based on a given L1 block,\\n            // without fear that it will be reorged out.\\n            // It will also revert if the blockheight provided is more than 256 blocks behind the\\n            // chain tip (as the hash will return as zero). This does open the door to a griefing\\n            // attack in which the sequencer's submission is censored until the block is no longer\\n            // retrievable, if the sequencer is experiencing this attack it can simply leave out the\\n            // blockhash value, and delay submission until it is confident that the L1 block is\\n            // finalized.\\n            require(\\n                blockhash(_l1Blocknumber) == _l1Blockhash,\\n                \\\"Blockhash does not match the hash at the expected height.\\\"\\n            );\\n        }\\n\\n        l2Outputs[_l2timestamp] = OutputProposal(_l2Output, block.timestamp);\\n        latestBlockTimestamp = _l2timestamp;\\n\\n        emit l2OutputAppended(_l2Output, block.timestamp, _l2timestamp);\\n    }\\n\\n    /**\\n     * @notice Deletes the most recent output.\\n     * @param _proposal Represents the output proposal to delete\\n     */\\n    function deleteL2Output(OutputProposal memory _proposal) external onlyOwner {\\n        OutputProposal memory outputToDelete = l2Outputs[latestBlockTimestamp];\\n\\n        require(\\n            _proposal.outputRoot == outputToDelete.outputRoot,\\n            \\\"Can only delete the most recent output.\\\"\\n        );\\n        require(_proposal.timestamp == outputToDelete.timestamp, \\\"\\\");\\n\\n        emit l2OutputDeleted(\\n            outputToDelete.outputRoot,\\n            outputToDelete.timestamp,\\n            latestBlockTimestamp\\n        );\\n\\n        delete l2Outputs[latestBlockTimestamp];\\n        latestBlockTimestamp = latestBlockTimestamp - SUBMISSION_INTERVAL;\\n    }\\n\\n    /**\\n     * @notice Computes the timestamp of the next L2 block that needs to be checkpointed.\\n     */\\n    function nextTimestamp() public view returns (uint256) {\\n        return latestBlockTimestamp + SUBMISSION_INTERVAL;\\n    }\\n\\n    /**\\n     * @notice Returns the L2 output proposal given a target L2 block timestamp.\\n     * Returns a null output proposal if none is found.\\n     * @param _l2Timestamp The L2 block timestamp of the target block.\\n     */\\n    function getL2Output(uint256 _l2Timestamp) external view returns (OutputProposal memory) {\\n        return l2Outputs[_l2Timestamp];\\n    }\\n\\n    /**\\n     * @notice Computes the L2 block number given a target L2 block timestamp.\\n     * @param _l2timestamp The L2 block timestamp of the target block.\\n     */\\n    function computeL2BlockNumber(uint256 _l2timestamp) external view returns (uint256) {\\n        require(\\n            _l2timestamp >= STARTING_BLOCK_TIMESTAMP,\\n            \\\"Timestamp prior to startingBlockTimestamp\\\"\\n        );\\n        // For the first block recorded (ie. _l2timestamp = STARTING_BLOCK_TIMESTAMP), the\\n        // L2BlockNumber should be HISTORICAL_TOTAL_BLOCKS + 1.\\n        unchecked {\\n            return\\n                HISTORICAL_TOTAL_BLOCKS +\\n                ((_l2timestamp - STARTING_BLOCK_TIMESTAMP) / L2_BLOCK_TIME);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1d3bad04089ce74d59a80b291252a817854cbcc71341549c4e9f33976addf240\",\"license\":\"MIT\"},\"contracts/L1/OptimismPortal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { L2OutputOracle } from \\\"./L2OutputOracle.sol\\\";\\nimport { WithdrawalVerifier } from \\\"../libraries/Lib_WithdrawalVerifier.sol\\\";\\nimport { AddressAliasHelper } from \\\"@eth-optimism/contracts/standards/AddressAliasHelper.sol\\\";\\nimport { ExcessivelySafeCall } from \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/**\\n * @title OptimismPortal\\n * This contract should be deployed behind an upgradable proxy.\\n */\\ncontract OptimismPortal {\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /**\\n     * @notice Error emitted when the output root proof is invalid.\\n     */\\n    error InvalidOutputRootProof();\\n\\n    /**\\n     * @notice Error emitted when the withdrawal inclusion proof is invalid.\\n     */\\n    error InvalidWithdrawalInclusionProof();\\n\\n    /**\\n     * @notice Error emitted when a withdrawal has already been finalized.\\n     */\\n    error WithdrawalAlreadyFinalized();\\n\\n    /**\\n     * @notice Error emitted on deposits which create a new contract with a non-zero target.\\n     */\\n    error NonZeroCreationTarget();\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /**\\n     * @notice Emitted when a Transaction is deposited from L1 to L2. The parameters of this\\n     * event are read by the rollup node and used to derive deposit transactions on L2.\\n     */\\n    event TransactionDeposited(\\n        address indexed from,\\n        address indexed to,\\n        uint256 mint,\\n        uint256 value,\\n        uint64 gasLimit,\\n        bool isCreation,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice Emitted when a withdrawal is finalized\\n     */\\n    event WithdrawalFinalized(bytes32 indexed, bool success);\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /**\\n     * @notice Value used to reset the l2Sender, this is more efficient than setting it to zero.\\n     */\\n    address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /**\\n     * @notice Minimum time that must elapse before a withdrawal can be finalized.\\n     */\\n    uint256 public immutable FINALIZATION_PERIOD;\\n\\n    /**\\n     * @notice Address of the L2OutputOracle.\\n     */\\n    L2OutputOracle public immutable L2_ORACLE;\\n\\n    /**\\n     * @notice Public variable which can be used to read the address of the L2 account which\\n     * initated the withdrawal. Can also be used to determine whether or not execution is occuring\\n     * downstream of a call to finalizeWithdrawalTransaction().\\n     */\\n    address public l2Sender = DEFAULT_L2_SENDER;\\n\\n    /**\\n     * @notice A list of withdrawal hashes which have been successfully finalized.\\n     * Used for replay protection.\\n     */\\n    mapping(bytes32 => bool) public finalizedWithdrawals;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(L2OutputOracle _l2Oracle, uint256 _finalizationPeriod) {\\n        L2_ORACLE = _l2Oracle;\\n        FINALIZATION_PERIOD = _finalizationPeriod;\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @notice Accepts value so that users can send ETH directly to this contract and\\n     * have the funds be deposited to their address on L2.\\n     * @dev This is intended as a convenience function for EOAs. Contracts should call the\\n     * depositTransaction() function directly.\\n     */\\n    receive() external payable {\\n        depositTransaction(msg.sender, msg.value, 100000, false, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @notice Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in\\n     * deriving deposit transactions.\\n     * @param _to The L2 destination address.\\n     * @param _value The ETH value to send in the deposit transaction.\\n     * @param _gasLimit The L2 gasLimit.\\n     * @param _isCreation Whether or not the transaction should be contract creation.\\n     * @param _data The input data.\\n     */\\n    function depositTransaction(\\n        address _to,\\n        uint256 _value,\\n        uint64 _gasLimit,\\n        bool _isCreation,\\n        bytes memory _data\\n    ) public payable {\\n        // Differentiate between sending to address(0)\\n        // and creating a contract\\n        if (_isCreation && _to != address(0)) {\\n            revert NonZeroCreationTarget();\\n        }\\n\\n        address from = msg.sender;\\n        // Transform the from-address to its alias if the caller is a contract.\\n        if (msg.sender != tx.origin) {\\n            from = AddressAliasHelper.applyL1ToL2Alias(msg.sender);\\n        }\\n\\n        emit TransactionDeposited(from, _to, msg.value, _value, _gasLimit, _isCreation, _data);\\n    }\\n\\n    /**\\n     * @notice Finalizes a withdrawal transaction.\\n     * @param _nonce Nonce for the provided message.\\n     * @param _sender Message sender address on L2.\\n     * @param _target Target address on L1.\\n     * @param _value ETH to send to the target.\\n     * @param _gasLimit Gas to be forwarded to the target.\\n     * @param _data Data to send to the target.\\n     * @param _l2Timestamp L2 timestamp of the outputRoot.\\n     * @param _outputRootProof Inclusion proof of the withdrawer contracts storage root.\\n     * @param _withdrawalProof Inclusion proof for the given withdrawal in the withdrawer contract.\\n     */\\n    function finalizeWithdrawalTransaction(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes calldata _data,\\n        uint256 _l2Timestamp,\\n        WithdrawalVerifier.OutputRootProof calldata _outputRootProof,\\n        bytes calldata _withdrawalProof\\n    ) external payable {\\n        // Prevent reentrency\\n        require(_target != address(this), \\\"Cannot send message to self.\\\");\\n\\n        // Get the output root.\\n        L2OutputOracle.OutputProposal memory proposal = L2_ORACLE.getL2Output(_l2Timestamp);\\n\\n        // Ensure that enough time has passed since the proposal was submitted\\n        // before allowing a withdrawal. A fault proof should be submitted\\n        // before this check is allowed to pass.\\n        require(\\n            block.timestamp > proposal.timestamp + FINALIZATION_PERIOD,\\n            \\\"Proposal is not yet finalized.\\\"\\n        );\\n\\n        // Verify that the output root can be generated with the elements in the proof.\\n        if (proposal.outputRoot != WithdrawalVerifier._deriveOutputRoot(_outputRootProof)) {\\n            revert InvalidOutputRootProof();\\n        }\\n\\n        // Verify that the hash of the withdrawal transaction's arguments are included in the\\n        // storage hash of the withdrawer contract.\\n        bytes32 withdrawalHash = WithdrawalVerifier.withdrawalHash(\\n            _nonce,\\n            _sender,\\n            _target,\\n            _value,\\n            _gasLimit,\\n            _data\\n        );\\n\\n        // Verify proof that a withdrawal on L2 was initated\\n        if (\\n            WithdrawalVerifier._verifyWithdrawalInclusion(\\n                withdrawalHash,\\n                _outputRootProof.withdrawerStorageRoot,\\n                _withdrawalProof\\n            ) == false\\n        ) {\\n            revert InvalidWithdrawalInclusionProof();\\n        }\\n\\n        // Check that this withdrawal has not already been finalized.\\n        if (finalizedWithdrawals[withdrawalHash] == true) {\\n            revert WithdrawalAlreadyFinalized();\\n        }\\n\\n        // Set the withdrawal as finalized\\n        finalizedWithdrawals[withdrawalHash] = true;\\n\\n        // Save enough gas so that the call cannot use up all of the gas\\n        require(gasleft() >= _gasLimit + 20000, \\\"Insufficient gas to finalize withdrawal.\\\");\\n\\n        // Set the l2Sender so that other contracts can know which account\\n        // on L2 is making the withdrawal\\n        l2Sender = _sender;\\n        // Make the call and ensure that a contract cannot out of gas\\n        // us by returning a huge amount of data\\n        (bool success, ) = ExcessivelySafeCall.excessivelySafeCall(\\n            _target,\\n            _gasLimit,\\n            _value,\\n            0,\\n            _data\\n        );\\n        // Be sure to reset the l2Sender\\n        l2Sender = DEFAULT_L2_SENDER;\\n\\n        // All withdrawals are immediately finalized. Replayability can\\n        // be achieved through contracts built on top of this contract\\n        emit WithdrawalFinalized(withdrawalHash, success);\\n    }\\n}\\n\",\"keccak256\":\"0x9686aa7d77dc0b85c891557c83302a1df443aab0efdc1a3d0659e675a35e7468\",\"license\":\"MIT\"},\"contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// FROM: https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol\\n// TODO: Just use the original once we get our PR merged.\\nlibrary ExcessivelySafeCall {\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _value Ether value to send with the call\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint256 _value,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                _value, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n}\\n\",\"keccak256\":\"0xb123c7ac9b8428d41463e3d70eb30910c5c9238bcfc7633598f6b5092bea7ef0\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libraries/Lib_WithdrawalVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/* Library Imports */\\nimport {\\n    Lib_SecureMerkleTrie\\n} from \\\"@eth-optimism/contracts/libraries/trie/Lib_SecureMerkleTrie.sol\\\";\\nimport {\\n    Lib_CrossDomainUtils\\n} from \\\"@eth-optimism/contracts/libraries/bridge/Lib_CrossDomainUtils.sol\\\";\\n\\n/**\\n * @title WithdrawalVerifier\\n * @notice A library with helper functions for verifying a withdrawal on L1.\\n */\\nlibrary WithdrawalVerifier {\\n    /// @notice A struct containing the elements hashed together to generate the output root.\\n    struct OutputRootProof {\\n        bytes32 version;\\n        bytes32 stateRoot;\\n        bytes32 withdrawerStorageRoot;\\n        bytes32 latestBlockhash;\\n    }\\n\\n    /**\\n     * @notice Derives the withdrawal hash according to the encoding in the L2 Withdrawer contract\\n     * @param _nonce Nonce for the provided message.\\n     * @param _sender Message sender address on L2.\\n     * @param _target Target address on L1.\\n     * @param _value ETH to send to the target.\\n     * @param _gasLimit Gas to be forwarded to the target.\\n     * @param _data Data to send to the target.\\n     */\\n    function withdrawalHash(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_nonce, _sender, _target, _value, _gasLimit, _data));\\n    }\\n\\n    /**\\n     * @notice Derives the output root corresponding to the elements provided in the proof.\\n     * @param _outputRootProof The elements which were hashed together to generate the output root.\\n     * @return Whether or not the output root matches the hashed output of the proof.\\n     */\\n    function _deriveOutputRoot(OutputRootProof memory _outputRootProof)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _outputRootProof.version,\\n                    _outputRootProof.stateRoot,\\n                    _outputRootProof.withdrawerStorageRoot,\\n                    _outputRootProof.latestBlockhash\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Verifies a proof that a given withdrawal hash is present in the Withdrawer contract's\\n     * withdrawals mapping.\\n     * @param _withdrawalHash Keccak256 hash of the withdrawal transaction data.\\n     * @param _withdrawerStorageRoot Storage root of the withdrawer predeploy contract.\\n     * @param _withdrawalProof Merkle trie inclusion proof for the desired node.\\n     * @return Whether or not the inclusion proof was successful.\\n     */\\n    function _verifyWithdrawalInclusion(\\n        bytes32 _withdrawalHash,\\n        bytes32 _withdrawerStorageRoot,\\n        bytes memory _withdrawalProof\\n    ) internal pure returns (bool) {\\n        bytes32 storageKey = keccak256(\\n            abi.encode(\\n                _withdrawalHash,\\n                uint256(0) // The withdrawals mapping is at the first slot in the layout.\\n            )\\n        );\\n\\n        return\\n            Lib_SecureMerkleTrie.verifyInclusionProof(\\n                abi.encode(storageKey),\\n                hex\\\"01\\\",\\n                _withdrawalProof,\\n                _withdrawerStorageRoot\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x34c41261a8ddd2273e3644e999e2e234067e5accffd0e8a101c749cc5de88083\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600080546001600160a01b03191661dead17905534801561002457600080fd5b506040516200230d3803806200230d8339810160408190526100459161005b565b6001600160a01b0390911660a052608052610095565b6000806040838503121561006e57600080fd5b82516001600160a01b038116811461008557600080fd5b6020939093015192949293505050565b60805160a051612245620000c86000396000818160a6015261035301526000818161019701526103d601526122456000f3fe6080604052600436106100685760003560e01c8063e9e05c4211610043578063e9e05c421461015f578063eecf1c3614610172578063ff61cc931461018557600080fd5b80621c2ff6146100945780639bf62d82146100f2578063a14238e71461011f57600080fd5b3661008f5761008d3334620186a06000604051806020016040528060008152506101c7565b005b600080fd5b3480156100a057600080fd5b506100c87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100fe57600080fd5b506000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b34801561012b57600080fd5b5061014f61013a366004611bde565b60016020526000908152604090205460ff1681565b60405190151581526020016100e9565b61008d61016d366004611c80565b6101c7565b61008d610180366004611dac565b6102b6565b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100e9565b8180156101e9575073ffffffffffffffffffffffffffffffffffffffff851615155b15610220576040517ff98844ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33328114610241575033731111000000000000000000000000000000001111015b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f78231ae6eb73366f912bb1d64351601fb76344c537bbab635ce14d0f376f019534888888886040516102a6959493929190611ef9565b60405180910390a3505050505050565b73ffffffffffffffffffffffffffffffffffffffff89163014156103215760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073656e64206d65737361676520746f2073656c662e0000000060448201526064015b60405180910390fd5b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae557906024016040805180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611f30565b90507f000000000000000000000000000000000000000000000000000000000000000081602001516104049190611fae565b42116104525760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c206973206e6f74207965742066696e616c697a65642e00006044820152606401610318565b61046961046436869003860186611fc6565b610772565b8151146104a2576040517f9cc00b5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104e88d8d8d8d8d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b905061052f81866040013586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061080d92505050565b610565576040517feb00eb2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602081905260409091205460ff16151514156105b4576040517fae89945400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790556105fa89614e20611fae565b5a101561066f5760405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742067617320746f2066696e616c697a652077697460448201527f6864726177616c2e0000000000000000000000000000000000000000000000006064820152608401610318565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8e16178155604080516020601f8b018190048102820181019092528981526106f4918e918d918f9186918f908f908190840183828082843760009201919091525061089a92505050565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead17905560405190915082907fdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b9061075a90841515815260200190565b60405180910390a25050505050505050505050505050565b600081600001518260200151836040015184606001516040516020016107b1949392919093845260208401929092526040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60008686868686866040516020016107eb9695949392919061202c565b6040516020818303038152906040528051906020012090509695505050505050565b60408051602081018590526000918101829052819060600160408051601f198184030181528282528051602091820120908301819052925061088f910160408051601f19818403018152828201909152600182527f01000000000000000000000000000000000000000000000000000000000000006020830152908587610925565b9150505b9392505050565b6000606060008060008661ffff1667ffffffffffffffff8111156108c0576108c0611c20565b6040519080825280601f01601f1916602001820160405280156108ea576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561090b578692505b828152826000602083013e90999098509650505050505050565b60008061093186610949565b905061093f8186868661097b565b9695505050505050565b6060818051906020012060405160200161096591815260200190565b6040516020818303038152906040529050919050565b600080600061098b8786866109ac565b915091508180156109a157506109a18682610a87565b979650505050505050565b6000606060006109bb85610aa3565b905060008060006109cd848a89610b9e565b815192955090935091501580806109e15750815b610a2d5760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e0000000000006044820152606401610318565b600081610a495760405180602001604052806000815250610a75565b610a7586610a58600188612083565b81518110610a6857610a6861209a565b6020026020010151611039565b919b919a509098505050505050505050565b6000818051906020012083805190602001201490505b92915050565b60606000610ab083611063565b90506000815167ffffffffffffffff811115610ace57610ace611c20565b604051908082528060200260200182016040528015610b1357816020015b6040805180820190915260608082526020820152815260200190600190039081610aec5790505b50905060005b8251811015610b96576000610b46848381518110610b3957610b3961209a565b6020026020010151611096565b90506040518060400160405280828152602001610b6283611063565b815250838381518110610b7757610b7761209a565b6020026020010181905250508080610b8e906120c9565b915050610b19565b509392505050565b60006060818080610bae87611126565b90506000869050600080610bd5604051806040016040528060608152602001606081525090565b60005b8c51811015610ff5578c8181518110610bf357610bf361209a565b602002602001015191508284610c099190611fae565b9350610c16600188611fae565b965083610c7a57815180516020909101208514610c755760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420726f6f7420686173680000000000000000000000000000006044820152606401610318565b610d37565b815151602011610cdc57815180516020909101208514610c755760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c206861736800000000006044820152606401610318565b84610cea83600001516112a9565b14610d375760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f646520686173680000000000006044820152606401610318565b610d4360106001611fae565b8260200151511415610dbc578551841415610d5d57610ff5565b6000868581518110610d7157610d7161209a565b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110610d9c57610d9c61209a565b60200260200101519050610daf816112d1565b9650600194505050610fe3565b60028260200151511415610f9b576000610dd583611307565b9050600081600081518110610dec57610dec61209a565b016020015160f81c90506000610e03600283612131565b610e0e906002612153565b90506000610e1f848360ff1661132b565b90506000610e2d8b8a61132b565b90506000610e3b8383611361565b905060ff851660021480610e52575060ff85166003145b15610ea857808351148015610e675750808251145b15610e7957610e76818b611fae565b99505b507f80000000000000000000000000000000000000000000000000000000000000009950610ff5945050505050565b60ff85161580610ebb575060ff85166001145b15610f2d5782518114610ef757507f80000000000000000000000000000000000000000000000000000000000000009950610ff5945050505050565b610f1e8860200151600181518110610f1157610f1161209a565b60200260200101516112d1565b9a509750610fe3945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e2060448201527f70726566697800000000000000000000000000000000000000000000000000006064820152608401610318565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e0000006044820152606401610318565b80610fed816120c9565b915050610bd8565b507f8000000000000000000000000000000000000000000000000000000000000000841486611024878661132b565b909e909d50909b509950505050505050505050565b60208101518051606091610a9d9161105390600190612083565b81518110610b3957610b3961209a565b604080518082018252600080825260209182015281518083019092528251825280830190820152606090610a9d9061140d565b606060008060006110a68561160c565b9194509250905060008160018111156110c1576110c1612176565b1461110e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e00000000000000006044820152606401610318565b61111d8560200151848461195d565b95945050505050565b606060008251600261113891906121a5565b67ffffffffffffffff81111561115057611150611c20565b6040519080825280601f01601f19166020018201604052801561117a576020820181803683370190505b50905060005b83518110156112a257600484828151811061119d5761119d61209a565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c826111d28360026121a5565b815181106111e2576111e261209a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060108482815181106112255761122561209a565b0160200151611237919060f81c612131565b60f81b826112468360026121a5565b611251906001611fae565b815181106112615761126161209a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061129a816120c9565b915050611180565b5092915050565b60006020825110156112bd57506020015190565b81806020019051810190610a9d91906121e2565b600060606020836000015110156112f2576112eb83611a3c565b90506112fe565b6112fb83611096565b90505b610893816112a9565b6060610a9d6113268360200151600081518110610b3957610b3961209a565b611126565b60608251821061134a5750604080516020810190915260008152610a9d565b610893838384865161135c9190612083565b611a47565b6000805b8084511180156113755750808351115b80156113f6575082818151811061138e5761138e61209a565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106113cd576113cd61209a565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016145b156108935780611405816120c9565b915050611365565b606060008061141b8461160c565b9193509091506001905081600181111561143757611437612176565b146114845760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e0000000000000000006044820152606401610318565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161149d5790505090506000835b865181101561160157602082106115495760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201527f7374206c656e6774682e000000000000000000000000000000000000000000006064820152608401610318565b6000806115866040518060400160405280858c6000015161156a9190612083565b8152602001858c6020015161157f9190611fae565b905261160c565b5091509150604051806040016040528083836115a29190611fae565b8152602001848b602001516115b79190611fae565b8152508585815181106115cc576115cc61209a565b60209081029190910101526115e2600185611fae565b93506115ee8183611fae565b6115f89084611fae565b925050506114ca565b508152949350505050565b6000806000808460000151116116645760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e00000000000000006044820152606401610318565b6020840151805160001a607f8111611689576000600160009450945094505050611956565b60b7811161170557600061169e608083612083565b9050808760000151116116f35760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e000000000000006044820152606401610318565b60019550935060009250611956915050565b60bf81116117f457600061171a60b783612083565b90508087600001511161176f5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e006044820152606401610318565b600183015160208290036101000a90046117898183611fae565b8851116117d85760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e00000000000000006044820152606401610318565b6117e3826001611fae565b965094506000935061195692505050565b60f7811161186f57600061180960c083612083565b90508087600001511161185e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e0000000000000000006044820152606401610318565b600195509350849250611956915050565b600061187c60f783612083565b9050808760000151116118d15760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e0000006044820152606401610318565b600183015160208290036101000a90046118eb8183611fae565b88511161193a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420524c50206c6f6e67206c6973742e000000000000000000006044820152606401610318565b611945826001611fae565b965094506001935061195692505050565b9193909250565b606060008267ffffffffffffffff81111561197a5761197a611c20565b6040519080825280601f01601f1916602001820160405280156119a4576020820181803683370190505b5090508051600014156119b8579050610893565b60006119c48587611fae565b90506020820160005b6119d86020876121fb565b811015611a0f57825182526119ee602084611fae565b92506119fb602083611fae565b915080611a07816120c9565b9150506119cd565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b6060610a9d82611bc8565b606081611a5581601f611fae565b1015611aa35760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610318565b82611aae8382611fae565b1015611afc5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610318565b611b068284611fae565b84511015611b565760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610318565b606082158015611b755760405191506000825260208201604052611bbf565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611bae578051835260209283019201611b96565b5050858452601f01601f1916604052505b50949350505050565b6060610a9d82602001516000846000015161195d565b600060208284031215611bf057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c1b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c7857611c78611c20565b604052919050565b600080600080600060a08688031215611c9857600080fd5b611ca186611bf7565b94506020808701359450604087013567ffffffffffffffff8082168214611cc757600080fd5b9094506060880135908115158214611cde57600080fd5b90935060808801359080821115611cf457600080fd5b818901915089601f830112611d0857600080fd5b813581811115611d1a57611d1a611c20565b611d2c84601f19601f84011601611c4f565b91508082528a84828501011115611d4257600080fd5b80848401858401376000848284010152508093505050509295509295909350565b60008083601f840112611d7557600080fd5b50813567ffffffffffffffff811115611d8d57600080fd5b602083019150836020828501011115611da557600080fd5b9250929050565b60008060008060008060008060008060006101808c8e031215611dce57600080fd5b8b359a50611dde60208d01611bf7565b9950611dec60408d01611bf7565b985060608c0135975060808c0135965067ffffffffffffffff60a08d01351115611e1557600080fd5b611e258d60a08e01358e01611d63565b909650945060c08c0135935060808c8e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215611e6357600080fd5b60e08c01925067ffffffffffffffff6101608d01351115611e8357600080fd5b611e948d6101608e01358e01611d63565b81935080925050509295989b509295989b9093969950565b6000815180845260005b81811015611ed257602081850181015186830182015201611eb6565b81811115611ee4576000602083870101525b50601f01601f19169290920160200192915050565b85815284602082015267ffffffffffffffff84166040820152821515606082015260a0608082015260006109a160a0830184611eac565b600060408284031215611f4257600080fd5b6040516040810181811067ffffffffffffffff82111715611f6557611f65611c20565b604052825181526020928301519281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611fc157611fc1611f7f565b500190565b600060808284031215611fd857600080fd5b6040516080810181811067ffffffffffffffff82111715611ffb57611ffb611c20565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015261207760c0830184611eac565b98975050505050505050565b60008282101561209557612095611f7f565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120fb576120fb611f7f565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060ff83168061214457612144612102565b8060ff84160691505092915050565b600060ff821660ff84168082101561216d5761216d611f7f565b90039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121dd576121dd611f7f565b500290565b6000602082840312156121f457600080fd5b5051919050565b60008261220a5761220a612102565b50049056fea26469706673582212203fc7d2652ba87e3788aee40fd87319de604d06a95ac00deb5c39ec7d92e756b464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100685760003560e01c8063e9e05c4211610043578063e9e05c421461015f578063eecf1c3614610172578063ff61cc931461018557600080fd5b80621c2ff6146100945780639bf62d82146100f2578063a14238e71461011f57600080fd5b3661008f5761008d3334620186a06000604051806020016040528060008152506101c7565b005b600080fd5b3480156100a057600080fd5b506100c87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100fe57600080fd5b506000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b34801561012b57600080fd5b5061014f61013a366004611bde565b60016020526000908152604090205460ff1681565b60405190151581526020016100e9565b61008d61016d366004611c80565b6101c7565b61008d610180366004611dac565b6102b6565b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100e9565b8180156101e9575073ffffffffffffffffffffffffffffffffffffffff851615155b15610220576040517ff98844ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33328114610241575033731111000000000000000000000000000000001111015b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f78231ae6eb73366f912bb1d64351601fb76344c537bbab635ce14d0f376f019534888888886040516102a6959493929190611ef9565b60405180910390a3505050505050565b73ffffffffffffffffffffffffffffffffffffffff89163014156103215760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073656e64206d65737361676520746f2073656c662e0000000060448201526064015b60405180910390fd5b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae557906024016040805180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611f30565b90507f000000000000000000000000000000000000000000000000000000000000000081602001516104049190611fae565b42116104525760405162461bcd60e51b815260206004820152601e60248201527f50726f706f73616c206973206e6f74207965742066696e616c697a65642e00006044820152606401610318565b61046961046436869003860186611fc6565b610772565b8151146104a2576040517f9cc00b5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104e88d8d8d8d8d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107ce92505050565b905061052f81866040013586868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061080d92505050565b610565576040517feb00eb2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602081905260409091205460ff16151514156105b4576040517fae89945400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790556105fa89614e20611fae565b5a101561066f5760405162461bcd60e51b815260206004820152602860248201527f496e73756666696369656e742067617320746f2066696e616c697a652077697460448201527f6864726177616c2e0000000000000000000000000000000000000000000000006064820152608401610318565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8e16178155604080516020601f8b018190048102820181019092528981526106f4918e918d918f9186918f908f908190840183828082843760009201919091525061089a92505050565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead17905560405190915082907fdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b9061075a90841515815260200190565b60405180910390a25050505050505050505050505050565b600081600001518260200151836040015184606001516040516020016107b1949392919093845260208401929092526040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60008686868686866040516020016107eb9695949392919061202c565b6040516020818303038152906040528051906020012090509695505050505050565b60408051602081018590526000918101829052819060600160408051601f198184030181528282528051602091820120908301819052925061088f910160408051601f19818403018152828201909152600182527f01000000000000000000000000000000000000000000000000000000000000006020830152908587610925565b9150505b9392505050565b6000606060008060008661ffff1667ffffffffffffffff8111156108c0576108c0611c20565b6040519080825280601f01601f1916602001820160405280156108ea576020820181803683370190505b5090506000808751602089018b8e8ef191503d92508683111561090b578692505b828152826000602083013e90999098509650505050505050565b60008061093186610949565b905061093f8186868661097b565b9695505050505050565b6060818051906020012060405160200161096591815260200190565b6040516020818303038152906040529050919050565b600080600061098b8786866109ac565b915091508180156109a157506109a18682610a87565b979650505050505050565b6000606060006109bb85610aa3565b905060008060006109cd848a89610b9e565b815192955090935091501580806109e15750815b610a2d5760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e0000000000006044820152606401610318565b600081610a495760405180602001604052806000815250610a75565b610a7586610a58600188612083565b81518110610a6857610a6861209a565b6020026020010151611039565b919b919a509098505050505050505050565b6000818051906020012083805190602001201490505b92915050565b60606000610ab083611063565b90506000815167ffffffffffffffff811115610ace57610ace611c20565b604051908082528060200260200182016040528015610b1357816020015b6040805180820190915260608082526020820152815260200190600190039081610aec5790505b50905060005b8251811015610b96576000610b46848381518110610b3957610b3961209a565b6020026020010151611096565b90506040518060400160405280828152602001610b6283611063565b815250838381518110610b7757610b7761209a565b6020026020010181905250508080610b8e906120c9565b915050610b19565b509392505050565b60006060818080610bae87611126565b90506000869050600080610bd5604051806040016040528060608152602001606081525090565b60005b8c51811015610ff5578c8181518110610bf357610bf361209a565b602002602001015191508284610c099190611fae565b9350610c16600188611fae565b965083610c7a57815180516020909101208514610c755760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420726f6f7420686173680000000000000000000000000000006044820152606401610318565b610d37565b815151602011610cdc57815180516020909101208514610c755760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c206861736800000000006044820152606401610318565b84610cea83600001516112a9565b14610d375760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f646520686173680000000000006044820152606401610318565b610d4360106001611fae565b8260200151511415610dbc578551841415610d5d57610ff5565b6000868581518110610d7157610d7161209a565b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110610d9c57610d9c61209a565b60200260200101519050610daf816112d1565b9650600194505050610fe3565b60028260200151511415610f9b576000610dd583611307565b9050600081600081518110610dec57610dec61209a565b016020015160f81c90506000610e03600283612131565b610e0e906002612153565b90506000610e1f848360ff1661132b565b90506000610e2d8b8a61132b565b90506000610e3b8383611361565b905060ff851660021480610e52575060ff85166003145b15610ea857808351148015610e675750808251145b15610e7957610e76818b611fae565b99505b507f80000000000000000000000000000000000000000000000000000000000000009950610ff5945050505050565b60ff85161580610ebb575060ff85166001145b15610f2d5782518114610ef757507f80000000000000000000000000000000000000000000000000000000000000009950610ff5945050505050565b610f1e8860200151600181518110610f1157610f1161209a565b60200260200101516112d1565b9a509750610fe3945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e2060448201527f70726566697800000000000000000000000000000000000000000000000000006064820152608401610318565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e0000006044820152606401610318565b80610fed816120c9565b915050610bd8565b507f8000000000000000000000000000000000000000000000000000000000000000841486611024878661132b565b909e909d50909b509950505050505050505050565b60208101518051606091610a9d9161105390600190612083565b81518110610b3957610b3961209a565b604080518082018252600080825260209182015281518083019092528251825280830190820152606090610a9d9061140d565b606060008060006110a68561160c565b9194509250905060008160018111156110c1576110c1612176565b1461110e5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e00000000000000006044820152606401610318565b61111d8560200151848461195d565b95945050505050565b606060008251600261113891906121a5565b67ffffffffffffffff81111561115057611150611c20565b6040519080825280601f01601f19166020018201604052801561117a576020820181803683370190505b50905060005b83518110156112a257600484828151811061119d5761119d61209a565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c826111d28360026121a5565b815181106111e2576111e261209a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060108482815181106112255761122561209a565b0160200151611237919060f81c612131565b60f81b826112468360026121a5565b611251906001611fae565b815181106112615761126161209a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061129a816120c9565b915050611180565b5092915050565b60006020825110156112bd57506020015190565b81806020019051810190610a9d91906121e2565b600060606020836000015110156112f2576112eb83611a3c565b90506112fe565b6112fb83611096565b90505b610893816112a9565b6060610a9d6113268360200151600081518110610b3957610b3961209a565b611126565b60608251821061134a5750604080516020810190915260008152610a9d565b610893838384865161135c9190612083565b611a47565b6000805b8084511180156113755750808351115b80156113f6575082818151811061138e5761138e61209a565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106113cd576113cd61209a565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016145b156108935780611405816120c9565b915050611365565b606060008061141b8461160c565b9193509091506001905081600181111561143757611437612176565b146114845760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e0000000000000000006044820152606401610318565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161149d5790505090506000835b865181101561160157602082106115495760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201527f7374206c656e6774682e000000000000000000000000000000000000000000006064820152608401610318565b6000806115866040518060400160405280858c6000015161156a9190612083565b8152602001858c6020015161157f9190611fae565b905261160c565b5091509150604051806040016040528083836115a29190611fae565b8152602001848b602001516115b79190611fae565b8152508585815181106115cc576115cc61209a565b60209081029190910101526115e2600185611fae565b93506115ee8183611fae565b6115f89084611fae565b925050506114ca565b508152949350505050565b6000806000808460000151116116645760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e00000000000000006044820152606401610318565b6020840151805160001a607f8111611689576000600160009450945094505050611956565b60b7811161170557600061169e608083612083565b9050808760000151116116f35760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e000000000000006044820152606401610318565b60019550935060009250611956915050565b60bf81116117f457600061171a60b783612083565b90508087600001511161176f5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e006044820152606401610318565b600183015160208290036101000a90046117898183611fae565b8851116117d85760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e00000000000000006044820152606401610318565b6117e3826001611fae565b965094506000935061195692505050565b60f7811161186f57600061180960c083612083565b90508087600001511161185e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e0000000000000000006044820152606401610318565b600195509350849250611956915050565b600061187c60f783612083565b9050808760000151116118d15760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e0000006044820152606401610318565b600183015160208290036101000a90046118eb8183611fae565b88511161193a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420524c50206c6f6e67206c6973742e000000000000000000006044820152606401610318565b611945826001611fae565b965094506001935061195692505050565b9193909250565b606060008267ffffffffffffffff81111561197a5761197a611c20565b6040519080825280601f01601f1916602001820160405280156119a4576020820181803683370190505b5090508051600014156119b8579050610893565b60006119c48587611fae565b90506020820160005b6119d86020876121fb565b811015611a0f57825182526119ee602084611fae565b92506119fb602083611fae565b915080611a07816120c9565b9150506119cd565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b6060610a9d82611bc8565b606081611a5581601f611fae565b1015611aa35760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610318565b82611aae8382611fae565b1015611afc5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610318565b611b068284611fae565b84511015611b565760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610318565b606082158015611b755760405191506000825260208201604052611bbf565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611bae578051835260209283019201611b96565b5050858452601f01601f1916604052505b50949350505050565b6060610a9d82602001516000846000015161195d565b600060208284031215611bf057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c1b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c7857611c78611c20565b604052919050565b600080600080600060a08688031215611c9857600080fd5b611ca186611bf7565b94506020808701359450604087013567ffffffffffffffff8082168214611cc757600080fd5b9094506060880135908115158214611cde57600080fd5b90935060808801359080821115611cf457600080fd5b818901915089601f830112611d0857600080fd5b813581811115611d1a57611d1a611c20565b611d2c84601f19601f84011601611c4f565b91508082528a84828501011115611d4257600080fd5b80848401858401376000848284010152508093505050509295509295909350565b60008083601f840112611d7557600080fd5b50813567ffffffffffffffff811115611d8d57600080fd5b602083019150836020828501011115611da557600080fd5b9250929050565b60008060008060008060008060008060006101808c8e031215611dce57600080fd5b8b359a50611dde60208d01611bf7565b9950611dec60408d01611bf7565b985060608c0135975060808c0135965067ffffffffffffffff60a08d01351115611e1557600080fd5b611e258d60a08e01358e01611d63565b909650945060c08c0135935060808c8e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20011215611e6357600080fd5b60e08c01925067ffffffffffffffff6101608d01351115611e8357600080fd5b611e948d6101608e01358e01611d63565b81935080925050509295989b509295989b9093969950565b6000815180845260005b81811015611ed257602081850181015186830182015201611eb6565b81811115611ee4576000602083870101525b50601f01601f19169290920160200192915050565b85815284602082015267ffffffffffffffff84166040820152821515606082015260a0608082015260006109a160a0830184611eac565b600060408284031215611f4257600080fd5b6040516040810181811067ffffffffffffffff82111715611f6557611f65611c20565b604052825181526020928301519281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611fc157611fc1611f7f565b500190565b600060808284031215611fd857600080fd5b6040516080810181811067ffffffffffffffff82111715611ffb57611ffb611c20565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a083015261207760c0830184611eac565b98975050505050505050565b60008282101561209557612095611f7f565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120fb576120fb611f7f565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060ff83168061214457612144612102565b8060ff84160691505092915050565b600060ff821660ff84168082101561216d5761216d611f7f565b90039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121dd576121dd611f7f565b500290565b6000602082840312156121f457600080fd5b5051919050565b60008261220a5761220a612102565b50049056fea26469706673582212203fc7d2652ba87e3788aee40fd87319de604d06a95ac00deb5c39ec7d92e756b464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositTransaction(address,uint256,uint64,bool,bytes)": {
        "params": {
          "_data": "The input data.",
          "_gasLimit": "The L2 gasLimit.",
          "_isCreation": "Whether or not the transaction should be contract creation.",
          "_to": "The L2 destination address.",
          "_value": "The ETH value to send in the deposit transaction."
        }
      },
      "finalizeWithdrawalTransaction(uint256,address,address,uint256,uint256,bytes,uint256,(bytes32,bytes32,bytes32,bytes32),bytes)": {
        "params": {
          "_data": "Data to send to the target.",
          "_gasLimit": "Gas to be forwarded to the target.",
          "_l2Timestamp": "L2 timestamp of the outputRoot.",
          "_nonce": "Nonce for the provided message.",
          "_outputRootProof": "Inclusion proof of the withdrawer contracts storage root.",
          "_sender": "Message sender address on L2.",
          "_target": "Target address on L1.",
          "_value": "ETH to send to the target.",
          "_withdrawalProof": "Inclusion proof for the given withdrawal in the withdrawer contract."
        }
      }
    },
    "title": "OptimismPortal This contract should be deployed behind an upgradable proxy.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidOutputRootProof()": [
        {
          "notice": "Error emitted when the output root proof is invalid."
        }
      ],
      "InvalidWithdrawalInclusionProof()": [
        {
          "notice": "Error emitted when the withdrawal inclusion proof is invalid."
        }
      ],
      "NonZeroCreationTarget()": [
        {
          "notice": "Error emitted on deposits which create a new contract with a non-zero target."
        }
      ],
      "WithdrawalAlreadyFinalized()": [
        {
          "notice": "Error emitted when a withdrawal has already been finalized."
        }
      ]
    },
    "events": {
      "TransactionDeposited(address,address,uint256,uint256,uint64,bool,bytes)": {
        "notice": "Emitted when a Transaction is deposited from L1 to L2. The parameters of this event are read by the rollup node and used to derive deposit transactions on L2."
      },
      "WithdrawalFinalized(bytes32,bool)": {
        "notice": "Emitted when a withdrawal is finalized"
      }
    },
    "kind": "user",
    "methods": {
      "FINALIZATION_PERIOD()": {
        "notice": "Minimum time that must elapse before a withdrawal can be finalized."
      },
      "L2_ORACLE()": {
        "notice": "Address of the L2OutputOracle."
      },
      "depositTransaction(address,uint256,uint64,bool,bytes)": {
        "notice": "Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in deriving deposit transactions."
      },
      "finalizeWithdrawalTransaction(uint256,address,address,uint256,uint256,bytes,uint256,(bytes32,bytes32,bytes32,bytes32),bytes)": {
        "notice": "Finalizes a withdrawal transaction."
      },
      "finalizedWithdrawals(bytes32)": {
        "notice": "A list of withdrawal hashes which have been successfully finalized. Used for replay protection."
      },
      "l2Sender()": {
        "notice": "Public variable which can be used to read the address of the L2 account which initated the withdrawal. Can also be used to determine whether or not execution is occuring downstream of a call to finalizeWithdrawalTransaction()."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5346,
        "contract": "contracts/L1/OptimismPortal.sol:OptimismPortal",
        "label": "l2Sender",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5351,
        "contract": "contracts/L1/OptimismPortal.sol:OptimismPortal",
        "label": "finalizedWithdrawals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
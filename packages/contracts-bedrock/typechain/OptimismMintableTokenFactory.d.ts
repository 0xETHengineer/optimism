/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimismMintableTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "createStandardL2Token(address,string,string)": FunctionFragment;
    "initialize(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createStandardL2Token",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createStandardL2Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "OptimismMintableTokenCreated(address,address,address)": EventFragment;
    "StandardL2TokenCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OptimismMintableTokenCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StandardL2TokenCreated"): EventFragment;
}

export type OptimismMintableTokenCreatedEvent = TypedEvent<
  [string, string, string] & {
    _localToken: string;
    _remoteToken: string;
    _deployer: string;
  }
>;

export type StandardL2TokenCreatedEvent = TypedEvent<
  [string, string] & { _remoteToken: string; _localToken: string }
>;

export class OptimismMintableTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimismMintableTokenFactoryInterface;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    createStandardL2Token(
      _remoteToken: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  createStandardL2Token(
    _remoteToken: string,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    createStandardL2Token(
      _remoteToken: string,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(_bridge: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OptimismMintableTokenCreated(address,address,address)"(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _deployer?: null
    ): TypedEventFilter<
      [string, string, string],
      { _localToken: string; _remoteToken: string; _deployer: string }
    >;

    OptimismMintableTokenCreated(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _deployer?: null
    ): TypedEventFilter<
      [string, string, string],
      { _localToken: string; _remoteToken: string; _deployer: string }
    >;

    "StandardL2TokenCreated(address,address)"(
      _remoteToken?: string | null,
      _localToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _remoteToken: string; _localToken: string }
    >;

    StandardL2TokenCreated(
      _remoteToken?: string | null,
      _localToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _remoteToken: string; _localToken: string }
    >;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    createStandardL2Token(
      _remoteToken: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createStandardL2Token(
      _remoteToken: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

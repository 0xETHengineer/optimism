Optimized IR:

Optimized IR:

Optimized IR:
/// @use-src 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
object "AddressUpgradeable_5916" {
    code {
        /// @src 2:194:7366  "library AddressUpgradeable {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("AddressUpgradeable_5916_deployed"), datasize("AddressUpgradeable_5916_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("AddressUpgradeable_5916_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_AddressUpgradeable_5916()
        { }
    }
    /// @use-src 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
    object "AddressUpgradeable_5916_deployed" {
        code {
            /// @src 2:194:7366  "library AddressUpgradeable {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220ee29612122b40341337adad56f51d5e715df4561a9699773f6fe9cbad2783cc264736f6c634300080f0033"
    }
}

Optimized IR:

Optimized IR:

Optimized IR:
/// @use-src 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol"
object "Address_4342" {
    code {
        /// @src 5:194:8305  "library Address {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Address_4342_deployed"), datasize("Address_4342_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Address_4342_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Address_4342()
        { }
    }
    /// @use-src 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol"
    object "Address_4342_deployed" {
        code {
            /// @src 5:194:8305  "library Address {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212206bd9b3f4b0ca9199dce5ddc1537c9680203beba98ff6e72664857d06a8cb9bc864736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol"
object "Strings_4047" {
    code {
        /// @src 6:161:2396  "library Strings {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Strings_4047_deployed"), datasize("Strings_4047_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Strings_4047_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Strings_4047()
        { }
    }
    /// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol"
    object "Strings_4047_deployed" {
        code {
            /// @src 6:161:2396  "library Strings {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122013acc81d429affb465e9a910ed88be13af82ac7c13f78a47b7caceaa29a0e53d64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol"
object "Math_4846" {
    code {
        /// @src 7:202:8826  "library Math {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Math_4846_deployed"), datasize("Math_4846_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Math_4846_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Math_4846()
        { }
    }
    /// @use-src 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol"
    object "Math_4846_deployed" {
        code {
            /// @src 7:202:8826  "library Math {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212209a65d3c2d4e00394eda1a1408f8a1dc41750e8dcc6c91020c200c3071e74333964736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol"
object "SignedMath_6528" {
    code {
        /// @src 8:215:1263  "library SignedMath {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SignedMath_6528_deployed"), datasize("SignedMath_6528_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("SignedMath_6528_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_SignedMath_6528()
        { }
    }
    /// @use-src 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol"
    object "SignedMath_6528_deployed" {
        code {
            /// @src 8:215:1263  "library SignedMath {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220a8f632505579f7ef6112037ebfd64d91e2a8258a0921e0323d2b7beda244d6e164736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol"
object "FixedPointMathLib_7107" {
    code {
        /// @src 9:234:15905  "library FixedPointMathLib {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("FixedPointMathLib_7107_deployed"), datasize("FixedPointMathLib_7107_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("FixedPointMathLib_7107_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_FixedPointMathLib_7107()
        { }
    }
    /// @use-src 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol"
    object "FixedPointMathLib_7107_deployed" {
        code {
            /// @src 9:234:15905  "library FixedPointMathLib {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122054b8cc197ef58cddbfb8aadcc94042f14187de20fa092733016604005f1f23bf64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 10:"contracts/L1/L1CrossDomainMessenger.sol", 18:"contracts/libraries/Constants.sol", 21:"contracts/libraries/Predeploys.sol", 28:"contracts/universal/CrossDomainMessenger.sol", 29:"contracts/universal/Semver.sol"
object "L1CrossDomainMessenger_125" {
    code {
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
        mstore(64, memoryguard(288))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := copy_arguments_for_constructor_42_object_L1CrossDomainMessenger_125()
        constructor_L1CrossDomainMessenger_125(_1)
        let _2 := allocate_unbounded()
        codecopy(_2, dataoffset("L1CrossDomainMessenger_125_deployed"), datasize("L1CrossDomainMessenger_125_deployed"))
        setimmutable(_2, "980", mload(128))
        setimmutable(_2, "1425", mload(160))
        setimmutable(_2, "1428", mload(192))
        setimmutable(_2, "1431", mload(224))
        setimmutable(_2, "18", mload(256))
        return(_2, datasize("L1CrossDomainMessenger_125_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function cleanup_t_address_payable(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function cleanup_t_contract$_OptimismPortal_$804(value) -> cleaned
        {
            cleaned := cleanup_t_address_payable(value)
        }
        function validator_revert_t_contract$_OptimismPortal_$804(value)
        {
            if iszero(eq(value, cleanup_t_contract$_OptimismPortal_$804(value))) { revert(0, 0) }
        }
        function abi_decode_t_contract$_OptimismPortal_$804_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_contract$_OptimismPortal_$804(value)
        }
        function abi_decode_tuple_t_contract$_OptimismPortal_$804_fromMemory(headStart, dataEnd) -> value0
        {
            if slt(sub(dataEnd, headStart), 32)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_contract$_OptimismPortal_$804_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_42_object_L1CrossDomainMessenger_125() -> ret_param_0
        {
            let programSize := datasize("L1CrossDomainMessenger_125")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0 := abi_decode_tuple_t_contract$_OptimismPortal_$804_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        function cleanup_t_rational_1_by_1(value) -> cleaned
        { cleaned := value }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function identity(value) -> ret
        { ret := value }
        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }
        function cleanup_t_rational_4_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_4_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_4_by_1(value)))
        }
        function cleanup_t_rational_0_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }
        /// @src 21:462:566  "address internal constant L2_CROSS_DOMAIN_MESSENGER =..."
        function constant_L2_CROSS_DOMAIN_MESSENGER_815() -> ret
        {
            /// @src 21:524:566  "0x4200000000000000000000000000000000000007"
            let expr_814 := 0x4200000000000000000000000000000000000007
            let _6 := expr_814
            ret := _6
        }
        /// @ast-id 42 @src 10:936:1122  "constructor(OptimismPortal _portal)..."
        function constructor_L1CrossDomainMessenger_125(var__portal_22_address)
        {
            /// @src 10:987:988  "1"
            let expr_25 := 0x01
            let _3 := convert_t_rational_1_by_1_to_t_uint256(expr_25)
            /// @src 10:990:991  "4"
            let expr_26 := 0x04
            let _4 := convert_t_rational_4_by_1_to_t_uint256(expr_26)
            /// @src 10:993:994  "0"
            let expr_27 := 0x00
            let _5 := convert_t_rational_0_by_1_to_t_uint256(expr_27)
            /// @src 10:1025:1035  "Predeploys"
            let expr_30_address := linkersymbol("contracts/libraries/Predeploys.sol:Predeploys")
            /// @src 10:1025:1061  "Predeploys.L2_CROSS_DOMAIN_MESSENGER"
            let expr_31 := constant_L2_CROSS_DOMAIN_MESSENGER_815()
            let _7 := expr_31
            /// @src 10:936:1122  "constructor(OptimismPortal _portal)..."
            constructor_Semver_1483(_3, _4, _5, _7)
            /// @src 10:1086:1093  "_portal"
            let _8_address := var__portal_22_address
            let expr_35_address := _8_address
            /// @src 10:1077:1093  "PORTAL = _portal"
            let _9_address := expr_35_address
            mstore(256, _9_address)
            let expr_36_address := expr_35_address
            fun_initialize_52()
        }
        /// @ast-id 1454 @src 29:726:919  "constructor(..."
        function constructor_Semver_1483(var__major_1434, var__minor_1436, var__patch_1438, _7)
        {
            constructor_CrossDomainMessenger_1417(_7)
            /// @src 29:842:848  "_major"
            let _10 := var__major_1434
            let expr_1442 := _10
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _11 := expr_1442
            mstore(160, _11)
            let expr_1443 := expr_1442
            /// @src 29:874:880  "_minor"
            let _12 := var__minor_1436
            let expr_1446 := _12
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _13 := expr_1446
            mstore(192, _13)
            let expr_1447 := expr_1446
            /// @src 29:906:912  "_patch"
            let _14 := var__patch_1438
            let expr_1450 := _14
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _15 := expr_1450
            mstore(224, _15)
            let expr_1451 := expr_1450
        }
        /// @ast-id 1042 @src 28:8583:8670  "constructor(address _otherMessenger) {..."
        function constructor_CrossDomainMessenger_1417(var__otherMessenger_1034)
        {
            constructor_CrossDomainMessengerLegacySpacer1_938()
            /// @src 28:8648:8663  "_otherMessenger"
            let _16 := var__otherMessenger_1034
            let expr_1038 := _16
            /// @src 28:8630:8663  "OTHER_MESSENGER = _otherMessenger"
            let _17 := expr_1038
            mstore(128, _17)
            let expr_1039 := expr_1038
        }
        /// @src 28:1210:3196  "contract CrossDomainMessengerLegacySpacer1 {..."
        function constructor_CrossDomainMessengerLegacySpacer1_938()
        {
            constructor_Initializable_3528()
        }
        /// @src 1:2383:5669  "abstract contract Initializable {..."
        function constructor_Initializable_3528()
        {
            constructor_CrossDomainMessengerLegacySpacer0_897()
        }
        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
        function constructor_CrossDomainMessengerLegacySpacer0_897()
        { }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
        function shift_right_168_unsigned(value) -> newValue
        { newValue := shr(168, value) }
        function cleanup_from_storage_t_bool(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_21t_bool(slot_value) -> value
        {
            value := cleanup_from_storage_t_bool(shift_right_168_unsigned(slot_value))
        }
        function read_from_storage_split_offset_21_t_bool(slot) -> value
        {
            value := extract_from_storage_value_offset_21t_bool(sload(slot))
        }
        function cleanup_t_bool(value) -> cleaned
        {
            cleaned := iszero(iszero(value))
        }
        function shift_right_160_unsigned(value) -> newValue
        { newValue := shr(160, value) }
        function cleanup_from_storage_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_20t_uint8(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint8(shift_right_160_unsigned(slot_value))
        }
        function read_from_storage_split_offset_20_t_uint8(slot) -> value
        {
            value := extract_from_storage_value_offset_20t_uint8(sload(slot))
        }
        function cleanup_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_Initializable_$3528_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
        {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }
        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is alrea")
            mstore(add(memPtr, 32), "dy initialized")
        }
        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function shift_left_160(value) -> newValue
        { newValue := shl(160, value) }
        function update_byte_slice_1_shift_20(value, toInsert) -> result
        {
            let mask := 0xff0000000000000000000000000000000000000000
            toInsert := shift_left_160(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint8_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }
        function prepare_store_t_uint8(value) -> ret
        { ret := value }
        function update_storage_value_offset_20t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_20(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_168(value) -> newValue
        { newValue := shl(168, value) }
        function update_byte_slice_1_shift_21(value, toInsert) -> result
        {
            let mask := 0xff000000000000000000000000000000000000000000
            toInsert := shift_left_168(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_bool_to_t_bool(value) -> converted
        {
            converted := cleanup_t_bool(value)
        }
        function prepare_store_t_bool(value) -> ret
        { ret := value }
        function update_storage_value_offset_21t_bool_to_t_bool(slot, value_0)
        {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_21(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }
        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
        {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }
        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
        {
            tail := add(headStart, 32)
            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
        }
        /// @ast-id 3448 @src 1:3078:3584  "modifier initializer() {..."
        function modifier_initializer_46()
        {
            /// @src 1:3134:3147  "_initializing"
            let _18 := read_from_storage_split_offset_21_t_bool(0x00)
            let expr_3397 := _18
            /// @src 1:3133:3147  "!_initializing"
            let expr_3398 := cleanup_t_bool(iszero(expr_3397))
            /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_3396 := expr_3398
            /// @src 1:3179:3193  "isTopLevelCall"
            let _19 := var_isTopLevelCall_3396
            let expr_3401 := _19
            /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
            let expr_3405 := expr_3401
            if expr_3405
            {
                /// @src 1:3197:3209  "_initialized"
                let _20 := read_from_storage_split_offset_20_t_uint8(0x00)
                let expr_3402 := _20
                /// @src 1:3212:3213  "1"
                let expr_3403 := 0x01
                /// @src 1:3197:3213  "_initialized < 1"
                let expr_3404 := lt(cleanup_t_uint8(expr_3402), convert_t_rational_1_by_1_to_t_uint8(expr_3403))
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                expr_3405 := expr_3404
            }
            /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
            let expr_3406 := expr_3405
            /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
            let expr_3420 := expr_3406
            if iszero(expr_3420)
            {
                /// @src 1:3220:3238  "AddressUpgradeable"
                let expr_3407_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                /// @src 1:3258:3262  "this"
                let expr_3411_address := address()
                /// @src 1:3250:3263  "address(this)"
                let expr_3412 := convert_t_contract$_Initializable_$3528_to_t_address(expr_3411_address)
                /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                let expr_3413 := fun_isContract_5691(expr_3412)
                /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                let expr_3414 := cleanup_t_bool(iszero(expr_3413))
                /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                let expr_3418 := expr_3414
                if expr_3418
                {
                    /// @src 1:3268:3280  "_initialized"
                    let _21 := read_from_storage_split_offset_20_t_uint8(0x00)
                    let expr_3415 := _21
                    /// @src 1:3284:3285  "1"
                    let expr_3416 := 0x01
                    /// @src 1:3268:3285  "_initialized == 1"
                    let expr_3417 := eq(cleanup_t_uint8(expr_3415), convert_t_rational_1_by_1_to_t_uint8(expr_3416))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    expr_3418 := expr_3417
                }
                /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3419 := expr_3418
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                expr_3420 := expr_3419
            }
            /// @src 1:3157:3358  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3420)
            /// @src 1:3383:3384  "1"
            let expr_3425 := 0x01
            /// @src 1:3368:3384  "_initialized = 1"
            let _22 := convert_t_rational_1_by_1_to_t_uint8(expr_3425)
            update_storage_value_offset_20t_uint8_to_t_uint8(0x00, _22)
            let expr_3426 := _22
            /// @src 1:3398:3412  "isTopLevelCall"
            let _23 := var_isTopLevelCall_3396
            let expr_3428 := _23
            /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            if expr_3428
            {
                /// @src 1:3444:3448  "true"
                let expr_3430 := 0x01
                /// @src 1:3428:3448  "_initializing = true"
                update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3430)
                let expr_3431 := expr_3430
            }
            /// @src 1:3468:3469  "_"
            fun_initialize_52_inner()
            /// @src 1:3483:3497  "isTopLevelCall"
            let _24 := var_isTopLevelCall_3396
            let expr_3436 := _24
            /// @src 1:3479:3578  "if (isTopLevelCall) {..."
            if expr_3436
            {
                /// @src 1:3529:3534  "false"
                let expr_3438 := 0x00
                /// @src 1:3513:3534  "_initializing = false"
                update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3438)
                let expr_3439 := expr_3438
                /// @src 1:3565:3566  "1"
                let expr_3442 := 0x01
                /// @src 1:3553:3567  "Initialized(1)"
                let _25 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _26 := allocate_unbounded()
                    let _27 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_26, expr_3442)
                    log1(_26, sub(_27, _26), _25)
                }
            }
        }
        /// @src 10:1172:1259  "function initialize() public initializer {..."
        function fun_initialize_52_inner()
        {
            fun___CrossDomainMessenger_init_1390()
        }
        /// @ast-id 52
        function fun_initialize_52()
        { modifier_initializer_46() }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is not i")
            mstore(add(memPtr, 32), "nitializing")
        }
        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_1382()
        {
            /// @src 1:4910:4923  "_initializing"
            let _28 := read_from_storage_split_offset_21_t_bool(0x00)
            let expr_3485 := _28
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
            /// @src 1:4981:4982  "_"
            fun___CrossDomainMessenger_init_1390_inner()
        }
        /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
        function constant_DEFAULT_L2_SENDER_2871() -> ret
        {
            /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
            let expr_2870 := 0xdead
            let _29 := expr_2870
            ret := _29
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_20_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_address_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function prepare_store_t_address(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
        {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }
        /// @src 28:18750:18878  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
        function fun___CrossDomainMessenger_init_1390_inner()
        {
            /// @src 28:18844:18853  "Constants"
            let expr_1385_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
            /// @src 28:18844:18871  "Constants.DEFAULT_L2_SENDER"
            let expr_1386 := constant_DEFAULT_L2_SENDER_2871()
            /// @src 28:18825:18871  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
            update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1386)
            let expr_1387 := expr_1386
        }
        /// @ast-id 1390 @src 28:18750:18878  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
        function fun___CrossDomainMessenger_init_1390()
        {
            modifier_onlyInitializing_1382()
        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
        function zero_value_for_split_t_bool() -> ret
        { ret := 0 }
        /// @ast-id 5691 @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_5691(var_account_5679) -> var__5682
        {
            /// @src 2:1246:1250  "bool"
            let zero_t_bool_30 := zero_value_for_split_t_bool()
            var__5682 := zero_t_bool_30
            /// @src 2:1476:1483  "account"
            let _31 := var_account_5679
            let expr_5684 := _31
            /// @src 2:1476:1495  "account.code.length"
            let expr_5686 := extcodesize(expr_5684)
            /// @src 2:1498:1499  "0"
            let expr_5687 := 0x00
            /// @src 2:1476:1499  "account.code.length > 0"
            let expr_5688 := gt(cleanup_t_uint256(expr_5686), convert_t_rational_0_by_1_to_t_uint256(expr_5687))
            /// @src 2:1469:1499  "return account.code.length > 0"
            var__5682 := expr_5688
            leave
        }
    }
    /// @use-src 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 10:"contracts/L1/L1CrossDomainMessenger.sol", 18:"contracts/libraries/Constants.sol", 19:"contracts/libraries/Encoding.sol", 20:"contracts/libraries/Hashing.sol", 22:"contracts/libraries/SafeCall.sol", 28:"contracts/universal/CrossDomainMessenger.sol", 29:"contracts/universal/Semver.sol"
    object "L1CrossDomainMessenger_125_deployed" {
        code {
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            mstore(64, 128)
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x028f85f7 {
                    external_fun_MIN_GAS_CALLDATA_OVERHEAD_965()
                }
                case 0x0c568498 {
                    external_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961()
                }
                case 0x0ff754ea { external_fun_PORTAL_18() }
                case 0x2828d7e8 {
                    external_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957()
                }
                case 0x3dbb202b {
                    external_fun_sendMessage_1099()
                }
                case 0x3f827a5a {
                    external_fun_MESSAGE_VERSION_949()
                }
                case 0x4c1d6a69 {
                    external_fun_RELAY_CALL_OVERHEAD_969()
                }
                case 0x54fd4d50 { external_fun_version_1482() }
                case 0x5644cfdf {
                    external_fun_RELAY_GAS_CHECK_BUFFER_977()
                }
                case 0x6e296e45 {
                    external_fun_xDomainMessageSender_1329()
                }
                case 0x8129fc1c { external_fun_initialize_52() }
                case 0x83a74074 {
                    external_fun_RELAY_CONSTANT_OVERHEAD_953()
                }
                case 0x8cbeeef2 {
                    external_fun_RELAY_RESERVED_GAS_973()
                }
                case 0x9fce812c {
                    external_fun_OTHER_MESSENGER_980()
                }
                case 0xa4e7f8bd {
                    external_fun_failedMessages_996()
                }
                case 0xb1b1b209 {
                    external_fun_successfulMessages_985()
                }
                case 0xb28ade25 { external_fun_baseGas_1378() }
                case 0xd764ad0b {
                    //path1: dispatcher
                    external_fun_relayMessage_1312()
                }
                case 0xecc70428 {
                    external_fun_messageNonce_1342()
                }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function cleanup_t_rational_16_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_uint64(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_16_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_16_by_1(value)))
            }
            /// @src 28:4668:4721  "uint64 public constant MIN_GAS_CALLDATA_OVERHEAD = 16"
            function constant_MIN_GAS_CALLDATA_OVERHEAD_965() -> ret
            {
                /// @src 28:4719:4721  "16"
                let expr_964 := 0x10
                let _1 := convert_t_rational_16_by_1_to_t_uint64(expr_964)
                ret := _1
            }
            /// @ast-id 965 @src 28:4668:4721  "uint64 public constant MIN_GAS_CALLDATA_OVERHEAD = 16"
            function getter_fun_MIN_GAS_CALLDATA_OVERHEAD_965() -> ret_0
            {
                ret_0 := constant_MIN_GAS_CALLDATA_OVERHEAD_965()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint64(value))
            }
            function abi_encode_tuple_t_uint64__to_t_uint64__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint64_to_t_uint64_fromStack(value0, add(headStart, 0))
            }
            function external_fun_MIN_GAS_CALLDATA_OVERHEAD_965()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_MIN_GAS_CALLDATA_OVERHEAD_965()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_63_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_63_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_63_by_1(value)))
            }
            /// @src 28:4498:4562  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 63"
            function constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961() -> ret
            {
                /// @src 28:4560:4562  "63"
                let expr_960 := 0x3f
                let _2 := convert_t_rational_63_by_1_to_t_uint64(expr_960)
                ret := _2
            }
            /// @ast-id 961 @src 28:4498:4562  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 63"
            function getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961() -> ret_0
            {
                ret_0 := constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 18 @src 10:762:800  "OptimismPortal public immutable PORTAL"
            function getter_fun_PORTAL_18() -> rval
            { rval := loadimmutable("18") }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address_payable(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_contract$_OptimismPortal_$804_to_t_address_payable(value) -> converted
            {
                converted := convert_t_uint160_to_t_address_payable(value)
            }
            function abi_encode_t_contract$_OptimismPortal_$804_to_t_address_payable_fromStack(value, pos)
            {
                mstore(pos, convert_t_contract$_OptimismPortal_$804_to_t_address_payable(value))
            }
            function abi_encode_tuple_t_contract$_OptimismPortal_$804__to_t_address_payable__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_contract$_OptimismPortal_$804_to_t_address_payable_fromStack(value0, add(headStart, 0))
            }
            function external_fun_PORTAL_18()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_PORTAL_18()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_OptimismPortal_$804__to_t_address_payable__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_64_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_64_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_64_by_1(value)))
            }
            /// @src 28:4328:4390  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 64"
            function constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957() -> ret
            {
                /// @src 28:4388:4390  "64"
                let expr_956 := 0x40
                let _3 := convert_t_rational_64_by_1_to_t_uint64(expr_956)
                ret := _3
            }
            /// @ast-id 957 @src 28:4328:4390  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 64"
            function getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957() -> ret_0
            {
                ret_0 := constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
            { revert(0, 0) }
            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
            { revert(0, 0) }
            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
            { revert(0, 0) }
            function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length
            {
                if iszero(slt(add(offset, 0x1f), end))
                {
                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                }
                length := calldataload(offset)
                if gt(length, 0xffffffffffffffff)
                {
                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
                }
                arrayPos := add(offset, 0x20)
                if gt(add(arrayPos, mul(length, 0x01)), end)
                {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
            }
            function cleanup_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function validator_revert_t_uint32(value)
            {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint32(value)
            }
            function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint32(headStart, dataEnd) -> value0, value1, value2, value3
            {
                if slt(sub(dataEnd, headStart), 96)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value1, value2 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value3 := abi_decode_t_uint32(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_sendMessage_1099()
            {
                let param_0, param_1, param_2, param_3 := abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint32(4, calldatasize())
                fun_sendMessage_1099(param_0, param_1, param_2, param_3)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function cleanup_t_uint16(value) -> cleaned
            { cleaned := and(value, 0xffff) }
            function convert_t_rational_1_by_1_to_t_uint16(value) -> converted
            {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_1_by_1(value)))
            }
            /// @src 28:4031:4073  "uint16 public constant MESSAGE_VERSION = 1"
            function constant_MESSAGE_VERSION_949() -> ret
            {
                /// @src 28:4072:4073  "1"
                let expr_948 := 0x01
                let _4 := convert_t_rational_1_by_1_to_t_uint16(expr_948)
                ret := _4
            }
            /// @ast-id 949 @src 28:4031:4073  "uint16 public constant MESSAGE_VERSION = 1"
            function getter_fun_MESSAGE_VERSION_949() -> ret_0
            {
                ret_0 := constant_MESSAGE_VERSION_949()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint16(value))
            }
            function abi_encode_tuple_t_uint16__to_t_uint16__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint16_to_t_uint16_fromStack(value0, add(headStart, 0))
            }
            function external_fun_MESSAGE_VERSION_949()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_MESSAGE_VERSION_949()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint16__to_t_uint16__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_40000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_40000_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_40000_by_1(value)))
            }
            /// @src 28:4824:4875  "uint64 public constant RELAY_CALL_OVERHEAD = 40_000"
            function constant_RELAY_CALL_OVERHEAD_969() -> ret
            {
                /// @src 28:4869:4875  "40_000"
                let expr_968 := 0x9c40
                let _5 := convert_t_rational_40000_by_1_to_t_uint64(expr_968)
                ret := _5
            }
            /// @ast-id 969 @src 28:4824:4875  "uint64 public constant RELAY_CALL_OVERHEAD = 40_000"
            function getter_fun_RELAY_CALL_OVERHEAD_969() -> ret_0
            {
                ret_0 := constant_RELAY_CALL_OVERHEAD_969()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_RELAY_CALL_OVERHEAD_969()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_RELAY_CALL_OVERHEAD_969()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length) { mstore(add(dst, length), 0) }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_version_1482()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_version_1482()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_5000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_5000_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_5000_by_1(value)))
            }
            /// @src 28:5199:5252  "uint64 public constant RELAY_GAS_CHECK_BUFFER = 5_000"
            function constant_RELAY_GAS_CHECK_BUFFER_977() -> ret
            {
                /// @src 28:5247:5252  "5_000"
                let expr_976 := 0x1388
                let _6 := convert_t_rational_5000_by_1_to_t_uint64(expr_976)
                ret := _6
            }
            /// @ast-id 977 @src 28:5199:5252  "uint64 public constant RELAY_GAS_CHECK_BUFFER = 5_000"
            function getter_fun_RELAY_GAS_CHECK_BUFFER_977() -> ret_0
            {
                ret_0 := constant_RELAY_GAS_CHECK_BUFFER_977()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_RELAY_GAS_CHECK_BUFFER_977()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_RELAY_GAS_CHECK_BUFFER_977()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_xDomainMessageSender_1329()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_xDomainMessageSender_1329()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_initialize_52()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_initialize_52()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_200000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_200000_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_200000_by_1(value)))
            }
            /// @src 28:4166:4222  "uint64 public constant RELAY_CONSTANT_OVERHEAD = 200_000"
            function constant_RELAY_CONSTANT_OVERHEAD_953() -> ret
            {
                /// @src 28:4215:4222  "200_000"
                let expr_952 := 0x030d40
                let _7 := convert_t_rational_200000_by_1_to_t_uint64(expr_952)
                ret := _7
            }
            /// @ast-id 953 @src 28:4166:4222  "uint64 public constant RELAY_CONSTANT_OVERHEAD = 200_000"
            function getter_fun_RELAY_CONSTANT_OVERHEAD_953() -> ret_0
            {
                ret_0 := constant_RELAY_CONSTANT_OVERHEAD_953()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_RELAY_CONSTANT_OVERHEAD_953()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_RELAY_CONSTANT_OVERHEAD_953()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @src 28:4994:5044  "uint64 public constant RELAY_RESERVED_GAS = 40_000"
            function constant_RELAY_RESERVED_GAS_973() -> ret
            {
                /// @src 28:5038:5044  "40_000"
                let expr_972 := 0x9c40
                let _8 := convert_t_rational_40000_by_1_to_t_uint64(expr_972)
                ret := _8
            }
            /// @ast-id 973 @src 28:4994:5044  "uint64 public constant RELAY_RESERVED_GAS = 40_000"
            function getter_fun_RELAY_RESERVED_GAS_973() -> ret_0
            {
                ret_0 := constant_RELAY_RESERVED_GAS_973()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_RELAY_RESERVED_GAS_973()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_RELAY_RESERVED_GAS_973()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 980 @src 28:5362:5402  "address public immutable OTHER_MESSENGER"
            function getter_fun_OTHER_MESSENGER_980() -> rval
            { rval := loadimmutable("980") }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_OTHER_MESSENGER_980()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_OTHER_MESSENGER_980()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
            }
            function convert_t_bytes32_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(value)
            }
            function mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key) -> dataSlot
            {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_bool(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bool(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)
            }
            /// @ast-id 996 @src 28:6691:6737  "mapping(bytes32 => bool) public failedMessages"
            function getter_fun_failedMessages_996(key_0) -> ret
            {
                let slot := 206
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)
                ret := read_from_storage_split_dynamic_t_bool(slot, offset)
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bool(value))
            }
            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
            }
            function external_fun_failedMessages_996()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 := getter_fun_failedMessages_996(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 985 @src 28:5671:5721  "mapping(bytes32 => bool) public successfulMessages"
            function getter_fun_successfulMessages_985(key_0) -> ret
            {
                let slot := 203
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)
                ret := read_from_storage_split_dynamic_t_bool(slot, offset)
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function external_fun_successfulMessages_985()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 := getter_fun_successfulMessages_985(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_bytes_calldata_ptrt_uint32(headStart, dataEnd) -> value0, value1, value2
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value2 := abi_decode_t_uint32(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_baseGas_1378()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2 := abi_decode_tuple_t_bytes_calldata_ptrt_uint32(4, calldatasize())
                let ret_0 := fun_baseGas_1378(param_0, param_1, param_2)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
            {
                if slt(sub(dataEnd, headStart), 192)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 160))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value5, value6 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }
            }
            // path2: external wrapper around relayMessage
            function external_fun_relayMessage_1312()
            {
                // audit: abi decoding
                // abi_decode Will revert if the input data is malformed. OK because we assume the Portal always calls
                // with the correct input
                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_tuple_t_uint256t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(4, calldatasize())
                fun_relayMessage_1312(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                // clean up stuff to return
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_messageNonce_1342()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_messageNonce_1342()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function shift_right_168_unsigned(value) -> newValue
            { newValue := shr(168, value) }
            function extract_from_storage_value_offset_21t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_168_unsigned(slot_value))
            }
            function read_from_storage_split_offset_21_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_21t_bool(sload(slot))
            }
            function shift_right_160_unsigned(value) -> newValue
            { newValue := shr(160, value) }
            function cleanup_from_storage_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_20t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_160_unsigned(slot_value))
            }
            function read_from_storage_split_offset_20_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_20t_uint8(sload(slot))
            }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_contract$_Initializable_$3528_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is alrea")
                mstore(add(memPtr, 32), "dy initialized")
            }
            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function shift_left_160(value) -> newValue
            { newValue := shl(160, value) }
            function update_byte_slice_1_shift_20(value, toInsert) -> result
            {
                let mask := 0xff0000000000000000000000000000000000000000
                toInsert := shift_left_160(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint8_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }
            function prepare_store_t_uint8(value) -> ret
            { ret := value }
            function update_storage_value_offset_20t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_20(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_168(value) -> newValue
            { newValue := shl(168, value) }
            function update_byte_slice_1_shift_21(value, toInsert) -> result
            {
                let mask := 0xff000000000000000000000000000000000000000000
                toInsert := shift_left_168(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_bool_to_t_bool(value) -> converted
            {
                converted := cleanup_t_bool(value)
            }
            function prepare_store_t_bool(value) -> ret
            { ret := value }
            function update_storage_value_offset_21t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_21(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }
            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            /// @ast-id 3448 @src 1:3078:3584  "modifier initializer() {..."
            function modifier_initializer_46()
            {
                /// @src 1:3134:3147  "_initializing"
                let _9 := read_from_storage_split_offset_21_t_bool(0x00)
                let expr_3397 := _9
                /// @src 1:3133:3147  "!_initializing"
                let expr_3398 := cleanup_t_bool(iszero(expr_3397))
                /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_3396 := expr_3398
                /// @src 1:3179:3193  "isTopLevelCall"
                let _10 := var_isTopLevelCall_3396
                let expr_3401 := _10
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                let expr_3405 := expr_3401
                if expr_3405
                {
                    /// @src 1:3197:3209  "_initialized"
                    let _11 := read_from_storage_split_offset_20_t_uint8(0x00)
                    let expr_3402 := _11
                    /// @src 1:3212:3213  "1"
                    let expr_3403 := 0x01
                    /// @src 1:3197:3213  "_initialized < 1"
                    let expr_3404 := lt(cleanup_t_uint8(expr_3402), convert_t_rational_1_by_1_to_t_uint8(expr_3403))
                    /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                    expr_3405 := expr_3404
                }
                /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
                let expr_3406 := expr_3405
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3420 := expr_3406
                if iszero(expr_3420)
                {
                    /// @src 1:3220:3238  "AddressUpgradeable"
                    let expr_3407_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                    /// @src 1:3258:3262  "this"
                    let expr_3411_address := address()
                    /// @src 1:3250:3263  "address(this)"
                    let expr_3412 := convert_t_contract$_Initializable_$3528_to_t_address(expr_3411_address)
                    /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                    let expr_3413 := fun_isContract_5691(expr_3412)
                    /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                    let expr_3414 := cleanup_t_bool(iszero(expr_3413))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    let expr_3418 := expr_3414
                    if expr_3418
                    {
                        /// @src 1:3268:3280  "_initialized"
                        let _12 := read_from_storage_split_offset_20_t_uint8(0x00)
                        let expr_3415 := _12
                        /// @src 1:3284:3285  "1"
                        let expr_3416 := 0x01
                        /// @src 1:3268:3285  "_initialized == 1"
                        let expr_3417 := eq(cleanup_t_uint8(expr_3415), convert_t_rational_1_by_1_to_t_uint8(expr_3416))
                        /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                        expr_3418 := expr_3417
                    }
                    /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    let expr_3419 := expr_3418
                    /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    expr_3420 := expr_3419
                }
                /// @src 1:3157:3358  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3420)
                /// @src 1:3383:3384  "1"
                let expr_3425 := 0x01
                /// @src 1:3368:3384  "_initialized = 1"
                let _13 := convert_t_rational_1_by_1_to_t_uint8(expr_3425)
                update_storage_value_offset_20t_uint8_to_t_uint8(0x00, _13)
                let expr_3426 := _13
                /// @src 1:3398:3412  "isTopLevelCall"
                let _14 := var_isTopLevelCall_3396
                let expr_3428 := _14
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                if expr_3428
                {
                    /// @src 1:3444:3448  "true"
                    let expr_3430 := 0x01
                    /// @src 1:3428:3448  "_initializing = true"
                    update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3430)
                    let expr_3431 := expr_3430
                }
                /// @src 1:3468:3469  "_"
                fun_initialize_52_inner()
                /// @src 1:3483:3497  "isTopLevelCall"
                let _15 := var_isTopLevelCall_3396
                let expr_3436 := _15
                /// @src 1:3479:3578  "if (isTopLevelCall) {..."
                if expr_3436
                {
                    /// @src 1:3529:3534  "false"
                    let expr_3438 := 0x00
                    /// @src 1:3513:3534  "_initializing = false"
                    update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3438)
                    let expr_3439 := expr_3438
                    /// @src 1:3565:3566  "1"
                    let expr_3442 := 0x01
                    /// @src 1:3553:3567  "Initialized(1)"
                    let _16 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _17 := allocate_unbounded()
                        let _18 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_17, expr_3442)
                        log1(_17, sub(_18, _17), _16)
                    }
                }
            }
            /// @src 10:1172:1259  "function initialize() public initializer {..."
            function fun_initialize_52_inner()
            {
                fun___CrossDomainMessenger_init_1390()
            }
            /// @ast-id 52
            function fun_initialize_52()
            { modifier_initializer_46() }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function convert_t_contract$_CrossDomainMessenger_$1417_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function cleanup_t_bytes4(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)
            }
            function shift_left_224(value) -> newValue
            { newValue := shl(224, value) }
            function convert_t_uint32_to_t_bytes4(value) -> converted
            {
                converted := cleanup_t_bytes4(shift_left_224(cleanup_t_uint32(value)))
            }
            function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint32(value))
            }
            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_calldata_to_memory(src, dst, length)
            {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end
            {
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_calldata_to_memory(start, pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_calldata_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4, value5, value6) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                abi_encode_t_uint32_to_t_uint32_fromStack(value4, add(headStart, 128))
                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value5, value6, tail)
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function convert_t_uint32_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
            }
            function abi_encode_t_uint32_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, convert_t_uint32_to_t_uint256(value))
            }
            function abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256_t_uint32__to_t_address_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                mstore(add(headStart, 32), sub(tail, headStart))
                tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value1, value2, tail)
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 64))
                abi_encode_t_uint32_to_t_uint256_fromStack(value4, add(headStart, 96))
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function cleanup_from_storage_t_uint240(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_uint240(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint240(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint240(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint240(sload(slot))
            }
            function cleanup_t_uint240(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function increment_wrapping_t_uint240(value) -> ret
            {
                ret := cleanup_t_uint240(add(value, 1))
            }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_30_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint240_to_t_uint240(value) -> converted
            {
                converted := cleanup_t_uint240(identity(cleanup_t_uint240(value)))
            }
            function prepare_store_t_uint240(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint240_to_t_uint240(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint240_to_t_uint240(value_0)
                sstore(slot, update_byte_slice_30_shift_0(sload(slot), prepare_store_t_uint240(convertedValue_0)))
            }
            /// @ast-id 1099 @src 28:9268:10348  "function sendMessage(..."
            function fun_sendMessage_1099(var__target_1045, var__message_1047_offset, var__message_1047_length, var__minGasLimit_1049)
            {
                /// @src 28:9784:9799  "OTHER_MESSENGER"
                let _19 := loadimmutable("980")
                let expr_1053 := _19
                /// @src 28:9821:9829  "_message"
                let _20_offset := var__message_1047_offset
                let _20_length := var__message_1047_length
                let expr_1055_offset := _20_offset
                let expr_1055_length := _20_length
                /// @src 28:9831:9843  "_minGasLimit"
                let _21 := var__minGasLimit_1049
                let expr_1056 := _21
                /// @src 28:9813:9844  "baseGas(_message, _minGasLimit)"
                let expr_1057 := fun_baseGas_1378(expr_1055_offset, expr_1055_length, expr_1056)
                /// @src 28:9858:9867  "msg.value"
                let expr_1059 := callvalue()
                /// @src 28:9921:9925  "this"
                let expr_1062_address := address()
                /// @src 28:9921:9938  "this.relayMessage"
                let expr_1063_address := convert_t_contract$_CrossDomainMessenger_$1417_to_t_address(expr_1062_address)
                let expr_1063_functionSelector := 0xd764ad0b
                /// @src 28:9921:9947  "this.relayMessage.selector"
                let expr_1064 := convert_t_uint32_to_t_bytes4(expr_1063_functionSelector)
                /// @src 28:9965:9979  "messageNonce()"
                let expr_1066 := fun_messageNonce_1342()
                /// @src 28:9997:10007  "msg.sender"
                let expr_1068 := caller()
                /// @src 28:10025:10032  "_target"
                let _22 := var__target_1045
                let expr_1069 := _22
                /// @src 28:10050:10059  "msg.value"
                let expr_1071 := callvalue()
                /// @src 28:10077:10089  "_minGasLimit"
                let _23 := var__minGasLimit_1049
                let expr_1072 := _23
                /// @src 28:10107:10115  "_message"
                let _24_offset := var__message_1047_offset
                let _24_length := var__message_1047_length
                let expr_1073_offset := _24_offset
                let expr_1073_length := _24_length
                /// @src 28:9881:10129  "abi.encodeWithSelector(..."
                let expr_1074_mpos := allocate_unbounded()
                let _25 := add(expr_1074_mpos, 0x20)
                mstore(_25, expr_1064)
                _25 := add(_25, 4)
                let _26 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_calldata_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_memory_ptr__fromStack(_25, expr_1066, expr_1068, expr_1069, expr_1071, expr_1072, expr_1073_offset, expr_1073_length)
                mstore(expr_1074_mpos, sub(_26, add(expr_1074_mpos, 0x20)))
                finalize_allocation(expr_1074_mpos, sub(_26, expr_1074_mpos))
                fun__sendMessage_78(expr_1053, expr_1057, expr_1059, expr_1074_mpos)
                /// @src 28:10167:10174  "_target"
                let _27 := var__target_1045
                let expr_1078 := _27
                /// @src 28:10176:10186  "msg.sender"
                let expr_1080 := caller()
                /// @src 28:10188:10196  "_message"
                let _28_offset := var__message_1047_offset
                let _28_length := var__message_1047_length
                let expr_1081_offset := _28_offset
                let expr_1081_length := _28_length
                /// @src 28:10198:10212  "messageNonce()"
                let expr_1083 := fun_messageNonce_1342()
                /// @src 28:10214:10226  "_minGasLimit"
                let _29 := var__minGasLimit_1049
                let expr_1084 := _29
                /// @src 28:10155:10227  "SentMessage(_target, msg.sender, _message, messageNonce(), _minGasLimit)"
                let _30 := 0xcb0f7ffd78f9aee47a248fae8db181db6eee833039123e026dcbff529522e52a
                let _31 := convert_t_address_to_t_address(expr_1078)
                {
                    let _32 := allocate_unbounded()
                    let _33 := abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256_t_uint32__to_t_address_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack(_32, expr_1080, expr_1081_offset, expr_1081_length, expr_1083, expr_1084)
                    log2(_32, sub(_33, _32), _30, _31)
                }
                /// @src 28:10264:10274  "msg.sender"
                let expr_1089 := caller()
                /// @src 28:10276:10285  "msg.value"
                let expr_1091 := callvalue()
                /// @src 28:10242:10286  "SentMessageExtension1(msg.sender, msg.value)"
                let _34 := 0x8ebb2ec2465bdb2a06a66fc37a0963af8a2a6a1479d81d56fdb8cbb98096d546
                let _35 := convert_t_address_to_t_address(expr_1089)
                {
                    let _36 := allocate_unbounded()
                    let _37 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_36, expr_1091)
                    log2(_36, sub(_37, _36), _34, _35)
                }
                /// @src 28:10321:10331  "++msgNonce"
                let _39 := read_from_storage_split_offset_0_t_uint240(0xcd)
                let _38 := increment_wrapping_t_uint240(_39)
                update_storage_value_offset_0t_uint240_to_t_uint240(0xcd, _38)
                let expr_1095 := _38
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function convert_t_contract$_OptimismPortal_$804_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
            { revert(0, 0) }
            function abi_decode_tuple__fromMemory(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4) -> tail
            {
                tail := add(headStart, 160)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint64_to_t_uint64_fromStack(value2, add(headStart, 64))
                abi_encode_t_bool_to_t_bool_fromStack(value3, add(headStart, 96))
                mstore(add(headStart, 128), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4, tail)
            }
            function revert_forward_1()
            {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }
            /// @ast-id 78 @src 10:1321:1563  "function _sendMessage(..."
            function fun__sendMessage_78(var__to_55, var__gasLimit_57, var__value_59, var__data_61_mpos)
            {
                /// @src 10:1476:1482  "PORTAL"
                let _40_address := loadimmutable("18")
                let expr_65_address := _40_address
                /// @src 10:1476:1501  "PORTAL.depositTransaction"
                let expr_67_address := convert_t_contract$_OptimismPortal_$804_to_t_address(expr_65_address)
                let expr_67_functionSelector := 0xe9e05c42
                /// @src 10:1510:1516  "_value"
                let _41 := var__value_59
                let expr_68 := _41
                /// @src 10:1476:1518  "PORTAL.depositTransaction{ value: _value }"
                let expr_69_address := expr_67_address
                let expr_69_functionSelector := expr_67_functionSelector
                let expr_69_value := expr_68
                /// @src 10:1519:1522  "_to"
                let _42 := var__to_55
                let expr_70 := _42
                /// @src 10:1524:1530  "_value"
                let _43 := var__value_59
                let expr_71 := _43
                /// @src 10:1532:1541  "_gasLimit"
                let _44 := var__gasLimit_57
                let expr_72 := _44
                /// @src 10:1543:1548  "false"
                let expr_73 := 0x00
                /// @src 10:1550:1555  "_data"
                let _45_mpos := var__data_61_mpos
                let expr_74_mpos := _45_mpos
                /// @src 10:1476:1556  "PORTAL.depositTransaction{ value: _value }(_to, _value, _gasLimit, false, _data)"
                if iszero(extcodesize(expr_69_address))
                {
                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
                }
                let _46 := allocate_unbounded()
                mstore(_46, shift_left_224(expr_69_functionSelector))
                let _47 := abi_encode_tuple_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__fromStack(add(_46, 4), expr_70, expr_71, expr_72, expr_73, expr_74_mpos)
                let _48 := call(gas(), expr_69_address, expr_69_value, _46, sub(_47, _46), _46, 0)
                if iszero(_48) { revert_forward_1() }
                if _48
                {
                    let _49 := 0
                    if gt(_49, returndatasize()) { _49 := returndatasize() }
                    finalize_allocation(_46, _49)
                    abi_decode_tuple__fromMemory(_46, add(_46, _49))
                }
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function cleanup_t_rational_2_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_2_by_1_to_t_uint16(value) -> converted
            {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_2_by_1(value)))
            }
            function store_literal_in_memory_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: only versi")
                mstore(add(memPtr, 32), "on 0 or 1 messages are supported")
                mstore(add(memPtr, 64), " at this time")
            }
            function abi_encode_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint16(value) -> converted
            {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_0_by_1(value)))
            }
            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()
            { revert(0, 0) }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function array_allocation_size_t_bytes_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array
            {
                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))
                mstore(array, length)
                let dst := add(array, 0x20)
                if gt(add(src, length), end)
                {
                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()
                }
                copy_calldata_to_memory(src, dst, length)
            }
            function convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(value, length) -> converted
            {
                converted := abi_decode_available_length_t_bytes_memory_ptr(value, length, calldatasize())
            }
            function extract_from_storage_value_offset_0t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bool(sload(slot))
            }
            function store_literal_in_memory_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: legacy wit")
                mstore(add(memPtr, 32), "hdrawal already relayed")
            }
            function abi_encode_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            function store_literal_in_memory_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: value must")
                mstore(add(memPtr, 32), " be zero unless message is from ")
                mstore(add(memPtr, 64), "a system address")
            }
            function abi_encode_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 80)
                store_literal_in_memory_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: message ca")
                mstore(add(memPtr, 32), "nnot be replayed")
            }
            function abi_encode_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 48)
                store_literal_in_memory_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function panic_error_0x01()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x01)
                revert(0, 0x24)
            }
            function assert_helper(condition)
            {
                if iszero(condition) { panic_error_0x01() }
            }
            function store_literal_in_memory_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: cannot sen")
                mstore(add(memPtr, 32), "d message to blocked system addr")
                mstore(add(memPtr, 64), "ess")
            }
            function abi_encode_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: message ha")
                mstore(add(memPtr, 32), "s already been relayed")
            }
            function abi_encode_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)
                store_literal_in_memory_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_add_t_uint64(x, y) -> sum
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function convert_t_uint64_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint64(value)))
            }
            function cleanup_from_storage_t_address(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_address(slot_value) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_address(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_address(sload(slot))
            }
            /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
            function constant_DEFAULT_L2_SENDER_2871() -> ret
            {
                /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
                let expr_2870 := 0xdead
                let _86 := expr_2870
                ret := _86
            }
            function update_byte_slice_1_shift_0(value, toInsert) -> result
            {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            function convert_t_rational_1_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_rational_1_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_1_by_1_to_t_uint160(value)
            }
            /// @src 18:974:1031  "address internal constant ESTIMATION_ADDRESS = address(1)"
            function constant_ESTIMATION_ADDRESS_2867() -> ret
            {
                /// @src 18:1029:1030  "1"
                let expr_2865 := 0x01
                /// @src 18:1021:1031  "address(1)"
                let expr_2866 := convert_t_rational_1_by_1_to_t_address(expr_2865)
                let _95 := expr_2866
                ret := _95
            }
            function store_literal_in_memory_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: failed to ")
                mstore(add(memPtr, 32), "relay message")
            }
            function abi_encode_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)
                store_literal_in_memory_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288_to_t_string_memory_ptr_fromStack(tail)
            }
            function update_byte_slice_20_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function prepare_store_t_address(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            /// @ast-id 1312 @src 28:11050:15900  "function relayMessage(..."
            // path3
            function fun_relayMessage_1312(var__nonce_1102, var__sender_1104, var__target_1106, var__value_1108, var__minGasLimit_1110, var__message_1112_offset, var__message_1112_length)
            {
                /// @src 28:11287:11295  "Encoding"
                let expr_1117_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 28:11317:11323  "_nonce"
                let _50 := var__nonce_1102
                let expr_1119 := _50
                /// @src 28:11287:11324  "Encoding.decodeVersionedNonce(_nonce)"
                let expr_1120_component_1, expr_1120_component_2 := fun_decodeVersionedNonce_3820(expr_1119)
                /// @src 28:11266:11324  "(, uint16 version) = Encoding.decodeVersionedNonce(_nonce)"
                let var_version_1116 := expr_1120_component_2
                /// @src 28:11355:11362  "version"
                let _51 := var_version_1116
                let expr_1123 := _51
                /// @src 28:11365:11366  "2"
                let expr_1124 := 0x02
                /// @src 28:11355:11366  "version < 2"
                let expr_1125 := lt(cleanup_t_uint16(expr_1123), convert_t_rational_2_by_1_to_t_uint16(expr_1124))
                // audit: OK to revert here
                /// @src 28:11334:11469  "require(..."
                require_helper_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(expr_1125)
                /// @src 28:11671:11678  "version"
                let _52 := var_version_1116
                let expr_1129 := _52
                /// @src 28:11682:11683  "0"
                let expr_1130 := 0x00
                /// @src 28:11671:11683  "version == 0"
                let expr_1131 := eq(cleanup_t_uint16(expr_1129), convert_t_rational_0_by_1_to_t_uint16(expr_1130))
                /// @src 28:11667:11960  "if (version == 0) {..."
                if expr_1131
                {
                    /// @src 28:11717:11724  "Hashing"
                    let expr_1134_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                    /// @src 28:11750:11757  "_target"
                    let _53 := var__target_1106
                    let expr_1136 := _53
                    /// @src 28:11759:11766  "_sender"
                    let _54 := var__sender_1104
                    let expr_1137 := _54
                    /// @src 28:11768:11776  "_message"
                    let _55_offset := var__message_1112_offset
                    let _55_length := var__message_1112_length
                    let expr_1138_offset := _55_offset
                    let expr_1138_length := _55_length
                    /// @src 28:11778:11784  "_nonce"
                    let _56 := var__nonce_1102
                    let expr_1139 := _56
                    /// @src 28:11717:11785  "Hashing.hashCrossDomainMessageV0(_target, _sender, _message, _nonce)"
                    let _57_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1138_offset, expr_1138_length)
                    let expr_1140 := fun_hashCrossDomainMessageV0_3039(expr_1136, expr_1137, _57_mpos, expr_1139)
                    /// @src 28:11699:11785  "bytes32 oldHash = Hashing.hashCrossDomainMessageV0(_target, _sender, _message, _nonce)"
                    let var_oldHash_1133 := expr_1140
                    /// @src 28:11824:11842  "successfulMessages"
                    let _58 := 0xcb
                    let expr_1143 := _58
                    /// @src 28:11843:11850  "oldHash"
                    let _59 := var_oldHash_1133
                    let expr_1144 := _59
                    /// @src 28:11824:11851  "successfulMessages[oldHash]"
                    let _60 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1143, expr_1144)
                    let _61 := read_from_storage_split_offset_0_t_bool(_60)
                    let expr_1145 := _61
                    /// @src 28:11855:11860  "false"
                    let expr_1146 := 0x00
                    /// @src 28:11824:11860  "successfulMessages[oldHash] == false"
                    let expr_1147 := eq(cleanup_t_bool(expr_1145), cleanup_t_bool(expr_1146))
                    /// @src 28:11799:11949  "require(..."
                    require_helper_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(expr_1147)
                }
                /// @src 28:12154:12161  "Hashing"
                let expr_1155_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 28:12200:12206  "_nonce"
                let _62 := var__nonce_1102
                let expr_1157 := _62
                /// @src 28:12220:12227  "_sender"
                let _63 := var__sender_1104
                let expr_1158 := _63
                /// @src 28:12241:12248  "_target"
                let _64 := var__target_1106
                let expr_1159 := _64
                /// @src 28:12262:12268  "_value"
                let _65 := var__value_1108
                let expr_1160 := _65
                /// @src 28:12282:12294  "_minGasLimit"
                let _66 := var__minGasLimit_1110
                let expr_1161 := _66
                /// @src 28:12308:12316  "_message"
                let _67_offset := var__message_1112_offset
                let _67_length := var__message_1112_length
                let expr_1162_offset := _67_offset
                let expr_1162_length := _67_length
                /// @src 28:12154:12326  "Hashing.hashCrossDomainMessageV1(..."
                let _68_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1162_offset, expr_1162_length)
                let expr_1163 := fun_hashCrossDomainMessageV1_3070(expr_1157, expr_1158, expr_1159, expr_1160, expr_1161, _68_mpos)
                /// @src 28:12130:12326  "bytes32 versionedHash = Hashing.hashCrossDomainMessageV1(..."
                let var_versionedHash_1154 := expr_1163
                /// @src 28:12341:12360  "_isOtherMessenger()"
                let expr_1166 := fun__isOtherMessenger_100()
                /// @src 28:12337:12935  "if (_isOtherMessenger()) {..."
                switch expr_1166
                case 0 {
                    /// @src 28:12645:12654  "msg.value"
                    let expr_1184 := callvalue()
                    /// @src 28:12658:12659  "0"
                    let expr_1185 := 0x00
                    /// @src 28:12645:12659  "msg.value == 0"
                    let expr_1186 := eq(cleanup_t_uint256(expr_1184), convert_t_rational_0_by_1_to_t_uint256(expr_1185))
                    /// @src 28:12620:12773  "require(..."
                    require_helper_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(expr_1186)
                    /// @src 28:12813:12827  "failedMessages"
                    let _69 := 0xce
                    let expr_1191 := _69
                    /// @src 28:12828:12841  "versionedHash"
                    let _70 := var_versionedHash_1154
                    let expr_1192 := _70
                    /// @src 28:12813:12842  "failedMessages[versionedHash]"
                    let _71 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1191, expr_1192)
                    let _72 := read_from_storage_split_offset_0_t_bool(_71)
                    let expr_1193 := _72
                    /// @src 28:12788:12924  "require(..."
                    require_helper_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(expr_1193)
                }
                default /// @src 28:12337:12935  "if (_isOtherMessenger()) {..."
                {
                    /// @src 28:12517:12526  "msg.value"
                    let expr_1169 := callvalue()
                    /// @src 28:12530:12536  "_value"
                    let _73 := var__value_1108
                    let expr_1170 := _73
                    /// @src 28:12517:12536  "msg.value == _value"
                    let expr_1171 := eq(cleanup_t_uint256(expr_1169), cleanup_t_uint256(expr_1170))
                    /// @src 28:12510:12537  "assert(msg.value == _value)"
                    assert_helper(expr_1171)
                    /// @src 28:12559:12573  "failedMessages"
                    let _74 := 0xce
                    let expr_1175 := _74
                    /// @src 28:12574:12587  "versionedHash"
                    let _75 := var_versionedHash_1154
                    let expr_1176 := _75
                    /// @src 28:12559:12588  "failedMessages[versionedHash]"
                    let _76 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1175, expr_1176)
                    let _77 := read_from_storage_split_offset_0_t_bool(_76)
                    let expr_1177 := _77
                    /// @src 28:12558:12588  "!failedMessages[versionedHash]"
                    let expr_1178 := cleanup_t_bool(iszero(expr_1177))
                    /// @src 28:12551:12589  "assert(!failedMessages[versionedHash])"
                    assert_helper(expr_1178)
                }
                /// @src 28:12982:12989  "_target"
                let _78 := var__target_1106
                let expr_1201 := _78
                /// @src 28:12966:12990  "_isUnsafeTarget(_target)"
                let expr_1202 := fun__isUnsafeTarget_124(expr_1201)
                /// @src 28:12994:12999  "false"
                let expr_1203 := 0x00
                /// @src 28:12966:12999  "_isUnsafeTarget(_target) == false"
                let expr_1204 := eq(cleanup_t_bool(expr_1202), cleanup_t_bool(expr_1203))
                /// @src 28:12945:13092  "require(..."
                require_helper_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(expr_1204)
                /// @src 28:13124:13142  "successfulMessages"
                let _79 := 0xcb
                let expr_1209 := _79
                /// @src 28:13143:13156  "versionedHash"
                let _80 := var_versionedHash_1154
                let expr_1210 := _80
                /// @src 28:13124:13157  "successfulMessages[versionedHash]"
                let _81 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1209, expr_1210)
                let _82 := read_from_storage_split_offset_0_t_bool(_81)
                let expr_1211 := _82
                /// @src 28:13161:13166  "false"
                let expr_1212 := 0x00
                /// @src 28:13124:13166  "successfulMessages[versionedHash] == false"
                let expr_1213 := eq(cleanup_t_bool(expr_1211), cleanup_t_bool(expr_1212))
                /// @src 28:13103:13246  "require(..."
                require_helper_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(expr_1213)
                /// @src 28:13940:13948  "SafeCall"
                let expr_1217_address := linkersymbol("contracts/libraries/SafeCall.sol:SafeCall")
                /// @src 28:13959:13971  "_minGasLimit"
                let _83 := var__minGasLimit_1110
                let expr_1219 := _83
                /// @src 28:13973:13991  "RELAY_RESERVED_GAS"
                let expr_1220 := constant_RELAY_RESERVED_GAS_973()
                /// @src 28:13994:14016  "RELAY_GAS_CHECK_BUFFER"
                let expr_1221 := constant_RELAY_GAS_CHECK_BUFFER_977()
                /// @src 28:13973:14016  "RELAY_RESERVED_GAS + RELAY_GAS_CHECK_BUFFER"
                let expr_1222 := checked_add_t_uint64(expr_1220, expr_1221)
                /// @src 28:13940:14017  "SafeCall.hasMinGas(_minGasLimit, RELAY_RESERVED_GAS + RELAY_GAS_CHECK_BUFFER)"
                let _84 := convert_t_uint64_to_t_uint256(expr_1222)
                let expr_1223 := fun_hasMinGas_3164(expr_1219, _84)
                /// @src 28:13939:14017  "!SafeCall.hasMinGas(_minGasLimit, RELAY_RESERVED_GAS + RELAY_GAS_CHECK_BUFFER)"
                let expr_1224 := cleanup_t_bool(iszero(expr_1223))
                /// @src 28:13939:14080  "!SafeCall.hasMinGas(_minGasLimit, RELAY_RESERVED_GAS + RELAY_GAS_CHECK_BUFFER) ||..."
                let expr_1229 := expr_1224
                if iszero(expr_1229)
                {
                    /// @src 28:14033:14049  "xDomainMsgSender"
                    let _85 := read_from_storage_split_offset_0_t_address(0xcc)
                    let expr_1225 := _85
                    /// @src 28:14053:14062  "Constants"
                    let expr_1226_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 28:14053:14080  "Constants.DEFAULT_L2_SENDER"
                    let expr_1227 := constant_DEFAULT_L2_SENDER_2871()
                    /// @src 28:14033:14080  "xDomainMsgSender != Constants.DEFAULT_L2_SENDER"
                    let expr_1228 := iszero(eq(cleanup_t_address(expr_1225), cleanup_t_address(expr_1227)))
                    /// @src 28:13939:14080  "!SafeCall.hasMinGas(_minGasLimit, RELAY_RESERVED_GAS + RELAY_GAS_CHECK_BUFFER) ||..."
                    expr_1229 := expr_1228
                }
                /// @src 28:13922:14837  "if (..."
                if expr_1229
                {
                    /// @src 28:14137:14141  "true"
                    let expr_1233 := 0x01
                    /// @src 28:14105:14119  "failedMessages"
                    let _87 := 0xce
                    let expr_1230 := _87
                    /// @src 28:14120:14133  "versionedHash"
                    let _88 := var_versionedHash_1154
                    let expr_1231 := _88
                    /// @src 28:14105:14134  "failedMessages[versionedHash]"
                    let _89 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1230, expr_1231)
                    /// @src 28:14105:14141  "failedMessages[versionedHash] = true"
                    update_storage_value_offset_0t_bool_to_t_bool(_89, expr_1233)
                    let expr_1234 := expr_1233
                    /// @src 28:14181:14194  "versionedHash"
                    let _90 := var_versionedHash_1154
                    let expr_1237 := _90
                    /// @src 28:14160:14195  "FailedRelayedMessage(versionedHash)"
                    let _91 := 0x99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f
                    let _92 := convert_t_bytes32_to_t_bytes32(expr_1237)
                    {
                        let _93 := allocate_unbounded()
                        let _94 := abi_encode_tuple__to__fromStack(_93)
                        log2(_93, sub(_94, _93), _91, _92)
                    }
                    /// @src 28:14675:14684  "tx.origin"
                    let expr_1241 := origin()
                    /// @src 28:14688:14697  "Constants"
                    let expr_1242_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 28:14688:14716  "Constants.ESTIMATION_ADDRESS"
                    let expr_1243 := constant_ESTIMATION_ADDRESS_2867()
                    /// @src 28:14675:14716  "tx.origin == Constants.ESTIMATION_ADDRESS"
                    let expr_1244 := eq(cleanup_t_address(expr_1241), cleanup_t_address(expr_1243))
                    /// @src 28:14671:14806  "if (tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                    if expr_1244
                    {
                        /// @src 28:14736:14791  "revert(\"CrossDomainMessenger: failed to relay message\")"
                        {
                            let _96 := allocate_unbounded()
                            mstore(_96, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                            let _97 := abi_encode_tuple_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288__to_t_string_memory_ptr__fromStack(add(_96, 4))
                            revert(_96, sub(_97, _96))
                        }
                    }
                    /// @src 28:14820:14827  "return;"
                    leave
                }
                /// @src 28:14866:14873  "_sender"
                let _98 := var__sender_1104
                let expr_1255 := _98
                /// @src 28:14847:14873  "xDomainMsgSender = _sender"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1255)
                let expr_1256 := expr_1255
                /// @src 28:14898:14906  "SafeCall"
                let expr_1260_address := linkersymbol("contracts/libraries/SafeCall.sol:SafeCall")
                /// @src 28:14912:14919  "_target"
                let _99 := var__target_1106
                let expr_1262 := _99
                /// @src 28:14921:14930  "gasleft()"
                let expr_1264 := gas()
                /// @src 28:14933:14951  "RELAY_RESERVED_GAS"
                let expr_1265 := constant_RELAY_RESERVED_GAS_973()
                /// @src 28:14921:14951  "gasleft() - RELAY_RESERVED_GAS"
                let expr_1266 := checked_sub_t_uint256(expr_1264, convert_t_uint64_to_t_uint256(expr_1265))
                /// @src 28:14953:14959  "_value"
                let _100 := var__value_1108
                let expr_1267 := _100
                /// @src 28:14961:14969  "_message"
                let _101_offset := var__message_1112_offset
                let _101_length := var__message_1112_length
                let expr_1268_offset := _101_offset
                let expr_1268_length := _101_length
                /// @src 28:14898:14970  "SafeCall.call(_target, gasleft() - RELAY_RESERVED_GAS, _value, _message)"
                let _102_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1268_offset, expr_1268_length)
                let expr_1269 := fun_call_3147(expr_1262, expr_1266, expr_1267, _102_mpos)
                /// @src 28:14883:14970  "bool success = SafeCall.call(_target, gasleft() - RELAY_RESERVED_GAS, _value, _message)"
                let var_success_1259 := expr_1269
                /// @src 28:14999:15008  "Constants"
                let expr_1272_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:14999:15026  "Constants.DEFAULT_L2_SENDER"
                let expr_1273 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 28:14980:15026  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1273)
                let expr_1274 := expr_1273
                /// @src 28:15041:15048  "success"
                let _103 := var_success_1259
                let expr_1276 := _103
                /// @src 28:15037:15894  "if (success) {..."
                switch expr_1276
                case 0 {
                    /// @src 28:15215:15219  "true"
                    let expr_1291 := 0x01
                    /// @src 28:15183:15197  "failedMessages"
                    let _104 := 0xce
                    let expr_1288 := _104
                    /// @src 28:15198:15211  "versionedHash"
                    let _105 := var_versionedHash_1154
                    let expr_1289 := _105
                    /// @src 28:15183:15212  "failedMessages[versionedHash]"
                    let _106 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1288, expr_1289)
                    /// @src 28:15183:15219  "failedMessages[versionedHash] = true"
                    update_storage_value_offset_0t_bool_to_t_bool(_106, expr_1291)
                    let expr_1292 := expr_1291
                    /// @src 28:15259:15272  "versionedHash"
                    let _107 := var_versionedHash_1154
                    let expr_1295 := _107
                    /// @src 28:15238:15273  "FailedRelayedMessage(versionedHash)"
                    let _108 := 0x99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f
                    let _109 := convert_t_bytes32_to_t_bytes32(expr_1295)
                    {
                        let _110 := allocate_unbounded()
                        let _111 := abi_encode_tuple__to__fromStack(_110)
                        log2(_110, sub(_111, _110), _108, _109)
                    }
                    /// @src 28:15753:15762  "tx.origin"
                    let expr_1299 := origin()
                    /// @src 28:15766:15775  "Constants"
                    let expr_1300_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 28:15766:15794  "Constants.ESTIMATION_ADDRESS"
                    let expr_1301 := constant_ESTIMATION_ADDRESS_2867()
                    /// @src 28:15753:15794  "tx.origin == Constants.ESTIMATION_ADDRESS"
                    let expr_1302 := eq(cleanup_t_address(expr_1299), cleanup_t_address(expr_1301))
                    /// @src 28:15749:15884  "if (tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                    if expr_1302
                    {
                        /// @src 28:15814:15869  "revert(\"CrossDomainMessenger: failed to relay message\")"
                        {
                            let _112 := allocate_unbounded()
                            mstore(_112, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                            let _113 := abi_encode_tuple_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288__to_t_string_memory_ptr__fromStack(add(_112, 4))
                            revert(_112, sub(_113, _112))
                        }
                    }
                }
                default /// @src 28:15037:15894  "if (success) {..."
                {
                    /// @src 28:15100:15104  "true"
                    let expr_1280 := 0x01
                    /// @src 28:15064:15082  "successfulMessages"
                    let _114 := 0xcb
                    let expr_1277 := _114
                    /// @src 28:15083:15096  "versionedHash"
                    let _115 := var_versionedHash_1154
                    let expr_1278 := _115
                    /// @src 28:15064:15097  "successfulMessages[versionedHash]"
                    let _116 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1277, expr_1278)
                    /// @src 28:15064:15104  "successfulMessages[versionedHash] = true"
                    update_storage_value_offset_0t_bool_to_t_bool(_116, expr_1280)
                    let expr_1281 := expr_1280
                    /// @src 28:15138:15151  "versionedHash"
                    let _117 := var_versionedHash_1154
                    let expr_1284 := _117
                    /// @src 28:15123:15152  "RelayedMessage(versionedHash)"
                    let _118 := 0x4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c
                    let _119 := convert_t_bytes32_to_t_bytes32(expr_1284)
                    {
                        let _120 := allocate_unbounded()
                        let _121 := abi_encode_tuple__to__fromStack(_120)
                        log2(_120, sub(_121, _120), _118, _119)
                    }
                }
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            function abi_decode_t_address_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_address(value)
            }
            function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            /// @ast-id 100 @src 10:1625:1785  "function _isOtherMessenger() internal view override returns (bool) {..."
            function fun__isOtherMessenger_100() -> var__83
            {
                /// @src 10:1686:1690  "bool"
                let zero_t_bool_122 := zero_value_for_split_t_bool()
                var__83 := zero_t_bool_122
                /// @src 10:1709:1719  "msg.sender"
                let expr_86 := caller()
                /// @src 10:1731:1737  "PORTAL"
                let _123_address := loadimmutable("18")
                let expr_89_address := _123_address
                /// @src 10:1723:1738  "address(PORTAL)"
                let expr_90 := convert_t_contract$_OptimismPortal_$804_to_t_address(expr_89_address)
                /// @src 10:1709:1738  "msg.sender == address(PORTAL)"
                let expr_91 := eq(cleanup_t_address(expr_86), cleanup_t_address(expr_90))
                /// @src 10:1709:1778  "msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                let expr_97 := expr_91
                if expr_97
                {
                    /// @src 10:1742:1748  "PORTAL"
                    let _124_address := loadimmutable("18")
                    let expr_92_address := _124_address
                    /// @src 10:1742:1757  "PORTAL.l2Sender"
                    let expr_93_address := convert_t_contract$_OptimismPortal_$804_to_t_address(expr_92_address)
                    let expr_93_functionSelector := 0x9bf62d82
                    /// @src 10:1742:1759  "PORTAL.l2Sender()"
                    let _125 := allocate_unbounded()
                    mstore(_125, shift_left_224(expr_93_functionSelector))
                    let _126 := abi_encode_tuple__to__fromStack(add(_125, 4))
                    let _127 := staticcall(gas(), expr_93_address, _125, sub(_126, _125), _125, 32)
                    if iszero(_127) { revert_forward_1() }
                    let expr_94
                    if _127
                    {
                        let _128 := 32
                        if gt(_128, returndatasize()) { _128 := returndatasize() }
                        finalize_allocation(_125, _128)
                        expr_94 := abi_decode_tuple_t_address_fromMemory(_125, add(_125, _128))
                    }
                    /// @src 10:1763:1778  "OTHER_MESSENGER"
                    let _129 := loadimmutable("980")
                    let expr_95 := _129
                    /// @src 10:1742:1778  "PORTAL.l2Sender() == OTHER_MESSENGER"
                    let expr_96 := eq(cleanup_t_address(expr_94), cleanup_t_address(expr_95))
                    /// @src 10:1709:1778  "msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                    expr_97 := expr_96
                }
                /// @src 10:1702:1778  "return msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                var__83 := expr_97
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function convert_t_contract$_L1CrossDomainMessenger_$125_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            /// @ast-id 124 @src 10:1847:2005  "function _isUnsafeTarget(address _target) internal view override returns (bool) {..."
            function fun__isUnsafeTarget_124(var__target_103) -> var__107
            {
                /// @src 10:1921:1925  "bool"
                let zero_t_bool_130 := zero_value_for_split_t_bool()
                var__107 := zero_t_bool_130
                /// @src 10:1944:1951  "_target"
                let _131 := var__target_103
                let expr_109 := _131
                /// @src 10:1963:1967  "this"
                let expr_112_address := address()
                /// @src 10:1955:1968  "address(this)"
                let expr_113 := convert_t_contract$_L1CrossDomainMessenger_$125_to_t_address(expr_112_address)
                /// @src 10:1944:1968  "_target == address(this)"
                let expr_114 := eq(cleanup_t_address(expr_109), cleanup_t_address(expr_113))
                /// @src 10:1944:1998  "_target == address(this) || _target == address(PORTAL)"
                let expr_121 := expr_114
                if iszero(expr_121)
                {
                    /// @src 10:1972:1979  "_target"
                    let _132 := var__target_103
                    let expr_115 := _132
                    /// @src 10:1991:1997  "PORTAL"
                    let _133_address := loadimmutable("18")
                    let expr_118_address := _133_address
                    /// @src 10:1983:1998  "address(PORTAL)"
                    let expr_119 := convert_t_contract$_OptimismPortal_$804_to_t_address(expr_118_address)
                    /// @src 10:1972:1998  "_target == address(PORTAL)"
                    let expr_120 := eq(cleanup_t_address(expr_115), cleanup_t_address(expr_119))
                    /// @src 10:1944:1998  "_target == address(this) || _target == address(PORTAL)"
                    expr_121 := expr_120
                }
                /// @src 10:1937:1998  "return _target == address(this) || _target == address(PORTAL)"
                var__107 := expr_121
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_address() -> ret
            { ret := 0 }
            function store_literal_in_memory_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(memPtr)
            {
                mstore(add(memPtr, 0), "CrossDomainMessenger: xDomainMes")
                mstore(add(memPtr, 32), "sageSender is not set")
            }
            function abi_encode_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 1329 @src 28:16306:16568  "function xDomainMessageSender() external view returns (address) {..."
            function fun_xDomainMessageSender_1329() -> var__1316
            {
                /// @src 28:16361:16368  "address"
                let zero_t_address_134 := zero_value_for_split_t_address()
                var__1316 := zero_t_address_134
                /// @src 28:16401:16417  "xDomainMsgSender"
                let _135 := read_from_storage_split_offset_0_t_address(0xcc)
                let expr_1319 := _135
                /// @src 28:16421:16430  "Constants"
                let expr_1320_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:16421:16448  "Constants.DEFAULT_L2_SENDER"
                let expr_1321 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 28:16401:16448  "xDomainMsgSender != Constants.DEFAULT_L2_SENDER"
                let expr_1322 := iszero(eq(cleanup_t_address(expr_1319), cleanup_t_address(expr_1321)))
                /// @src 28:16380:16527  "require(..."
                require_helper_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(expr_1322)
                /// @src 28:16545:16561  "xDomainMsgSender"
                let _136 := read_from_storage_split_offset_0_t_address(0xcc)
                let expr_1326 := _136
                /// @src 28:16538:16561  "return xDomainMsgSender"
                var__1316 := expr_1326
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            /// @ast-id 1342 @src 28:16908:17042  "function messageNonce() public view returns (uint256) {..."
            function fun_messageNonce_1342() -> var__1333
            {
                /// @src 28:16953:16960  "uint256"
                let zero_t_uint256_137 := zero_value_for_split_t_uint256()
                var__1333 := zero_t_uint256_137
                /// @src 28:16979:16987  "Encoding"
                let expr_1335_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 28:17009:17017  "msgNonce"
                let _138 := read_from_storage_split_offset_0_t_uint240(0xcd)
                let expr_1337 := _138
                /// @src 28:17019:17034  "MESSAGE_VERSION"
                let expr_1338 := constant_MESSAGE_VERSION_949()
                /// @src 28:16979:17035  "Encoding.encodeVersionedNonce(msgNonce, MESSAGE_VERSION)"
                let expr_1339 := fun_encodeVersionedNonce_3798(expr_1337, expr_1338)
                /// @src 28:16972:17035  "return Encoding.encodeVersionedNonce(msgNonce, MESSAGE_VERSION)"
                var__1333 := expr_1339
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_uint64() -> ret
            { ret := 0 }
            function array_length_t_bytes_calldata_ptr(value, len) -> length
            { length := len }
            function convert_t_uint256_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
            }
            function checked_mul_t_uint64(x, y) -> product
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function convert_t_uint32_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_uint64(x, y) -> r
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            /// @ast-id 1378 @src 28:17678:18648  "function baseGas(bytes calldata _message, uint32 _minGasLimit) public pure returns (uint64) {..."
            function fun_baseGas_1378(var__message_1345_offset, var__message_1345_length, var__minGasLimit_1347) -> var__1350
            {
                /// @src 28:17762:17768  "uint64"
                let zero_t_uint64_139 := zero_value_for_split_t_uint64()
                var__1350 := zero_t_uint64_139
                /// @src 28:17832:17855  "RELAY_CONSTANT_OVERHEAD"
                let expr_1352 := constant_RELAY_CONSTANT_OVERHEAD_953()
                /// @src 28:17911:17919  "_message"
                let _140_offset := var__message_1345_offset
                let _140_length := var__message_1345_length
                let expr_1355_offset := _140_offset
                let expr_1355_length := _140_length
                /// @src 28:17911:17926  "_message.length"
                let expr_1356 := array_length_t_bytes_calldata_ptr(expr_1355_offset, expr_1355_length)
                /// @src 28:17904:17927  "uint64(_message.length)"
                let expr_1357 := convert_t_uint256_to_t_uint64(expr_1356)
                /// @src 28:17930:17955  "MIN_GAS_CALLDATA_OVERHEAD"
                let expr_1358 := constant_MIN_GAS_CALLDATA_OVERHEAD_965()
                /// @src 28:17904:17955  "uint64(_message.length) * MIN_GAS_CALLDATA_OVERHEAD"
                let expr_1359 := checked_mul_t_uint64(expr_1357, expr_1358)
                /// @src 28:17903:17956  "(uint64(_message.length) * MIN_GAS_CALLDATA_OVERHEAD)"
                let expr_1360 := expr_1359
                /// @src 28:17832:17956  "RELAY_CONSTANT_OVERHEAD +..."
                let expr_1361 := checked_add_t_uint64(expr_1352, expr_1360)
                /// @src 28:18015:18027  "_minGasLimit"
                let _141 := var__minGasLimit_1347
                let expr_1362 := _141
                /// @src 28:18030:18064  "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
                let expr_1363 := constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_957()
                /// @src 28:18015:18064  "_minGasLimit * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
                let expr_1364 := checked_mul_t_uint64(convert_t_uint32_to_t_uint64(expr_1362), expr_1363)
                /// @src 28:18014:18065  "(_minGasLimit * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR)"
                let expr_1365 := expr_1364
                /// @src 28:18084:18120  "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR"
                let expr_1366 := constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_961()
                /// @src 28:18014:18120  "(_minGasLimit * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1367 := checked_div_t_uint64(expr_1365, expr_1366)
                /// @src 28:18013:18121  "((_minGasLimit * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1368 := expr_1367
                /// @src 28:17832:18121  "RELAY_CONSTANT_OVERHEAD +..."
                let expr_1369 := checked_add_t_uint64(expr_1361, expr_1368)
                /// @src 28:18269:18288  "RELAY_CALL_OVERHEAD"
                let expr_1370 := constant_RELAY_CALL_OVERHEAD_969()
                /// @src 28:17832:18288  "RELAY_CONSTANT_OVERHEAD +..."
                let expr_1371 := checked_add_t_uint64(expr_1369, expr_1370)
                /// @src 28:18457:18475  "RELAY_RESERVED_GAS"
                let expr_1372 := constant_RELAY_RESERVED_GAS_973()
                /// @src 28:17832:18475  "RELAY_CONSTANT_OVERHEAD +..."
                let expr_1373 := checked_add_t_uint64(expr_1371, expr_1372)
                /// @src 28:18619:18641  "RELAY_GAS_CHECK_BUFFER"
                let expr_1374 := constant_RELAY_GAS_CHECK_BUFFER_977()
                /// @src 28:17832:18641  "RELAY_CONSTANT_OVERHEAD +..."
                let expr_1375 := checked_add_t_uint64(expr_1373, expr_1374)
                /// @src 28:17780:18641  "return..."
                var__1350 := expr_1375
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is not i")
                mstore(add(memPtr, 32), "nitializing")
            }
            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_1382()
            {
                /// @src 1:4910:4923  "_initializing"
                let _142 := read_from_storage_split_offset_21_t_bool(0x00)
                let expr_3485 := _142
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
                /// @src 1:4981:4982  "_"
                fun___CrossDomainMessenger_init_1390_inner()
            }
            /// @src 28:18750:18878  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
            function fun___CrossDomainMessenger_init_1390_inner()
            {
                /// @src 28:18844:18853  "Constants"
                let expr_1385_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:18844:18871  "Constants.DEFAULT_L2_SENDER"
                let expr_1386 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 28:18825:18871  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1386)
                let expr_1387 := expr_1386
            }
            /// @ast-id 1390 @src 28:18750:18878  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
            function fun___CrossDomainMessenger_init_1390()
            {
                modifier_onlyInitializing_1382()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_string_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr)
            { mstore(add(memPtr, 0), ".") }
            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }
            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2) -> end
            {
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2, pos)
                end := pos
            }
            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1482 @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1482() -> var__1458_mpos
            {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_143_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1458_mpos := zero_t_string_memory_ptr_143_mpos
                /// @src 29:1203:1210  "Strings"
                let expr_1464_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _144 := loadimmutable("1425")
                let expr_1466 := _144
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1467_mpos := fun_toString_3909(expr_1466)
                /// @src 29:1281:1288  "Strings"
                let expr_1469_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _145 := loadimmutable("1428")
                let expr_1471 := _145
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1472_mpos := fun_toString_3909(expr_1471)
                /// @src 29:1359:1366  "Strings"
                let expr_1474_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _146 := loadimmutable("1431")
                let expr_1476 := _146
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1477_mpos := fun_toString_3909(expr_1476)
                /// @src 29:1165:1408  "abi.encodePacked(..."
                let expr_1478_mpos := allocate_unbounded()
                let _147 := add(expr_1478_mpos, 0x20)
                let _148 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_147, expr_1467_mpos, expr_1472_mpos, expr_1477_mpos)
                mstore(expr_1478_mpos, sub(_148, add(expr_1478_mpos, 0x20)))
                finalize_allocation(expr_1478_mpos, sub(_148, expr_1478_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1479_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1478_mpos)
                /// @src 29:1122:1422  "return..."
                var__1458_mpos := expr_1479_mpos
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_bytes32() -> ret
            { ret := 0 }
            function array_dataslot_t_bytes_memory_ptr(ptr) -> data
            {
                data := ptr
                data := add(ptr, 0x20)
            }
            /// @ast-id 3039 @src 20:3204:3481  "function hashCrossDomainMessageV0(..."
            function fun_hashCrossDomainMessageV0_3039(var__target_3017, var__sender_3019, var__data_3021_mpos, var__nonce_3023) -> var__3026
            {
                /// @src 20:3369:3376  "bytes32"
                let zero_t_bytes32_149 := zero_value_for_split_t_bytes32()
                var__3026 := zero_t_bytes32_149
                /// @src 20:3405:3413  "Encoding"
                let expr_3029_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 20:3441:3448  "_target"
                let _150 := var__target_3017
                let expr_3031 := _150
                /// @src 20:3450:3457  "_sender"
                let _151 := var__sender_3019
                let expr_3032 := _151
                /// @src 20:3459:3464  "_data"
                let _152_mpos := var__data_3021_mpos
                let expr_3033_mpos := _152_mpos
                /// @src 20:3466:3472  "_nonce"
                let _153 := var__nonce_3023
                let expr_3034 := _153
                /// @src 20:3405:3473  "Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce)"
                let expr_3035_mpos := fun_encodeCrossDomainMessageV0_3751(expr_3031, expr_3032, expr_3033_mpos, expr_3034)
                /// @src 20:3395:3474  "keccak256(Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce))"
                let expr_3036 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3035_mpos), array_length_t_bytes_memory_ptr(expr_3035_mpos))
                /// @src 20:3388:3474  "return keccak256(Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce))"
                var__3026 := expr_3036
                leave
            }
            /// @ast-id 3070 @src 20:3975:4502  "function hashCrossDomainMessageV1(..."
            function fun_hashCrossDomainMessageV1_3070(var__nonce_3042, var__sender_3044, var__target_3046, var__value_3048, var__gasLimit_3050, var__data_3052_mpos) -> var__3055
            {
                /// @src 20:4191:4198  "bytes32"
                let zero_t_bytes32_154 := zero_value_for_split_t_bytes32()
                var__3055 := zero_t_bytes32_154
                /// @src 20:4256:4264  "Encoding"
                let expr_3058_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 20:4313:4319  "_nonce"
                let _155 := var__nonce_3042
                let expr_3060 := _155
                /// @src 20:4341:4348  "_sender"
                let _156 := var__sender_3044
                let expr_3061 := _156
                /// @src 20:4370:4377  "_target"
                let _157 := var__target_3046
                let expr_3062 := _157
                /// @src 20:4399:4405  "_value"
                let _158 := var__value_3048
                let expr_3063 := _158
                /// @src 20:4427:4436  "_gasLimit"
                let _159 := var__gasLimit_3050
                let expr_3064 := _159
                /// @src 20:4458:4463  "_data"
                let _160_mpos := var__data_3052_mpos
                let expr_3065_mpos := _160_mpos
                /// @src 20:4256:4481  "Encoding.encodeCrossDomainMessageV1(..."
                let expr_3066_mpos := fun_encodeCrossDomainMessageV1_3781(expr_3060, expr_3061, expr_3062, expr_3063, expr_3064, expr_3065_mpos)
                /// @src 20:4229:4495  "keccak256(..."
                let expr_3067 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3066_mpos), array_length_t_bytes_memory_ptr(expr_3066_mpos))
                /// @src 20:4210:4495  "return..."
                var__3055 := expr_3067
                leave
            }
            /// @ast-id 3147 @src 22:452:978  "function call(..."
            function fun_call_3147(var__target_3129, var__gas_3131, var__value_3133, var__calldata_3135_mpos) -> var__3138
            {
                /// @src 22:593:597  "bool"
                let zero_t_bool_161 := zero_value_for_split_t_bool()
                var__3138 := zero_t_bool_161
                /// @src 22:609:622  "bool _success"
                let var__success_3141
                let zero_t_bool_162 := zero_value_for_split_t_bool()
                var__success_3141 := zero_t_bool_162
                /// @src 22:632:947  "assembly {..."
                {
                    var__success_3141 := call(var__gas_3131, var__target_3129, var__value_3133, add(var__calldata_3135_mpos, 32), mload(var__calldata_3135_mpos), 0, 0)
                }
                /// @src 22:963:971  "_success"
                let _163 := var__success_3141
                let expr_3144 := _163
                /// @src 22:956:971  "return _success"
                var__3138 := expr_3144
                leave
            }
            /// @ast-id 3164 @src 22:2848:3243  "function hasMinGas(uint256 _minGas, uint256 _reservedGas) internal view returns (bool) {..."
            function fun_hasMinGas_3164(var__minGas_3150, var__reservedGas_3152) -> var__3155
            {
                /// @src 22:2929:2933  "bool"
                let zero_t_bool_164 := zero_value_for_split_t_bool()
                var__3155 := zero_t_bool_164
                /// @src 22:2945:2960  "bool _hasMinGas"
                let var__hasMinGas_3158
                let zero_t_bool_165 := zero_value_for_split_t_bool()
                var__hasMinGas_3158 := zero_t_bool_165
                /// @src 22:2970:3210  "assembly {..."
                {
                    var__hasMinGas_3158 := iszero(lt(mul(gas(), 63), add(mul(var__minGas_3150, 64), mul(add(40000, var__reservedGas_3152), 63))))
                }
                /// @src 22:3226:3236  "_hasMinGas"
                let _166 := var__hasMinGas_3158
                let expr_3161 := _166
                /// @src 22:3219:3236  "return _hasMinGas"
                var__3155 := expr_3161
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_bytes_memory_ptr() -> ret
            { ret := 96 }
            function abi_encode_tuple_t_address_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_address_t_bytes_memory_ptr_t_uint256__fromStack(headStart, value0, value1, value2, value3) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                mstore(add(headStart, 64), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value2, tail)
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
            }
            /// @ast-id 3751 @src 19:3113:3527  "function encodeCrossDomainMessageV0(..."
            function fun_encodeCrossDomainMessageV0_3751(var__target_3730, var__sender_3732, var__data_3734_mpos, var__nonce_3736) -> var__3739_mpos
            {
                /// @src 19:3280:3292  "bytes memory"
                let zero_t_bytes_memory_ptr_167_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3739_mpos := zero_t_bytes_memory_ptr_167_mpos
                /// @src 19:3427:3434  "_target"
                let _168 := var__target_3730
                let expr_3744 := _168
                /// @src 19:3452:3459  "_sender"
                let _169 := var__sender_3732
                let expr_3745 := _169
                /// @src 19:3477:3482  "_data"
                let _170_mpos := var__data_3734_mpos
                let expr_3746_mpos := _170_mpos
                /// @src 19:3500:3506  "_nonce"
                let _171 := var__nonce_3736
                let expr_3747 := _171
                /// @src 19:3323:3520  "abi.encodeWithSignature(..."
                let expr_3748_mpos := allocate_unbounded()
                let _172 := add(expr_3748_mpos, 0x20)
                mstore(_172, 0xcbd4ece900000000000000000000000000000000000000000000000000000000)
                _172 := add(_172, 4)
                let _173 := abi_encode_tuple_t_address_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_address_t_bytes_memory_ptr_t_uint256__fromStack(_172, expr_3744, expr_3745, expr_3746_mpos, expr_3747)
                mstore(expr_3748_mpos, sub(_173, add(expr_3748_mpos, 0x20)))
                finalize_allocation(expr_3748_mpos, sub(_173, expr_3748_mpos))
                /// @src 19:3304:3520  "return..."
                var__3739_mpos := expr_3748_mpos
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4, value5) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                abi_encode_t_uint256_to_t_uint256_fromStack(value4, add(headStart, 128))
                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value5, tail)
            }
            /// @ast-id 3781 @src 19:4023:4555  "function encodeCrossDomainMessageV1(..."
            function fun_encodeCrossDomainMessageV1_3781(var__nonce_3754, var__sender_3756, var__target_3758, var__value_3760, var__gasLimit_3762, var__data_3764_mpos) -> var__3767_mpos
            {
                /// @src 19:4241:4253  "bytes memory"
                let zero_t_bytes_memory_ptr_174_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3767_mpos := zero_t_bytes_memory_ptr_174_mpos
                /// @src 19:4404:4410  "_nonce"
                let _175 := var__nonce_3754
                let expr_3772 := _175
                /// @src 19:4428:4435  "_sender"
                let _176 := var__sender_3756
                let expr_3773 := _176
                /// @src 19:4453:4460  "_target"
                let _177 := var__target_3758
                let expr_3774 := _177
                /// @src 19:4478:4484  "_value"
                let _178 := var__value_3760
                let expr_3775 := _178
                /// @src 19:4502:4511  "_gasLimit"
                let _179 := var__gasLimit_3762
                let expr_3776 := _179
                /// @src 19:4529:4534  "_data"
                let _180_mpos := var__data_3764_mpos
                let expr_3777_mpos := _180_mpos
                /// @src 19:4284:4548  "abi.encodeWithSignature(..."
                let expr_3778_mpos := allocate_unbounded()
                let _181 := add(expr_3778_mpos, 0x20)
                mstore(_181, 0xd764ad0b00000000000000000000000000000000000000000000000000000000)
                _181 := add(_181, 4)
                let _182 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(_181, expr_3772, expr_3773, expr_3774, expr_3775, expr_3776, expr_3777_mpos)
                mstore(expr_3778_mpos, sub(_182, add(expr_3778_mpos, 0x20)))
                finalize_allocation(expr_3778_mpos, sub(_182, expr_3778_mpos))
                /// @src 19:4265:4548  "return..."
                var__3767_mpos := expr_3778_mpos
                leave
            }
            /// @ast-id 3798 @src 19:4874:5102  "function encodeVersionedNonce(uint240 _nonce, uint16 _version) internal pure returns (uint256) {..."
            function fun_encodeVersionedNonce_3798(var__nonce_3784, var__version_3786) -> var__3789
            {
                /// @src 19:4960:4967  "uint256"
                let zero_t_uint256_183 := zero_value_for_split_t_uint256()
                var__3789 := zero_t_uint256_183
                /// @src 19:4979:4992  "uint256 nonce"
                let var_nonce_3792
                let zero_t_uint256_184 := zero_value_for_split_t_uint256()
                var_nonce_3792 := zero_t_uint256_184
                /// @src 19:5002:5074  "assembly {..."
                {
                    var_nonce_3792 := or(shl(240, var__version_3786), var__nonce_3784)
                }
                /// @src 19:5090:5095  "nonce"
                let _185 := var_nonce_3792
                let expr_3795 := _185
                /// @src 19:5083:5095  "return nonce"
                var__3789 := expr_3795
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function zero_value_for_split_t_uint240() -> ret
            { ret := 0 }
            function zero_value_for_split_t_uint16() -> ret
            { ret := 0 }
            /// @ast-id 3820 @src 19:5370:5713  "function decodeVersionedNonce(uint256 _nonce) internal pure returns (uint240, uint16) {..."
            function fun_decodeVersionedNonce_3820(var__nonce_3801) -> var__3804, var__3806
            {
                /// @src 19:5439:5446  "uint240"
                let zero_t_uint240_186 := zero_value_for_split_t_uint240()
                var__3804 := zero_t_uint240_186
                /// @src 19:5448:5454  "uint16"
                let zero_t_uint16_187 := zero_value_for_split_t_uint16()
                var__3806 := zero_t_uint16_187
                /// @src 19:5466:5479  "uint240 nonce"
                let var_nonce_3809
                let zero_t_uint240_188 := zero_value_for_split_t_uint240()
                var_nonce_3809 := zero_t_uint240_188
                /// @src 19:5489:5503  "uint16 version"
                let var_version_3812
                let zero_t_uint16_189 := zero_value_for_split_t_uint16()
                var_version_3812 := zero_t_uint16_189
                /// @src 19:5513:5674  "assembly {..."
                {
                    var_nonce_3809 := and(var__nonce_3801, 0x0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
                    var_version_3812 := shr(240, var__nonce_3801)
                }
                /// @src 19:5691:5696  "nonce"
                let _190 := var_nonce_3809
                let expr_3815 := _190
                /// @src 19:5690:5706  "(nonce, version)"
                let expr_3817_component_1 := expr_3815
                /// @src 19:5698:5705  "version"
                let _191 := var_version_3812
                let expr_3816 := _191
                /// @src 19:5690:5706  "(nonce, version)"
                let expr_3817_component_2 := expr_3816
                /// @src 19:5683:5706  "return (nonce, version)"
                var__3804 := expr_3817_component_1
                var__3806 := expr_3817_component_2
                leave
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr)
            { mstore(add(memPtr, 0), "0") }
            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }
            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function cleanup_t_rational_10_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes)
            {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }
            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function cleanup_t_rational_48_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function convert_t_uint256_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }
            function cleanup_t_bytes1(value) -> cleaned
            {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }
            function shift_left_248(value) -> newValue
            { newValue := shl(248, value) }
            function convert_t_uint8_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 1)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            /// @ast-id 3909 @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3909(var_value_3833) -> var__3836_mpos
            {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_192_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3836_mpos := zero_t_string_memory_ptr_192_mpos
                /// @src 6:665:670  "value"
                let _193 := var_value_3833
                let expr_3838 := _193
                /// @src 6:674:675  "0"
                let expr_3839 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3840 := eq(cleanup_t_uint256(expr_3838), convert_t_rational_0_by_1_to_t_uint256(expr_3839))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3840
                {
                    /// @src 6:691:701  "return \"0\""
                    var__3836_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                }
                /// @src 6:736:741  "value"
                let _194 := var_value_3833
                let expr_3847 := _194
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3846 := expr_3847
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3850
                let zero_t_uint256_195 := zero_value_for_split_t_uint256()
                var_digits_3850 := zero_t_uint256_195
                /// @src 6:775:850  "while (temp != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:782:786  "temp"
                    let _196 := var_temp_3846
                    let expr_3852 := _196
                    /// @src 6:790:791  "0"
                    let expr_3853 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3854 := iszero(eq(cleanup_t_uint256(expr_3852), convert_t_rational_0_by_1_to_t_uint256(expr_3853)))
                    if iszero(expr_3854) { break }
                    /// @src 6:807:815  "digits++"
                    let _198 := var_digits_3850
                    let _197 := increment_t_uint256(_198)
                    var_digits_3850 := _197
                    let expr_3856 := _198
                    /// @src 6:837:839  "10"
                    let expr_3859 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _199 := convert_t_rational_10_by_1_to_t_uint256(expr_3859)
                    let _200 := var_temp_3846
                    let expr_3860 := checked_div_t_uint256(_200, _199)
                    var_temp_3846 := expr_3860
                }
                /// @src 6:891:897  "digits"
                let _201 := var_digits_3850
                let expr_3868 := _201
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3869_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3868)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3865_mpos := expr_3869_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:915:920  "value"
                    let _202 := var_value_3833
                    let expr_3871 := _202
                    /// @src 6:924:925  "0"
                    let expr_3872 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3873 := iszero(eq(cleanup_t_uint256(expr_3871), convert_t_rational_0_by_1_to_t_uint256(expr_3872)))
                    if iszero(expr_3873) { break }
                    /// @src 6:951:952  "1"
                    let expr_3875 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _203 := convert_t_rational_1_by_1_to_t_uint256(expr_3875)
                    let _204 := var_digits_3850
                    let expr_3876 := checked_sub_t_uint256(_204, _203)
                    var_digits_3850 := expr_3876
                    /// @src 6:996:998  "48"
                    let expr_3885 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _205 := var_value_3833
                    let expr_3888 := _205
                    /// @src 6:1017:1019  "10"
                    let expr_3889 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3890 := mod_t_uint256(expr_3888, convert_t_rational_10_by_1_to_t_uint256(expr_3889))
                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3891 := expr_3890
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3892 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3885), expr_3891)
                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3893 := convert_t_uint256_to_t_uint8(expr_3892)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3894 := convert_t_uint8_to_t_bytes1(expr_3893)
                    /// @src 6:966:972  "buffer"
                    let _206_mpos := var_buffer_3865_mpos
                    let expr_3878_mpos := _206_mpos
                    /// @src 6:973:979  "digits"
                    let _207 := var_digits_3850
                    let expr_3879 := _207
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _208 := expr_3894
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3878_mpos, expr_3879), byte(0, _208))
                    let expr_3895 := expr_3894
                    /// @src 6:1045:1047  "10"
                    let expr_3898 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _209 := convert_t_rational_10_by_1_to_t_uint256(expr_3898)
                    let _210 := var_value_3833
                    let expr_3899 := checked_div_t_uint256(_210, _209)
                    var_value_3833 := expr_3899
                }
                /// @src 6:1081:1087  "buffer"
                let _211_mpos := var_buffer_3865_mpos
                let expr_3905_mpos := _211_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3906_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3905_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3836_mpos := expr_3906_mpos
                leave
            }
            /// @ast-id 5691 @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_5691(var_account_5679) -> var__5682
            {
                /// @src 2:1246:1250  "bool"
                let zero_t_bool_212 := zero_value_for_split_t_bool()
                var__5682 := zero_t_bool_212
                /// @src 2:1476:1483  "account"
                let _213 := var_account_5679
                let expr_5684 := _213
                /// @src 2:1476:1495  "account.code.length"
                let expr_5686 := extcodesize(expr_5684)
                /// @src 2:1498:1499  "0"
                let expr_5687 := 0x00
                /// @src 2:1476:1499  "account.code.length > 0"
                let expr_5688 := gt(cleanup_t_uint256(expr_5686), convert_t_rational_0_by_1_to_t_uint256(expr_5687))
                /// @src 2:1469:1499  "return account.code.length > 0"
                var__5682 := expr_5688
                leave
            }
        }
        data ".metadata" hex"a2646970667358221220069d011c1c6534b810c6b73cdf69f14a2be82973d03c2e3a8e0de0421a81496f64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 11:"contracts/L1/L2OutputOracle.sol", 29:"contracts/universal/Semver.sol"
object "L2OutputOracle_2095" {
    code {
        /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
        mstore(64, memoryguard(384))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_1754_object_L2OutputOracle_2095()
        constructor_L2OutputOracle_2095(_1, _2, _3, _4, _5, _6, _7)
        let _8 := allocate_unbounded()
        codecopy(_8, dataoffset("L2OutputOracle_2095_deployed"), datasize("L2OutputOracle_2095_deployed"))
        setimmutable(_8, "1425", mload(128))
        setimmutable(_8, "1428", mload(160))
        setimmutable(_8, "1431", mload(192))
        setimmutable(_8, "1650", mload(224))
        setimmutable(_8, "1653", mload(256))
        setimmutable(_8, "1656", mload(288))
        setimmutable(_8, "1659", mload(320))
        setimmutable(_8, "1662", mload(352))
        return(_8, datasize("L2OutputOracle_2095_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function validator_revert_t_uint256(value)
        {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint256_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function validator_revert_t_address(value)
        {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }
        function abi_decode_t_address_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_address(value)
        }
        function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
        {
            if slt(sub(dataEnd, headStart), 224)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 64
                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 96
                value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 128
                value4 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 160
                value5 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 192
                value6 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_1754_object_L2OutputOracle_2095() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6
        {
            let programSize := datasize("L2OutputOracle_2095")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        function cleanup_t_rational_1_by_1(value) -> cleaned
        { cleaned := value }
        function identity(value) -> ret
        { ret := value }
        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }
        function cleanup_t_rational_3_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_3_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
        }
        function cleanup_t_rational_0_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }
        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
        {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }
        function store_literal_in_memory_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(memPtr)
        {
            mstore(add(memPtr, 0), "L2OutputOracle: L2 block time mu")
            mstore(add(memPtr, 32), "st be greater than 0")
        }
        function abi_encode_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)
            store_literal_in_memory_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function store_literal_in_memory_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f(memPtr)
        {
            mstore(add(memPtr, 0), "L2OutputOracle: submission inter")
            mstore(add(memPtr, 32), "val must be greater than 0")
        }
        function abi_encode_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
            store_literal_in_memory_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @ast-id 1754 @src 11:3138:3932  "constructor(..."
        function constructor_L2OutputOracle_2095(var__submissionInterval_1694, var__l2BlockTime_1696, var__startingBlockNumber_1698, var__startingTimestamp_1700, var__proposer_1702, var__challenger_1704, var__finalizationPeriodSeconds_1706)
        {
            /// @src 11:3404:3405  "1"
            let expr_1709 := 0x01
            let _9 := convert_t_rational_1_by_1_to_t_uint256(expr_1709)
            /// @src 11:3407:3408  "3"
            let expr_1710 := 0x03
            let _10 := convert_t_rational_3_by_1_to_t_uint256(expr_1710)
            /// @src 11:3410:3411  "0"
            let expr_1711 := 0x00
            let _11 := convert_t_rational_0_by_1_to_t_uint256(expr_1711)
            /// @src 11:3138:3932  "constructor(..."
            constructor_Semver_1483(_9, _10, _11)
            /// @src 11:3431:3443  "_l2BlockTime"
            let _12 := var__l2BlockTime_1696
            let expr_1715 := _12
            /// @src 11:3446:3447  "0"
            let expr_1716 := 0x00
            /// @src 11:3431:3447  "_l2BlockTime > 0"
            let expr_1717 := gt(cleanup_t_uint256(expr_1715), convert_t_rational_0_by_1_to_t_uint256(expr_1716))
            /// @src 11:3423:3504  "require(_l2BlockTime > 0, \"L2OutputOracle: L2 block time must be greater than 0\")"
            require_helper_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(expr_1717)
            /// @src 11:3535:3554  "_submissionInterval"
            let _13 := var__submissionInterval_1694
            let expr_1722 := _13
            /// @src 11:3557:3558  "0"
            let expr_1723 := 0x00
            /// @src 11:3535:3558  "_submissionInterval > 0"
            let expr_1724 := gt(cleanup_t_uint256(expr_1722), convert_t_rational_0_by_1_to_t_uint256(expr_1723))
            /// @src 11:3514:3642  "require(..."
            require_helper_t_stringliteral_a22226fa4dda9c6c644d22b26affbedef5d3fc150a8b26008a6baa26d85d543f(expr_1724)
            /// @src 11:3675:3694  "_submissionInterval"
            let _14 := var__submissionInterval_1694
            let expr_1729 := _14
            /// @src 11:3653:3694  "SUBMISSION_INTERVAL = _submissionInterval"
            let _15 := expr_1729
            mstore(224, _15)
            let expr_1730 := expr_1729
            /// @src 11:3720:3732  "_l2BlockTime"
            let _16 := var__l2BlockTime_1696
            let expr_1733 := _16
            /// @src 11:3704:3732  "L2_BLOCK_TIME = _l2BlockTime"
            let _17 := expr_1733
            mstore(256, _17)
            let expr_1734 := expr_1733
            /// @src 11:3753:3762  "_proposer"
            let _18 := var__proposer_1702
            let expr_1737 := _18
            /// @src 11:3742:3762  "PROPOSER = _proposer"
            let _19 := expr_1737
            mstore(320, _19)
            let expr_1738 := expr_1737
            /// @src 11:3785:3796  "_challenger"
            let _20 := var__challenger_1704
            let expr_1741 := _20
            /// @src 11:3772:3796  "CHALLENGER = _challenger"
            let _21 := expr_1741
            mstore(288, _21)
            let expr_1742 := expr_1741
            /// @src 11:3836:3862  "_finalizationPeriodSeconds"
            let _22 := var__finalizationPeriodSeconds_1706
            let expr_1745 := _22
            /// @src 11:3806:3862  "FINALIZATION_PERIOD_SECONDS = _finalizationPeriodSeconds"
            let _23 := expr_1745
            mstore(352, _23)
            let expr_1746 := expr_1745
            /// @src 11:3884:3904  "_startingBlockNumber"
            let _24 := var__startingBlockNumber_1698
            let expr_1749 := _24
            /// @src 11:3906:3924  "_startingTimestamp"
            let _25 := var__startingTimestamp_1700
            let expr_1750 := _25
            fun_initialize_1781(expr_1749, expr_1750)
        }
        /// @ast-id 1454 @src 29:726:919  "constructor(..."
        function constructor_Semver_1483(var__major_1434, var__minor_1436, var__patch_1438)
        {
            constructor_Initializable_1634()
            /// @src 29:842:848  "_major"
            let _26 := var__major_1434
            let expr_1442 := _26
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _27 := expr_1442
            mstore(128, _27)
            let expr_1443 := expr_1442
            /// @src 29:874:880  "_minor"
            let _28 := var__minor_1436
            let expr_1446 := _28
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _29 := expr_1446
            mstore(160, _29)
            let expr_1447 := expr_1446
            /// @src 29:906:912  "_patch"
            let _30 := var__patch_1438
            let expr_1450 := _30
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _31 := expr_1450
            mstore(192, _31)
            let expr_1451 := expr_1450
        }
        /// @src 4:2372:5647  "abstract contract Initializable {..."
        function constructor_Initializable_1634()
        { }
        /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
        function shift_right_8_unsigned(value) -> newValue
        { newValue := shr(8, value) }
        function cleanup_from_storage_t_bool(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_1t_bool(slot_value) -> value
        {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }
        function read_from_storage_split_offset_1_t_bool(slot) -> value
        {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))
        }
        function cleanup_t_bool(value) -> cleaned
        {
            cleaned := iszero(iszero(value))
        }
        function shift_right_0_unsigned(value) -> newValue
        { newValue := shr(0, value) }
        function cleanup_from_storage_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_uint8(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))
        }
        function cleanup_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_Initializable_$1634_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is alrea")
            mstore(add(memPtr, 32), "dy initialized")
        }
        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_1_shift_0(value, toInsert) -> result
        {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint8_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }
        function prepare_store_t_uint8(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_8(value) -> newValue
        { newValue := shl(8, value) }
        function update_byte_slice_1_shift_1(value, toInsert) -> result
        {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_bool_to_t_bool(value) -> converted
        {
            converted := cleanup_t_bool(value)
        }
        function prepare_store_t_bool(value) -> ret
        { ret := value }
        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
        {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }
        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
        {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }
        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
        {
            tail := add(headStart, 32)
            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
        }
        /// @ast-id 1554 @src 4:3067:3562  "modifier initializer() {..."
        function modifier_initializer_1762(var__startingBlockNumber_1757, var__startingTimestamp_1759)
        {
            /// @src 4:3123:3136  "_initializing"
            let _32 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1503 := _32
            /// @src 4:3122:3136  "!_initializing"
            let expr_1504 := cleanup_t_bool(iszero(expr_1503))
            /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_1502 := expr_1504
            /// @src 4:3168:3182  "isTopLevelCall"
            let _33 := var_isTopLevelCall_1502
            let expr_1507 := _33
            /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
            let expr_1511 := expr_1507
            if expr_1511
            {
                /// @src 4:3186:3198  "_initialized"
                let _34 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_1508 := _34
                /// @src 4:3201:3202  "1"
                let expr_1509 := 0x01
                /// @src 4:3186:3202  "_initialized < 1"
                let expr_1510 := lt(cleanup_t_uint8(expr_1508), convert_t_rational_1_by_1_to_t_uint8(expr_1509))
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                expr_1511 := expr_1510
            }
            /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
            let expr_1512 := expr_1511
            /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
            let expr_1526 := expr_1512
            if iszero(expr_1526)
            {
                /// @src 4:3209:3216  "Address"
                let expr_1513_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                /// @src 4:3236:3240  "this"
                let expr_1517_address := address()
                /// @src 4:3228:3241  "address(this)"
                let expr_1518 := convert_t_contract$_Initializable_$1634_to_t_address(expr_1517_address)
                /// @src 4:3209:3242  "Address.isContract(address(this))"
                let expr_1519 := fun_isContract_4065(expr_1518)
                /// @src 4:3208:3242  "!Address.isContract(address(this))"
                let expr_1520 := cleanup_t_bool(iszero(expr_1519))
                /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                let expr_1524 := expr_1520
                if expr_1524
                {
                    /// @src 4:3246:3258  "_initialized"
                    let _35 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1521 := _35
                    /// @src 4:3262:3263  "1"
                    let expr_1522 := 0x01
                    /// @src 4:3246:3263  "_initialized == 1"
                    let expr_1523 := eq(cleanup_t_uint8(expr_1521), convert_t_rational_1_by_1_to_t_uint8(expr_1522))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    expr_1524 := expr_1523
                }
                /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1525 := expr_1524
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                expr_1526 := expr_1525
            }
            /// @src 4:3146:3336  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1526)
            /// @src 4:3361:3362  "1"
            let expr_1531 := 0x01
            /// @src 4:3346:3362  "_initialized = 1"
            let _36 := convert_t_rational_1_by_1_to_t_uint8(expr_1531)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _36)
            let expr_1532 := _36
            /// @src 4:3376:3390  "isTopLevelCall"
            let _37 := var_isTopLevelCall_1502
            let expr_1534 := _37
            /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            if expr_1534
            {
                /// @src 4:3422:3426  "true"
                let expr_1536 := 0x01
                /// @src 4:3406:3426  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1536)
                let expr_1537 := expr_1536
            }
            /// @src 4:3446:3447  "_"
            fun_initialize_1781_inner(var__startingBlockNumber_1757, var__startingTimestamp_1759)
            /// @src 4:3461:3475  "isTopLevelCall"
            let _38 := var_isTopLevelCall_1502
            let expr_1542 := _38
            /// @src 4:3457:3556  "if (isTopLevelCall) {..."
            if expr_1542
            {
                /// @src 4:3507:3512  "false"
                let expr_1544 := 0x00
                /// @src 4:3491:3512  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1544)
                let expr_1545 := expr_1544
                /// @src 4:3543:3544  "1"
                let expr_1548 := 0x01
                /// @src 4:3531:3545  "Initialized(1)"
                let _39 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _40 := allocate_unbounded()
                    let _41 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_40, expr_1548)
                    log1(_40, sub(_41, _40), _39)
                }
            }
        }
        /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
        function store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(memPtr)
        {
            mstore(add(memPtr, 0), "L2OutputOracle: starting L2 time")
            mstore(add(memPtr, 32), "stamp must be less than current ")
            mstore(add(memPtr, 64), "time")
        }
        function abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 68)
            store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(pos)
            end := add(pos, 96)
        }
        function abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function update_byte_slice_32_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint256_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
        }
        function prepare_store_t_uint256(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
        }
        /// @src 11:4146:4533  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
        function fun_initialize_1781_inner(var__startingBlockNumber_1757, var__startingTimestamp_1759)
        {
            /// @src 11:4294:4312  "_startingTimestamp"
            let _42 := var__startingTimestamp_1759
            let expr_1765 := _42
            /// @src 11:4316:4331  "block.timestamp"
            let expr_1767 := timestamp()
            /// @src 11:4294:4331  "_startingTimestamp <= block.timestamp"
            let expr_1768 := iszero(gt(cleanup_t_uint256(expr_1765), cleanup_t_uint256(expr_1767)))
            /// @src 11:4273:4425  "require(..."
            require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(expr_1768)
            /// @src 11:4456:4474  "_startingTimestamp"
            let _43 := var__startingTimestamp_1759
            let expr_1773 := _43
            /// @src 11:4436:4474  "startingTimestamp = _startingTimestamp"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x02, expr_1773)
            let expr_1774 := expr_1773
            /// @src 11:4506:4526  "_startingBlockNumber"
            let _44 := var__startingBlockNumber_1757
            let expr_1777 := _44
            /// @src 11:4484:4526  "startingBlockNumber = _startingBlockNumber"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x01, expr_1777)
            let expr_1778 := expr_1777
        }
        /// @ast-id 1781 @src 11:4146:4533  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
        function fun_initialize_1781(var__startingBlockNumber_1757, var__startingTimestamp_1759)
        {
            modifier_initializer_1762(var__startingBlockNumber_1757, var__startingTimestamp_1759)
        }
        /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
        function zero_value_for_split_t_bool() -> ret
        { ret := 0 }
        /// @ast-id 4065 @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_4065(var_account_4053) -> var__4056
        {
            /// @src 5:1235:1239  "bool"
            let zero_t_bool_45 := zero_value_for_split_t_bool()
            var__4056 := zero_t_bool_45
            /// @src 5:1465:1472  "account"
            let _46 := var_account_4053
            let expr_4058 := _46
            /// @src 5:1465:1484  "account.code.length"
            let expr_4060 := extcodesize(expr_4058)
            /// @src 5:1487:1488  "0"
            let expr_4061 := 0x00
            /// @src 5:1465:1488  "account.code.length > 0"
            let expr_4062 := gt(cleanup_t_uint256(expr_4060), convert_t_rational_0_by_1_to_t_uint256(expr_4061))
            /// @src 5:1458:1488  "return account.code.length > 0"
            var__4056 := expr_4062
            leave
        }
    }
    /// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 11:"contracts/L1/L2OutputOracle.sol", 29:"contracts/universal/Semver.sol"
    object "L2OutputOracle_2095_deployed" {
        code {
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x002134cc {
                    external_fun_L2_BLOCK_TIME_1653()
                }
                case 0x4599c788 {
                    external_fun_latestBlockNumber_2063()
                }
                case 0x529933df {
                    external_fun_SUBMISSION_INTERVAL_1650()
                }
                case 0x54fd4d50 { external_fun_version_1482() }
                case 0x69f16eec {
                    external_fun_latestOutputIndex_2032()
                }
                case 0x6abcf563 {
                    external_fun_nextOutputIndex_2042()
                }
                case 0x6b4d98dd {
                    external_fun_CHALLENGER_1656()
                }
                case 0x70872aa5 {
                    external_fun_startingBlockNumber_1665()
                }
                case 0x7f006420 {
                    external_fun_getL2OutputIndexAfter_2004()
                }
                case 0x88786272 {
                    external_fun_startingTimestamp_1668()
                }
                case 0x89c44cbb {
                    external_fun_deleteL2Outputs_1828()
                }
                case 0x9aaab648 {
                    external_fun_proposeL2Output_1921()
                }
                case 0xa25ae557 {
                    external_fun_getL2Output_1935()
                }
                case 0xbffa7f0f { external_fun_PROPOSER_1659() }
                case 0xcf8e5cf0 {
                    external_fun_getL2OutputAfter_2020()
                }
                case 0xd1de856c {
                    external_fun_computeL2Timestamp_2094()
                }
                case 0xdcec3348 {
                    external_fun_nextBlockNumber_2075()
                }
                case 0xe4a30116 {
                    external_fun_initialize_1781()
                }
                case 0xf4daa291 {
                    external_fun_FINALIZATION_PERIOD_SECONDS_1662()
                }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            /// @ast-id 1653 @src 11:980:1018  "uint256 public immutable L2_BLOCK_TIME"
            function getter_fun_L2_BLOCK_TIME_1653() -> rval
            { rval := loadimmutable("1653") }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_L2_BLOCK_TIME_1653()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_L2_BLOCK_TIME_1653()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_latestBlockNumber_2063()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_latestBlockNumber_2063()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1650 @src 11:816:860  "uint256 public immutable SUBMISSION_INTERVAL"
            function getter_fun_SUBMISSION_INTERVAL_1650() -> rval
            { rval := loadimmutable("1650") }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function external_fun_SUBMISSION_INTERVAL_1650()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_SUBMISSION_INTERVAL_1650()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length) { mstore(add(dst, length), 0) }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_version_1482()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_version_1482()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_latestOutputIndex_2032()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_latestOutputIndex_2032()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_nextOutputIndex_2042()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_nextOutputIndex_2042()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1656 @src 11:1115:1150  "address public immutable CHALLENGER"
            function getter_fun_CHALLENGER_1656() -> rval
            { rval := loadimmutable("1656") }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_CHALLENGER_1656()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_CHALLENGER_1656()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)
            }
            /// @ast-id 1665 @src 11:1547:1581  "uint256 public startingBlockNumber"
            function getter_fun_startingBlockNumber_1665() -> ret
            {
                let slot := 1
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function external_fun_startingBlockNumber_1665()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_startingBlockNumber_1665()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_getL2OutputIndexAfter_2004()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := fun_getL2OutputIndexAfter_2004(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1668 @src 11:1682:1714  "uint256 public startingTimestamp"
            function getter_fun_startingTimestamp_1668() -> ret
            {
                let slot := 2
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function external_fun_startingTimestamp_1668()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_startingTimestamp_1668()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_deleteL2Outputs_1828()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                fun_deleteL2Outputs_1828(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_bytes32t_uint256t_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2, value3
            {
                if slt(sub(dataEnd, headStart), 128)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_proposeL2Output_1921()
            {
                let param_0, param_1, param_2, param_3 := abi_decode_tuple_t_bytes32t_uint256t_bytes32t_uint256(4, calldatasize())
                fun_proposeL2Output_1921(param_0, param_1, param_2, param_3)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_bytes32_to_t_bytes32(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function cleanup_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_t_uint128_to_t_uint128(value, pos)
            {
                mstore(pos, cleanup_t_uint128(value))
            }
            function abi_encode_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_memory_ptr_fromStack(value, pos)
            {
                let tail := add(pos, 0x60)
                {
                    let memberValue0 := mload(add(value, 0x00))
                    abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))
                }
                {
                    let memberValue0 := mload(add(value, 0x20))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x20))
                }
                {
                    let memberValue0 := mload(add(value, 0x40))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x40))
                }
            }
            function abi_encode_tuple_t_struct$_OutputProposal_$3203_memory_ptr__to_t_struct$_OutputProposal_$3203_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 96)
                abi_encode_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_memory_ptr_fromStack(value0, add(headStart, 0))
            }
            function external_fun_getL2Output_1935()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := fun_getL2Output_1935(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_OutputProposal_$3203_memory_ptr__to_t_struct$_OutputProposal_$3203_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1659 @src 11:1245:1278  "address public immutable PROPOSER"
            function getter_fun_PROPOSER_1659() -> rval
            { rval := loadimmutable("1659") }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function external_fun_PROPOSER_1659()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_PROPOSER_1659()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_getL2OutputAfter_2020()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := fun_getL2OutputAfter_2020(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_OutputProposal_$3203_memory_ptr__to_t_struct$_OutputProposal_$3203_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_computeL2Timestamp_2094()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := fun_computeL2Timestamp_2094(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_nextBlockNumber_2075()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_nextBlockNumber_2075()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_initialize_1781()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_uint256t_uint256(4, calldatasize())
                fun_initialize_1781(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 1662 @src 11:1397:1449  "uint256 public immutable FINALIZATION_PERIOD_SECONDS"
            function getter_fun_FINALIZATION_PERIOD_SECONDS_1662() -> rval
            { rval := loadimmutable("1662") }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function external_fun_FINALIZATION_PERIOD_SECONDS_1662()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_FINALIZATION_PERIOD_SECONDS_1662()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_string_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr)
            { mstore(add(memPtr, 0), ".") }
            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }
            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2) -> end
            {
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2, pos)
                end := pos
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1482 @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1482() -> var__1458_mpos
            {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_1_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1458_mpos := zero_t_string_memory_ptr_1_mpos
                /// @src 29:1203:1210  "Strings"
                let expr_1464_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _2 := loadimmutable("1425")
                let expr_1466 := _2
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1467_mpos := fun_toString_3909(expr_1466)
                /// @src 29:1281:1288  "Strings"
                let expr_1469_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _3 := loadimmutable("1428")
                let expr_1471 := _3
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1472_mpos := fun_toString_3909(expr_1471)
                /// @src 29:1359:1366  "Strings"
                let expr_1474_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _4 := loadimmutable("1431")
                let expr_1476 := _4
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1477_mpos := fun_toString_3909(expr_1476)
                /// @src 29:1165:1408  "abi.encodePacked(..."
                let expr_1478_mpos := allocate_unbounded()
                let _5 := add(expr_1478_mpos, 0x20)
                let _6 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_5, expr_1467_mpos, expr_1472_mpos, expr_1477_mpos)
                mstore(expr_1478_mpos, sub(_6, add(expr_1478_mpos, 0x20)))
                finalize_allocation(expr_1478_mpos, sub(_6, expr_1478_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1479_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1478_mpos)
                /// @src 29:1122:1422  "return..."
                var__1458_mpos := expr_1479_mpos
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function shift_right_8_unsigned(value) -> newValue
            { newValue := shr(8, value) }
            function cleanup_from_storage_t_bool(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_1t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }
            function read_from_storage_split_offset_1_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))
            }
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function cleanup_from_storage_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))
            }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_contract$_Initializable_$1634_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is alrea")
                mstore(add(memPtr, 32), "dy initialized")
            }
            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_1_shift_0(value, toInsert) -> result
            {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint8_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }
            function prepare_store_t_uint8(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_8(value) -> newValue
            { newValue := shl(8, value) }
            function update_byte_slice_1_shift_1(value, toInsert) -> result
            {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_bool_to_t_bool(value) -> converted
            {
                converted := cleanup_t_bool(value)
            }
            function prepare_store_t_bool(value) -> ret
            { ret := value }
            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }
            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            /// @ast-id 1554 @src 4:3067:3562  "modifier initializer() {..."
            function modifier_initializer_1762(var__startingBlockNumber_1757, var__startingTimestamp_1759)
            {
                /// @src 4:3123:3136  "_initializing"
                let _7 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1503 := _7
                /// @src 4:3122:3136  "!_initializing"
                let expr_1504 := cleanup_t_bool(iszero(expr_1503))
                /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_1502 := expr_1504
                /// @src 4:3168:3182  "isTopLevelCall"
                let _8 := var_isTopLevelCall_1502
                let expr_1507 := _8
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                let expr_1511 := expr_1507
                if expr_1511
                {
                    /// @src 4:3186:3198  "_initialized"
                    let _9 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1508 := _9
                    /// @src 4:3201:3202  "1"
                    let expr_1509 := 0x01
                    /// @src 4:3186:3202  "_initialized < 1"
                    let expr_1510 := lt(cleanup_t_uint8(expr_1508), convert_t_rational_1_by_1_to_t_uint8(expr_1509))
                    /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                    expr_1511 := expr_1510
                }
                /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
                let expr_1512 := expr_1511
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1526 := expr_1512
                if iszero(expr_1526)
                {
                    /// @src 4:3209:3216  "Address"
                    let expr_1513_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                    /// @src 4:3236:3240  "this"
                    let expr_1517_address := address()
                    /// @src 4:3228:3241  "address(this)"
                    let expr_1518 := convert_t_contract$_Initializable_$1634_to_t_address(expr_1517_address)
                    /// @src 4:3209:3242  "Address.isContract(address(this))"
                    let expr_1519 := fun_isContract_4065(expr_1518)
                    /// @src 4:3208:3242  "!Address.isContract(address(this))"
                    let expr_1520 := cleanup_t_bool(iszero(expr_1519))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    let expr_1524 := expr_1520
                    if expr_1524
                    {
                        /// @src 4:3246:3258  "_initialized"
                        let _10 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_1521 := _10
                        /// @src 4:3262:3263  "1"
                        let expr_1522 := 0x01
                        /// @src 4:3246:3263  "_initialized == 1"
                        let expr_1523 := eq(cleanup_t_uint8(expr_1521), convert_t_rational_1_by_1_to_t_uint8(expr_1522))
                        /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                        expr_1524 := expr_1523
                    }
                    /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                    let expr_1525 := expr_1524
                    /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                    expr_1526 := expr_1525
                }
                /// @src 4:3146:3336  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1526)
                /// @src 4:3361:3362  "1"
                let expr_1531 := 0x01
                /// @src 4:3346:3362  "_initialized = 1"
                let _11 := convert_t_rational_1_by_1_to_t_uint8(expr_1531)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _11)
                let expr_1532 := _11
                /// @src 4:3376:3390  "isTopLevelCall"
                let _12 := var_isTopLevelCall_1502
                let expr_1534 := _12
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                if expr_1534
                {
                    /// @src 4:3422:3426  "true"
                    let expr_1536 := 0x01
                    /// @src 4:3406:3426  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1536)
                    let expr_1537 := expr_1536
                }
                /// @src 4:3446:3447  "_"
                fun_initialize_1781_inner(var__startingBlockNumber_1757, var__startingTimestamp_1759)
                /// @src 4:3461:3475  "isTopLevelCall"
                let _13 := var_isTopLevelCall_1502
                let expr_1542 := _13
                /// @src 4:3457:3556  "if (isTopLevelCall) {..."
                if expr_1542
                {
                    /// @src 4:3507:3512  "false"
                    let expr_1544 := 0x00
                    /// @src 4:3491:3512  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1544)
                    let expr_1545 := expr_1544
                    /// @src 4:3543:3544  "1"
                    let expr_1548 := 0x01
                    /// @src 4:3531:3545  "Initialized(1)"
                    let _14 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _15 := allocate_unbounded()
                        let _16 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_15, expr_1548)
                        log1(_15, sub(_16, _15), _14)
                    }
                }
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: starting L2 time")
                mstore(add(memPtr, 32), "stamp must be less than current ")
                mstore(add(memPtr, 64), "time")
            }
            function abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 68)
                store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function prepare_store_t_uint256(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }
            /// @src 11:4146:4533  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
            function fun_initialize_1781_inner(var__startingBlockNumber_1757, var__startingTimestamp_1759)
            {
                /// @src 11:4294:4312  "_startingTimestamp"
                let _17 := var__startingTimestamp_1759
                let expr_1765 := _17
                /// @src 11:4316:4331  "block.timestamp"
                let expr_1767 := timestamp()
                /// @src 11:4294:4331  "_startingTimestamp <= block.timestamp"
                let expr_1768 := iszero(gt(cleanup_t_uint256(expr_1765), cleanup_t_uint256(expr_1767)))
                /// @src 11:4273:4425  "require(..."
                require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(expr_1768)
                /// @src 11:4456:4474  "_startingTimestamp"
                let _18 := var__startingTimestamp_1759
                let expr_1773 := _18
                /// @src 11:4436:4474  "startingTimestamp = _startingTimestamp"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x02, expr_1773)
                let expr_1774 := expr_1773
                /// @src 11:4506:4526  "_startingBlockNumber"
                let _19 := var__startingBlockNumber_1757
                let expr_1777 := _19
                /// @src 11:4484:4526  "startingBlockNumber = _startingBlockNumber"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x01, expr_1777)
                let expr_1778 := expr_1777
            }
            /// @ast-id 1781 @src 11:4146:4533  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
            function fun_initialize_1781(var__startingBlockNumber_1757, var__startingTimestamp_1759)
            {
                modifier_initializer_1762(var__startingBlockNumber_1757, var__startingTimestamp_1759)
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function store_literal_in_memory_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: only the challen")
                mstore(add(memPtr, 32), "ger address can delete outputs")
            }
            function abi_encode_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)
                store_literal_in_memory_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(value) -> length
            { length := sload(value) }
            function store_literal_in_memory_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: cannot delete ou")
                mstore(add(memPtr, 32), "tputs after the latest output in")
                mstore(add(memPtr, 64), "dex")
            }
            function abi_encode_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function array_dataslot_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function array_dataslot_t_bytes_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function long_byte_array_index_access_no_checks(array, index) -> slot, offset
            {
                offset := sub(31, mod(index, 0x20))
                let dataArea := array_dataslot_t_bytes_storage_ptr(array)
                slot := add(dataArea, div(index, 0x20))
            }
            function storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(array)
                slot := add(dataArea, mul(index, 2))
                offset := 0
            }
            function cleanup_from_storage_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_uint128(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint128(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint128(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint128(sload(slot))
            }
            function convert_t_uint128_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint128(value)))
            }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function store_literal_in_memory_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: cannot delete ou")
                mstore(add(memPtr, 32), "tputs that have already been fin")
                mstore(add(memPtr, 64), "alized")
            }
            function abi_encode_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 1828 @src 11:4942:5965  "function deleteL2Outputs(uint256 _l2OutputIndex) external {..."
            function fun_deleteL2Outputs_1828(var__l2OutputIndex_1784)
            {
                /// @src 11:5031:5041  "msg.sender"
                let expr_1789 := caller()
                /// @src 11:5045:5055  "CHALLENGER"
                let _20 := loadimmutable("1656")
                let expr_1790 := _20
                /// @src 11:5031:5055  "msg.sender == CHALLENGER"
                let expr_1791 := eq(cleanup_t_address(expr_1789), cleanup_t_address(expr_1790))
                /// @src 11:5010:5143  "require(..."
                require_helper_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(expr_1791)
                /// @src 11:5244:5258  "_l2OutputIndex"
                let _21 := var__l2OutputIndex_1784
                let expr_1796 := _21
                /// @src 11:5261:5270  "l2Outputs"
                let _22_slot := 0x03
                let expr_1797_slot := _22_slot
                /// @src 11:5261:5277  "l2Outputs.length"
                let expr_1798 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1797_slot)
                /// @src 11:5244:5277  "_l2OutputIndex < l2Outputs.length"
                let expr_1799 := lt(cleanup_t_uint256(expr_1796), cleanup_t_uint256(expr_1798))
                /// @src 11:5223:5370  "require(..."
                require_helper_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(expr_1799)
                /// @src 11:5481:5496  "block.timestamp"
                let expr_1805 := timestamp()
                /// @src 11:5499:5508  "l2Outputs"
                let _23_slot := 0x03
                let expr_1806_slot := _23_slot
                /// @src 11:5509:5523  "_l2OutputIndex"
                let _24 := var__l2OutputIndex_1784
                let expr_1807 := _24
                /// @src 11:5499:5524  "l2Outputs[_l2OutputIndex]"
                let _25, _26 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1806_slot, expr_1807)
                let _27_slot := _25
                let expr_1808_slot := _27_slot
                /// @src 11:5499:5534  "l2Outputs[_l2OutputIndex].timestamp"
                let _28 := add(expr_1808_slot, 1)
                let _29 := read_from_storage_split_offset_0_t_uint128(_28)
                let expr_1809 := _29
                /// @src 11:5481:5534  "block.timestamp - l2Outputs[_l2OutputIndex].timestamp"
                let expr_1810 := checked_sub_t_uint256(expr_1805, convert_t_uint128_to_t_uint256(expr_1809))
                /// @src 11:5537:5564  "FINALIZATION_PERIOD_SECONDS"
                let _30 := loadimmutable("1662")
                let expr_1811 := _30
                /// @src 11:5481:5564  "block.timestamp - l2Outputs[_l2OutputIndex].timestamp < FINALIZATION_PERIOD_SECONDS"
                let expr_1812 := lt(cleanup_t_uint256(expr_1810), cleanup_t_uint256(expr_1811))
                /// @src 11:5460:5660  "require(..."
                require_helper_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(expr_1812)
                /// @src 11:5703:5720  "nextOutputIndex()"
                let expr_1819 := fun_nextOutputIndex_2042()
                /// @src 11:5671:5720  "uint256 prevNextL2OutputIndex = nextOutputIndex()"
                let var_prevNextL2OutputIndex_1817 := expr_1819
                /// @src 11:5819:5890  "assembly {..."
                {
                    sstore(3, var__l2OutputIndex_1784)
                }
                /// @src 11:5920:5941  "prevNextL2OutputIndex"
                let _31 := var_prevNextL2OutputIndex_1817
                let expr_1823 := _31
                /// @src 11:5943:5957  "_l2OutputIndex"
                let _32 := var__l2OutputIndex_1784
                let expr_1824 := _32
                /// @src 11:5905:5958  "OutputsDeleted(prevNextL2OutputIndex, _l2OutputIndex)"
                let _33 := 0x4ee37ac2c786ec85e87592d3c5c8a1dd66f8496dda3f125d9ea8ca5f657629b6
                let _34 := convert_t_uint256_to_t_uint256(expr_1823)
                let _35 := convert_t_uint256_to_t_uint256(expr_1824)
                {
                    let _36 := allocate_unbounded()
                    let _37 := abi_encode_tuple__to__fromStack(_36)
                    log3(_36, sub(_37, _36), _33, _34, _35)
                }
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function store_literal_in_memory_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: only the propose")
                mstore(add(memPtr, 32), "r address can propose new output")
                mstore(add(memPtr, 64), "s")
            }
            function abi_encode_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 65)
                store_literal_in_memory_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: block number mus")
                mstore(add(memPtr, 32), "t be equal to next expected bloc")
                mstore(add(memPtr, 64), "k number")
            }
            function abi_encode_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: cannot propose L")
                mstore(add(memPtr, 32), "2 output in the future")
            }
            function abi_encode_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)
                store_literal_in_memory_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_0_by_1(value)))
            }
            function store_literal_in_memory_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: L2 output propos")
                mstore(add(memPtr, 32), "al cannot be the zero hash")
            }
            function abi_encode_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: block hash does ")
                mstore(add(memPtr, 32), "not match the hash at the expect")
                mstore(add(memPtr, 64), "ed height")
            }
            function abi_encode_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 73)
                store_literal_in_memory_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_bytes32_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(value)
            }
            function convert_array_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_to_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(value) -> converted
            { converted := value }
            function convert_t_uint256_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint256(value)))
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function allocate_memory_struct_t_struct$_OutputProposal_$3203_storage_ptr() -> memPtr
            { memPtr := allocate_memory(96) }
            function write_to_memory_t_bytes32(memPtr, value)
            {
                mstore(memPtr, cleanup_t_bytes32(value))
            }
            function write_to_memory_t_uint128(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint128(value))
            }
            function array_dataslot_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(ptr) -> data
            {
                data := ptr
                mstore(0, ptr)
                data := keccak256(0, 0x20)
            }
            function array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(value) -> length
            { length := sload(value) }
            function storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(array, index) -> slot, offset
            {
                let arrayLength := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }
                let dataArea := array_dataslot_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(array)
                slot := add(dataArea, mul(index, 2))
                offset := 0
            }
            function panic_error_0x00()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }
            function read_from_memoryt_bytes32(ptr) -> returnValue
            {
                let value := cleanup_t_bytes32(mload(ptr))
                returnValue := value
            }
            function prepare_store_t_bytes32(value) -> ret
            {
                ret := shift_right_0_unsigned(value)
            }
            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
            {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }
            function read_from_memoryt_uint128(ptr) -> returnValue
            {
                let value := cleanup_t_uint128(mload(ptr))
                returnValue := value
            }
            function update_byte_slice_16_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint128_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }
            function prepare_store_t_uint128(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }
            function shift_left_128(value) -> newValue
            { newValue := shl(128, value) }
            function update_byte_slice_16_shift_16(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_16t_uint128_to_t_uint128(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_16(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }
            function copy_struct_to_storage_from_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_storage(slot, value)
            {
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)
                    let memberValue_0 := read_from_memoryt_bytes32(memberSrcPtr)
                    update_storage_value_offset_0t_bytes32_to_t_bytes32(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 32)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 64)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_16t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
            }
            function update_storage_value_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_storage(slot, offset, value_0)
            {
                if offset { panic_error_0x00() }
                copy_struct_to_storage_from_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_storage(slot, value_0)
            }
            function shift_left_dynamic(bits, value) -> newValue
            { newValue := shl(bits, value) }
            function array_push_from_t_struct$_OutputProposal_$3203_memory_ptr_to_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(array, value0)
            {
                let oldLen := sload(array)
                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }
                sstore(array, add(oldLen, 1))
                let slot, offset := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(array, oldLen)
                update_storage_value_t_struct$_OutputProposal_$3203_memory_ptr_to_t_struct$_OutputProposal_$3203_storage(slot, offset, value0)
            }
            /// @ast-id 1921 @src 11:6575:8604  "function proposeL2Output(..."
            function fun_proposeL2Output_1921(var__outputRoot_1831, var__l2BlockNumber_1833, var__l1BlockHash_1835, var__l1BlockNumber_1837)
            {
                /// @src 11:6777:6787  "msg.sender"
                let expr_1842 := caller()
                /// @src 11:6791:6799  "PROPOSER"
                let _38 := loadimmutable("1659")
                let expr_1843 := _38
                /// @src 11:6777:6799  "msg.sender == PROPOSER"
                let expr_1844 := eq(cleanup_t_address(expr_1842), cleanup_t_address(expr_1843))
                /// @src 11:6756:6890  "require(..."
                require_helper_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(expr_1844)
                /// @src 11:6922:6936  "_l2BlockNumber"
                let _39 := var__l2BlockNumber_1833
                let expr_1849 := _39
                /// @src 11:6940:6957  "nextBlockNumber()"
                let expr_1851 := fun_nextBlockNumber_2075()
                /// @src 11:6922:6957  "_l2BlockNumber == nextBlockNumber()"
                let expr_1852 := eq(cleanup_t_uint256(expr_1849), cleanup_t_uint256(expr_1851))
                /// @src 11:6901:7055  "require(..."
                require_helper_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(expr_1852)
                /// @src 11:7106:7120  "_l2BlockNumber"
                let _40 := var__l2BlockNumber_1833
                let expr_1858 := _40
                /// @src 11:7087:7121  "computeL2Timestamp(_l2BlockNumber)"
                let expr_1859 := fun_computeL2Timestamp_2094(expr_1858)
                /// @src 11:7124:7139  "block.timestamp"
                let expr_1861 := timestamp()
                /// @src 11:7087:7139  "computeL2Timestamp(_l2BlockNumber) < block.timestamp"
                let expr_1862 := lt(cleanup_t_uint256(expr_1859), cleanup_t_uint256(expr_1861))
                /// @src 11:7066:7219  "require(..."
                require_helper_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(expr_1862)
                /// @src 11:7251:7262  "_outputRoot"
                let _41 := var__outputRoot_1831
                let expr_1867 := _41
                /// @src 11:7274:7275  "0"
                let expr_1870 := 0x00
                /// @src 11:7266:7276  "bytes32(0)"
                let expr_1871 := convert_t_rational_0_by_1_to_t_bytes32(expr_1870)
                /// @src 11:7251:7276  "_outputRoot != bytes32(0)"
                let expr_1872 := iszero(eq(cleanup_t_bytes32(expr_1867), cleanup_t_bytes32(expr_1871)))
                /// @src 11:7230:7360  "require(..."
                require_helper_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(expr_1872)
                /// @src 11:7375:7387  "_l1BlockHash"
                let _42 := var__l1BlockHash_1835
                let expr_1876 := _42
                /// @src 11:7399:7400  "0"
                let expr_1879 := 0x00
                /// @src 11:7391:7401  "bytes32(0)"
                let expr_1880 := convert_t_rational_0_by_1_to_t_bytes32(expr_1879)
                /// @src 11:7375:7401  "_l1BlockHash != bytes32(0)"
                let expr_1881 := iszero(eq(cleanup_t_bytes32(expr_1876), cleanup_t_bytes32(expr_1880)))
                /// @src 11:7371:8268  "if (_l1BlockHash != bytes32(0)) {..."
                if expr_1881
                {
                    /// @src 11:8119:8133  "_l1BlockNumber"
                    let _43 := var__l1BlockNumber_1837
                    let expr_1884 := _43
                    /// @src 11:8109:8134  "blockhash(_l1BlockNumber)"
                    let expr_1885 := blockhash(expr_1884)
                    /// @src 11:8138:8150  "_l1BlockHash"
                    let _44 := var__l1BlockHash_1835
                    let expr_1886 := _44
                    /// @src 11:8109:8150  "blockhash(_l1BlockNumber) == _l1BlockHash"
                    let expr_1887 := eq(cleanup_t_bytes32(expr_1885), cleanup_t_bytes32(expr_1886))
                    /// @src 11:8084:8257  "require(..."
                    require_helper_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(expr_1887)
                }
                /// @src 11:8298:8309  "_outputRoot"
                let _45 := var__outputRoot_1831
                let expr_1894 := _45
                /// @src 11:8311:8328  "nextOutputIndex()"
                let expr_1896 := fun_nextOutputIndex_2042()
                /// @src 11:8330:8344  "_l2BlockNumber"
                let _46 := var__l2BlockNumber_1833
                let expr_1897 := _46
                /// @src 11:8346:8361  "block.timestamp"
                let expr_1899 := timestamp()
                /// @src 11:8283:8362  "OutputProposed(_outputRoot, nextOutputIndex(), _l2BlockNumber, block.timestamp)"
                let _47 := 0xa7aaf2512769da4e444e3de247be2564225c2e7a8f74cfe528e46e17d24868e2
                let _48 := convert_t_bytes32_to_t_bytes32(expr_1894)
                let _49 := convert_t_uint256_to_t_uint256(expr_1896)
                let _50 := convert_t_uint256_to_t_uint256(expr_1897)
                {
                    let _51 := allocate_unbounded()
                    let _52 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_51, expr_1899)
                    log4(_51, sub(_52, _51), _47, _48, _49, _50)
                }
                /// @src 11:8373:8382  "l2Outputs"
                let _53_slot := 0x03
                let expr_1902_slot := _53_slot
                /// @src 11:8373:8387  "l2Outputs.push"
                let expr_1904_self_slot := convert_array_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_to_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(expr_1902_slot)
                /// @src 11:8401:8406  "Types"
                let expr_1905_address := linkersymbol("contracts/libraries/Types.sol:Types")
                /// @src 11:8452:8463  "_outputRoot"
                let _54 := var__outputRoot_1831
                let expr_1907 := _54
                /// @src 11:8500:8515  "block.timestamp"
                let expr_1911 := timestamp()
                /// @src 11:8492:8516  "uint128(block.timestamp)"
                let expr_1912 := convert_t_uint256_to_t_uint128(expr_1911)
                /// @src 11:8557:8571  "_l2BlockNumber"
                let _55 := var__l2BlockNumber_1833
                let expr_1915 := _55
                /// @src 11:8549:8572  "uint128(_l2BlockNumber)"
                let expr_1916 := convert_t_uint256_to_t_uint128(expr_1915)
                /// @src 11:8401:8587  "Types.OutputProposal({..."
                let expr_1917_mpos := allocate_memory_struct_t_struct$_OutputProposal_$3203_storage_ptr()
                write_to_memory_t_bytes32(add(expr_1917_mpos, 0), expr_1907)
                write_to_memory_t_uint128(add(expr_1917_mpos, 32), expr_1912)
                write_to_memory_t_uint128(add(expr_1917_mpos, 64), expr_1916)
                /// @src 11:8373:8597  "l2Outputs.push(..."
                array_push_from_t_struct$_OutputProposal_$3203_memory_ptr_to_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage_ptr(expr_1904_self_slot, expr_1917_mpos)
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function allocate_memory_struct_t_struct$_OutputProposal_$3203_memory_ptr() -> memPtr
            { memPtr := allocate_memory(96) }
            function zero_value_for_t_bytes32() -> ret
            { ret := 0 }
            function zero_value_for_t_uint128() -> ret
            { ret := 0 }
            function allocate_and_zero_memory_struct_t_struct$_OutputProposal_$3203_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory_struct_t_struct$_OutputProposal_$3203_memory_ptr()
                let offset := memPtr
                mstore(offset, zero_value_for_t_bytes32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)
            }
            function zero_value_for_split_t_struct$_OutputProposal_$3203_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_OutputProposal_$3203_memory_ptr()
            }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            function shift_right_128_unsigned(value) -> newValue
            { newValue := shr(128, value) }
            function extract_from_storage_value_offset_16t_uint128(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint128(shift_right_128_unsigned(slot_value))
            }
            function read_from_storage_split_offset_16_t_uint128(slot) -> value
            {
                value := extract_from_storage_value_offset_16t_uint128(sload(slot))
            }
            function read_from_storage_reference_type_t_struct$_OutputProposal_$3203_memory_ptr(slot) -> value
            {
                value := allocate_memory_struct_t_struct$_OutputProposal_$3203_memory_ptr()
                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))
                    write_to_memory_t_bytes32(add(value, 0), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 32), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 64), memberValue_0)
                }
            }
            function convert_t_struct$_OutputProposal_$3203_storage_to_t_struct$_OutputProposal_$3203_memory_ptr(value) -> converted
            {
                converted := read_from_storage_reference_type_t_struct$_OutputProposal_$3203_memory_ptr(value)
            }
            /// @ast-id 1935 @src 11:8884:9058  "function getL2Output(uint256 _l2OutputIndex)..."
            function fun_getL2Output_1935(var__l2OutputIndex_1924) -> var__1928_mpos
            {
                /// @src 11:8976:9003  "Types.OutputProposal memory"
                let zero_t_struct$_OutputProposal_$3203_memory_ptr_56_mpos := zero_value_for_split_t_struct$_OutputProposal_$3203_memory_ptr()
                var__1928_mpos := zero_t_struct$_OutputProposal_$3203_memory_ptr_56_mpos
                /// @src 11:9026:9035  "l2Outputs"
                let _57_slot := 0x03
                let expr_1930_slot := _57_slot
                /// @src 11:9036:9050  "_l2OutputIndex"
                let _58 := var__l2OutputIndex_1924
                let expr_1931 := _58
                /// @src 11:9026:9051  "l2Outputs[_l2OutputIndex]"
                let _59, _60 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1930_slot, expr_1931)
                let _61_slot := _59
                let expr_1932_slot := _61_slot
                /// @src 11:9019:9051  "return l2Outputs[_l2OutputIndex]"
                var__1928_mpos := convert_t_struct$_OutputProposal_$3203_storage_to_t_struct$_OutputProposal_$3203_memory_ptr(expr_1932_slot)
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function store_literal_in_memory_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: cannot get outpu")
                mstore(add(memPtr, 32), "t for a block that has not been ")
                mstore(add(memPtr, 64), "proposed")
            }
            function abi_encode_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            function store_literal_in_memory_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(memPtr)
            {
                mstore(add(memPtr, 0), "L2OutputOracle: cannot get outpu")
                mstore(add(memPtr, 32), "t as no outputs have been propos")
                mstore(add(memPtr, 64), "ed yet")
            }
            function abi_encode_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function cleanup_t_rational_2_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_2_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            /// @ast-id 2004 @src 11:9448:10378  "function getL2OutputIndexAfter(uint256 _l2BlockNumber) public view returns (uint256) {..."
            function fun_getL2OutputIndexAfter_2004(var__l2BlockNumber_1938) -> var__1941
            {
                /// @src 11:9524:9531  "uint256"
                let zero_t_uint256_62 := zero_value_for_split_t_uint256()
                var__1941 := zero_t_uint256_62
                /// @src 11:9645:9659  "_l2BlockNumber"
                let _63 := var__l2BlockNumber_1938
                let expr_1944 := _63
                /// @src 11:9663:9682  "latestBlockNumber()"
                let expr_1946 := fun_latestBlockNumber_2063()
                /// @src 11:9645:9682  "_l2BlockNumber <= latestBlockNumber()"
                let expr_1947 := iszero(gt(cleanup_t_uint256(expr_1944), cleanup_t_uint256(expr_1946)))
                /// @src 11:9624:9780  "require(..."
                require_helper_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(expr_1947)
                /// @src 11:9871:9880  "l2Outputs"
                let _64_slot := 0x03
                let expr_1952_slot := _64_slot
                /// @src 11:9871:9887  "l2Outputs.length"
                let expr_1953 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1952_slot)
                /// @src 11:9890:9891  "0"
                let expr_1954 := 0x00
                /// @src 11:9871:9891  "l2Outputs.length > 0"
                let expr_1955 := gt(cleanup_t_uint256(expr_1953), convert_t_rational_0_by_1_to_t_uint256(expr_1954))
                /// @src 11:9850:9987  "require(..."
                require_helper_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(expr_1955)
                /// @src 11:10078:10079  "0"
                let expr_1961 := 0x00
                /// @src 11:10065:10079  "uint256 lo = 0"
                let var_lo_1960 := convert_t_rational_0_by_1_to_t_uint256(expr_1961)
                /// @src 11:10102:10111  "l2Outputs"
                let _65_slot := 0x03
                let expr_1965_slot := _65_slot
                /// @src 11:10102:10118  "l2Outputs.length"
                let expr_1966 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1965_slot)
                /// @src 11:10089:10118  "uint256 hi = l2Outputs.length"
                let var_hi_1964 := expr_1966
                /// @src 11:10128:10352  "while (lo < hi) {..."
                for { } 1 { }
                {
                    /// @src 11:10135:10137  "lo"
                    let _66 := var_lo_1960
                    let expr_1968 := _66
                    /// @src 11:10140:10142  "hi"
                    let _67 := var_hi_1964
                    let expr_1969 := _67
                    /// @src 11:10135:10142  "lo < hi"
                    let expr_1970 := lt(cleanup_t_uint256(expr_1968), cleanup_t_uint256(expr_1969))
                    if iszero(expr_1970) { break }
                    /// @src 11:10173:10175  "lo"
                    let _68 := var_lo_1960
                    let expr_1973 := _68
                    /// @src 11:10178:10180  "hi"
                    let _69 := var_hi_1964
                    let expr_1974 := _69
                    /// @src 11:10173:10180  "lo + hi"
                    let expr_1975 := checked_add_t_uint256(expr_1973, expr_1974)
                    /// @src 11:10172:10181  "(lo + hi)"
                    let expr_1976 := expr_1975
                    /// @src 11:10184:10185  "2"
                    let expr_1977 := 0x02
                    /// @src 11:10172:10185  "(lo + hi) / 2"
                    let expr_1978 := checked_div_t_uint256(expr_1976, convert_t_rational_2_by_1_to_t_uint256(expr_1977))
                    /// @src 11:10158:10185  "uint256 mid = (lo + hi) / 2"
                    let var_mid_1972 := expr_1978
                    /// @src 11:10203:10212  "l2Outputs"
                    let _70_slot := 0x03
                    let expr_1980_slot := _70_slot
                    /// @src 11:10213:10216  "mid"
                    let _71 := var_mid_1972
                    let expr_1981 := _71
                    /// @src 11:10203:10217  "l2Outputs[mid]"
                    let _72, _73 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_1980_slot, expr_1981)
                    let _74_slot := _72
                    let expr_1982_slot := _74_slot
                    /// @src 11:10203:10231  "l2Outputs[mid].l2BlockNumber"
                    let _75 := add(expr_1982_slot, 1)
                    let _76 := read_from_storage_split_offset_16_t_uint128(_75)
                    let expr_1983 := _76
                    /// @src 11:10234:10248  "_l2BlockNumber"
                    let _77 := var__l2BlockNumber_1938
                    let expr_1984 := _77
                    /// @src 11:10203:10248  "l2Outputs[mid].l2BlockNumber < _l2BlockNumber"
                    let expr_1985 := lt(convert_t_uint128_to_t_uint256(expr_1983), cleanup_t_uint256(expr_1984))
                    /// @src 11:10199:10342  "if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {..."
                    switch expr_1985
                    case 0 {
                        /// @src 11:10324:10327  "mid"
                        let _78 := var_mid_1972
                        let expr_1994 := _78
                        /// @src 11:10319:10327  "hi = mid"
                        var_hi_1964 := expr_1994
                        let expr_1995 := expr_1994
                    }
                    default /// @src 11:10199:10342  "if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {..."
                    {
                        /// @src 11:10273:10276  "mid"
                        let _79 := var_mid_1972
                        let expr_1987 := _79
                        /// @src 11:10279:10280  "1"
                        let expr_1988 := 0x01
                        /// @src 11:10273:10280  "mid + 1"
                        let expr_1989 := checked_add_t_uint256(expr_1987, convert_t_rational_1_by_1_to_t_uint256(expr_1988))
                        /// @src 11:10268:10280  "lo = mid + 1"
                        var_lo_1960 := expr_1989
                        let expr_1990 := expr_1989
                    }
                }
                /// @src 11:10369:10371  "lo"
                let _80 := var_lo_1960
                let expr_2001 := _80
                /// @src 11:10362:10371  "return lo"
                var__1941 := expr_2001
                leave
            }
            /// @ast-id 2020 @src 11:10751:10953  "function getL2OutputAfter(uint256 _l2BlockNumber)..."
            function fun_getL2OutputAfter_2020(var__l2BlockNumber_2007) -> var__2011_mpos
            {
                /// @src 11:10848:10875  "Types.OutputProposal memory"
                let zero_t_struct$_OutputProposal_$3203_memory_ptr_81_mpos := zero_value_for_split_t_struct$_OutputProposal_$3203_memory_ptr()
                var__2011_mpos := zero_t_struct$_OutputProposal_$3203_memory_ptr_81_mpos
                /// @src 11:10898:10907  "l2Outputs"
                let _82_slot := 0x03
                let expr_2013_slot := _82_slot
                /// @src 11:10930:10944  "_l2BlockNumber"
                let _83 := var__l2BlockNumber_2007
                let expr_2015 := _83
                /// @src 11:10908:10945  "getL2OutputIndexAfter(_l2BlockNumber)"
                let expr_2016 := fun_getL2OutputIndexAfter_2004(expr_2015)
                /// @src 11:10898:10946  "l2Outputs[getL2OutputIndexAfter(_l2BlockNumber)]"
                let _84, _85 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2013_slot, expr_2016)
                let _86_slot := _84
                let expr_2017_slot := _86_slot
                /// @src 11:10891:10946  "return l2Outputs[getL2OutputIndexAfter(_l2BlockNumber)]"
                var__2011_mpos := convert_t_struct$_OutputProposal_$3203_storage_to_t_struct$_OutputProposal_$3203_memory_ptr(expr_2017_slot)
                leave
            }
            /// @ast-id 2032 @src 11:11179:11284  "function latestOutputIndex() external view returns (uint256) {..."
            function fun_latestOutputIndex_2032() -> var__2024
            {
                /// @src 11:11231:11238  "uint256"
                let zero_t_uint256_87 := zero_value_for_split_t_uint256()
                var__2024 := zero_t_uint256_87
                /// @src 11:11257:11266  "l2Outputs"
                let _88_slot := 0x03
                let expr_2026_slot := _88_slot
                /// @src 11:11257:11273  "l2Outputs.length"
                let expr_2027 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2026_slot)
                /// @src 11:11276:11277  "1"
                let expr_2028 := 0x01
                /// @src 11:11257:11277  "l2Outputs.length - 1"
                let expr_2029 := checked_sub_t_uint256(expr_2027, convert_t_rational_1_by_1_to_t_uint256(expr_2028))
                /// @src 11:11250:11277  "return l2Outputs.length - 1"
                var__2024 := expr_2029
                leave
            }
            /// @ast-id 2042 @src 11:11441:11538  "function nextOutputIndex() public view returns (uint256) {..."
            function fun_nextOutputIndex_2042() -> var__2036
            {
                /// @src 11:11489:11496  "uint256"
                let zero_t_uint256_89 := zero_value_for_split_t_uint256()
                var__2036 := zero_t_uint256_89
                /// @src 11:11515:11524  "l2Outputs"
                let _90_slot := 0x03
                let expr_2038_slot := _90_slot
                /// @src 11:11515:11531  "l2Outputs.length"
                let expr_2039 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2038_slot)
                /// @src 11:11508:11531  "return l2Outputs.length"
                var__2036 := expr_2039
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint256(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint256(sload(slot))
            }
            /// @ast-id 2063 @src 11:11808:12026  "function latestBlockNumber() public view returns (uint256) {..."
            function fun_latestBlockNumber_2063() -> var__2046
            {
                /// @src 11:11858:11865  "uint256"
                let zero_t_uint256_91 := zero_value_for_split_t_uint256()
                var__2046 := zero_t_uint256_91
                /// @src 11:11896:11905  "l2Outputs"
                let _92_slot := 0x03
                let expr_2048_slot := _92_slot
                /// @src 11:11896:11912  "l2Outputs.length"
                let expr_2049 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2048_slot)
                /// @src 11:11916:11917  "0"
                let expr_2050 := 0x00
                /// @src 11:11896:11917  "l2Outputs.length == 0"
                let expr_2051 := eq(cleanup_t_uint256(expr_2049), convert_t_rational_0_by_1_to_t_uint256(expr_2050))
                /// @src 11:11896:12019  "l2Outputs.length == 0..."
                let expr_2060
                switch expr_2051
                case 0 {
                    /// @src 11:11974:11983  "l2Outputs"
                    let _93_slot := 0x03
                    let expr_2053_slot := _93_slot
                    /// @src 11:11984:11993  "l2Outputs"
                    let _94_slot := 0x03
                    let expr_2054_slot := _94_slot
                    /// @src 11:11984:12000  "l2Outputs.length"
                    let expr_2055 := array_length_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2054_slot)
                    /// @src 11:12003:12004  "1"
                    let expr_2056 := 0x01
                    /// @src 11:11984:12004  "l2Outputs.length - 1"
                    let expr_2057 := checked_sub_t_uint256(expr_2055, convert_t_rational_1_by_1_to_t_uint256(expr_2056))
                    /// @src 11:11974:12005  "l2Outputs[l2Outputs.length - 1]"
                    let _95, _96 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3203_storage_$dyn_storage(expr_2053_slot, expr_2057)
                    let _97_slot := _95
                    let expr_2058_slot := _97_slot
                    /// @src 11:11974:12019  "l2Outputs[l2Outputs.length - 1].l2BlockNumber"
                    let _98 := add(expr_2058_slot, 1)
                    let _99 := read_from_storage_split_offset_16_t_uint128(_98)
                    let expr_2059 := _99
                    /// @src 11:11896:12019  "l2Outputs.length == 0..."
                    expr_2060 := convert_t_uint128_to_t_uint256(expr_2059)
                }
                default {
                    /// @src 11:11936:11955  "startingBlockNumber"
                    let _100 := read_from_storage_split_offset_0_t_uint256(0x01)
                    let expr_2052 := _100
                    /// @src 11:11896:12019  "l2Outputs.length == 0..."
                    expr_2060 := expr_2052
                }
                /// @src 11:11877:12019  "return..."
                var__2046 := expr_2060
                leave
            }
            /// @ast-id 2075 @src 11:12185:12307  "function nextBlockNumber() public view returns (uint256) {..."
            function fun_nextBlockNumber_2075() -> var__2067
            {
                /// @src 11:12233:12240  "uint256"
                let zero_t_uint256_101 := zero_value_for_split_t_uint256()
                var__2067 := zero_t_uint256_101
                /// @src 11:12259:12278  "latestBlockNumber()"
                let expr_2070 := fun_latestBlockNumber_2063()
                /// @src 11:12281:12300  "SUBMISSION_INTERVAL"
                let _102 := loadimmutable("1650")
                let expr_2071 := _102
                /// @src 11:12259:12300  "latestBlockNumber() + SUBMISSION_INTERVAL"
                let expr_2072 := checked_add_t_uint256(expr_2070, expr_2071)
                /// @src 11:12252:12300  "return latestBlockNumber() + SUBMISSION_INTERVAL"
                var__2067 := expr_2072
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function checked_mul_t_uint256(x, y) -> product
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            /// @ast-id 2094 @src 11:12543:12725  "function computeL2Timestamp(uint256 _l2BlockNumber) public view returns (uint256) {..."
            function fun_computeL2Timestamp_2094(var__l2BlockNumber_2078) -> var__2081
            {
                /// @src 11:12616:12623  "uint256"
                let zero_t_uint256_103 := zero_value_for_split_t_uint256()
                var__2081 := zero_t_uint256_103
                /// @src 11:12642:12659  "startingTimestamp"
                let _104 := read_from_storage_split_offset_0_t_uint256(0x02)
                let expr_2083 := _104
                /// @src 11:12664:12678  "_l2BlockNumber"
                let _105 := var__l2BlockNumber_2078
                let expr_2084 := _105
                /// @src 11:12681:12700  "startingBlockNumber"
                let _106 := read_from_storage_split_offset_0_t_uint256(0x01)
                let expr_2085 := _106
                /// @src 11:12664:12700  "_l2BlockNumber - startingBlockNumber"
                let expr_2086 := checked_sub_t_uint256(expr_2084, expr_2085)
                /// @src 11:12663:12701  "(_l2BlockNumber - startingBlockNumber)"
                let expr_2087 := expr_2086
                /// @src 11:12704:12717  "L2_BLOCK_TIME"
                let _107 := loadimmutable("1653")
                let expr_2088 := _107
                /// @src 11:12663:12717  "(_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME"
                let expr_2089 := checked_mul_t_uint256(expr_2087, expr_2088)
                /// @src 11:12662:12718  "((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                let expr_2090 := expr_2089
                /// @src 11:12642:12718  "startingTimestamp + ((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                let expr_2091 := checked_add_t_uint256(expr_2083, expr_2090)
                /// @src 11:12635:12718  "return startingTimestamp + ((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                var__2081 := expr_2091
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr)
            { mstore(add(memPtr, 0), "0") }
            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }
            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function cleanup_t_rational_10_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }
            function array_allocation_size_t_bytes_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes)
            {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }
            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function cleanup_t_rational_48_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }
            function convert_t_uint256_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }
            function cleanup_t_bytes1(value) -> cleaned
            {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }
            function shift_left_248(value) -> newValue
            { newValue := shl(248, value) }
            function convert_t_uint8_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 1)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            /// @ast-id 3909 @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3909(var_value_3833) -> var__3836_mpos
            {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_108_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3836_mpos := zero_t_string_memory_ptr_108_mpos
                /// @src 6:665:670  "value"
                let _109 := var_value_3833
                let expr_3838 := _109
                /// @src 6:674:675  "0"
                let expr_3839 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3840 := eq(cleanup_t_uint256(expr_3838), convert_t_rational_0_by_1_to_t_uint256(expr_3839))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3840
                {
                    /// @src 6:691:701  "return \"0\""
                    var__3836_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                }
                /// @src 6:736:741  "value"
                let _110 := var_value_3833
                let expr_3847 := _110
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3846 := expr_3847
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3850
                let zero_t_uint256_111 := zero_value_for_split_t_uint256()
                var_digits_3850 := zero_t_uint256_111
                /// @src 6:775:850  "while (temp != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:782:786  "temp"
                    let _112 := var_temp_3846
                    let expr_3852 := _112
                    /// @src 6:790:791  "0"
                    let expr_3853 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3854 := iszero(eq(cleanup_t_uint256(expr_3852), convert_t_rational_0_by_1_to_t_uint256(expr_3853)))
                    if iszero(expr_3854) { break }
                    /// @src 6:807:815  "digits++"
                    let _114 := var_digits_3850
                    let _113 := increment_t_uint256(_114)
                    var_digits_3850 := _113
                    let expr_3856 := _114
                    /// @src 6:837:839  "10"
                    let expr_3859 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _115 := convert_t_rational_10_by_1_to_t_uint256(expr_3859)
                    let _116 := var_temp_3846
                    let expr_3860 := checked_div_t_uint256(_116, _115)
                    var_temp_3846 := expr_3860
                }
                /// @src 6:891:897  "digits"
                let _117 := var_digits_3850
                let expr_3868 := _117
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3869_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3868)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3865_mpos := expr_3869_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:915:920  "value"
                    let _118 := var_value_3833
                    let expr_3871 := _118
                    /// @src 6:924:925  "0"
                    let expr_3872 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3873 := iszero(eq(cleanup_t_uint256(expr_3871), convert_t_rational_0_by_1_to_t_uint256(expr_3872)))
                    if iszero(expr_3873) { break }
                    /// @src 6:951:952  "1"
                    let expr_3875 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _119 := convert_t_rational_1_by_1_to_t_uint256(expr_3875)
                    let _120 := var_digits_3850
                    let expr_3876 := checked_sub_t_uint256(_120, _119)
                    var_digits_3850 := expr_3876
                    /// @src 6:996:998  "48"
                    let expr_3885 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _121 := var_value_3833
                    let expr_3888 := _121
                    /// @src 6:1017:1019  "10"
                    let expr_3889 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3890 := mod_t_uint256(expr_3888, convert_t_rational_10_by_1_to_t_uint256(expr_3889))
                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3891 := expr_3890
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3892 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3885), expr_3891)
                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3893 := convert_t_uint256_to_t_uint8(expr_3892)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3894 := convert_t_uint8_to_t_bytes1(expr_3893)
                    /// @src 6:966:972  "buffer"
                    let _122_mpos := var_buffer_3865_mpos
                    let expr_3878_mpos := _122_mpos
                    /// @src 6:973:979  "digits"
                    let _123 := var_digits_3850
                    let expr_3879 := _123
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _124 := expr_3894
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3878_mpos, expr_3879), byte(0, _124))
                    let expr_3895 := expr_3894
                    /// @src 6:1045:1047  "10"
                    let expr_3898 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _125 := convert_t_rational_10_by_1_to_t_uint256(expr_3898)
                    let _126 := var_value_3833
                    let expr_3899 := checked_div_t_uint256(_126, _125)
                    var_value_3833 := expr_3899
                }
                /// @src 6:1081:1087  "buffer"
                let _127_mpos := var_buffer_3865_mpos
                let expr_3905_mpos := _127_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3906_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3905_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3836_mpos := expr_3906_mpos
                leave
            }
            /// @src 11:553:12727  "contract L2OutputOracle is Initializable, Semver {..."
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            /// @ast-id 4065 @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_4065(var_account_4053) -> var__4056
            {
                /// @src 5:1235:1239  "bool"
                let zero_t_bool_128 := zero_value_for_split_t_bool()
                var__4056 := zero_t_bool_128
                /// @src 5:1465:1472  "account"
                let _129 := var_account_4053
                let expr_4058 := _129
                /// @src 5:1465:1484  "account.code.length"
                let expr_4060 := extcodesize(expr_4058)
                /// @src 5:1487:1488  "0"
                let expr_4061 := 0x00
                /// @src 5:1465:1488  "account.code.length > 0"
                let expr_4062 := gt(cleanup_t_uint256(expr_4060), convert_t_rational_0_by_1_to_t_uint256(expr_4061))
                /// @src 5:1458:1488  "return account.code.length > 0"
                var__4056 := expr_4062
                leave
            }
        }
        data ".metadata" hex"a2646970667358221220e7ca4798ce7cde322f3bac5dcebb0d2f35c155e2ac281085c2c41588e59e782a64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 12:"contracts/L1/OptimismPortal.sol", 13:"contracts/L1/ResourceMetering.sol", 18:"contracts/libraries/Constants.sol", 29:"contracts/universal/Semver.sol"
object "OptimismPortal_804" {
    code {
        /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        mstore(64, memoryguard(320))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1, _2, _3, _4 := copy_arguments_for_constructor_284_object_OptimismPortal_804()
        constructor_OptimismPortal_804(_1, _2, _3, _4)
        let _5 := allocate_unbounded()
        codecopy(_5, dataoffset("OptimismPortal_804_deployed"), datasize("OptimismPortal_804_deployed"))
        setimmutable(_5, "1425", mload(128))
        setimmutable(_5, "1428", mload(160))
        setimmutable(_5, "1431", mload(192))
        setimmutable(_5, "175", mload(224))
        setimmutable(_5, "179", mload(256))
        setimmutable(_5, "182", mload(288))
        return(_5, datasize("OptimismPortal_804_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function cleanup_t_contract$_L2OutputOracle_$2095(value) -> cleaned
        {
            cleaned := cleanup_t_address(value)
        }
        function validator_revert_t_contract$_L2OutputOracle_$2095(value)
        {
            if iszero(eq(value, cleanup_t_contract$_L2OutputOracle_$2095(value))) { revert(0, 0) }
        }
        function abi_decode_t_contract$_L2OutputOracle_$2095_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_contract$_L2OutputOracle_$2095(value)
        }
        function validator_revert_t_address(value)
        {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }
        function abi_decode_t_address_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_address(value)
        }
        function cleanup_t_bool(value) -> cleaned
        {
            cleaned := iszero(iszero(value))
        }
        function validator_revert_t_bool(value)
        {
            if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
        }
        function abi_decode_t_bool_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_bool(value)
        }
        function cleanup_t_contract$_SystemConfig_$2855(value) -> cleaned
        {
            cleaned := cleanup_t_address(value)
        }
        function validator_revert_t_contract$_SystemConfig_$2855(value)
        {
            if iszero(eq(value, cleanup_t_contract$_SystemConfig_$2855(value))) { revert(0, 0) }
        }
        function abi_decode_t_contract$_SystemConfig_$2855_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_contract$_SystemConfig_$2855(value)
        }
        function abi_decode_tuple_t_contract$_L2OutputOracle_$2095t_addresst_boolt_contract$_SystemConfig_$2855_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3
        {
            if slt(sub(dataEnd, headStart), 128)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_contract$_L2OutputOracle_$2095_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 64
                value2 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 96
                value3 := abi_decode_t_contract$_SystemConfig_$2855_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_284_object_OptimismPortal_804() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3
        {
            let programSize := datasize("OptimismPortal_804")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0, ret_param_1, ret_param_2, ret_param_3 := abi_decode_tuple_t_contract$_L2OutputOracle_$2095t_addresst_boolt_contract$_SystemConfig_$2855_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        function cleanup_t_rational_1_by_1(value) -> cleaned
        { cleaned := value }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function identity(value) -> ret
        { ret := value }
        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }
        function cleanup_t_rational_6_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_6_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_6_by_1(value)))
        }
        function cleanup_t_rational_0_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }
        /// @ast-id 284 @src 12:5184:5461  "constructor(..."
        function constructor_OptimismPortal_804(var__l2Oracle_252_address, var__guardian_254, var__paused_256, var__config_259_address)
        {
            /// @src 12:5322:5323  "1"
            let expr_262 := 0x01
            let _6 := convert_t_rational_1_by_1_to_t_uint256(expr_262)
            /// @src 12:5325:5326  "6"
            let expr_263 := 0x06
            let _7 := convert_t_rational_6_by_1_to_t_uint256(expr_263)
            /// @src 12:5328:5329  "0"
            let expr_264 := 0x00
            let _8 := convert_t_rational_0_by_1_to_t_uint256(expr_264)
            /// @src 12:5184:5461  "constructor(..."
            constructor_Semver_1483(_6, _7, _8)
            /// @src 12:5353:5362  "_l2Oracle"
            let _9_address := var__l2Oracle_252_address
            let expr_268_address := _9_address
            /// @src 12:5341:5362  "L2_ORACLE = _l2Oracle"
            let _10_address := expr_268_address
            mstore(224, _10_address)
            let expr_269_address := expr_268_address
            /// @src 12:5383:5392  "_guardian"
            let _11 := var__guardian_254
            let expr_272 := _11
            /// @src 12:5372:5392  "GUARDIAN = _guardian"
            let _12 := expr_272
            mstore(288, _12)
            let expr_273 := expr_272
            /// @src 12:5418:5425  "_config"
            let _13_address := var__config_259_address
            let expr_276_address := _13_address
            /// @src 12:5402:5425  "SYSTEM_CONFIG = _config"
            let _14_address := expr_276_address
            mstore(256, _14_address)
            let expr_277_address := expr_276_address
            /// @src 12:5446:5453  "_paused"
            let _15 := var__paused_256
            let expr_280 := _15
            fun_initialize_305(expr_280)
        }
        /// @ast-id 1454 @src 29:726:919  "constructor(..."
        function constructor_Semver_1483(var__major_1434, var__minor_1436, var__patch_1438)
        {
            constructor_ResourceMetering_2444()
            /// @src 29:842:848  "_major"
            let _16 := var__major_1434
            let expr_1442 := _16
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _17 := expr_1442
            mstore(128, _17)
            let expr_1443 := expr_1442
            /// @src 29:874:880  "_minor"
            let _18 := var__minor_1436
            let expr_1446 := _18
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _19 := expr_1446
            mstore(160, _19)
            let expr_1447 := expr_1446
            /// @src 29:906:912  "_patch"
            let _20 := var__patch_1438
            let expr_1450 := _20
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _21 := expr_1450
            mstore(192, _21)
            let expr_1451 := expr_1450
        }
        /// @src 13:529:8702  "abstract contract ResourceMetering is Initializable {..."
        function constructor_ResourceMetering_2444()
        {
            constructor_Initializable_1634()
        }
        /// @src 4:2372:5647  "abstract contract Initializable {..."
        function constructor_Initializable_1634()
        { }
        /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        function shift_right_8_unsigned(value) -> newValue
        { newValue := shr(8, value) }
        function cleanup_from_storage_t_bool(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_1t_bool(slot_value) -> value
        {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }
        function read_from_storage_split_offset_1_t_bool(slot) -> value
        {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))
        }
        function shift_right_0_unsigned(value) -> newValue
        { newValue := shr(0, value) }
        function cleanup_from_storage_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_uint8(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))
        }
        function cleanup_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_Initializable_$1634_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
        {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }
        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is alrea")
            mstore(add(memPtr, 32), "dy initialized")
        }
        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_1_shift_0(value, toInsert) -> result
        {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint8_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }
        function prepare_store_t_uint8(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_8(value) -> newValue
        { newValue := shl(8, value) }
        function update_byte_slice_1_shift_1(value, toInsert) -> result
        {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_bool_to_t_bool(value) -> converted
        {
            converted := cleanup_t_bool(value)
        }
        function prepare_store_t_bool(value) -> ret
        { ret := value }
        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
        {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }
        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
        {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }
        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
        {
            tail := add(headStart, 32)
            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
        }
        /// @ast-id 1554 @src 4:3067:3562  "modifier initializer() {..."
        function modifier_initializer_290(var__paused_287)
        {
            /// @src 4:3123:3136  "_initializing"
            let _22 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1503 := _22
            /// @src 4:3122:3136  "!_initializing"
            let expr_1504 := cleanup_t_bool(iszero(expr_1503))
            /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_1502 := expr_1504
            /// @src 4:3168:3182  "isTopLevelCall"
            let _23 := var_isTopLevelCall_1502
            let expr_1507 := _23
            /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
            let expr_1511 := expr_1507
            if expr_1511
            {
                /// @src 4:3186:3198  "_initialized"
                let _24 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_1508 := _24
                /// @src 4:3201:3202  "1"
                let expr_1509 := 0x01
                /// @src 4:3186:3202  "_initialized < 1"
                let expr_1510 := lt(cleanup_t_uint8(expr_1508), convert_t_rational_1_by_1_to_t_uint8(expr_1509))
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                expr_1511 := expr_1510
            }
            /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
            let expr_1512 := expr_1511
            /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
            let expr_1526 := expr_1512
            if iszero(expr_1526)
            {
                /// @src 4:3209:3216  "Address"
                let expr_1513_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                /// @src 4:3236:3240  "this"
                let expr_1517_address := address()
                /// @src 4:3228:3241  "address(this)"
                let expr_1518 := convert_t_contract$_Initializable_$1634_to_t_address(expr_1517_address)
                /// @src 4:3209:3242  "Address.isContract(address(this))"
                let expr_1519 := fun_isContract_4065(expr_1518)
                /// @src 4:3208:3242  "!Address.isContract(address(this))"
                let expr_1520 := cleanup_t_bool(iszero(expr_1519))
                /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                let expr_1524 := expr_1520
                if expr_1524
                {
                    /// @src 4:3246:3258  "_initialized"
                    let _25 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1521 := _25
                    /// @src 4:3262:3263  "1"
                    let expr_1522 := 0x01
                    /// @src 4:3246:3263  "_initialized == 1"
                    let expr_1523 := eq(cleanup_t_uint8(expr_1521), convert_t_rational_1_by_1_to_t_uint8(expr_1522))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    expr_1524 := expr_1523
                }
                /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1525 := expr_1524
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                expr_1526 := expr_1525
            }
            /// @src 4:3146:3336  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1526)
            /// @src 4:3361:3362  "1"
            let expr_1531 := 0x01
            /// @src 4:3346:3362  "_initialized = 1"
            let _26 := convert_t_rational_1_by_1_to_t_uint8(expr_1531)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _26)
            let expr_1532 := _26
            /// @src 4:3376:3390  "isTopLevelCall"
            let _27 := var_isTopLevelCall_1502
            let expr_1534 := _27
            /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            if expr_1534
            {
                /// @src 4:3422:3426  "true"
                let expr_1536 := 0x01
                /// @src 4:3406:3426  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1536)
                let expr_1537 := expr_1536
            }
            /// @src 4:3446:3447  "_"
            fun_initialize_305_inner(var__paused_287)
            /// @src 4:3461:3475  "isTopLevelCall"
            let _28 := var_isTopLevelCall_1502
            let expr_1542 := _28
            /// @src 4:3457:3556  "if (isTopLevelCall) {..."
            if expr_1542
            {
                /// @src 4:3507:3512  "false"
                let expr_1544 := 0x00
                /// @src 4:3491:3512  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1544)
                let expr_1545 := expr_1544
                /// @src 4:3543:3544  "1"
                let expr_1548 := 0x01
                /// @src 4:3531:3545  "Initialized(1)"
                let _29 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _30 := allocate_unbounded()
                    let _31 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_30, expr_1548)
                    log1(_30, sub(_31, _30), _29)
                }
            }
        }
        /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
        function constant_DEFAULT_L2_SENDER_2871() -> ret
        {
            /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
            let expr_2870 := 0xdead
            let _32 := expr_2870
            ret := _32
        }
        function update_byte_slice_20_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_address_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function prepare_store_t_address(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
        {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }
        function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0)
        {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }
        /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
        function fun_initialize_305_inner(var__paused_287)
        {
            /// @src 12:5585:5594  "Constants"
            let expr_293_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
            /// @src 12:5585:5612  "Constants.DEFAULT_L2_SENDER"
            let expr_294 := constant_DEFAULT_L2_SENDER_2871()
            /// @src 12:5574:5612  "l2Sender = Constants.DEFAULT_L2_SENDER"
            update_storage_value_offset_0t_address_to_t_address(0x32, expr_294)
            let expr_295 := expr_294
            /// @src 12:5631:5638  "_paused"
            let _33 := var__paused_287
            let expr_298 := _33
            /// @src 12:5622:5638  "paused = _paused"
            update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_298)
            let expr_299 := expr_298
            fun___ResourceMetering_init_2443()
        }
        /// @ast-id 305 @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
        function fun_initialize_305(var__paused_287)
        {
            modifier_initializer_290(var__paused_287)
        }
        /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is not i")
            mstore(add(memPtr, 32), "nitializing")
        }
        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @ast-id 1597 @src 4:4842:4967  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_2428()
        {
            /// @src 4:4888:4901  "_initializing"
            let _34 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1591 := _34
            /// @src 4:4880:4949  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_1591)
            /// @src 4:4959:4960  "_"
            fun___ResourceMetering_init_2443_inner()
        }
        /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        function cleanup_t_uint64(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffff)
        }
        function convert_t_uint256_to_t_uint64(value) -> converted
        {
            converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
        }
        function allocate_memory_struct_t_struct$_ResourceParams_$2115_storage_ptr() -> memPtr
        { memPtr := allocate_memory(96) }
        function cleanup_t_rational_1000000000_by_1(value) -> cleaned
        { cleaned := value }
        function cleanup_t_uint128(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
        }
        function convert_t_rational_1000000000_by_1_to_t_uint128(value) -> converted
        {
            converted := cleanup_t_uint128(identity(cleanup_t_rational_1000000000_by_1(value)))
        }
        function write_to_memory_t_uint128(memPtr, value)
        {
            mstore(memPtr, cleanup_t_uint128(value))
        }
        function convert_t_rational_0_by_1_to_t_uint64(value) -> converted
        {
            converted := cleanup_t_uint64(identity(cleanup_t_rational_0_by_1(value)))
        }
        function write_to_memory_t_uint64(memPtr, value)
        {
            mstore(memPtr, cleanup_t_uint64(value))
        }
        function panic_error_0x00()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x00)
            revert(0, 0x24)
        }
        function read_from_memoryt_uint128(ptr) -> returnValue
        {
            let value := cleanup_t_uint128(mload(ptr))
            returnValue := value
        }
        function update_byte_slice_16_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint128_to_t_uint128(value) -> converted
        {
            converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
        }
        function prepare_store_t_uint128(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
            sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
        }
        function read_from_memoryt_uint64(ptr) -> returnValue
        {
            let value := cleanup_t_uint64(mload(ptr))
            returnValue := value
        }
        function shift_left_128(value) -> newValue
        { newValue := shl(128, value) }
        function update_byte_slice_8_shift_16(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffff00000000000000000000000000000000
            toInsert := shift_left_128(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint64_to_t_uint64(value) -> converted
        {
            converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
        }
        function prepare_store_t_uint64(value) -> ret
        { ret := value }
        function update_storage_value_offset_16t_uint64_to_t_uint64(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_16(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }
        function shift_left_192(value) -> newValue
        { newValue := shl(192, value) }
        function update_byte_slice_8_shift_24(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffff000000000000000000000000000000000000000000000000
            toInsert := shift_left_192(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function update_storage_value_offset_24t_uint64_to_t_uint64(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_24(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }
        function copy_struct_to_storage_from_t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value)
        {
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 0)
                let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 32)
                let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)
                update_storage_value_offset_16t_uint64_to_t_uint64(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 64)
                let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)
                update_storage_value_offset_24t_uint64_to_t_uint64(memberSlot, memberValue_0)
            }
        }
        function update_storage_value_offset_0t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value_0)
        {
            copy_struct_to_storage_from_t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value_0)
        }
        /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
        function fun___ResourceMetering_init_2443_inner()
        {
            /// @src 13:8598:8604  "1 gwei"
            let expr_2432 := 0x3b9aca00
            /// @src 13:8633:8634  "0"
            let expr_2433 := 0x00
            /// @src 13:8669:8681  "block.number"
            let expr_2437 := number()
            /// @src 13:8662:8682  "uint64(block.number)"
            let expr_2438 := convert_t_uint256_to_t_uint64(expr_2437)
            /// @src 13:8556:8693  "ResourceParams({..."
            let expr_2439_mpos := allocate_memory_struct_t_struct$_ResourceParams_$2115_storage_ptr()
            let _35 := convert_t_rational_1000000000_by_1_to_t_uint128(expr_2432)
            write_to_memory_t_uint128(add(expr_2439_mpos, 0), _35)
            let _36 := convert_t_rational_0_by_1_to_t_uint64(expr_2433)
            write_to_memory_t_uint64(add(expr_2439_mpos, 32), _36)
            write_to_memory_t_uint64(add(expr_2439_mpos, 64), expr_2438)
            /// @src 13:8547:8693  "params = ResourceParams({..."
            update_storage_value_offset_0t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(0x01, expr_2439_mpos)
            let _37_slot := 0x01
            let expr_2440_slot := _37_slot
        }
        /// @ast-id 2443 @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
        function fun___ResourceMetering_init_2443()
        {
            modifier_onlyInitializing_2428()
        }
        /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        function zero_value_for_split_t_bool() -> ret
        { ret := 0 }
        /// @ast-id 4065 @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_4065(var_account_4053) -> var__4056
        {
            /// @src 5:1235:1239  "bool"
            let zero_t_bool_38 := zero_value_for_split_t_bool()
            var__4056 := zero_t_bool_38
            /// @src 5:1465:1472  "account"
            let _39 := var_account_4053
            let expr_4058 := _39
            /// @src 5:1465:1484  "account.code.length"
            let expr_4060 := extcodesize(expr_4058)
            /// @src 5:1487:1488  "0"
            let expr_4061 := 0x00
            /// @src 5:1465:1488  "account.code.length > 0"
            let expr_4062 := gt(cleanup_t_uint256(expr_4060), convert_t_rational_0_by_1_to_t_uint256(expr_4061))
            /// @src 5:1458:1488  "return account.code.length > 0"
            var__4056 := expr_4062
            leave
        }
    }
    /// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol", 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol", 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol", 12:"contracts/L1/OptimismPortal.sol", 13:"contracts/L1/ResourceMetering.sol", 15:"contracts/libraries/Arithmetic.sol", 16:"contracts/libraries/Burn.sol", 17:"contracts/libraries/Bytes.sol", 18:"contracts/libraries/Constants.sol", 20:"contracts/libraries/Hashing.sol", 22:"contracts/libraries/SafeCall.sol", 24:"contracts/libraries/rlp/RLPReader.sol", 26:"contracts/libraries/trie/MerkleTrie.sol", 27:"contracts/libraries/trie/SecureMerkleTrie.sol", 29:"contracts/universal/Semver.sol", 30:"contracts/vendor/AddressAliasHelper.sol"
    object "OptimismPortal_804_deployed" {
        code {
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            mstore(64, 128)
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x001c2ff6 { external_fun_L2_ORACLE_175() }
                case 0x3f4ba83a { external_fun_unpause_349() }
                case 0x4870496f {
                    external_fun_proveWithdrawalTransaction_532()
                }
                case 0x54fd4d50 { external_fun_version_1482() }
                case 0x5c975abb { external_fun_paused_199() }
                case 0x6dbffb78 {
                    external_fun_isOutputFinalized_785()
                }
                case 0x724c184c { external_fun_GUARDIAN_182() }
                case 0x8456cb59 { external_fun_pause_327() }
                case 0x8b4c40b0 { external_fun_donateETH_387() }
                case 0x8c3152e9 {
                    external_fun_finalizeWithdrawalTransaction_677()
                }
                case 0x9bf62d82 { external_fun_l2Sender_185() }
                case 0xa14238e7 {
                    external_fun_finalizedWithdrawals_190()
                }
                case 0xa35d99df {
                    external_fun_minimumGasLimit_364()
                }
                case 0xcff0ab96 { external_fun_params_2132() }
                case 0xd53a822f { external_fun_initialize_305() }
                case 0xe965084c {
                    external_fun_provenWithdrawals_196()
                }
                case 0xe9e05c42 {
                    external_fun_depositTransaction_768()
                }
                case 0xf0498750 {
                    external_fun_SYSTEM_CONFIG_179()
                }
                default { }
            }
            if iszero(calldatasize())
            {
                fun__382()
                stop()
            }
            revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            /// @ast-id 175 @src 12:1921:1962  "L2OutputOracle public immutable L2_ORACLE"
            function getter_fun_L2_ORACLE_175() -> rval
            { rval := loadimmutable("175") }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function identity(value) -> ret
            { ret := value }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_contract$_L2OutputOracle_$2095_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function abi_encode_t_contract$_L2OutputOracle_$2095_to_t_address_fromStack(value, pos)
            {
                mstore(pos, convert_t_contract$_L2OutputOracle_$2095_to_t_address(value))
            }
            function abi_encode_tuple_t_contract$_L2OutputOracle_$2095__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_contract$_L2OutputOracle_$2095_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_L2_ORACLE_175()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_L2_ORACLE_175()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_L2OutputOracle_$2095__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_unpause_349()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_unpause_349()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
            { revert(0, 0) }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421()
            { revert(0, 0) }
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
            { revert(0, 0) }
            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()
            { revert(0, 0) }
            function array_allocation_size_t_bytes_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function copy_calldata_to_memory(src, dst, length)
            {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array
            {
                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))
                mstore(array, length)
                let dst := add(array, 0x20)
                if gt(add(src, length), end)
                {
                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()
                }
                copy_calldata_to_memory(src, dst, length)
            }
            function abi_decode_t_bytes_memory_ptr(offset, end) -> array
            {
                if iszero(slt(add(offset, 0x1f), end))
                {
                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                }
                let length := calldataload(offset)
                array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)
            }
            function abi_decode_t_struct$_WithdrawalTransaction_$3244_memory_ptr(headStart, end) -> value
            {
                if slt(sub(end, headStart), 0xc0)
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                value := allocate_memory(0xc0)
                {
                    let offset := 0
                    mstore(add(value, 0x00), abi_decode_t_uint256(add(headStart, offset), end))
                }
                {
                    let offset := 32
                    mstore(add(value, 0x20), abi_decode_t_address(add(headStart, offset), end))
                }
                {
                    let offset := 64
                    mstore(add(value, 0x40), abi_decode_t_address(add(headStart, offset), end))
                }
                {
                    let offset := 96
                    mstore(add(value, 0x60), abi_decode_t_uint256(add(headStart, offset), end))
                }
                {
                    let offset := 128
                    mstore(add(value, 0x80), abi_decode_t_uint256(add(headStart, offset), end))
                }
                {
                    let offset := calldataload(add(headStart, 160))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421()
                    }
                    mstore(add(value, 0xa0), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))
                }
            }
            function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d()
            { revert(0, 0) }
            function abi_decode_t_struct$_OutputRootProof_$3212_calldata_ptr(offset, end) -> value
            {
                if slt(sub(end, offset), 128)
                {
                    revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d()
                }
                value := offset
            }
            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
            { revert(0, 0) }
            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
            { revert(0, 0) }
            function abi_decode_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(offset, end) -> arrayPos, length
            {
                if iszero(slt(add(offset, 0x1f), end))
                {
                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                }
                length := calldataload(offset)
                if gt(length, 0xffffffffffffffff)
                {
                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()
                }
                arrayPos := add(offset, 0x20)
                if gt(add(arrayPos, mul(length, 0x20)), end)
                {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
            }
            function abi_decode_tuple_t_struct$_WithdrawalTransaction_$3244_memory_ptrt_uint256t_struct$_OutputRootProof_$3212_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4
            {
                if slt(sub(dataEnd, headStart), 224)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value0 := abi_decode_t_struct$_WithdrawalTransaction_$3244_memory_ptr(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_struct$_OutputRootProof_$3212_calldata_ptr(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 192))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value3, value4 := abi_decode_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_proveWithdrawalTransaction_532()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2, param_3, param_4 := abi_decode_tuple_t_struct$_WithdrawalTransaction_$3244_memory_ptrt_uint256t_struct$_OutputRootProof_$3212_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(4, calldatasize())
                fun_proveWithdrawalTransaction_532(param_0, param_1, param_2, param_3, param_4)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length) { mstore(add(dst, length), 0) }
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_version_1482()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_version_1482()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_bool(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bool(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)
            }
            /// @ast-id 199 @src 12:3001:3019  "bool public paused"
            function getter_fun_paused_199() -> ret
            {
                let slot := 53
                let offset := 0
                ret := read_from_storage_split_dynamic_t_bool(slot, offset)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function abi_encode_t_bool_to_t_bool_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bool(value))
            }
            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bool_to_t_bool_fromStack(value0, add(headStart, 0))
            }
            function external_fun_paused_199()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_paused_199()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_isOutputFinalized_785()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 := fun_isOutputFinalized_785(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 182 @src 12:2182:2215  "address public immutable GUARDIAN"
            function getter_fun_GUARDIAN_182() -> rval
            { rval := loadimmutable("182") }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_GUARDIAN_182()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_GUARDIAN_182()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_pause_327()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_pause_327()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_donateETH_387()
            {
                abi_decode_tuple_(4, calldatasize())
                fun_donateETH_387()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_struct$_WithdrawalTransaction_$3244_memory_ptr(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value0 := abi_decode_t_struct$_WithdrawalTransaction_$3244_memory_ptr(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_finalizeWithdrawalTransaction_677()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_struct$_WithdrawalTransaction_$3244_memory_ptr(4, calldatasize())
                fun_finalizeWithdrawalTransaction_677(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_address(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_address(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_address(sload(slot), offset)
            }
            /// @ast-id 185 @src 12:2484:2507  "address public l2Sender"
            function getter_fun_l2Sender_185() -> ret
            {
                let slot := 50
                let offset := 0
                ret := read_from_storage_split_dynamic_t_address(slot, offset)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function external_fun_l2Sender_185()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_l2Sender_185()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
            }
            function convert_t_bytes32_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(value)
            }
            function mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key) -> dataSlot
            {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            /// @ast-id 190 @src 12:2613:2665  "mapping(bytes32 => bool) public finalizedWithdrawals"
            function getter_fun_finalizedWithdrawals_190(key_0) -> ret
            {
                let slot := 51
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)
                ret := read_from_storage_split_dynamic_t_bool(slot, offset)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function external_fun_finalizedWithdrawals_190()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 := getter_fun_finalizedWithdrawals_190(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_uint64(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function validator_revert_t_uint64(value)
            {
                if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint64(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint64(value)
            }
            function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint64(value))
            }
            function abi_encode_tuple_t_uint64__to_t_uint64__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint64_to_t_uint64_fromStack(value0, add(headStart, 0))
            }
            function external_fun_minimumGasLimit_364()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint64(4, calldatasize())
                let ret_0 := fun_minimumGasLimit_364(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function cleanup_from_storage_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_uint128(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint128(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint128(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint128(sload(slot))
            }
            function shift_right_128_unsigned(value) -> newValue
            { newValue := shr(128, value) }
            function cleanup_from_storage_t_uint64(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function extract_from_storage_value_offset_16t_uint64(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint64(shift_right_128_unsigned(slot_value))
            }
            function read_from_storage_split_offset_16_t_uint64(slot) -> value
            {
                value := extract_from_storage_value_offset_16t_uint64(sload(slot))
            }
            function shift_right_192_unsigned(value) -> newValue
            { newValue := shr(192, value) }
            function extract_from_storage_value_offset_24t_uint64(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint64(shift_right_192_unsigned(slot_value))
            }
            function read_from_storage_split_offset_24_t_uint64(slot) -> value
            {
                value := extract_from_storage_value_offset_24t_uint64(sload(slot))
            }
            /// @ast-id 2132 @src 13:3039:3067  "ResourceParams public params"
            function getter_fun_params_2132() -> ret_0, ret_1, ret_2
            {
                let slot := 1
                let offset := 0
                ret_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 0))
                ret_1 := read_from_storage_split_offset_16_t_uint64(add(slot, 0))
                ret_2 := read_from_storage_split_offset_24_t_uint64(add(slot, 0))
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_t_uint128_to_t_uint128_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint128(value))
            }
            function abi_encode_tuple_t_uint128_t_uint64_t_uint64__to_t_uint128_t_uint64_t_uint64__fromStack(headStart, value0, value1, value2) -> tail
            {
                tail := add(headStart, 96)
                abi_encode_t_uint128_to_t_uint128_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint64_to_t_uint64_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint64_to_t_uint64_fromStack(value2, add(headStart, 64))
            }
            function external_fun_params_2132()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0, ret_1, ret_2 := getter_fun_params_2132()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint128_t_uint64_t_uint64__to_t_uint128_t_uint64_t_uint64__fromStack(memPos, ret_0, ret_1, ret_2)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_bool(value)
            {
                if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
            }
            function abi_decode_t_bool(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bool(value)
            }
            function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_initialize_305()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bool(4, calldatasize())
                fun_initialize_305(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(slot, key) -> dataSlot
            {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bytes32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))
            }
            function extract_from_storage_value_offset_16t_uint128(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint128(shift_right_128_unsigned(slot_value))
            }
            function read_from_storage_split_offset_16_t_uint128(slot) -> value
            {
                value := extract_from_storage_value_offset_16t_uint128(sload(slot))
            }
            /// @ast-id 196 @src 12:2762:2823  "mapping(bytes32 => ProvenWithdrawal) public provenWithdrawals"
            function getter_fun_provenWithdrawals_196(key_0) -> ret_0, ret_1, ret_2
            {
                let slot := 52
                let offset := 0
                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(slot, key_0)
                ret_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))
                ret_1 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))
                ret_2 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function abi_encode_tuple_t_bytes32_t_uint128_t_uint128__to_t_bytes32_t_uint128_t_uint128__fromStack(headStart, value0, value1, value2) -> tail
            {
                tail := add(headStart, 96)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint128_to_t_uint128_fromStack(value1, add(headStart, 32))
                abi_encode_t_uint128_to_t_uint128_fromStack(value2, add(headStart, 64))
            }
            function external_fun_provenWithdrawals_196()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0, ret_1, ret_2 := getter_fun_provenWithdrawals_196(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32_t_uint128_t_uint128__to_t_bytes32_t_uint128_t_uint128__fromStack(memPos, ret_0, ret_1, ret_2)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_uint256t_uint64t_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4
            {
                if slt(sub(dataEnd, headStart), 160)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_bool(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 128))
                    if gt(offset, 0xffffffffffffffff)
                    {
                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
                    }
                    value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_depositTransaction_768()
            {
                let param_0, param_1, param_2, param_3, param_4 := abi_decode_tuple_t_addresst_uint256t_uint64t_boolt_bytes_memory_ptr(4, calldatasize())
                fun_depositTransaction_768(param_0, param_1, param_2, param_3, param_4)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 179 @src 12:2038:2081  "SystemConfig public immutable SYSTEM_CONFIG"
            function getter_fun_SYSTEM_CONFIG_179() -> rval
            { rval := loadimmutable("179") }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function convert_t_contract$_SystemConfig_$2855_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function abi_encode_t_contract$_SystemConfig_$2855_to_t_address_fromStack(value, pos)
            {
                mstore(pos, convert_t_contract$_SystemConfig_$2855_to_t_address(value))
            }
            function abi_encode_tuple_t_contract$_SystemConfig_$2855__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_contract$_SystemConfig_$2855_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_SYSTEM_CONFIG_179()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_SYSTEM_CONFIG_179()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_SystemConfig_$2855__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()
            { revert(0, 0) }
            function shift_right_8_unsigned(value) -> newValue
            { newValue := shr(8, value) }
            function extract_from_storage_value_offset_1t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }
            function read_from_storage_split_offset_1_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))
            }
            function cleanup_from_storage_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))
            }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_contract$_Initializable_$1634_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is alrea")
                mstore(add(memPtr, 32), "dy initialized")
            }
            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_1_shift_0(value, toInsert) -> result
            {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint8_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }
            function prepare_store_t_uint8(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_8(value) -> newValue
            { newValue := shl(8, value) }
            function update_byte_slice_1_shift_1(value, toInsert) -> result
            {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_bool_to_t_bool(value) -> converted
            {
                converted := cleanup_t_bool(value)
            }
            function prepare_store_t_bool(value) -> ret
            { ret := value }
            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }
            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            /// @ast-id 1554 @src 4:3067:3562  "modifier initializer() {..."
            function modifier_initializer_290(var__paused_287)
            {
                /// @src 4:3123:3136  "_initializing"
                let _1 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1503 := _1
                /// @src 4:3122:3136  "!_initializing"
                let expr_1504 := cleanup_t_bool(iszero(expr_1503))
                /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_1502 := expr_1504
                /// @src 4:3168:3182  "isTopLevelCall"
                let _2 := var_isTopLevelCall_1502
                let expr_1507 := _2
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                let expr_1511 := expr_1507
                if expr_1511
                {
                    /// @src 4:3186:3198  "_initialized"
                    let _3 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1508 := _3
                    /// @src 4:3201:3202  "1"
                    let expr_1509 := 0x01
                    /// @src 4:3186:3202  "_initialized < 1"
                    let expr_1510 := lt(cleanup_t_uint8(expr_1508), convert_t_rational_1_by_1_to_t_uint8(expr_1509))
                    /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                    expr_1511 := expr_1510
                }
                /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
                let expr_1512 := expr_1511
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1526 := expr_1512
                if iszero(expr_1526)
                {
                    /// @src 4:3209:3216  "Address"
                    let expr_1513_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                    /// @src 4:3236:3240  "this"
                    let expr_1517_address := address()
                    /// @src 4:3228:3241  "address(this)"
                    let expr_1518 := convert_t_contract$_Initializable_$1634_to_t_address(expr_1517_address)
                    /// @src 4:3209:3242  "Address.isContract(address(this))"
                    let expr_1519 := fun_isContract_4065(expr_1518)
                    /// @src 4:3208:3242  "!Address.isContract(address(this))"
                    let expr_1520 := cleanup_t_bool(iszero(expr_1519))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    let expr_1524 := expr_1520
                    if expr_1524
                    {
                        /// @src 4:3246:3258  "_initialized"
                        let _4 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_1521 := _4
                        /// @src 4:3262:3263  "1"
                        let expr_1522 := 0x01
                        /// @src 4:3246:3263  "_initialized == 1"
                        let expr_1523 := eq(cleanup_t_uint8(expr_1521), convert_t_rational_1_by_1_to_t_uint8(expr_1522))
                        /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                        expr_1524 := expr_1523
                    }
                    /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                    let expr_1525 := expr_1524
                    /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                    expr_1526 := expr_1525
                }
                /// @src 4:3146:3336  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1526)
                /// @src 4:3361:3362  "1"
                let expr_1531 := 0x01
                /// @src 4:3346:3362  "_initialized = 1"
                let _5 := convert_t_rational_1_by_1_to_t_uint8(expr_1531)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _5)
                let expr_1532 := _5
                /// @src 4:3376:3390  "isTopLevelCall"
                let _6 := var_isTopLevelCall_1502
                let expr_1534 := _6
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                if expr_1534
                {
                    /// @src 4:3422:3426  "true"
                    let expr_1536 := 0x01
                    /// @src 4:3406:3426  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1536)
                    let expr_1537 := expr_1536
                }
                /// @src 4:3446:3447  "_"
                fun_initialize_305_inner(var__paused_287)
                /// @src 4:3461:3475  "isTopLevelCall"
                let _7 := var_isTopLevelCall_1502
                let expr_1542 := _7
                /// @src 4:3457:3556  "if (isTopLevelCall) {..."
                if expr_1542
                {
                    /// @src 4:3507:3512  "false"
                    let expr_1544 := 0x00
                    /// @src 4:3491:3512  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1544)
                    let expr_1545 := expr_1544
                    /// @src 4:3543:3544  "1"
                    let expr_1548 := 0x01
                    /// @src 4:3531:3545  "Initialized(1)"
                    let _8 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _9 := allocate_unbounded()
                        let _10 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_9, expr_1548)
                        log1(_9, sub(_10, _9), _8)
                    }
                }
            }
            /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
            function constant_DEFAULT_L2_SENDER_2871() -> ret
            {
                /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
                let expr_2870 := 0xdead
                let _11 := expr_2870
                ret := _11
            }
            function update_byte_slice_20_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function prepare_store_t_address(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }
            function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
            function fun_initialize_305_inner(var__paused_287)
            {
                /// @src 12:5585:5594  "Constants"
                let expr_293_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:5585:5612  "Constants.DEFAULT_L2_SENDER"
                let expr_294 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 12:5574:5612  "l2Sender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_294)
                let expr_295 := expr_294
                /// @src 12:5631:5638  "_paused"
                let _12 := var__paused_287
                let expr_298 := _12
                /// @src 12:5622:5638  "paused = _paused"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_298)
                let expr_299 := expr_298
                fun___ResourceMetering_init_2443()
            }
            /// @ast-id 305 @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
            function fun_initialize_305(var__paused_287)
            {
                modifier_initializer_290(var__paused_287)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: only guardian ca")
                mstore(add(memPtr, 32), "n pause")
            }
            function abi_encode_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)
                store_literal_in_memory_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 327 @src 12:5749:5922  "function pause() external {..."
            function fun_pause_327()
            {
                /// @src 12:5793:5803  "msg.sender"
                let expr_311 := caller()
                /// @src 12:5807:5815  "GUARDIAN"
                let _13 := loadimmutable("182")
                let expr_312 := _13
                /// @src 12:5793:5815  "msg.sender == GUARDIAN"
                let expr_313 := eq(cleanup_t_address(expr_311), cleanup_t_address(expr_312))
                /// @src 12:5785:5859  "require(msg.sender == GUARDIAN, \"OptimismPortal: only guardian can pause\")"
                require_helper_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(expr_313)
                /// @src 12:5878:5882  "true"
                let expr_318 := 0x01
                /// @src 12:5869:5882  "paused = true"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_318)
                let expr_319 := expr_318
                /// @src 12:5904:5914  "msg.sender"
                let expr_323 := caller()
                /// @src 12:5897:5915  "Paused(msg.sender)"
                let _14 := 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258
                {
                    let _15 := allocate_unbounded()
                    let _16 := abi_encode_tuple_t_address__to_t_address__fromStack(_15, expr_323)
                    log1(_15, sub(_16, _15), _14)
                }
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: only guardian ca")
                mstore(add(memPtr, 32), "n unpause")
            }
            function abi_encode_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)
                store_literal_in_memory_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 349 @src 12:5993:6173  "function unpause() external {..."
            function fun_unpause_349()
            {
                /// @src 12:6039:6049  "msg.sender"
                let expr_333 := caller()
                /// @src 12:6053:6061  "GUARDIAN"
                let _17 := loadimmutable("182")
                let expr_334 := _17
                /// @src 12:6039:6061  "msg.sender == GUARDIAN"
                let expr_335 := eq(cleanup_t_address(expr_333), cleanup_t_address(expr_334))
                /// @src 12:6031:6107  "require(msg.sender == GUARDIAN, \"OptimismPortal: only guardian can unpause\")"
                require_helper_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(expr_335)
                /// @src 12:6126:6131  "false"
                let expr_340 := 0x00
                /// @src 12:6117:6131  "paused = false"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_340)
                let expr_341 := expr_340
                /// @src 12:6155:6165  "msg.sender"
                let expr_345 := caller()
                /// @src 12:6146:6166  "Unpaused(msg.sender)"
                let _18 := 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa
                {
                    let _19 := allocate_unbounded()
                    let _20 := abi_encode_tuple_t_address__to_t_address__fromStack(_19, expr_345)
                    log1(_19, sub(_20, _19), _18)
                }
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_uint64() -> ret
            { ret := 0 }
            function cleanup_t_rational_16_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_16_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_16_by_1(value)))
            }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_mul_t_uint64(x, y) -> product
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function cleanup_t_rational_21000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_21000_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_21000_by_1(value)))
            }
            function checked_add_t_uint64(x, y) -> sum
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            /// @ast-id 364 @src 12:6557:6677  "function minimumGasLimit(uint64 _byteCount) public pure returns (uint64) {..."
            function fun_minimumGasLimit_364(var__byteCount_352) -> var__355
            {
                /// @src 12:6622:6628  "uint64"
                let zero_t_uint64_21 := zero_value_for_split_t_uint64()
                var__355 := zero_t_uint64_21
                /// @src 12:6647:6657  "_byteCount"
                let _22 := var__byteCount_352
                let expr_357 := _22
                /// @src 12:6660:6662  "16"
                let expr_358 := 0x10
                /// @src 12:6647:6662  "_byteCount * 16"
                let expr_359 := checked_mul_t_uint64(expr_357, convert_t_rational_16_by_1_to_t_uint64(expr_358))
                /// @src 12:6665:6670  "21000"
                let expr_360 := 0x5208
                /// @src 12:6647:6670  "_byteCount * 16 + 21000"
                let expr_361 := checked_add_t_uint64(expr_359, convert_t_rational_21000_by_1_to_t_uint64(expr_360))
                /// @src 12:6640:6670  "return _byteCount * 16 + 21000"
                var__355 := expr_361
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_rational_100000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_100000_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_100000_by_1(value)))
            }
            /// @src 12:1783:1843  "uint64 internal constant RECEIVE_DEFAULT_GAS_LIMIT = 100_000"
            function constant_RECEIVE_DEFAULT_GAS_LIMIT_171() -> ret
            {
                /// @src 12:1836:1843  "100_000"
                let expr_170 := 0x0186a0
                let _23 := convert_t_rational_100000_by_1_to_t_uint64(expr_170)
                ret := _23
            }
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr)
            { }
            function copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(0)
                store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(add(memPtr, 32))
            }
            function convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470()
            }
            /// @ast-id 382 @src 12:7110:7240  "receive() external payable {..."
            function fun__382()
            {
                /// @src 12:7166:7176  "msg.sender"
                let expr_370 := caller()
                /// @src 12:7178:7187  "msg.value"
                let expr_372 := callvalue()
                /// @src 12:7189:7214  "RECEIVE_DEFAULT_GAS_LIMIT"
                let expr_373 := constant_RECEIVE_DEFAULT_GAS_LIMIT_171()
                /// @src 12:7216:7221  "false"
                let expr_374 := 0x00
                /// @src 12:7223:7232  "bytes(\"\")"
                let expr_378_mpos := convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr()
                fun_depositTransaction_768(expr_370, expr_372, expr_373, expr_374, expr_378_mpos)
            }
            /// @ast-id 387 @src 12:7452:7529  "function donateETH() external payable {..."
            function fun_donateETH_387()
            { }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function extract_from_storage_value_offset_0t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_bool(sload(slot))
            }
            function store_literal_in_memory_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: paused")
            }
            function abi_encode_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)
                store_literal_in_memory_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 248 @src 12:4694:4797  "modifier whenNotPaused() {..."
            function modifier_whenNotPaused_415(var__tx_404_mpos, var__l2OutputIndex_406, var__outputRootProof_409_offset, var__withdrawalProof_412_offset, var__withdrawalProof_412_length)
            {
                /// @src 12:4737:4743  "paused"
                let _24 := read_from_storage_split_offset_0_t_bool(0x35)
                let expr_240 := _24
                /// @src 12:4747:4752  "false"
                let expr_241 := 0x00
                /// @src 12:4737:4752  "paused == false"
                let expr_242 := eq(cleanup_t_bool(expr_240), cleanup_t_bool(expr_241))
                /// @src 12:4729:4779  "require(paused == false, \"OptimismPortal: paused\")"
                require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(expr_242)
                /// @src 12:4789:4790  "_"
                fun_proveWithdrawalTransaction_532_inner(var__tx_404_mpos, var__l2OutputIndex_406, var__outputRootProof_409_offset, var__withdrawalProof_412_offset, var__withdrawalProof_412_length)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function read_from_memoryt_address(ptr) -> returnValue
            {
                let value := cleanup_t_address(mload(ptr))
                returnValue := value
            }
            function convert_t_contract$_OptimismPortal_$804_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function store_literal_in_memory_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: you cannot send ")
                mstore(add(memPtr, 32), "messages to the portal contract")
            }
            function abi_encode_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 63)
                store_literal_in_memory_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()
            { revert(0, 0) }
            function shift_left_224(value) -> newValue
            { newValue := shl(224, value) }
            function abi_decode_t_bytes32_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_bytes32(value)
            }
            function validator_revert_t_uint128(value)
            {
                if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint128_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_uint128(value)
            }
            function abi_decode_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(headStart, end) -> value
            {
                if slt(sub(end, headStart), 0x60)
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                value := allocate_memory(0x60)
                {
                    let offset := 0
                    mstore(add(value, 0x00), abi_decode_t_bytes32_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 32
                    mstore(add(value, 0x20), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 64
                    mstore(add(value, 0x40), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))
                }
            }
            function abi_decode_tuple_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 96)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function revert_forward_1()
            {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }
            function read_from_memoryt_bytes32(ptr) -> returnValue
            {
                let value := cleanup_t_bytes32(mload(ptr))
                returnValue := value
            }
            function abi_decode_t_struct$_OutputRootProof_$3212_memory_ptr(headStart, end) -> value
            {
                if slt(sub(end, headStart), 0x80)
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                value := allocate_memory(0x80)
                {
                    let offset := 0
                    mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))
                }
                {
                    let offset := 32
                    mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))
                }
                {
                    let offset := 64
                    mstore(add(value, 0x40), abi_decode_t_bytes32(add(headStart, offset), end))
                }
                {
                    let offset := 96
                    mstore(add(value, 0x60), abi_decode_t_bytes32(add(headStart, offset), end))
                }
            }
            function convert_t_struct$_OutputRootProof_$3212_calldata_ptr_to_t_struct$_OutputRootProof_$3212_memory_ptr(value) -> converted
            {
                converted := abi_decode_t_struct$_OutputRootProof_$3212_memory_ptr(value, calldatasize())
            }
            function store_literal_in_memory_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: invalid output r")
                mstore(add(memPtr, 32), "oot proof")
            }
            function abi_encode_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)
                store_literal_in_memory_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function write_to_memory_t_bytes32(memPtr, value)
            {
                mstore(memPtr, cleanup_t_bytes32(value))
            }
            function write_to_memory_t_uint128(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint128(value))
            }
            function allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_memory_ptr() -> memPtr
            { memPtr := allocate_memory(96) }
            function read_from_storage_reference_type_t_struct$_ProvenWithdrawal_$163_memory_ptr(slot) -> value
            {
                value := allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_memory_ptr()
                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))
                    write_to_memory_t_bytes32(add(value, 0), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 32), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 64), memberValue_0)
                }
            }
            function convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(value) -> converted
            {
                converted := read_from_storage_reference_type_t_struct$_ProvenWithdrawal_$163_memory_ptr(value)
            }
            function read_from_memoryt_uint128(ptr) -> returnValue
            {
                let value := cleanup_t_uint128(mload(ptr))
                returnValue := value
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_0_by_1_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_uint128_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint128(value)))
            }
            function abi_encode_t_uint128_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, convert_t_uint128_to_t_uint256(value))
            }
            function abi_encode_tuple_t_uint128__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint128_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function store_literal_in_memory_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: withdrawal hash ")
                mstore(add(memPtr, 32), "has already been proven")
            }
            function abi_encode_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            function array_dataslot_t_bytes_memory_ptr(ptr) -> data
            {
                data := ptr
                data := add(ptr, 0x20)
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            }
            function read_from_calldatat_bytes32(ptr) -> returnValue
            {
                let value := calldataload(ptr)
                validator_revert_t_bytes32(value)
                returnValue := value
            }
            function store_literal_in_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2(memPtr)
            {
                mstore(add(memPtr, 0), 0x0100000000000000000000000000000000000000000000000000000000000000)
            }
            function copy_literal_to_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2(add(memPtr, 32))
            }
            function convert_t_stringliteral_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2_to_t_bytes_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2()
            }
            function array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := mul(length, 0x20)
                size := add(size, 0x20)
            }
            function abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array
            {
                array := allocate_memory(array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length))
                let dst := array
                mstore(array, length)
                dst := add(array, 0x20)
                let srcEnd := add(offset, mul(length, 0x20))
                if gt(srcEnd, end)
                {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
                for { let src := offset }
                lt(src, srcEnd)
                { src := add(src, 0x20) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff)
                    {
                        revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()
                    }
                    let elementPos := add(offset, innerOffset)
                    mstore(dst, abi_decode_t_bytes_memory_ptr(elementPos, end))
                    dst := add(dst, 0x20)
                }
            }
            function convert_array_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value, length) -> converted
            {
                converted := abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value, length, calldatasize())
            }
            function store_literal_in_memory_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: invalid withdraw")
                mstore(add(memPtr, 32), "al inclusion proof")
            }
            function abi_encode_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_uint256_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint256(value)))
            }
            function allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_storage_ptr() -> memPtr
            { memPtr := allocate_memory(96) }
            function panic_error_0x00()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function prepare_store_t_bytes32(value) -> ret
            {
                ret := shift_right_0_unsigned(value)
            }
            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
            {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }
            function update_byte_slice_16_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint128_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }
            function prepare_store_t_uint128(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }
            function shift_left_128(value) -> newValue
            { newValue := shl(128, value) }
            function update_byte_slice_16_shift_16(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_16t_uint128_to_t_uint128(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_16(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }
            function copy_struct_to_storage_from_t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value)
            {
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)
                    let memberValue_0 := read_from_memoryt_bytes32(memberSrcPtr)
                    update_storage_value_offset_0t_bytes32_to_t_bytes32(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 32)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 64)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_16t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
            }
            function update_storage_value_offset_0t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value_0)
            {
                copy_struct_to_storage_from_t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value_0)
            }
            /// @src 12:8377:12215  "function proveWithdrawalTransaction(..."
            function fun_proveWithdrawalTransaction_532_inner(var__tx_404_mpos, var__l2OutputIndex_406, var__outputRootProof_409_offset, var__withdrawalProof_412_offset, var__withdrawalProof_412_length)
            {
                /// @src 12:8880:8883  "_tx"
                let _25_mpos := var__tx_404_mpos
                let expr_418_mpos := _25_mpos
                /// @src 12:8880:8890  "_tx.target"
                let _26 := add(expr_418_mpos, 64)
                let _27 := read_from_memoryt_address(_26)
                let expr_419 := _27
                /// @src 12:8902:8906  "this"
                let expr_422_address := address()
                /// @src 12:8894:8907  "address(this)"
                let expr_423 := convert_t_contract$_OptimismPortal_$804_to_t_address(expr_422_address)
                /// @src 12:8880:8907  "_tx.target != address(this)"
                let expr_424 := iszero(eq(cleanup_t_address(expr_419), cleanup_t_address(expr_423)))
                /// @src 12:8859:8996  "require(..."
                require_helper_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(expr_424)
                /// @src 12:9194:9203  "L2_ORACLE"
                let _28_address := loadimmutable("175")
                let expr_430_address := _28_address
                /// @src 12:9194:9215  "L2_ORACLE.getL2Output"
                let expr_431_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_430_address)
                let expr_431_functionSelector := 0xa25ae557
                /// @src 12:9216:9230  "_l2OutputIndex"
                let _29 := var__l2OutputIndex_406
                let expr_432 := _29
                /// @src 12:9194:9231  "L2_ORACLE.getL2Output(_l2OutputIndex)"
                let _30 := allocate_unbounded()
                mstore(_30, shift_left_224(expr_431_functionSelector))
                let _31 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(add(_30, 4), expr_432)
                let _32 := staticcall(gas(), expr_431_address, _30, sub(_31, _30), _30, 96)
                if iszero(_32) { revert_forward_1() }
                let expr_433_mpos
                if _32
                {
                    let _33 := 96
                    if gt(_33, returndatasize()) { _33 := returndatasize() }
                    finalize_allocation(_30, _33)
                    expr_433_mpos := abi_decode_tuple_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(_30, add(_30, _33))
                }
                /// @src 12:9194:9242  "L2_ORACLE.getL2Output(_l2OutputIndex).outputRoot"
                let _34 := add(expr_433_mpos, 0)
                let _35 := read_from_memoryt_bytes32(_34)
                let expr_434 := _35
                /// @src 12:9173:9242  "bytes32 outputRoot = L2_ORACLE.getL2Output(_l2OutputIndex).outputRoot"
                let var_outputRoot_429 := expr_434
                /// @src 12:9362:9372  "outputRoot"
                let _36 := var_outputRoot_429
                let expr_437 := _36
                /// @src 12:9376:9383  "Hashing"
                let expr_438_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:9404:9420  "_outputRootProof"
                let _37_offset := var__outputRootProof_409_offset
                let expr_440_offset := _37_offset
                /// @src 12:9376:9421  "Hashing.hashOutputRootProof(_outputRootProof)"
                let _38_mpos := convert_t_struct$_OutputRootProof_$3212_calldata_ptr_to_t_struct$_OutputRootProof_$3212_memory_ptr(expr_440_offset)
                let expr_441 := fun_hashOutputRootProof_3122(_38_mpos)
                /// @src 12:9362:9421  "outputRoot == Hashing.hashOutputRootProof(_outputRootProof)"
                let expr_442 := eq(cleanup_t_bytes32(expr_437), cleanup_t_bytes32(expr_441))
                /// @src 12:9341:9488  "require(..."
                require_helper_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(expr_442)
                /// @src 12:9624:9631  "Hashing"
                let expr_448_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:9647:9650  "_tx"
                let _39_mpos := var__tx_404_mpos
                let expr_450_mpos := _39_mpos
                /// @src 12:9624:9651  "Hashing.hashWithdrawal(_tx)"
                let expr_451 := fun_hashWithdrawal_3098(expr_450_mpos)
                /// @src 12:9599:9651  "bytes32 withdrawalHash = Hashing.hashWithdrawal(_tx)"
                let var_withdrawalHash_447 := expr_451
                /// @src 12:9704:9721  "provenWithdrawals"
                let _40 := 0x34
                let expr_456 := _40
                /// @src 12:9722:9736  "withdrawalHash"
                let _41 := var_withdrawalHash_447
                let expr_457 := _41
                /// @src 12:9704:9737  "provenWithdrawals[withdrawalHash]"
                let _42 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_456, expr_457)
                let _43_slot := _42
                let expr_458_slot := _43_slot
                /// @src 12:9661:9737  "ProvenWithdrawal memory provenWithdrawal = provenWithdrawals[withdrawalHash]"
                let var_provenWithdrawal_455_mpos := convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(expr_458_slot)
                /// @src 12:10291:10307  "provenWithdrawal"
                let _44_mpos := var_provenWithdrawal_455_mpos
                let expr_461_mpos := _44_mpos
                /// @src 12:10291:10317  "provenWithdrawal.timestamp"
                let _45 := add(expr_461_mpos, 32)
                let _46 := read_from_memoryt_uint128(_45)
                let expr_462 := _46
                /// @src 12:10321:10322  "0"
                let expr_463 := 0x00
                /// @src 12:10291:10322  "provenWithdrawal.timestamp == 0"
                let expr_464 := eq(cleanup_t_uint128(expr_462), convert_t_rational_0_by_1_to_t_uint128(expr_463))
                /// @src 12:10291:10453  "provenWithdrawal.timestamp == 0 ||..."
                let expr_474 := expr_464
                if iszero(expr_474)
                {
                    /// @src 12:10342:10351  "L2_ORACLE"
                    let _47_address := loadimmutable("175")
                    let expr_465_address := _47_address
                    /// @src 12:10342:10363  "L2_ORACLE.getL2Output"
                    let expr_466_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_465_address)
                    let expr_466_functionSelector := 0xa25ae557
                    /// @src 12:10364:10380  "provenWithdrawal"
                    let _48_mpos := var_provenWithdrawal_455_mpos
                    let expr_467_mpos := _48_mpos
                    /// @src 12:10364:10394  "provenWithdrawal.l2OutputIndex"
                    let _49 := add(expr_467_mpos, 64)
                    let _50 := read_from_memoryt_uint128(_49)
                    let expr_468 := _50
                    /// @src 12:10342:10395  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex)"
                    let _51 := allocate_unbounded()
                    mstore(_51, shift_left_224(expr_466_functionSelector))
                    let _52 := abi_encode_tuple_t_uint128__to_t_uint256__fromStack(add(_51, 4), expr_468)
                    let _53 := staticcall(gas(), expr_466_address, _51, sub(_52, _51), _51, 96)
                    if iszero(_53) { revert_forward_1() }
                    let expr_469_mpos
                    if _53
                    {
                        let _54 := 96
                        if gt(_54, returndatasize()) { _54 := returndatasize() }
                        finalize_allocation(_51, _54)
                        expr_469_mpos := abi_decode_tuple_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(_51, add(_51, _54))
                    }
                    /// @src 12:10342:10406  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex).outputRoot"
                    let _55 := add(expr_469_mpos, 0)
                    let _56 := read_from_memoryt_bytes32(_55)
                    let expr_470 := _56
                    /// @src 12:10426:10442  "provenWithdrawal"
                    let _57_mpos := var_provenWithdrawal_455_mpos
                    let expr_471_mpos := _57_mpos
                    /// @src 12:10426:10453  "provenWithdrawal.outputRoot"
                    let _58 := add(expr_471_mpos, 0)
                    let _59 := read_from_memoryt_bytes32(_58)
                    let expr_472 := _59
                    /// @src 12:10342:10453  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex).outputRoot !=..."
                    let expr_473 := iszero(eq(cleanup_t_bytes32(expr_470), cleanup_t_bytes32(expr_472)))
                    /// @src 12:10291:10453  "provenWithdrawal.timestamp == 0 ||..."
                    expr_474 := expr_473
                }
                /// @src 12:10270:10534  "require(..."
                require_helper_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(expr_474)
                /// @src 12:10842:10856  "withdrawalHash"
                let _60 := var_withdrawalHash_447
                let expr_483 := _60
                /// @src 12:10882:10883  "0"
                let expr_486 := 0x00
                /// @src 12:10874:10884  "uint256(0)"
                let expr_487 := convert_t_rational_0_by_1_to_t_uint256(expr_486)
                /// @src 12:10814:10961  "abi.encode(..."
                let expr_488_mpos := allocate_unbounded()
                let _61 := add(expr_488_mpos, 0x20)
                let _62 := abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack(_61, expr_483, expr_487)
                mstore(expr_488_mpos, sub(_62, add(expr_488_mpos, 0x20)))
                finalize_allocation(expr_488_mpos, sub(_62, expr_488_mpos))
                /// @src 12:10791:10971  "keccak256(..."
                let expr_489 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_488_mpos), array_length_t_bytes_memory_ptr(expr_488_mpos))
                /// @src 12:10770:10971  "bytes32 storageKey = keccak256(..."
                let var_storageKey_479 := expr_489
                /// @src 12:11324:11340  "SecureMerkleTrie"
                let expr_492_address := linkersymbol("contracts/libraries/trie/SecureMerkleTrie.sol:SecureMerkleTrie")
                /// @src 12:11390:11400  "storageKey"
                let _63 := var_storageKey_479
                let expr_496 := _63
                /// @src 12:11379:11401  "abi.encode(storageKey)"
                let expr_497_mpos := allocate_unbounded()
                let _64 := add(expr_497_mpos, 0x20)
                let _65 := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(_64, expr_496)
                mstore(expr_497_mpos, sub(_65, add(expr_497_mpos, 0x20)))
                finalize_allocation(expr_497_mpos, sub(_65, expr_497_mpos))
                /// @src 12:11444:11460  "_withdrawalProof"
                let _66_offset := var__withdrawalProof_412_offset
                let _66_length := var__withdrawalProof_412_length
                let expr_499_offset := _66_offset
                let expr_499_length := _66_length
                /// @src 12:11478:11494  "_outputRootProof"
                let _67_offset := var__outputRootProof_409_offset
                let expr_500_offset := _67_offset
                /// @src 12:11478:11519  "_outputRootProof.messagePasserStorageRoot"
                let _68 := add(expr_500_offset, 64)
                let expr_501 := read_from_calldatat_bytes32(_68)
                /// @src 12:11324:11533  "SecureMerkleTrie.verifyInclusionProof(..."
                let _69_mpos := convert_t_stringliteral_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2_to_t_bytes_memory_ptr()
                let _70_mpos := convert_array_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_499_offset, expr_499_length)
                let expr_502 := fun_verifyInclusionProof_3280(expr_497_mpos, _69_mpos, _70_mpos, expr_501)
                /// @src 12:11303:11609  "require(..."
                require_helper_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(expr_502)
                /// @src 12:11970:11980  "outputRoot"
                let _71 := var_outputRoot_429
                let expr_510 := _71
                /// @src 12:12013:12028  "block.timestamp"
                let expr_514 := timestamp()
                /// @src 12:12005:12029  "uint128(block.timestamp)"
                let expr_515 := convert_t_uint256_to_t_uint128(expr_514)
                /// @src 12:12066:12080  "_l2OutputIndex"
                let _72 := var__l2OutputIndex_406
                let expr_518 := _72
                /// @src 12:12058:12081  "uint128(_l2OutputIndex)"
                let expr_519 := convert_t_uint256_to_t_uint128(expr_518)
                /// @src 12:11927:12092  "ProvenWithdrawal({..."
                let expr_520_mpos := allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_storage_ptr()
                write_to_memory_t_bytes32(add(expr_520_mpos, 0), expr_510)
                write_to_memory_t_uint128(add(expr_520_mpos, 32), expr_515)
                write_to_memory_t_uint128(add(expr_520_mpos, 64), expr_519)
                /// @src 12:11891:11908  "provenWithdrawals"
                let _73 := 0x34
                let expr_506 := _73
                /// @src 12:11909:11923  "withdrawalHash"
                let _74 := var_withdrawalHash_447
                let expr_507 := _74
                /// @src 12:11891:11924  "provenWithdrawals[withdrawalHash]"
                let _75 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_506, expr_507)
                /// @src 12:11891:12092  "provenWithdrawals[withdrawalHash] = ProvenWithdrawal({..."
                update_storage_value_offset_0t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(_75, expr_520_mpos)
                let _76_slot := _75
                let expr_521_slot := _76_slot
                /// @src 12:12169:12183  "withdrawalHash"
                let _77 := var_withdrawalHash_447
                let expr_524 := _77
                /// @src 12:12185:12188  "_tx"
                let _78_mpos := var__tx_404_mpos
                let expr_525_mpos := _78_mpos
                /// @src 12:12185:12195  "_tx.sender"
                let _79 := add(expr_525_mpos, 32)
                let _80 := read_from_memoryt_address(_79)
                let expr_526 := _80
                /// @src 12:12197:12200  "_tx"
                let _81_mpos := var__tx_404_mpos
                let expr_527_mpos := _81_mpos
                /// @src 12:12197:12207  "_tx.target"
                let _82 := add(expr_527_mpos, 64)
                let _83 := read_from_memoryt_address(_82)
                let expr_528 := _83
                /// @src 12:12152:12208  "WithdrawalProven(withdrawalHash, _tx.sender, _tx.target)"
                let _84 := 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62
                let _85 := convert_t_bytes32_to_t_bytes32(expr_524)
                let _86 := convert_t_address_to_t_address(expr_526)
                let _87 := convert_t_address_to_t_address(expr_528)
                {
                    let _88 := allocate_unbounded()
                    let _89 := abi_encode_tuple__to__fromStack(_88)
                    log4(_88, sub(_89, _88), _84, _85, _86, _87)
                }
            }
            /// @ast-id 532 @src 12:8377:12215  "function proveWithdrawalTransaction(..."
            function fun_proveWithdrawalTransaction_532(var__tx_404_mpos, var__l2OutputIndex_406, var__outputRootProof_409_offset, var__withdrawalProof_412_offset, var__withdrawalProof_412_length)
            {
                modifier_whenNotPaused_415(var__tx_404_mpos, var__l2OutputIndex_406, var__outputRootProof_409_offset, var__withdrawalProof_412_offset, var__withdrawalProof_412_length)
            }
            /// @ast-id 248 @src 12:4694:4797  "modifier whenNotPaused() {..."
            function modifier_whenNotPaused_539(var__tx_536_mpos)
            {
                /// @src 12:4737:4743  "paused"
                let _90 := read_from_storage_split_offset_0_t_bool(0x35)
                let expr_240 := _90
                /// @src 12:4747:4752  "false"
                let expr_241 := 0x00
                /// @src 12:4737:4752  "paused == false"
                let expr_242 := eq(cleanup_t_bool(expr_240), cleanup_t_bool(expr_241))
                /// @src 12:4729:4779  "require(paused == false, \"OptimismPortal: paused\")"
                require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(expr_242)
                /// @src 12:4789:4790  "_"
                fun_finalizeWithdrawalTransaction_677_inner(var__tx_536_mpos)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function extract_from_storage_value_offset_0t_address(slot_value) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_address(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_address(sload(slot))
            }
            function store_literal_in_memory_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: can only trigger")
                mstore(add(memPtr, 32), " one withdrawal per transaction")
            }
            function abi_encode_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 63)
                store_literal_in_memory_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: withdrawal has n")
                mstore(add(memPtr, 32), "ot been proven yet")
            }
            function abi_encode_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function abi_decode_t_uint256_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            function store_literal_in_memory_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: withdrawal times")
                mstore(add(memPtr, 32), "tamp less than L2 Oracle startin")
                mstore(add(memPtr, 64), "g timestamp")
            }
            function abi_encode_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 75)
                store_literal_in_memory_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: proven withdrawa")
                mstore(add(memPtr, 32), "l finalization period has not el")
                mstore(add(memPtr, 64), "apsed")
            }
            function abi_encode_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 69)
                store_literal_in_memory_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: output root prov")
                mstore(add(memPtr, 32), "en is not the same as current ou")
                mstore(add(memPtr, 64), "tput root")
            }
            function abi_encode_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 73)
                store_literal_in_memory_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: output proposal ")
                mstore(add(memPtr, 32), "finalization period has not elap")
                mstore(add(memPtr, 64), "sed")
            }
            function abi_encode_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: withdrawal has a")
                mstore(add(memPtr, 32), "lready been finalized")
            }
            function abi_encode_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function read_from_memoryt_uint256(ptr) -> returnValue
            {
                let value := cleanup_t_uint256(mload(ptr))
                returnValue := value
            }
            function convert_t_rational_1_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_rational_1_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_1_by_1_to_t_uint160(value)
            }
            /// @src 18:974:1031  "address internal constant ESTIMATION_ADDRESS = address(1)"
            function constant_ESTIMATION_ADDRESS_2867() -> ret
            {
                /// @src 18:1029:1030  "1"
                let expr_2865 := 0x01
                /// @src 18:1021:1031  "address(1)"
                let expr_2866 := convert_t_rational_1_by_1_to_t_address(expr_2865)
                let _159 := expr_2866
                ret := _159
            }
            function store_literal_in_memory_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: withdrawal faile")
                mstore(add(memPtr, 32), "d")
            }
            function abi_encode_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)
                store_literal_in_memory_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb_to_t_string_memory_ptr_fromStack(tail)
            }
            /// @src 12:12349:17312  "function finalizeWithdrawalTransaction(Types.WithdrawalTransaction memory _tx)..."
            function fun_finalizeWithdrawalTransaction_677_inner(var__tx_536_mpos)
            {
                /// @src 12:12737:12745  "l2Sender"
                let _91 := read_from_storage_split_offset_0_t_address(0x32)
                let expr_542 := _91
                /// @src 12:12749:12758  "Constants"
                let expr_543_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:12749:12776  "Constants.DEFAULT_L2_SENDER"
                let expr_544 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 12:12737:12776  "l2Sender == Constants.DEFAULT_L2_SENDER"
                let expr_545 := eq(cleanup_t_address(expr_542), cleanup_t_address(expr_544))
                /// @src 12:12716:12865  "require(..."
                require_helper_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(expr_545)
                /// @src 12:12973:12980  "Hashing"
                let expr_551_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:12996:12999  "_tx"
                let _92_mpos := var__tx_536_mpos
                let expr_553_mpos := _92_mpos
                /// @src 12:12973:13000  "Hashing.hashWithdrawal(_tx)"
                let expr_554 := fun_hashWithdrawal_3098(expr_553_mpos)
                /// @src 12:12948:13000  "bytes32 withdrawalHash = Hashing.hashWithdrawal(_tx)"
                let var_withdrawalHash_550 := expr_554
                /// @src 12:13053:13070  "provenWithdrawals"
                let _93 := 0x34
                let expr_559 := _93
                /// @src 12:13071:13085  "withdrawalHash"
                let _94 := var_withdrawalHash_550
                let expr_560 := _94
                /// @src 12:13053:13086  "provenWithdrawals[withdrawalHash]"
                let _95 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_559, expr_560)
                let _96_slot := _95
                let expr_561_slot := _96_slot
                /// @src 12:13010:13086  "ProvenWithdrawal memory provenWithdrawal = provenWithdrawals[withdrawalHash]"
                let var_provenWithdrawal_558_mpos := convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(expr_561_slot)
                /// @src 12:13349:13365  "provenWithdrawal"
                let _97_mpos := var_provenWithdrawal_558_mpos
                let expr_564_mpos := _97_mpos
                /// @src 12:13349:13375  "provenWithdrawal.timestamp"
                let _98 := add(expr_564_mpos, 32)
                let _99 := read_from_memoryt_uint128(_98)
                let expr_565 := _99
                /// @src 12:13379:13380  "0"
                let expr_566 := 0x00
                /// @src 12:13349:13380  "provenWithdrawal.timestamp != 0"
                let expr_567 := iszero(eq(cleanup_t_uint128(expr_565), convert_t_rational_0_by_1_to_t_uint128(expr_566)))
                /// @src 12:13328:13456  "require(..."
                require_helper_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(expr_567)
                /// @src 12:13743:13759  "provenWithdrawal"
                let _100_mpos := var_provenWithdrawal_558_mpos
                let expr_572_mpos := _100_mpos
                /// @src 12:13743:13769  "provenWithdrawal.timestamp"
                let _101 := add(expr_572_mpos, 32)
                let _102 := read_from_memoryt_uint128(_101)
                let expr_573 := _102
                /// @src 12:13773:13782  "L2_ORACLE"
                let _103_address := loadimmutable("175")
                let expr_574_address := _103_address
                /// @src 12:13773:13800  "L2_ORACLE.startingTimestamp"
                let expr_575_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_574_address)
                let expr_575_functionSelector := 0x88786272
                /// @src 12:13773:13802  "L2_ORACLE.startingTimestamp()"
                let _104 := allocate_unbounded()
                mstore(_104, shift_left_224(expr_575_functionSelector))
                let _105 := abi_encode_tuple__to__fromStack(add(_104, 4))
                let _106 := staticcall(gas(), expr_575_address, _104, sub(_105, _104), _104, 32)
                if iszero(_106) { revert_forward_1() }
                let expr_576
                if _106
                {
                    let _107 := 32
                    if gt(_107, returndatasize()) { _107 := returndatasize() }
                    finalize_allocation(_104, _107)
                    expr_576 := abi_decode_tuple_t_uint256_fromMemory(_104, add(_104, _107))
                }
                /// @src 12:13743:13802  "provenWithdrawal.timestamp >= L2_ORACLE.startingTimestamp()"
                let expr_577 := iszero(lt(convert_t_uint128_to_t_uint256(expr_573), cleanup_t_uint256(expr_576)))
                /// @src 12:13722:13903  "require(..."
                require_helper_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(expr_577)
                /// @src 12:14322:14338  "provenWithdrawal"
                let _108_mpos := var_provenWithdrawal_558_mpos
                let expr_583_mpos := _108_mpos
                /// @src 12:14322:14348  "provenWithdrawal.timestamp"
                let _109 := add(expr_583_mpos, 32)
                let _110 := read_from_memoryt_uint128(_109)
                let expr_584 := _110
                /// @src 12:14293:14349  "_isFinalizationPeriodElapsed(provenWithdrawal.timestamp)"
                let _111 := convert_t_uint128_to_t_uint256(expr_584)
                let expr_585 := fun__isFinalizationPeriodElapsed_803(_111)
                /// @src 12:14272:14444  "require(..."
                require_helper_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(expr_585)
                /// @src 12:14654:14663  "L2_ORACLE"
                let _112_address := loadimmutable("175")
                let expr_594_address := _112_address
                /// @src 12:14654:14675  "L2_ORACLE.getL2Output"
                let expr_595_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_594_address)
                let expr_595_functionSelector := 0xa25ae557
                /// @src 12:14689:14705  "provenWithdrawal"
                let _113_mpos := var_provenWithdrawal_558_mpos
                let expr_596_mpos := _113_mpos
                /// @src 12:14689:14719  "provenWithdrawal.l2OutputIndex"
                let _114 := add(expr_596_mpos, 64)
                let _115 := read_from_memoryt_uint128(_114)
                let expr_597 := _115
                /// @src 12:14654:14729  "L2_ORACLE.getL2Output(..."
                let _116 := allocate_unbounded()
                mstore(_116, shift_left_224(expr_595_functionSelector))
                let _117 := abi_encode_tuple_t_uint128__to_t_uint256__fromStack(add(_116, 4), expr_597)
                let _118 := staticcall(gas(), expr_595_address, _116, sub(_117, _116), _116, 96)
                if iszero(_118) { revert_forward_1() }
                let expr_598_mpos
                if _118
                {
                    let _119 := 96
                    if gt(_119, returndatasize()) { _119 := returndatasize() }
                    finalize_allocation(_116, _119)
                    expr_598_mpos := abi_decode_tuple_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(_116, add(_116, _119))
                }
                /// @src 12:14615:14729  "Types.OutputProposal memory proposal = L2_ORACLE.getL2Output(..."
                let var_proposal_593_mpos := expr_598_mpos
                /// @src 12:15017:15025  "proposal"
                let _120_mpos := var_proposal_593_mpos
                let expr_601_mpos := _120_mpos
                /// @src 12:15017:15036  "proposal.outputRoot"
                let _121 := add(expr_601_mpos, 0)
                let _122 := read_from_memoryt_bytes32(_121)
                let expr_602 := _122
                /// @src 12:15040:15056  "provenWithdrawal"
                let _123_mpos := var_provenWithdrawal_558_mpos
                let expr_603_mpos := _123_mpos
                /// @src 12:15040:15067  "provenWithdrawal.outputRoot"
                let _124 := add(expr_603_mpos, 0)
                let _125 := read_from_memoryt_bytes32(_124)
                let expr_604 := _125
                /// @src 12:15017:15067  "proposal.outputRoot == provenWithdrawal.outputRoot"
                let expr_605 := eq(cleanup_t_bytes32(expr_602), cleanup_t_bytes32(expr_604))
                /// @src 12:14996:15166  "require(..."
                require_helper_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(expr_605)
                /// @src 12:15294:15302  "proposal"
                let _126_mpos := var_proposal_593_mpos
                let expr_611_mpos := _126_mpos
                /// @src 12:15294:15312  "proposal.timestamp"
                let _127 := add(expr_611_mpos, 32)
                let _128 := read_from_memoryt_uint128(_127)
                let expr_612 := _128
                /// @src 12:15265:15313  "_isFinalizationPeriodElapsed(proposal.timestamp)"
                let _129 := convert_t_uint128_to_t_uint256(expr_612)
                let expr_613 := fun__isFinalizationPeriodElapsed_803(_129)
                /// @src 12:15244:15406  "require(..."
                require_helper_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(expr_613)
                /// @src 12:15535:15555  "finalizedWithdrawals"
                let _130 := 0x33
                let expr_618 := _130
                /// @src 12:15556:15570  "withdrawalHash"
                let _131 := var_withdrawalHash_550
                let expr_619 := _131
                /// @src 12:15535:15571  "finalizedWithdrawals[withdrawalHash]"
                let _132 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_618, expr_619)
                let _133 := read_from_storage_split_offset_0_t_bool(_132)
                let expr_620 := _133
                /// @src 12:15575:15580  "false"
                let expr_621 := 0x00
                /// @src 12:15535:15580  "finalizedWithdrawals[withdrawalHash] == false"
                let expr_622 := eq(cleanup_t_bool(expr_620), cleanup_t_bool(expr_621))
                /// @src 12:15514:15659  "require(..."
                require_helper_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(expr_622)
                /// @src 12:15778:15782  "true"
                let expr_629 := 0x01
                /// @src 12:15739:15759  "finalizedWithdrawals"
                let _134 := 0x33
                let expr_626 := _134
                /// @src 12:15760:15774  "withdrawalHash"
                let _135 := var_withdrawalHash_550
                let expr_627 := _135
                /// @src 12:15739:15775  "finalizedWithdrawals[withdrawalHash]"
                let _136 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_626, expr_627)
                /// @src 12:15739:15782  "finalizedWithdrawals[withdrawalHash] = true"
                update_storage_value_offset_0t_bool_to_t_bool(_136, expr_629)
                let expr_630 := expr_629
                /// @src 12:15887:15890  "_tx"
                let _137_mpos := var__tx_536_mpos
                let expr_633_mpos := _137_mpos
                /// @src 12:15887:15897  "_tx.sender"
                let _138 := add(expr_633_mpos, 32)
                let _139 := read_from_memoryt_address(_138)
                let expr_634 := _139
                /// @src 12:15876:15897  "l2Sender = _tx.sender"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_634)
                let expr_635 := expr_634
                /// @src 12:16532:16540  "SafeCall"
                let expr_639_address := linkersymbol("contracts/libraries/SafeCall.sol:SafeCall")
                /// @src 12:16556:16559  "_tx"
                let _140_mpos := var__tx_536_mpos
                let expr_641_mpos := _140_mpos
                /// @src 12:16556:16566  "_tx.target"
                let _141 := add(expr_641_mpos, 64)
                let _142 := read_from_memoryt_address(_141)
                let expr_642 := _142
                /// @src 12:16568:16571  "_tx"
                let _143_mpos := var__tx_536_mpos
                let expr_643_mpos := _143_mpos
                /// @src 12:16568:16580  "_tx.gasLimit"
                let _144 := add(expr_643_mpos, 128)
                let _145 := read_from_memoryt_uint256(_144)
                let expr_644 := _145
                /// @src 12:16582:16585  "_tx"
                let _146_mpos := var__tx_536_mpos
                let expr_645_mpos := _146_mpos
                /// @src 12:16582:16591  "_tx.value"
                let _147 := add(expr_645_mpos, 96)
                let _148 := read_from_memoryt_uint256(_147)
                let expr_646 := _148
                /// @src 12:16593:16596  "_tx"
                let _149_mpos := var__tx_536_mpos
                let expr_647_mpos := _149_mpos
                /// @src 12:16593:16601  "_tx.data"
                let _150 := add(expr_647_mpos, 160)
                let _151_mpos := mload(_150)
                let expr_648_mpos := _151_mpos
                /// @src 12:16532:16602  "SafeCall.callWithMinGas(_tx.target, _tx.gasLimit, _tx.value, _tx.data)"
                let expr_649 := fun_callWithMinGas_3192(expr_642, expr_644, expr_646, expr_648_mpos)
                /// @src 12:16517:16602  "bool success = SafeCall.callWithMinGas(_tx.target, _tx.gasLimit, _tx.value, _tx.data)"
                let var_success_638 := expr_649
                /// @src 12:16681:16690  "Constants"
                let expr_652_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:16681:16708  "Constants.DEFAULT_L2_SENDER"
                let expr_653 := constant_DEFAULT_L2_SENDER_2871()
                /// @src 12:16670:16708  "l2Sender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_653)
                let expr_654 := expr_653
                /// @src 12:16887:16901  "withdrawalHash"
                let _152 := var_withdrawalHash_550
                let expr_657 := _152
                /// @src 12:16903:16910  "success"
                let _153 := var_success_638
                let expr_658 := _153
                /// @src 12:16867:16911  "WithdrawalFinalized(withdrawalHash, success)"
                let _154 := 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b
                let _155 := convert_t_bytes32_to_t_bytes32(expr_657)
                {
                    let _156 := allocate_unbounded()
                    let _157 := abi_encode_tuple_t_bool__to_t_bool__fromStack(_156, expr_658)
                    log2(_156, sub(_157, _156), _154, _155)
                }
                /// @src 12:17175:17182  "success"
                let _158 := var_success_638
                let expr_661 := _158
                /// @src 12:17186:17191  "false"
                let expr_662 := 0x00
                /// @src 12:17175:17191  "success == false"
                let expr_663 := eq(cleanup_t_bool(expr_661), cleanup_t_bool(expr_662))
                /// @src 12:17175:17236  "success == false && tx.origin == Constants.ESTIMATION_ADDRESS"
                let expr_669 := expr_663
                if expr_669
                {
                    /// @src 12:17195:17204  "tx.origin"
                    let expr_665 := origin()
                    /// @src 12:17208:17217  "Constants"
                    let expr_666_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 12:17208:17236  "Constants.ESTIMATION_ADDRESS"
                    let expr_667 := constant_ESTIMATION_ADDRESS_2867()
                    /// @src 12:17195:17236  "tx.origin == Constants.ESTIMATION_ADDRESS"
                    let expr_668 := eq(cleanup_t_address(expr_665), cleanup_t_address(expr_667))
                    /// @src 12:17175:17236  "success == false && tx.origin == Constants.ESTIMATION_ADDRESS"
                    expr_669 := expr_668
                }
                /// @src 12:17171:17306  "if (success == false && tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                if expr_669
                {
                    /// @src 12:17252:17295  "revert(\"OptimismPortal: withdrawal failed\")"
                    {
                        let _160 := allocate_unbounded()
                        mstore(_160, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                        let _161 := abi_encode_tuple_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb__to_t_string_memory_ptr__fromStack(add(_160, 4))
                        revert(_160, sub(_161, _160))
                    }
                }
            }
            /// @ast-id 677 @src 12:12349:17312  "function finalizeWithdrawalTransaction(Types.WithdrawalTransaction memory _tx)..."
            function fun_finalizeWithdrawalTransaction_677(var__tx_536_mpos)
            {
                modifier_whenNotPaused_539(var__tx_536_mpos)
            }
            /// @ast-id 2154 @src 13:3382:3660  "modifier metered(uint64 _amount) {..."
            function modifier_metered_692(var__to_680, var__value_682, var__gasLimit_684, var__isCreation_686, var__data_688_mpos)
            {
                /// @src 12:18254:18263  "_gasLimit"
                let _162 := var__gasLimit_684
                let expr_691 := _162
                let _163 := expr_691
                let var__amount_2140 := _163
                /// @src 13:3514:3523  "gasleft()"
                let expr_2145 := gas()
                /// @src 13:3493:3523  "uint256 initialGas = gasleft()"
                let var_initialGas_2143 := expr_2145
                /// @src 13:3574:3575  "_"
                fun_depositTransaction_768_inner(var__to_680, var__value_682, var__gasLimit_684, var__isCreation_686, var__data_688_mpos)
                /// @src 13:3633:3640  "_amount"
                let _164 := var__amount_2140
                let expr_2149 := _164
                /// @src 13:3642:3652  "initialGas"
                let _165 := var_initialGas_2143
                let expr_2150 := _165
                fun__metered_2417(expr_2149, expr_2150)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }
            function store_literal_in_memory_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: must send to add")
                mstore(add(memPtr, 32), "ress(0) when creating a contract")
            }
            function abi_encode_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 64)
                store_literal_in_memory_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_uint256_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
            }
            function store_literal_in_memory_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: gas limit too sm")
                mstore(add(memPtr, 32), "all")
            }
            function abi_encode_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)
                store_literal_in_memory_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_120000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_120000_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_120000_by_1(value)))
            }
            function store_literal_in_memory_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b(memPtr)
            {
                mstore(add(memPtr, 0), "OptimismPortal: data too large")
            }
            function abi_encode_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)
                store_literal_in_memory_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function leftAlign_t_uint256(value) -> aligned
            { aligned := value }
            function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))
            }
            function shift_left_192(value) -> newValue
            { newValue := shl(192, value) }
            function leftAlign_t_uint64(value) -> aligned
            {
                aligned := shift_left_192(value)
            }
            function abi_encode_t_uint64_to_t_uint64_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_uint64(cleanup_t_uint64(value)))
            }
            function shift_left_248(value) -> newValue
            { newValue := shl(248, value) }
            function leftAlign_t_uint8(value) -> aligned
            {
                aligned := shift_left_248(value)
            }
            function leftAlign_t_bool(value) -> aligned
            {
                aligned := leftAlign_t_uint8(value)
            }
            function abi_encode_t_bool_to_t_bool_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_bool(cleanup_t_bool(value)))
            }
            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function abi_encode_tuple_packed_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2, value3, value4) -> end
            {
                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value0, pos)
                pos := add(pos, 32)
                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1, pos)
                pos := add(pos, 32)
                abi_encode_t_uint64_to_t_uint64_nonPadded_inplace_fromStack(value2, pos)
                pos := add(pos, 8)
                abi_encode_t_bool_to_t_bool_nonPadded_inplace_fromStack(value3, pos)
                pos := add(pos, 1)
                pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value4, pos)
                end := pos
            }
            /// @src 12:1627:1672  "uint256 internal constant DEPOSIT_VERSION = 0"
            function constant_DEPOSIT_VERSION_167() -> ret
            {
                /// @src 12:1671:1672  "0"
                let expr_166 := 0x00
                let _179 := convert_t_rational_0_by_1_to_t_uint256(expr_166)
                ret := _179
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0, tail)
            }
            /// @src 12:18072:20165  "function depositTransaction(..."
            function fun_depositTransaction_768_inner(var__to_680, var__value_682, var__gasLimit_684, var__isCreation_686, var__data_688_mpos)
            {
                /// @src 12:18404:18415  "_isCreation"
                let _166 := var__isCreation_686
                let expr_694 := _166
                /// @src 12:18400:18582  "if (_isCreation) {..."
                if expr_694
                {
                    /// @src 12:18456:18459  "_to"
                    let _167 := var__to_680
                    let expr_696 := _167
                    /// @src 12:18471:18472  "0"
                    let expr_699 := 0x00
                    /// @src 12:18463:18473  "address(0)"
                    let expr_700 := convert_t_rational_0_by_1_to_t_address(expr_699)
                    /// @src 12:18456:18473  "_to == address(0)"
                    let expr_701 := eq(cleanup_t_address(expr_696), cleanup_t_address(expr_700))
                    /// @src 12:18431:18571  "require(..."
                    require_helper_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(expr_701)
                }
                /// @src 12:18750:18759  "_gasLimit"
                let _168 := var__gasLimit_684
                let expr_708 := _168
                /// @src 12:18786:18791  "_data"
                let _169_mpos := var__data_688_mpos
                let expr_712_mpos := _169_mpos
                /// @src 12:18786:18798  "_data.length"
                let expr_713 := array_length_t_bytes_memory_ptr(expr_712_mpos)
                /// @src 12:18779:18799  "uint64(_data.length)"
                let expr_714 := convert_t_uint256_to_t_uint64(expr_713)
                /// @src 12:18763:18800  "minimumGasLimit(uint64(_data.length))"
                let expr_715 := fun_minimumGasLimit_364(expr_714)
                /// @src 12:18750:18800  "_gasLimit >= minimumGasLimit(uint64(_data.length))"
                let expr_716 := iszero(lt(cleanup_t_uint64(expr_708), cleanup_t_uint64(expr_715)))
                /// @src 12:18729:18861  "require(..."
                require_helper_t_stringliteral_0a0c886a0c5bbb9f3e1be0cff5d8eb64eb65c2a072ac278a98f80049a2d6c3f8(expr_716)
                /// @src 12:19240:19245  "_data"
                let _170_mpos := var__data_688_mpos
                let expr_721_mpos := _170_mpos
                /// @src 12:19240:19252  "_data.length"
                let expr_722 := array_length_t_bytes_memory_ptr(expr_721_mpos)
                /// @src 12:19256:19263  "120_000"
                let expr_723 := 0x01d4c0
                /// @src 12:19240:19263  "_data.length <= 120_000"
                let expr_724 := iszero(gt(cleanup_t_uint256(expr_722), convert_t_rational_120000_by_1_to_t_uint256(expr_723)))
                /// @src 12:19232:19298  "require(_data.length <= 120_000, \"OptimismPortal: data too large\")"
                require_helper_t_stringliteral_ed1d4c6d62337124a330de9c9e42dcf809033e5ae909544279fbaee2e389020b(expr_724)
                /// @src 12:19404:19414  "msg.sender"
                let expr_731 := caller()
                /// @src 12:19389:19414  "address from = msg.sender"
                let var_from_729 := expr_731
                /// @src 12:19428:19438  "msg.sender"
                let expr_734 := caller()
                /// @src 12:19442:19451  "tx.origin"
                let expr_736 := origin()
                /// @src 12:19428:19451  "msg.sender != tx.origin"
                let expr_737 := iszero(eq(cleanup_t_address(expr_734), cleanup_t_address(expr_736)))
                /// @src 12:19424:19532  "if (msg.sender != tx.origin) {..."
                if expr_737
                {
                    /// @src 12:19474:19492  "AddressAliasHelper"
                    let expr_739_address := linkersymbol("contracts/vendor/AddressAliasHelper.sol:AddressAliasHelper")
                    /// @src 12:19510:19520  "msg.sender"
                    let expr_742 := caller()
                    /// @src 12:19474:19521  "AddressAliasHelper.applyL1ToL2Alias(msg.sender)"
                    let expr_743 := fun_applyL1ToL2Alias_3354(expr_742)
                    /// @src 12:19467:19521  "from = AddressAliasHelper.applyL1ToL2Alias(msg.sender)"
                    var_from_729 := expr_743
                    let expr_744 := expr_743
                }
                /// @src 12:19845:19854  "msg.value"
                let expr_753 := callvalue()
                /// @src 12:19868:19874  "_value"
                let _171 := var__value_682
                let expr_754 := _171
                /// @src 12:19888:19897  "_gasLimit"
                let _172 := var__gasLimit_684
                let expr_755 := _172
                /// @src 12:19911:19922  "_isCreation"
                let _173 := var__isCreation_686
                let expr_756 := _173
                /// @src 12:19936:19941  "_data"
                let _174_mpos := var__data_688_mpos
                let expr_757_mpos := _174_mpos
                /// @src 12:19815:19951  "abi.encodePacked(..."
                let expr_758_mpos := allocate_unbounded()
                let _175 := add(expr_758_mpos, 0x20)
                let _176 := abi_encode_tuple_packed_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__nonPadded_inplace_fromStack(_175, expr_753, expr_754, expr_755, expr_756, expr_757_mpos)
                mstore(expr_758_mpos, sub(_176, add(expr_758_mpos, 0x20)))
                finalize_allocation(expr_758_mpos, sub(_176, expr_758_mpos))
                /// @src 12:19789:19951  "bytes memory opaqueData = abi.encodePacked(..."
                let var_opaqueData_749_mpos := expr_758_mpos
                /// @src 12:20119:20123  "from"
                let _177 := var_from_729
                let expr_761 := _177
                /// @src 12:20125:20128  "_to"
                let _178 := var__to_680
                let expr_762 := _178
                /// @src 12:20130:20145  "DEPOSIT_VERSION"
                let expr_763 := constant_DEPOSIT_VERSION_167()
                /// @src 12:20147:20157  "opaqueData"
                let _180_mpos := var_opaqueData_749_mpos
                let expr_764_mpos := _180_mpos
                /// @src 12:20098:20158  "TransactionDeposited(from, _to, DEPOSIT_VERSION, opaqueData)"
                let _181 := 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32
                let _182 := convert_t_address_to_t_address(expr_761)
                let _183 := convert_t_address_to_t_address(expr_762)
                let _184 := convert_t_uint256_to_t_uint256(expr_763)
                {
                    let _185 := allocate_unbounded()
                    let _186 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_185, expr_764_mpos)
                    log4(_185, sub(_186, _185), _181, _182, _183, _184)
                }
            }
            /// @ast-id 768 @src 12:18072:20165  "function depositTransaction(..."
            function fun_depositTransaction_768(var__to_680, var__value_682, var__gasLimit_684, var__isCreation_686, var__data_688_mpos)
            {
                modifier_metered_692(var__to_680, var__value_682, var__gasLimit_684, var__isCreation_686, var__data_688_mpos)
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            /// @ast-id 785 @src 12:20473:20654  "function isOutputFinalized(uint256 _l2OutputIndex) external view returns (bool) {..."
            function fun_isOutputFinalized_785(var__l2OutputIndex_771) -> var__774
            {
                /// @src 12:20547:20551  "bool"
                let zero_t_bool_187 := zero_value_for_split_t_bool()
                var__774 := zero_t_bool_187
                /// @src 12:20599:20608  "L2_ORACLE"
                let _188_address := loadimmutable("175")
                let expr_777_address := _188_address
                /// @src 12:20599:20620  "L2_ORACLE.getL2Output"
                let expr_778_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_777_address)
                let expr_778_functionSelector := 0xa25ae557
                /// @src 12:20621:20635  "_l2OutputIndex"
                let _189 := var__l2OutputIndex_771
                let expr_779 := _189
                /// @src 12:20599:20636  "L2_ORACLE.getL2Output(_l2OutputIndex)"
                let _190 := allocate_unbounded()
                mstore(_190, shift_left_224(expr_778_functionSelector))
                let _191 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(add(_190, 4), expr_779)
                let _192 := staticcall(gas(), expr_778_address, _190, sub(_191, _190), _190, 96)
                if iszero(_192) { revert_forward_1() }
                let expr_780_mpos
                if _192
                {
                    let _193 := 96
                    if gt(_193, returndatasize()) { _193 := returndatasize() }
                    finalize_allocation(_190, _193)
                    expr_780_mpos := abi_decode_tuple_t_struct$_OutputProposal_$3203_memory_ptr_fromMemory(_190, add(_190, _193))
                }
                /// @src 12:20599:20646  "L2_ORACLE.getL2Output(_l2OutputIndex).timestamp"
                let _194 := add(expr_780_mpos, 32)
                let _195 := read_from_memoryt_uint128(_194)
                let expr_781 := _195
                /// @src 12:20570:20647  "_isFinalizationPeriodElapsed(L2_ORACLE.getL2Output(_l2OutputIndex).timestamp)"
                let _196 := convert_t_uint128_to_t_uint256(expr_781)
                let expr_782 := fun__isFinalizationPeriodElapsed_803(_196)
                /// @src 12:20563:20647  "return _isFinalizationPeriodElapsed(L2_ORACLE.getL2Output(_l2OutputIndex).timestamp)"
                var__774 := expr_782
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            /// @ast-id 803 @src 12:20897:21078  "function _isFinalizationPeriodElapsed(uint256 _timestamp) internal view returns (bool) {..."
            function fun__isFinalizationPeriodElapsed_803(var__timestamp_788) -> var__791
            {
                /// @src 12:20978:20982  "bool"
                let zero_t_bool_197 := zero_value_for_split_t_bool()
                var__791 := zero_t_bool_197
                /// @src 12:21001:21016  "block.timestamp"
                let expr_794 := timestamp()
                /// @src 12:21019:21029  "_timestamp"
                let _198 := var__timestamp_788
                let expr_795 := _198
                /// @src 12:21032:21041  "L2_ORACLE"
                let _199_address := loadimmutable("175")
                let expr_796_address := _199_address
                /// @src 12:21032:21069  "L2_ORACLE.FINALIZATION_PERIOD_SECONDS"
                let expr_797_address := convert_t_contract$_L2OutputOracle_$2095_to_t_address(expr_796_address)
                let expr_797_functionSelector := 0xf4daa291
                /// @src 12:21032:21071  "L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                let _200 := allocate_unbounded()
                mstore(_200, shift_left_224(expr_797_functionSelector))
                let _201 := abi_encode_tuple__to__fromStack(add(_200, 4))
                let _202 := staticcall(gas(), expr_797_address, _200, sub(_201, _200), _200, 32)
                if iszero(_202) { revert_forward_1() }
                let expr_798
                if _202
                {
                    let _203 := 32
                    if gt(_203, returndatasize()) { _203 := returndatasize() }
                    finalize_allocation(_200, _203)
                    expr_798 := abi_decode_tuple_t_uint256_fromMemory(_200, add(_200, _203))
                }
                /// @src 12:21019:21071  "_timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                let expr_799 := checked_add_t_uint256(expr_795, expr_798)
                /// @src 12:21001:21071  "block.timestamp > _timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                let expr_800 := gt(cleanup_t_uint256(expr_794), cleanup_t_uint256(expr_799))
                /// @src 12:20994:21071  "return block.timestamp > _timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                var__791 := expr_800
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_string_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr)
            { mstore(add(memPtr, 0), ".") }
            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }
            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2) -> end
            {
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2, pos)
                end := pos
            }
            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1482 @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1482() -> var__1458_mpos
            {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_204_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1458_mpos := zero_t_string_memory_ptr_204_mpos
                /// @src 29:1203:1210  "Strings"
                let expr_1464_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _205 := loadimmutable("1425")
                let expr_1466 := _205
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1467_mpos := fun_toString_3909(expr_1466)
                /// @src 29:1281:1288  "Strings"
                let expr_1469_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _206 := loadimmutable("1428")
                let expr_1471 := _206
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1472_mpos := fun_toString_3909(expr_1471)
                /// @src 29:1359:1366  "Strings"
                let expr_1474_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _207 := loadimmutable("1431")
                let expr_1476 := _207
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1477_mpos := fun_toString_3909(expr_1476)
                /// @src 29:1165:1408  "abi.encodePacked(..."
                let expr_1478_mpos := allocate_unbounded()
                let _208 := add(expr_1478_mpos, 0x20)
                let _209 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_208, expr_1467_mpos, expr_1472_mpos, expr_1477_mpos)
                mstore(expr_1478_mpos, sub(_209, add(expr_1478_mpos, 0x20)))
                finalize_allocation(expr_1478_mpos, sub(_209, expr_1478_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1479_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1478_mpos)
                /// @src 29:1122:1422  "return..."
                var__1458_mpos := expr_1479_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function convert_t_uint64_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint64(value)))
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function cleanup_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function read_from_memoryt_uint32(ptr) -> returnValue
            {
                let value := cleanup_t_uint32(mload(ptr))
                returnValue := value
            }
            function convert_t_uint32_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
            }
            function cleanup_t_int256(value) -> cleaned
            { cleaned := value }
            function convert_t_uint256_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_uint256(value)))
            }
            function read_from_memoryt_uint8(ptr) -> returnValue
            {
                let value := cleanup_t_uint8(mload(ptr))
                returnValue := value
            }
            function convert_t_uint8_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint8(value)))
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_int256(x, y) -> r
            {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if iszero(y) { panic_error_0x12() }
                if and(eq(x, 0x8000000000000000000000000000000000000000000000000000000000000000), eq(y, sub(0, 1))) { panic_error_0x11() }
                r := sdiv(x, y)
            }
            function checked_sub_t_int256(x, y) -> diff
            {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if and(iszero(slt(y, 0)), slt(x, add(0x8000000000000000000000000000000000000000000000000000000000000000, y))) { panic_error_0x11() }
                if and(slt(y, 0), sgt(x, add(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function checked_mul_t_int256(x, y) -> product
            {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if and(and(sgt(x, 0), sgt(y, 0)), gt(x, div(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }
                if and(and(sgt(x, 0), slt(y, 0)), slt(y, sdiv(0x8000000000000000000000000000000000000000000000000000000000000000, x))) { panic_error_0x11() }
                if and(and(slt(x, 0), sgt(y, 0)), slt(x, sdiv(0x8000000000000000000000000000000000000000000000000000000000000000, y))) { panic_error_0x11() }
                if and(and(slt(x, 0), slt(y, 0)), slt(x, sdiv(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function checked_add_t_int256(x, y) -> sum
            {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if and(iszero(slt(x, 0)), sgt(y, sub(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                if and(slt(x, 0), slt(y, sub(0x8000000000000000000000000000000000000000000000000000000000000000, x))) { panic_error_0x11() }
                sum := add(x, y)
            }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_int256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_int256(value)))
            }
            function convert_t_rational_0_by_1_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_0_by_1(value)))
            }
            function update_byte_slice_8_shift_16(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint64_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
            }
            function prepare_store_t_uint64(value) -> ret
            { ret := value }
            function update_storage_value_offset_16t_uint64_to_t_uint64(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_16(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }
            function update_byte_slice_8_shift_24(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffff000000000000000000000000000000000000000000000000
                toInsert := shift_left_192(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_24t_uint64_to_t_uint64(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_24(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }
            function store_literal_in_memory_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(memPtr)
            {
                mstore(add(memPtr, 0), "ResourceMetering: cannot buy mor")
                mstore(add(memPtr, 32), "e gas than available gas limit")
            }
            function abi_encode_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)
                store_literal_in_memory_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function checked_mul_t_uint256(x, y) -> product
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function cleanup_t_rational_1000000000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1000000000_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000000_by_1(value)))
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            /// @ast-id 2417 @src 13:3913:7950  "function _metered(uint64 _amount, uint256 _initialGas) internal {..."
            function fun__metered_2417(var__amount_2157, var__initialGas_2159)
            {
                /// @src 13:4065:4077  "block.number"
                let expr_2165 := number()
                /// @src 13:4080:4086  "params"
                let _210_slot := 0x01
                let expr_2166_slot := _210_slot
                /// @src 13:4080:4099  "params.prevBlockNum"
                let _211 := add(expr_2166_slot, 0)
                let _212 := read_from_storage_split_offset_24_t_uint64(_211)
                let expr_2167 := _212
                /// @src 13:4065:4099  "block.number - params.prevBlockNum"
                let expr_2168 := checked_sub_t_uint256(expr_2165, convert_t_uint64_to_t_uint256(expr_2167))
                /// @src 13:4045:4099  "uint256 blockDiff = block.number - params.prevBlockNum"
                let var_blockDiff_2163 := expr_2168
                /// @src 13:4141:4158  "_resourceConfig()"
                let expr_2174_mpos := fun__resourceConfig_400()
                /// @src 13:4110:4158  "ResourceConfig memory config = _resourceConfig()"
                let var_config_2172_mpos := expr_2174_mpos
                /// @src 13:4212:4218  "config"
                let _213_mpos := var_config_2172_mpos
                let expr_2182_mpos := _213_mpos
                /// @src 13:4212:4235  "config.maxResourceLimit"
                let _214 := add(expr_2182_mpos, 0)
                let _215 := read_from_memoryt_uint32(_214)
                let expr_2183 := _215
                /// @src 13:4204:4236  "uint256(config.maxResourceLimit)"
                let expr_2184 := convert_t_uint32_to_t_uint256(expr_2183)
                /// @src 13:4197:4237  "int256(uint256(config.maxResourceLimit))"
                let expr_2185 := convert_t_uint256_to_t_int256(expr_2184)
                /// @src 13:4267:4273  "config"
                let _216_mpos := var_config_2172_mpos
                let expr_2190_mpos := _216_mpos
                /// @src 13:4267:4294  "config.elasticityMultiplier"
                let _217 := add(expr_2190_mpos, 32)
                let _218 := read_from_memoryt_uint8(_217)
                let expr_2191 := _218
                /// @src 13:4259:4295  "uint256(config.elasticityMultiplier)"
                let expr_2192 := convert_t_uint8_to_t_uint256(expr_2191)
                /// @src 13:4252:4296  "int256(uint256(config.elasticityMultiplier))"
                let expr_2193 := convert_t_uint256_to_t_int256(expr_2192)
                /// @src 13:4197:4296  "int256(uint256(config.maxResourceLimit)) /..."
                let expr_2194 := checked_div_t_int256(expr_2185, expr_2193)
                /// @src 13:4168:4296  "int256 targetResourceLimit = int256(uint256(config.maxResourceLimit)) /..."
                let var_targetResourceLimit_2177 := expr_2194
                /// @src 13:4311:4320  "blockDiff"
                let _219 := var_blockDiff_2163
                let expr_2196 := _219
                /// @src 13:4323:4324  "0"
                let expr_2197 := 0x00
                /// @src 13:4311:4324  "blockDiff > 0"
                let expr_2198 := gt(cleanup_t_uint256(expr_2196), convert_t_rational_0_by_1_to_t_uint256(expr_2197))
                /// @src 13:4307:6536  "if (blockDiff > 0) {..."
                if expr_2198
                {
                    /// @src 13:4668:4674  "params"
                    let _220_slot := 0x01
                    let expr_2205_slot := _220_slot
                    /// @src 13:4668:4688  "params.prevBoughtGas"
                    let _221 := add(expr_2205_slot, 0)
                    let _222 := read_from_storage_split_offset_16_t_uint64(_221)
                    let expr_2206 := _222
                    /// @src 13:4660:4689  "uint256(params.prevBoughtGas)"
                    let expr_2207 := convert_t_uint64_to_t_uint256(expr_2206)
                    /// @src 13:4653:4690  "int256(uint256(params.prevBoughtGas))"
                    let expr_2208 := convert_t_uint256_to_t_int256(expr_2207)
                    /// @src 13:4693:4712  "targetResourceLimit"
                    let _223 := var_targetResourceLimit_2177
                    let expr_2209 := _223
                    /// @src 13:4653:4712  "int256(uint256(params.prevBoughtGas)) - targetResourceLimit"
                    let expr_2210 := checked_sub_t_int256(expr_2208, expr_2209)
                    /// @src 13:4631:4712  "int256 gasUsedDelta = int256(uint256(params.prevBoughtGas)) - targetResourceLimit"
                    let var_gasUsedDelta_2200 := expr_2210
                    /// @src 13:4764:4770  "params"
                    let _224_slot := 0x01
                    let expr_2218_slot := _224_slot
                    /// @src 13:4764:4782  "params.prevBaseFee"
                    let _225 := add(expr_2218_slot, 0)
                    let _226 := read_from_storage_split_offset_0_t_uint128(_225)
                    let expr_2219 := _226
                    /// @src 13:4756:4783  "uint256(params.prevBaseFee)"
                    let expr_2220 := convert_t_uint128_to_t_uint256(expr_2219)
                    /// @src 13:4749:4784  "int256(uint256(params.prevBaseFee))"
                    let expr_2221 := convert_t_uint256_to_t_int256(expr_2220)
                    /// @src 13:4787:4799  "gasUsedDelta"
                    let _227 := var_gasUsedDelta_2200
                    let expr_2222 := _227
                    /// @src 13:4749:4799  "int256(uint256(params.prevBaseFee)) * gasUsedDelta"
                    let expr_2223 := checked_mul_t_int256(expr_2221, expr_2222)
                    /// @src 13:4748:4800  "(int256(uint256(params.prevBaseFee)) * gasUsedDelta)"
                    let expr_2224 := expr_2223
                    /// @src 13:4820:4839  "targetResourceLimit"
                    let _228 := var_targetResourceLimit_2177
                    let expr_2225 := _228
                    /// @src 13:4857:4863  "config"
                    let _229_mpos := var_config_2172_mpos
                    let expr_2230_mpos := _229_mpos
                    /// @src 13:4857:4891  "config.baseFeeMaxChangeDenominator"
                    let _230 := add(expr_2230_mpos, 64)
                    let _231 := read_from_memoryt_uint8(_230)
                    let expr_2231 := _231
                    /// @src 13:4849:4892  "uint256(config.baseFeeMaxChangeDenominator)"
                    let expr_2232 := convert_t_uint8_to_t_uint256(expr_2231)
                    /// @src 13:4842:4893  "int256(uint256(config.baseFeeMaxChangeDenominator))"
                    let expr_2233 := convert_t_uint256_to_t_int256(expr_2232)
                    /// @src 13:4820:4893  "targetResourceLimit * int256(uint256(config.baseFeeMaxChangeDenominator))"
                    let expr_2234 := checked_mul_t_int256(expr_2225, expr_2233)
                    /// @src 13:4819:4894  "(targetResourceLimit * int256(uint256(config.baseFeeMaxChangeDenominator)))"
                    let expr_2235 := expr_2234
                    /// @src 13:4748:4894  "(int256(uint256(params.prevBaseFee)) * gasUsedDelta) /..."
                    let expr_2236 := checked_div_t_int256(expr_2224, expr_2235)
                    /// @src 13:4726:4894  "int256 baseFeeDelta = (int256(uint256(params.prevBaseFee)) * gasUsedDelta) /..."
                    let var_baseFeeDelta_2213 := expr_2236
                    /// @src 13:5055:5065  "Arithmetic"
                    let expr_2240_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                    /// @src 13:5113:5119  "params"
                    let _232_slot := 0x01
                    let expr_2246_slot := _232_slot
                    /// @src 13:5113:5131  "params.prevBaseFee"
                    let _233 := add(expr_2246_slot, 0)
                    let _234 := read_from_storage_split_offset_0_t_uint128(_233)
                    let expr_2247 := _234
                    /// @src 13:5105:5132  "uint256(params.prevBaseFee)"
                    let expr_2248 := convert_t_uint128_to_t_uint256(expr_2247)
                    /// @src 13:5098:5133  "int256(uint256(params.prevBaseFee))"
                    let expr_2249 := convert_t_uint256_to_t_int256(expr_2248)
                    /// @src 13:5136:5148  "baseFeeDelta"
                    let _235 := var_baseFeeDelta_2213
                    let expr_2250 := _235
                    /// @src 13:5098:5148  "int256(uint256(params.prevBaseFee)) + baseFeeDelta"
                    let expr_2251 := checked_add_t_int256(expr_2249, expr_2250)
                    /// @src 13:5187:5193  "config"
                    let _236_mpos := var_config_2172_mpos
                    let expr_2256_mpos := _236_mpos
                    /// @src 13:5187:5208  "config.minimumBaseFee"
                    let _237 := add(expr_2256_mpos, 96)
                    let _238 := read_from_memoryt_uint32(_237)
                    let expr_2257 := _238
                    /// @src 13:5179:5209  "uint256(config.minimumBaseFee)"
                    let expr_2258 := convert_t_uint32_to_t_uint256(expr_2257)
                    /// @src 13:5172:5210  "int256(uint256(config.minimumBaseFee))"
                    let expr_2259 := convert_t_uint256_to_t_int256(expr_2258)
                    /// @src 13:5249:5255  "config"
                    let _239_mpos := var_config_2172_mpos
                    let expr_2264_mpos := _239_mpos
                    /// @src 13:5249:5270  "config.maximumBaseFee"
                    let _240 := add(expr_2264_mpos, 160)
                    let _241 := read_from_memoryt_uint128(_240)
                    let expr_2265 := _241
                    /// @src 13:5241:5271  "uint256(config.maximumBaseFee)"
                    let expr_2266 := convert_t_uint128_to_t_uint256(expr_2265)
                    /// @src 13:5234:5272  "int256(uint256(config.maximumBaseFee))"
                    let expr_2267 := convert_t_uint256_to_t_int256(expr_2266)
                    /// @src 13:5055:5287  "Arithmetic.clamp({..."
                    let expr_2268 := fun_clamp_4876(expr_2251, expr_2259, expr_2267)
                    /// @src 13:5035:5287  "int256 newBaseFee = Arithmetic.clamp({..."
                    let var_newBaseFee_2239 := expr_2268
                    /// @src 13:5552:5561  "blockDiff"
                    let _242 := var_blockDiff_2163
                    let expr_2270 := _242
                    /// @src 13:5564:5565  "1"
                    let expr_2271 := 0x01
                    /// @src 13:5552:5565  "blockDiff > 1"
                    let expr_2272 := gt(cleanup_t_uint256(expr_2270), convert_t_rational_1_by_1_to_t_uint256(expr_2271))
                    /// @src 13:5548:6289  "if (blockDiff > 1) {..."
                    if expr_2272
                    {
                        /// @src 13:5837:5847  "Arithmetic"
                        let expr_2274_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                        /// @src 13:5884:5894  "Arithmetic"
                        let expr_2276_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                        /// @src 13:5941:5951  "newBaseFee"
                        let _243 := var_newBaseFee_2239
                        let expr_2278 := _243
                        /// @src 13:6006:6012  "config"
                        let _244_mpos := var_config_2172_mpos
                        let expr_2283_mpos := _244_mpos
                        /// @src 13:6006:6040  "config.baseFeeMaxChangeDenominator"
                        let _245 := add(expr_2283_mpos, 64)
                        let _246 := read_from_memoryt_uint8(_245)
                        let expr_2284 := _246
                        /// @src 13:5998:6041  "uint256(config.baseFeeMaxChangeDenominator)"
                        let expr_2285 := convert_t_uint8_to_t_uint256(expr_2284)
                        /// @src 13:5991:6042  "int256(uint256(config.baseFeeMaxChangeDenominator))"
                        let expr_2286 := convert_t_uint256_to_t_int256(expr_2285)
                        /// @src 13:6086:6095  "blockDiff"
                        let _247 := var_blockDiff_2163
                        let expr_2289 := _247
                        /// @src 13:6098:6099  "1"
                        let expr_2290 := 0x01
                        /// @src 13:6086:6099  "blockDiff - 1"
                        let expr_2291 := checked_sub_t_uint256(expr_2289, convert_t_rational_1_by_1_to_t_uint256(expr_2290))
                        /// @src 13:6079:6100  "int256(blockDiff - 1)"
                        let expr_2292 := convert_t_uint256_to_t_int256(expr_2291)
                        /// @src 13:5884:6123  "Arithmetic.cdexp({..."
                        let expr_2293 := fun_cdexp_4908(expr_2278, expr_2286, expr_2292)
                        /// @src 13:6166:6172  "config"
                        let _248_mpos := var_config_2172_mpos
                        let expr_2298_mpos := _248_mpos
                        /// @src 13:6166:6187  "config.minimumBaseFee"
                        let _249 := add(expr_2298_mpos, 96)
                        let _250 := read_from_memoryt_uint32(_249)
                        let expr_2299 := _250
                        /// @src 13:6158:6188  "uint256(config.minimumBaseFee)"
                        let expr_2300 := convert_t_uint32_to_t_uint256(expr_2299)
                        /// @src 13:6151:6189  "int256(uint256(config.minimumBaseFee))"
                        let expr_2301 := convert_t_uint256_to_t_int256(expr_2300)
                        /// @src 13:6232:6238  "config"
                        let _251_mpos := var_config_2172_mpos
                        let expr_2306_mpos := _251_mpos
                        /// @src 13:6232:6253  "config.maximumBaseFee"
                        let _252 := add(expr_2306_mpos, 160)
                        let _253 := read_from_memoryt_uint128(_252)
                        let expr_2307 := _253
                        /// @src 13:6224:6254  "uint256(config.maximumBaseFee)"
                        let expr_2308 := convert_t_uint128_to_t_uint256(expr_2307)
                        /// @src 13:6217:6255  "int256(uint256(config.maximumBaseFee))"
                        let expr_2309 := convert_t_uint256_to_t_int256(expr_2308)
                        /// @src 13:5837:6274  "Arithmetic.clamp({..."
                        let expr_2310 := fun_clamp_4876(expr_2293, expr_2301, expr_2309)
                        /// @src 13:5824:6274  "newBaseFee = Arithmetic.clamp({..."
                        var_newBaseFee_2239 := expr_2310
                        let expr_2311 := expr_2310
                    }
                    /// @src 13:6419:6429  "newBaseFee"
                    let _254 := var_newBaseFee_2239
                    let expr_2322 := _254
                    /// @src 13:6411:6430  "uint256(newBaseFee)"
                    let expr_2323 := convert_t_int256_to_t_uint256(expr_2322)
                    /// @src 13:6403:6431  "uint128(uint256(newBaseFee))"
                    let expr_2324 := convert_t_uint256_to_t_uint128(expr_2323)
                    /// @src 13:6382:6388  "params"
                    let _255_slot := 0x01
                    let expr_2315_slot := _255_slot
                    /// @src 13:6382:6400  "params.prevBaseFee"
                    let _256 := add(expr_2315_slot, 0)
                    /// @src 13:6382:6431  "params.prevBaseFee = uint128(uint256(newBaseFee))"
                    update_storage_value_offset_0t_uint128_to_t_uint128(_256, expr_2324)
                    let expr_2325 := expr_2324
                    /// @src 13:6468:6469  "0"
                    let expr_2330 := 0x00
                    /// @src 13:6445:6469  "params.prevBoughtGas = 0"
                    let _257 := convert_t_rational_0_by_1_to_t_uint64(expr_2330)
                    /// @src 13:6445:6451  "params"
                    let _258_slot := 0x01
                    let expr_2327_slot := _258_slot
                    /// @src 13:6445:6465  "params.prevBoughtGas"
                    let _259 := add(expr_2327_slot, 0)
                    /// @src 13:6445:6469  "params.prevBoughtGas = 0"
                    update_storage_value_offset_16t_uint64_to_t_uint64(_259, _257)
                    let expr_2331 := _257
                    /// @src 13:6512:6524  "block.number"
                    let expr_2339 := number()
                    /// @src 13:6505:6525  "uint64(block.number)"
                    let expr_2340 := convert_t_uint256_to_t_uint64(expr_2339)
                    /// @src 13:6483:6489  "params"
                    let _260_slot := 0x01
                    let expr_2333_slot := _260_slot
                    /// @src 13:6483:6502  "params.prevBlockNum"
                    let _261 := add(expr_2333_slot, 0)
                    /// @src 13:6483:6525  "params.prevBlockNum = uint64(block.number)"
                    update_storage_value_offset_24t_uint64_to_t_uint64(_261, expr_2340)
                    let expr_2341 := expr_2340
                }
                /// @src 13:6654:6661  "_amount"
                let _262 := var__amount_2157
                let expr_2348 := _262
                /// @src 13:6630:6636  "params"
                let _263_slot := 0x01
                let expr_2345_slot := _263_slot
                /// @src 13:6630:6650  "params.prevBoughtGas"
                let _264 := add(expr_2345_slot, 0)
                /// @src 13:6630:6661  "params.prevBoughtGas += _amount"
                let _265 := read_from_storage_split_offset_16_t_uint64(_264)
                let expr_2349 := checked_add_t_uint64(_265, expr_2348)
                update_storage_value_offset_16t_uint64_to_t_uint64(_264, expr_2349)
                /// @src 13:6707:6713  "params"
                let _266_slot := 0x01
                let expr_2356_slot := _266_slot
                /// @src 13:6707:6727  "params.prevBoughtGas"
                let _267 := add(expr_2356_slot, 0)
                let _268 := read_from_storage_split_offset_16_t_uint64(_267)
                let expr_2357 := _268
                /// @src 13:6699:6728  "uint256(params.prevBoughtGas)"
                let expr_2358 := convert_t_uint64_to_t_uint256(expr_2357)
                /// @src 13:6692:6729  "int256(uint256(params.prevBoughtGas))"
                let expr_2359 := convert_t_uint256_to_t_int256(expr_2358)
                /// @src 13:6748:6754  "config"
                let _269_mpos := var_config_2172_mpos
                let expr_2364_mpos := _269_mpos
                /// @src 13:6748:6771  "config.maxResourceLimit"
                let _270 := add(expr_2364_mpos, 0)
                let _271 := read_from_memoryt_uint32(_270)
                let expr_2365 := _271
                /// @src 13:6740:6772  "uint256(config.maxResourceLimit)"
                let expr_2366 := convert_t_uint32_to_t_uint256(expr_2365)
                /// @src 13:6733:6773  "int256(uint256(config.maxResourceLimit))"
                let expr_2367 := convert_t_uint256_to_t_int256(expr_2366)
                /// @src 13:6692:6773  "int256(uint256(params.prevBoughtGas)) <= int256(uint256(config.maxResourceLimit))"
                let expr_2368 := iszero(sgt(cleanup_t_int256(expr_2359), cleanup_t_int256(expr_2367)))
                /// @src 13:6671:6861  "require(..."
                require_helper_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(expr_2368)
                /// @src 13:6954:6961  "_amount"
                let _272 := var__amount_2157
                let expr_2376 := _272
                /// @src 13:6946:6962  "uint256(_amount)"
                let expr_2377 := convert_t_uint64_to_t_uint256(expr_2376)
                /// @src 13:6973:6979  "params"
                let _273_slot := 0x01
                let expr_2380_slot := _273_slot
                /// @src 13:6973:6991  "params.prevBaseFee"
                let _274 := add(expr_2380_slot, 0)
                let _275 := read_from_storage_split_offset_0_t_uint128(_274)
                let expr_2381 := _275
                /// @src 13:6965:6992  "uint256(params.prevBaseFee)"
                let expr_2382 := convert_t_uint128_to_t_uint256(expr_2381)
                /// @src 13:6946:6992  "uint256(_amount) * uint256(params.prevBaseFee)"
                let expr_2383 := checked_mul_t_uint256(expr_2377, expr_2382)
                /// @src 13:6923:6992  "uint256 resourceCost = uint256(_amount) * uint256(params.prevBaseFee)"
                let var_resourceCost_2373 := expr_2383
                /// @src 13:7492:7504  "resourceCost"
                let _276 := var_resourceCost_2373
                let expr_2387 := _276
                /// @src 13:7507:7511  "Math"
                let expr_2388_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/Math.sol:Math")
                /// @src 13:7516:7529  "block.basefee"
                let expr_2391 := basefee()
                /// @src 13:7531:7537  "1 gwei"
                let expr_2392 := 0x3b9aca00
                /// @src 13:7507:7538  "Math.max(block.basefee, 1 gwei)"
                let _277 := convert_t_rational_1000000000_by_1_to_t_uint256(expr_2392)
                let expr_2393 := fun_max_4367(expr_2391, _277)
                /// @src 13:7492:7538  "resourceCost / Math.max(block.basefee, 1 gwei)"
                let expr_2394 := checked_div_t_uint256(expr_2387, expr_2393)
                /// @src 13:7474:7538  "uint256 gasCost = resourceCost / Math.max(block.basefee, 1 gwei)"
                let var_gasCost_2386 := expr_2394
                /// @src 13:7836:7847  "_initialGas"
                let _278 := var__initialGas_2159
                let expr_2398 := _278
                /// @src 13:7850:7859  "gasleft()"
                let expr_2400 := gas()
                /// @src 13:7836:7859  "_initialGas - gasleft()"
                let expr_2401 := checked_sub_t_uint256(expr_2398, expr_2400)
                /// @src 13:7818:7859  "uint256 usedGas = _initialGas - gasleft()"
                let var_usedGas_2397 := expr_2401
                /// @src 13:7873:7880  "gasCost"
                let _279 := var_gasCost_2386
                let expr_2403 := _279
                /// @src 13:7883:7890  "usedGas"
                let _280 := var_usedGas_2397
                let expr_2404 := _280
                /// @src 13:7873:7890  "gasCost > usedGas"
                let expr_2405 := gt(cleanup_t_uint256(expr_2403), cleanup_t_uint256(expr_2404))
                /// @src 13:7869:7944  "if (gasCost > usedGas) {..."
                if expr_2405
                {
                    /// @src 13:7906:7910  "Burn"
                    let expr_2406_address := linkersymbol("contracts/libraries/Burn.sol:Burn")
                    /// @src 13:7915:7922  "gasCost"
                    let _281 := var_gasCost_2386
                    let expr_2409 := _281
                    /// @src 13:7925:7932  "usedGas"
                    let _282 := var_usedGas_2397
                    let expr_2410 := _282
                    /// @src 13:7915:7932  "gasCost - usedGas"
                    let expr_2411 := checked_sub_t_uint256(expr_2409, expr_2410)
                    fun_gas_4953(expr_2411)
                }
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function allocate_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory(192)
            }
            function zero_value_for_t_uint32() -> ret
            { ret := 0 }
            function zero_value_for_t_uint8() -> ret
            { ret := 0 }
            function zero_value_for_t_uint128() -> ret
            { ret := 0 }
            function allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr()
                let offset := memPtr
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)
            }
            function zero_value_for_split_t_struct$_ResourceConfig_$2128_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr()
            }
            function validator_revert_t_uint32(value)
            {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint32_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_uint32(value)
            }
            function validator_revert_t_uint8(value)
            {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint8_fromMemory(offset, end) -> value
            {
                value := mload(offset)
                validator_revert_t_uint8(value)
            }
            function abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(headStart, end) -> value
            {
                if slt(sub(end, headStart), 0xc0)
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                value := allocate_memory(0xc0)
                {
                    let offset := 0
                    mstore(add(value, 0x00), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 32
                    mstore(add(value, 0x20), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 64
                    mstore(add(value, 0x40), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 96
                    mstore(add(value, 0x60), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 128
                    mstore(add(value, 0x80), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
                }
                {
                    let offset := 160
                    mstore(add(value, 0xa0), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))
                }
            }
            function abi_decode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 192)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
                }
            }
            /// @ast-id 400 @src 12:7782:7971  "function _resourceConfig()..."
            function fun__resourceConfig_400() -> var__393_mpos
            {
                /// @src 12:7873:7911  "ResourceMetering.ResourceConfig memory"
                let zero_t_struct$_ResourceConfig_$2128_memory_ptr_283_mpos := zero_value_for_split_t_struct$_ResourceConfig_$2128_memory_ptr()
                var__393_mpos := zero_t_struct$_ResourceConfig_$2128_memory_ptr_283_mpos
                /// @src 12:7934:7947  "SYSTEM_CONFIG"
                let _284_address := loadimmutable("179")
                let expr_395_address := _284_address
                /// @src 12:7934:7962  "SYSTEM_CONFIG.resourceConfig"
                let expr_396_address := convert_t_contract$_SystemConfig_$2855_to_t_address(expr_395_address)
                let expr_396_functionSelector := 0xcc731b02
                /// @src 12:7934:7964  "SYSTEM_CONFIG.resourceConfig()"
                let _285 := allocate_unbounded()
                mstore(_285, shift_left_224(expr_396_functionSelector))
                let _286 := abi_encode_tuple__to__fromStack(add(_285, 4))
                let _287 := staticcall(gas(), expr_396_address, _285, sub(_286, _285), _285, 192)
                if iszero(_287) { revert_forward_1() }
                let expr_397_mpos
                if _287
                {
                    let _288 := 192
                    if gt(_288, returndatasize()) { _288 := returndatasize() }
                    finalize_allocation(_285, _288)
                    expr_397_mpos := abi_decode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(_285, add(_285, _288))
                }
                /// @src 12:7927:7964  "return SYSTEM_CONFIG.resourceConfig()"
                var__393_mpos := expr_397_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is not i")
                mstore(add(memPtr, 32), "nitializing")
            }
            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 1597 @src 4:4842:4967  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_2428()
            {
                /// @src 4:4888:4901  "_initializing"
                let _289 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1591 := _289
                /// @src 4:4880:4949  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_1591)
                /// @src 4:4959:4960  "_"
                fun___ResourceMetering_init_2443_inner()
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function allocate_memory_struct_t_struct$_ResourceParams_$2115_storage_ptr() -> memPtr
            { memPtr := allocate_memory(96) }
            function convert_t_rational_1000000000_by_1_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_rational_1000000000_by_1(value)))
            }
            function write_to_memory_t_uint64(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint64(value))
            }
            function read_from_memoryt_uint64(ptr) -> returnValue
            {
                let value := cleanup_t_uint64(mload(ptr))
                returnValue := value
            }
            function copy_struct_to_storage_from_t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value)
            {
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 32)
                    let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)
                    update_storage_value_offset_16t_uint64_to_t_uint64(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 64)
                    let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)
                    update_storage_value_offset_24t_uint64_to_t_uint64(memberSlot, memberValue_0)
                }
            }
            function update_storage_value_offset_0t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value_0)
            {
                copy_struct_to_storage_from_t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(slot, value_0)
            }
            /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
            function fun___ResourceMetering_init_2443_inner()
            {
                /// @src 13:8598:8604  "1 gwei"
                let expr_2432 := 0x3b9aca00
                /// @src 13:8633:8634  "0"
                let expr_2433 := 0x00
                /// @src 13:8669:8681  "block.number"
                let expr_2437 := number()
                /// @src 13:8662:8682  "uint64(block.number)"
                let expr_2438 := convert_t_uint256_to_t_uint64(expr_2437)
                /// @src 13:8556:8693  "ResourceParams({..."
                let expr_2439_mpos := allocate_memory_struct_t_struct$_ResourceParams_$2115_storage_ptr()
                let _290 := convert_t_rational_1000000000_by_1_to_t_uint128(expr_2432)
                write_to_memory_t_uint128(add(expr_2439_mpos, 0), _290)
                let _291 := convert_t_rational_0_by_1_to_t_uint64(expr_2433)
                write_to_memory_t_uint64(add(expr_2439_mpos, 32), _291)
                write_to_memory_t_uint64(add(expr_2439_mpos, 64), expr_2438)
                /// @src 13:8547:8693  "params = ResourceParams({..."
                update_storage_value_offset_0t_struct$_ResourceParams_$2115_memory_ptr_to_t_struct$_ResourceParams_$2115_storage(0x01, expr_2439_mpos)
                let _292_slot := 0x01
                let expr_2440_slot := _292_slot
            }
            /// @ast-id 2443 @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
            function fun___ResourceMetering_init_2443()
            {
                modifier_onlyInitializing_2428()
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_bytes32() -> ret
            { ret := 0 }
            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart, value0, value1, value2, value3, value4, value5) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_address_to_t_address_fromStack(value1, add(headStart, 32))
                abi_encode_t_address_to_t_address_fromStack(value2, add(headStart, 64))
                abi_encode_t_uint256_to_t_uint256_fromStack(value3, add(headStart, 96))
                abi_encode_t_uint256_to_t_uint256_fromStack(value4, add(headStart, 128))
                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value5, tail)
            }
            /// @ast-id 3098 @src 20:4733:5014  "function hashWithdrawal(Types.WithdrawalTransaction memory _tx)..."
            function fun_hashWithdrawal_3098(var__tx_3074_mpos) -> var__3077
            {
                /// @src 20:4844:4851  "bytes32"
                let zero_t_bytes32_293 := zero_value_for_split_t_bytes32()
                var__3077 := zero_t_bytes32_293
                /// @src 20:4924:4927  "_tx"
                let _294_mpos := var__tx_3074_mpos
                let expr_3082_mpos := _294_mpos
                /// @src 20:4924:4933  "_tx.nonce"
                let _295 := add(expr_3082_mpos, 0)
                let _296 := read_from_memoryt_uint256(_295)
                let expr_3083 := _296
                /// @src 20:4935:4938  "_tx"
                let _297_mpos := var__tx_3074_mpos
                let expr_3084_mpos := _297_mpos
                /// @src 20:4935:4945  "_tx.sender"
                let _298 := add(expr_3084_mpos, 32)
                let _299 := read_from_memoryt_address(_298)
                let expr_3085 := _299
                /// @src 20:4947:4950  "_tx"
                let _300_mpos := var__tx_3074_mpos
                let expr_3086_mpos := _300_mpos
                /// @src 20:4947:4957  "_tx.target"
                let _301 := add(expr_3086_mpos, 64)
                let _302 := read_from_memoryt_address(_301)
                let expr_3087 := _302
                /// @src 20:4959:4962  "_tx"
                let _303_mpos := var__tx_3074_mpos
                let expr_3088_mpos := _303_mpos
                /// @src 20:4959:4968  "_tx.value"
                let _304 := add(expr_3088_mpos, 96)
                let _305 := read_from_memoryt_uint256(_304)
                let expr_3089 := _305
                /// @src 20:4970:4973  "_tx"
                let _306_mpos := var__tx_3074_mpos
                let expr_3090_mpos := _306_mpos
                /// @src 20:4970:4982  "_tx.gasLimit"
                let _307 := add(expr_3090_mpos, 128)
                let _308 := read_from_memoryt_uint256(_307)
                let expr_3091 := _308
                /// @src 20:4984:4987  "_tx"
                let _309_mpos := var__tx_3074_mpos
                let expr_3092_mpos := _309_mpos
                /// @src 20:4984:4992  "_tx.data"
                let _310 := add(expr_3092_mpos, 160)
                let _311_mpos := mload(_310)
                let expr_3093_mpos := _311_mpos
                /// @src 20:4913:4993  "abi.encode(_tx.nonce, _tx.sender, _tx.target, _tx.value, _tx.gasLimit, _tx.data)"
                let expr_3094_mpos := allocate_unbounded()
                let _312 := add(expr_3094_mpos, 0x20)
                let _313 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(_312, expr_3083, expr_3085, expr_3087, expr_3089, expr_3091, expr_3093_mpos)
                mstore(expr_3094_mpos, sub(_313, add(expr_3094_mpos, 0x20)))
                finalize_allocation(expr_3094_mpos, sub(_313, expr_3094_mpos))
                /// @src 20:4886:5007  "keccak256(..."
                let expr_3095 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3094_mpos), array_length_t_bytes_memory_ptr(expr_3094_mpos))
                /// @src 20:4867:5007  "return..."
                var__3077 := expr_3095
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32_t_bytes32__fromStack(headStart, value0, value1, value2, value3) -> tail
            {
                tail := add(headStart, 128)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value1, add(headStart, 32))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value2, add(headStart, 64))
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value3, add(headStart, 96))
            }
            /// @ast-id 3122 @src 20:5334:5786  "function hashOutputRootProof(Types.OutputRootProof memory _outputRootProof)..."
            function fun_hashOutputRootProof_3122(var__outputRootProof_3102_mpos) -> var__3105
            {
                /// @src 20:5457:5464  "bytes32"
                let zero_t_bytes32_314 := zero_value_for_split_t_bytes32()
                var__3105 := zero_t_bytes32_314
                /// @src 20:5558:5574  "_outputRootProof"
                let _315_mpos := var__outputRootProof_3102_mpos
                let expr_3110_mpos := _315_mpos
                /// @src 20:5558:5582  "_outputRootProof.version"
                let _316 := add(expr_3110_mpos, 0)
                let _317 := read_from_memoryt_bytes32(_316)
                let expr_3111 := _317
                /// @src 20:5604:5620  "_outputRootProof"
                let _318_mpos := var__outputRootProof_3102_mpos
                let expr_3112_mpos := _318_mpos
                /// @src 20:5604:5630  "_outputRootProof.stateRoot"
                let _319 := add(expr_3112_mpos, 32)
                let _320 := read_from_memoryt_bytes32(_319)
                let expr_3113 := _320
                /// @src 20:5652:5668  "_outputRootProof"
                let _321_mpos := var__outputRootProof_3102_mpos
                let expr_3114_mpos := _321_mpos
                /// @src 20:5652:5693  "_outputRootProof.messagePasserStorageRoot"
                let _322 := add(expr_3114_mpos, 64)
                let _323 := read_from_memoryt_bytes32(_322)
                let expr_3115 := _323
                /// @src 20:5715:5731  "_outputRootProof"
                let _324_mpos := var__outputRootProof_3102_mpos
                let expr_3116_mpos := _324_mpos
                /// @src 20:5715:5747  "_outputRootProof.latestBlockhash"
                let _325 := add(expr_3116_mpos, 96)
                let _326 := read_from_memoryt_bytes32(_325)
                let expr_3117 := _326
                /// @src 20:5526:5765  "abi.encode(..."
                let expr_3118_mpos := allocate_unbounded()
                let _327 := add(expr_3118_mpos, 0x20)
                let _328 := abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32_t_bytes32__fromStack(_327, expr_3111, expr_3113, expr_3115, expr_3117)
                mstore(expr_3118_mpos, sub(_328, add(expr_3118_mpos, 0x20)))
                finalize_allocation(expr_3118_mpos, sub(_328, expr_3118_mpos))
                /// @src 20:5499:5779  "keccak256(..."
                let expr_3119 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3118_mpos), array_length_t_bytes_memory_ptr(expr_3118_mpos))
                /// @src 20:5480:5779  "return..."
                var__3105 := expr_3119
                leave
            }
            /// @ast-id 3192 @src 22:3698:5950  "function callWithMinGas(..."
            function fun_callWithMinGas_3192(var__target_3167, var__minGas_3169, var__value_3171, var__calldata_3173_mpos) -> var__3176
            {
                /// @src 22:3852:3856  "bool"
                let zero_t_bool_329 := zero_value_for_split_t_bool()
                var__3176 := zero_t_bool_329
                /// @src 22:3868:3881  "bool _success"
                let var__success_3179
                let zero_t_bool_330 := zero_value_for_split_t_bool()
                var__success_3179 := zero_t_bool_330
                /// @src 22:3919:3926  "_minGas"
                let _331 := var__minGas_3169
                let expr_3184 := _331
                /// @src 22:3928:3929  "0"
                let expr_3185 := 0x00
                /// @src 22:3909:3930  "hasMinGas(_minGas, 0)"
                let _332 := convert_t_rational_0_by_1_to_t_uint256(expr_3185)
                let expr_3186 := fun_hasMinGas_3164(expr_3184, _332)
                /// @src 22:3891:3930  "bool _hasMinGas = hasMinGas(_minGas, 0)"
                let var__hasMinGas_3182 := expr_3186
                /// @src 22:3940:5919  "assembly {..."
                {
                    if iszero(var__hasMinGas_3182)
                    {
                        mstore(0, 0x08c379a0)
                        mstore(32, 32)
                        mstore(88, 0x0000185361666543616c6c3a204e6f7420656e6f75676820676173)
                        revert(28, 100)
                    }
                    var__success_3179 := call(gas(), var__target_3167, var__value_3171, add(var__calldata_3173_mpos, 32), mload(var__calldata_3173_mpos), 0x00, 0x00)
                }
                /// @src 22:5935:5943  "_success"
                let _333 := var__success_3179
                let expr_3189 := _333
                /// @src 22:5928:5943  "return _success"
                var__3176 := expr_3189
                leave
            }
            /// @ast-id 3164 @src 22:2848:3243  "function hasMinGas(uint256 _minGas, uint256 _reservedGas) internal view returns (bool) {..."
            function fun_hasMinGas_3164(var__minGas_3150, var__reservedGas_3152) -> var__3155
            {
                /// @src 22:2929:2933  "bool"
                let zero_t_bool_334 := zero_value_for_split_t_bool()
                var__3155 := zero_t_bool_334
                /// @src 22:2945:2960  "bool _hasMinGas"
                let var__hasMinGas_3158
                let zero_t_bool_335 := zero_value_for_split_t_bool()
                var__hasMinGas_3158 := zero_t_bool_335
                /// @src 22:2970:3210  "assembly {..."
                {
                    var__hasMinGas_3158 := iszero(lt(mul(gas(), 63), add(mul(var__minGas_3150, 64), mul(add(40000, var__reservedGas_3152), 63))))
                }
                /// @src 22:3226:3236  "_hasMinGas"
                let _336 := var__hasMinGas_3158
                let expr_3161 := _336
                /// @src 22:3219:3236  "return _hasMinGas"
                var__3155 := expr_3161
                leave
            }
            /// @ast-id 3280 @src 27:1082:1388  "function verifyInclusionProof(..."
            function fun_verifyInclusionProof_3280(var__key_3253_mpos, var__value_3255_mpos, var__proof_3258_mpos, var__root_3260) -> var__3263
            {
                /// @src 27:1251:1255  "bool"
                let zero_t_bool_337 := zero_value_for_split_t_bool()
                var__3263 := zero_t_bool_337
                /// @src 27:1300:1304  "_key"
                let _338_mpos := var__key_3253_mpos
                let expr_3268_mpos := _338_mpos
                /// @src 27:1286:1305  "_getSecureKey(_key)"
                let expr_3269_mpos := fun__getSecureKey_3323(expr_3268_mpos)
                /// @src 27:1267:1305  "bytes memory key = _getSecureKey(_key)"
                let var_key_3266_mpos := expr_3269_mpos
                /// @src 27:1322:1332  "MerkleTrie"
                let expr_3271_address := linkersymbol("contracts/libraries/trie/MerkleTrie.sol:MerkleTrie")
                /// @src 27:1354:1357  "key"
                let _339_mpos := var_key_3266_mpos
                let expr_3273_mpos := _339_mpos
                /// @src 27:1359:1365  "_value"
                let _340_mpos := var__value_3255_mpos
                let expr_3274_mpos := _340_mpos
                /// @src 27:1367:1373  "_proof"
                let _341_mpos := var__proof_3258_mpos
                let expr_3275_mpos := _341_mpos
                /// @src 27:1375:1380  "_root"
                let _342 := var__root_3260
                let expr_3276 := _342
                /// @src 27:1322:1381  "MerkleTrie.verifyInclusionProof(key, _value, _proof, _root)"
                let expr_3277 := fun_verifyInclusionProof_5172(expr_3273_mpos, expr_3274_mpos, expr_3275_mpos, expr_3276)
                /// @src 27:1315:1381  "return MerkleTrie.verifyInclusionProof(key, _value, _proof, _root)"
                var__3263 := expr_3277
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_bytes_memory_ptr() -> ret
            { ret := 96 }
            function leftAlign_t_bytes32(value) -> aligned
            { aligned := value }
            function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos)
            {
                mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))
            }
            function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(pos, value0) -> end
            {
                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0, pos)
                pos := add(pos, 32)
                end := pos
            }
            /// @ast-id 3323 @src 27:2116:2251  "function _getSecureKey(bytes memory _key) private pure returns (bytes memory) {..."
            function fun__getSecureKey_3323(var__key_3310_mpos) -> var__3313_mpos
            {
                /// @src 27:2180:2192  "bytes memory"
                let zero_t_bytes_memory_ptr_343_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3313_mpos := zero_t_bytes_memory_ptr_343_mpos
                /// @src 27:2238:2242  "_key"
                let _344_mpos := var__key_3310_mpos
                let expr_3318_mpos := _344_mpos
                /// @src 27:2228:2243  "keccak256(_key)"
                let expr_3319 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3318_mpos), array_length_t_bytes_memory_ptr(expr_3318_mpos))
                /// @src 27:2211:2244  "abi.encodePacked(keccak256(_key))"
                let expr_3320_mpos := allocate_unbounded()
                let _345 := add(expr_3320_mpos, 0x20)
                let _346 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_345, expr_3319)
                mstore(expr_3320_mpos, sub(_346, add(expr_3320_mpos, 0x20)))
                finalize_allocation(expr_3320_mpos, sub(_346, expr_3320_mpos))
                /// @src 27:2204:2244  "return abi.encodePacked(keccak256(_key))"
                var__3313_mpos := expr_3320_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_address() -> ret
            { ret := 0 }
            function convert_t_address_to_t_uint160(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            /// @src 30:707:784  "uint160 constant offset = uint160(0x1111000000000000000000000000000000001111)"
            function constant_offset_3332() -> ret
            {
                /// @src 30:741:783  "0x1111000000000000000000000000000000001111"
                let expr_3330 := 0x1111000000000000000000000000000000001111
                /// @src 30:733:784  "uint160(0x1111000000000000000000000000000000001111)"
                let expr_3331 := convert_t_address_to_t_uint160(expr_3330)
                let _349 := expr_3331
                ret := _349
            }
            function wrapping_add_t_uint160(x, y) -> sum
            {
                sum := cleanup_t_uint160(add(x, y))
            }
            /// @ast-id 3354 @src 30:1072:1258  "function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {..."
            function fun_applyL1ToL2Alias_3354(var_l1Address_3335) -> var_l2Address_3338
            {
                /// @src 30:1140:1157  "address l2Address"
                let zero_t_address_347 := zero_value_for_split_t_address()
                var_l2Address_3338 := zero_t_address_347
                /// @src 30:1221:1230  "l1Address"
                let _348 := var_l1Address_3335
                let expr_3345 := _348
                /// @src 30:1213:1231  "uint160(l1Address)"
                let expr_3346 := convert_t_address_to_t_uint160(expr_3345)
                /// @src 30:1234:1240  "offset"
                let expr_3347 := constant_offset_3332()
                /// @src 30:1213:1240  "uint160(l1Address) + offset"
                let expr_3348 := wrapping_add_t_uint160(expr_3346, expr_3347)
                /// @src 30:1205:1241  "address(uint160(l1Address) + offset)"
                let expr_3349 := convert_t_uint160_to_t_address(expr_3348)
                /// @src 30:1193:1241  "l2Address = address(uint160(l1Address) + offset)"
                var_l2Address_3338 := expr_3349
                let expr_3350 := expr_3349
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr)
            { mstore(add(memPtr, 0), "0") }
            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }
            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function cleanup_t_rational_10_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }
            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes)
            {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }
            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function cleanup_t_rational_48_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }
            function convert_t_uint256_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }
            function cleanup_t_bytes1(value) -> cleaned
            {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }
            function convert_t_uint8_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 1)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            /// @ast-id 3909 @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3909(var_value_3833) -> var__3836_mpos
            {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_350_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3836_mpos := zero_t_string_memory_ptr_350_mpos
                /// @src 6:665:670  "value"
                let _351 := var_value_3833
                let expr_3838 := _351
                /// @src 6:674:675  "0"
                let expr_3839 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3840 := eq(cleanup_t_uint256(expr_3838), convert_t_rational_0_by_1_to_t_uint256(expr_3839))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3840
                {
                    /// @src 6:691:701  "return \"0\""
                    var__3836_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                }
                /// @src 6:736:741  "value"
                let _352 := var_value_3833
                let expr_3847 := _352
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3846 := expr_3847
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3850
                let zero_t_uint256_353 := zero_value_for_split_t_uint256()
                var_digits_3850 := zero_t_uint256_353
                /// @src 6:775:850  "while (temp != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:782:786  "temp"
                    let _354 := var_temp_3846
                    let expr_3852 := _354
                    /// @src 6:790:791  "0"
                    let expr_3853 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3854 := iszero(eq(cleanup_t_uint256(expr_3852), convert_t_rational_0_by_1_to_t_uint256(expr_3853)))
                    if iszero(expr_3854) { break }
                    /// @src 6:807:815  "digits++"
                    let _356 := var_digits_3850
                    let _355 := increment_t_uint256(_356)
                    var_digits_3850 := _355
                    let expr_3856 := _356
                    /// @src 6:837:839  "10"
                    let expr_3859 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _357 := convert_t_rational_10_by_1_to_t_uint256(expr_3859)
                    let _358 := var_temp_3846
                    let expr_3860 := checked_div_t_uint256(_358, _357)
                    var_temp_3846 := expr_3860
                }
                /// @src 6:891:897  "digits"
                let _359 := var_digits_3850
                let expr_3868 := _359
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3869_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3868)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3865_mpos := expr_3869_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:915:920  "value"
                    let _360 := var_value_3833
                    let expr_3871 := _360
                    /// @src 6:924:925  "0"
                    let expr_3872 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3873 := iszero(eq(cleanup_t_uint256(expr_3871), convert_t_rational_0_by_1_to_t_uint256(expr_3872)))
                    if iszero(expr_3873) { break }
                    /// @src 6:951:952  "1"
                    let expr_3875 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _361 := convert_t_rational_1_by_1_to_t_uint256(expr_3875)
                    let _362 := var_digits_3850
                    let expr_3876 := checked_sub_t_uint256(_362, _361)
                    var_digits_3850 := expr_3876
                    /// @src 6:996:998  "48"
                    let expr_3885 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _363 := var_value_3833
                    let expr_3888 := _363
                    /// @src 6:1017:1019  "10"
                    let expr_3889 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3890 := mod_t_uint256(expr_3888, convert_t_rational_10_by_1_to_t_uint256(expr_3889))
                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3891 := expr_3890
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3892 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3885), expr_3891)
                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3893 := convert_t_uint256_to_t_uint8(expr_3892)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3894 := convert_t_uint8_to_t_bytes1(expr_3893)
                    /// @src 6:966:972  "buffer"
                    let _364_mpos := var_buffer_3865_mpos
                    let expr_3878_mpos := _364_mpos
                    /// @src 6:973:979  "digits"
                    let _365 := var_digits_3850
                    let expr_3879 := _365
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _366 := expr_3894
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3878_mpos, expr_3879), byte(0, _366))
                    let expr_3895 := expr_3894
                    /// @src 6:1045:1047  "10"
                    let expr_3898 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _367 := convert_t_rational_10_by_1_to_t_uint256(expr_3898)
                    let _368 := var_value_3833
                    let expr_3899 := checked_div_t_uint256(_368, _367)
                    var_value_3833 := expr_3899
                }
                /// @src 6:1081:1087  "buffer"
                let _369_mpos := var_buffer_3865_mpos
                let expr_3905_mpos := _369_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3906_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3905_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3836_mpos := expr_3906_mpos
                leave
            }
            /// @ast-id 4065 @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_4065(var_account_4053) -> var__4056
            {
                /// @src 5:1235:1239  "bool"
                let zero_t_bool_370 := zero_value_for_split_t_bool()
                var__4056 := zero_t_bool_370
                /// @src 5:1465:1472  "account"
                let _371 := var_account_4053
                let expr_4058 := _371
                /// @src 5:1465:1484  "account.code.length"
                let expr_4060 := extcodesize(expr_4058)
                /// @src 5:1487:1488  "0"
                let expr_4061 := 0x00
                /// @src 5:1465:1488  "account.code.length > 0"
                let expr_4062 := gt(cleanup_t_uint256(expr_4060), convert_t_rational_0_by_1_to_t_uint256(expr_4061))
                /// @src 5:1458:1488  "return account.code.length > 0"
                var__4056 := expr_4062
                leave
            }
            /// @ast-id 4367 @src 7:413:518  "function max(uint256 a, uint256 b) internal pure returns (uint256) {..."
            function fun_max_4367(var_a_4352, var_b_4354) -> var__4357
            {
                /// @src 7:471:478  "uint256"
                let zero_t_uint256_372 := zero_value_for_split_t_uint256()
                var__4357 := zero_t_uint256_372
                /// @src 7:497:498  "a"
                let _373 := var_a_4352
                let expr_4359 := _373
                /// @src 7:502:503  "b"
                let _374 := var_b_4354
                let expr_4360 := _374
                /// @src 7:497:503  "a >= b"
                let expr_4361 := iszero(lt(cleanup_t_uint256(expr_4359), cleanup_t_uint256(expr_4360)))
                /// @src 7:497:511  "a >= b ? a : b"
                let expr_4364
                switch expr_4361
                case 0 {
                    /// @src 7:510:511  "b"
                    let _375 := var_b_4354
                    let expr_4363 := _375
                    /// @src 7:497:511  "a >= b ? a : b"
                    expr_4364 := expr_4363
                }
                default {
                    /// @src 7:506:507  "a"
                    let _376 := var_a_4352
                    let expr_4362 := _376
                    /// @src 7:497:511  "a >= b ? a : b"
                    expr_4364 := expr_4362
                }
                /// @src 7:490:511  "return a >= b ? a : b"
                var__4357 := expr_4364
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_int256() -> ret
            { ret := 0 }
            /// @ast-id 4876 @src 15:568:759  "function clamp(..."
            function fun_clamp_4876(var__value_4856, var__min_4858, var__max_4860) -> var__4863
            {
                /// @src 15:677:683  "int256"
                let zero_t_int256_377 := zero_value_for_split_t_int256()
                var__4863 := zero_t_int256_377
                /// @src 15:702:712  "SignedMath"
                let expr_4865_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath")
                /// @src 15:717:727  "SignedMath"
                let expr_4867_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath")
                /// @src 15:732:738  "_value"
                let _378 := var__value_4856
                let expr_4869 := _378
                /// @src 15:740:744  "_min"
                let _379 := var__min_4858
                let expr_4870 := _379
                /// @src 15:717:745  "SignedMath.max(_value, _min)"
                let expr_4871 := fun_max_6444(expr_4869, expr_4870)
                /// @src 15:747:751  "_max"
                let _380 := var__max_4860
                let expr_4872 := _380
                /// @src 15:702:752  "SignedMath.min(SignedMath.max(_value, _min), _max)"
                let expr_4873 := fun_min_6462(expr_4871, expr_4872)
                /// @src 15:695:752  "return SignedMath.min(SignedMath.max(_value, _min), _max)"
                var__4863 := expr_4873
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_rational_1000000000000000000_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1000000000000000000_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1000000000000000000_by_1(value)))
            }
            /// @ast-id 4908 @src 15:1125:1411  "function cdexp(..."
            function fun_cdexp_4908(var__coefficient_4879, var__denominator_4881, var__exponent_4883) -> var__4886
            {
                /// @src 15:1253:1259  "int256"
                let zero_t_int256_381 := zero_value_for_split_t_int256()
                var__4886 := zero_t_int256_381
                /// @src 15:1291:1303  "_coefficient"
                let _382 := var__coefficient_4879
                let expr_4888 := _382
                /// @src 15:1323:1340  "FixedPointMathLib"
                let expr_4889_address := linkersymbol("./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib")
                /// @src 15:1348:1352  "1e18"
                let expr_4891 := 0x0de0b6b3a7640000
                /// @src 15:1356:1360  "1e18"
                let expr_4892 := 0x0de0b6b3a7640000
                /// @src 15:1363:1375  "_denominator"
                let _383 := var__denominator_4881
                let expr_4893 := _383
                /// @src 15:1356:1375  "1e18 / _denominator"
                let expr_4894 := checked_div_t_int256(convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4892), expr_4893)
                /// @src 15:1355:1376  "(1e18 / _denominator)"
                let expr_4895 := expr_4894
                /// @src 15:1348:1376  "1e18 - (1e18 / _denominator)"
                let expr_4896 := checked_sub_t_int256(convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4891), expr_4895)
                /// @src 15:1378:1387  "_exponent"
                let _384 := var__exponent_4883
                let expr_4897 := _384
                /// @src 15:1390:1394  "1e18"
                let expr_4898 := 0x0de0b6b3a7640000
                /// @src 15:1378:1394  "_exponent * 1e18"
                let expr_4899 := checked_mul_t_int256(expr_4897, convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4898))
                /// @src 15:1323:1395  "FixedPointMathLib.powWad(1e18 - (1e18 / _denominator), _exponent * 1e18)"
                let expr_4900 := fun_powWad_6622(expr_4896, expr_4899)
                /// @src 15:1322:1396  "(FixedPointMathLib.powWad(1e18 - (1e18 / _denominator), _exponent * 1e18))"
                let expr_4901 := expr_4900
                /// @src 15:1291:1396  "_coefficient *..."
                let expr_4902 := checked_mul_t_int256(expr_4888, expr_4901)
                /// @src 15:1290:1397  "(_coefficient *..."
                let expr_4903 := expr_4902
                /// @src 15:1400:1404  "1e18"
                let expr_4904 := 0x0de0b6b3a7640000
                /// @src 15:1290:1404  "(_coefficient *..."
                let expr_4905 := checked_div_t_int256(expr_4903, convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4904))
                /// @src 15:1271:1404  "return..."
                var__4886 := expr_4905
                leave
            }
            /// @ast-id 4953 @src 16:439:631  "function gas(uint256 _amount) internal view {..."
            function fun_gas_4953(var__amount_4929)
            {
                /// @src 16:505:506  "0"
                let expr_4934 := 0x00
                /// @src 16:493:506  "uint256 i = 0"
                let var_i_4933 := convert_t_rational_0_by_1_to_t_uint256(expr_4934)
                /// @src 16:537:546  "gasleft()"
                let expr_4939 := gas()
                /// @src 16:516:546  "uint256 initialGas = gasleft()"
                let var_initialGas_4937 := expr_4939
                /// @src 16:556:625  "while (initialGas - gasleft() < _amount) {..."
                for { } 1 { }
                {
                    /// @src 16:563:573  "initialGas"
                    let _385 := var_initialGas_4937
                    let expr_4941 := _385
                    /// @src 16:576:585  "gasleft()"
                    let expr_4943 := gas()
                    /// @src 16:563:585  "initialGas - gasleft()"
                    let expr_4944 := checked_sub_t_uint256(expr_4941, expr_4943)
                    /// @src 16:588:595  "_amount"
                    let _386 := var__amount_4929
                    let expr_4945 := _386
                    /// @src 16:563:595  "initialGas - gasleft() < _amount"
                    let expr_4946 := lt(cleanup_t_uint256(expr_4944), cleanup_t_uint256(expr_4945))
                    if iszero(expr_4946) { break }
                    /// @src 16:611:614  "++i"
                    let _388 := var_i_4933
                    let _387 := increment_t_uint256(_388)
                    var_i_4933 := _387
                    let expr_4948 := _387
                }
            }
            /// @ast-id 5172 @src 26:2396:2640  "function verifyInclusionProof(..."
            function fun_verifyInclusionProof_5172(var__key_5149_mpos, var__value_5151_mpos, var__proof_5154_mpos, var__root_5156) -> var__5159
            {
                /// @src 26:2565:2569  "bool"
                let zero_t_bool_389 := zero_value_for_split_t_bool()
                var__5159 := zero_t_bool_389
                /// @src 26:2588:2593  "Bytes"
                let expr_5161_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:2600:2606  "_value"
                let _390_mpos := var__value_5151_mpos
                let expr_5163_mpos := _390_mpos
                /// @src 26:2612:2616  "_key"
                let _391_mpos := var__key_5149_mpos
                let expr_5165_mpos := _391_mpos
                /// @src 26:2618:2624  "_proof"
                let _392_mpos := var__proof_5154_mpos
                let expr_5166_mpos := _392_mpos
                /// @src 26:2626:2631  "_root"
                let _393 := var__root_5156
                let expr_5167 := _393
                /// @src 26:2608:2632  "get(_key, _proof, _root)"
                let expr_5168_mpos := fun_get_5520(expr_5165_mpos, expr_5166_mpos, expr_5167)
                /// @src 26:2588:2633  "Bytes.equal(_value, get(_key, _proof, _root))"
                let expr_5169 := fun_equal_7319(expr_5163_mpos, expr_5168_mpos)
                /// @src 26:2581:2633  "return Bytes.equal(_value, get(_key, _proof, _root))"
                var__5159 := expr_5169
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: empty key")
            }
            function abi_encode_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                store_literal_in_memory_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function array_length_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(value) -> length
            { length := mload(value) }
            function memory_array_index_access_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 32)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            function store_literal_in_memory_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: key index exceeds to")
                mstore(add(memPtr, 32), "tal key length")
            }
            function abi_encode_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_32_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_32_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_32_by_1(value)))
            }
            function store_literal_in_memory_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: invalid internal nod")
                mstore(add(memPtr, 32), "e hash")
            }
            function abi_encode_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
                store_literal_in_memory_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: invalid large intern")
                mstore(add(memPtr, 32), "al hash")
            }
            function abi_encode_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)
                store_literal_in_memory_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: invalid root hash")
            }
            function abi_encode_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)
                store_literal_in_memory_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function array_length_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(value) -> length
            { length := mload(value) }
            function convert_t_rational_16_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_16_by_1(value)))
            }
            /// @src 26:803:844  "uint256 internal constant TREE_RADIX = 16"
            function constant_TREE_RADIX_5120() -> ret
            {
                /// @src 26:842:844  "16"
                let expr_5119 := 0x10
                let _433 := convert_t_rational_16_by_1_to_t_uint256(expr_5119)
                ret := _433
            }
            /// @src 26:943:1004  "uint256 internal constant BRANCH_NODE_LENGTH = TREE_RADIX + 1"
            function constant_BRANCH_NODE_LENGTH_5126() -> ret
            {
                /// @src 26:990:1000  "TREE_RADIX"
                let expr_5123 := constant_TREE_RADIX_5120()
                /// @src 26:1003:1004  "1"
                let expr_5124 := 0x01
                /// @src 26:990:1004  "TREE_RADIX + 1"
                let expr_5125 := checked_add_t_uint256(expr_5123, convert_t_rational_1_by_1_to_t_uint256(expr_5124))
                let _434 := expr_5125
                ret := _434
            }
            function cleanup_t_rational_2_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_2_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
            }
            /// @src 26:1116:1175  "uint256 internal constant LEAF_OR_EXTENSION_NODE_LENGTH = 2"
            function constant_LEAF_OR_EXTENSION_NODE_LENGTH_5130() -> ret
            {
                /// @src 26:1174:1175  "2"
                let expr_5129 := 0x02
                let _438 := convert_t_rational_2_by_1_to_t_uint256(expr_5129)
                ret := _438
            }
            function store_literal_in_memory_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: received an unparsea")
                mstore(add(memPtr, 32), "ble node")
            }
            function abi_encode_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)
                store_literal_in_memory_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3_to_t_string_memory_ptr_fromStack(tail)
            }
            function read_from_memoryt_bytes1(ptr) -> returnValue
            {
                let value := cleanup_t_bytes1(mload(ptr))
                returnValue := value
            }
            function shift_right_248_unsigned(value) -> newValue
            { newValue := shr(248, value) }
            function convert_t_bytes1_to_t_uint8(value) -> converted
            {
                converted := convert_t_uint8_to_t_uint8(shift_right_248_unsigned(value))
            }
            function convert_t_rational_2_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_2_by_1(value)))
            }
            function mod_t_uint8(x, y) -> r
            {
                x := cleanup_t_uint8(x)
                y := cleanup_t_uint8(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function checked_sub_t_uint8(x, y) -> diff
            {
                x := cleanup_t_uint8(x)
                y := cleanup_t_uint8(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function store_literal_in_memory_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: path remainder must ")
                mstore(add(memPtr, 32), "share all nibbles with key")
            }
            function abi_encode_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @src 26:1518:1562  "uint8 internal constant PREFIX_LEAF_EVEN = 2"
            function constant_PREFIX_LEAF_EVEN_5142() -> ret
            {
                /// @src 26:1561:1562  "2"
                let expr_5141 := 0x02
                let _455 := convert_t_rational_2_by_1_to_t_uint8(expr_5141)
                ret := _455
            }
            function cleanup_t_rational_3_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_3_by_1(value)))
            }
            /// @src 26:1640:1683  "uint8 internal constant PREFIX_LEAF_ODD = 3"
            function constant_PREFIX_LEAF_ODD_5146() -> ret
            {
                /// @src 26:1682:1683  "3"
                let expr_5145 := 0x03
                let _457 := convert_t_rational_3_by_1_to_t_uint8(expr_5145)
                ret := _457
            }
            function convert_t_rational_0_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
            }
            /// @src 26:1259:1308  "uint8 internal constant PREFIX_EXTENSION_EVEN = 0"
            function constant_PREFIX_EXTENSION_EVEN_5134() -> ret
            {
                /// @src 26:1307:1308  "0"
                let expr_5133 := 0x00
                let _459 := convert_t_rational_0_by_1_to_t_uint8(expr_5133)
                ret := _459
            }
            /// @src 26:1391:1439  "uint8 internal constant PREFIX_EXTENSION_ODD = 1"
            function constant_PREFIX_EXTENSION_ODD_5138() -> ret
            {
                /// @src 26:1438:1439  "1"
                let expr_5137 := 0x01
                let _461 := convert_t_rational_1_by_1_to_t_uint8(expr_5137)
                ret := _461
            }
            function store_literal_in_memory_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: received a node with")
                mstore(add(memPtr, 32), " an unknown prefix")
            }
            function abi_encode_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70_to_t_string_memory_ptr_fromStack(tail)
            }
            function memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 32)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            function store_literal_in_memory_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: key remainder must b")
                mstore(add(memPtr, 32), "e identical to path remainder")
            }
            function abi_encode_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)
                store_literal_in_memory_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: value length must be")
                mstore(add(memPtr, 32), " greater than zero (leaf)")
            }
            function abi_encode_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 57)
                store_literal_in_memory_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: value node must be l")
                mstore(add(memPtr, 32), "ast node in proof (leaf)")
            }
            function abi_encode_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)
                store_literal_in_memory_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: value length must be")
                mstore(add(memPtr, 32), " greater than zero (branch)")
            }
            function abi_encode_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 59)
                store_literal_in_memory_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: value node must be l")
                mstore(add(memPtr, 32), "ast node in proof (branch)")
            }
            function abi_encode_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076(memPtr)
            {
                mstore(add(memPtr, 0), "MerkleTrie: ran out of proof ele")
                mstore(add(memPtr, 32), "ments")
            }
            function abi_encode_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)
                store_literal_in_memory_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076_to_t_string_memory_ptr_fromStack(tail)
            }
            /// @ast-id 5520 @src 26:2954:9695  "function get(..."
            function fun_get_5520(var__key_5175_mpos, var__proof_5178_mpos, var__root_5180) -> var__5183_mpos
            {
                /// @src 26:3077:3089  "bytes memory"
                let zero_t_bytes_memory_ptr_394_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5183_mpos := zero_t_bytes_memory_ptr_394_mpos
                /// @src 26:3109:3113  "_key"
                let _395_mpos := var__key_5175_mpos
                let expr_5186_mpos := _395_mpos
                /// @src 26:3109:3120  "_key.length"
                let expr_5187 := array_length_t_bytes_memory_ptr(expr_5186_mpos)
                /// @src 26:3123:3124  "0"
                let expr_5188 := 0x00
                /// @src 26:3109:3124  "_key.length > 0"
                let expr_5189 := gt(cleanup_t_uint256(expr_5187), convert_t_rational_0_by_1_to_t_uint256(expr_5188))
                /// @src 26:3101:3150  "require(_key.length > 0, \"MerkleTrie: empty key\")"
                require_helper_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(expr_5189)
                /// @src 26:3199:3205  "_proof"
                let _396_mpos := var__proof_5178_mpos
                let expr_5199_mpos := _396_mpos
                /// @src 26:3187:3206  "_parseProof(_proof)"
                let expr_5200_mpos := fun__parseProof_5580(expr_5199_mpos)
                /// @src 26:3161:3206  "TrieNode[] memory proof = _parseProof(_proof)"
                let var_proof_5197_mpos := expr_5200_mpos
                /// @src 26:3235:3240  "Bytes"
                let expr_5204_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:3251:3255  "_key"
                let _397_mpos := var__key_5175_mpos
                let expr_5206_mpos := _397_mpos
                /// @src 26:3235:3256  "Bytes.toNibbles(_key)"
                let expr_5207_mpos := fun_toNibbles_7300(expr_5206_mpos)
                /// @src 26:3216:3256  "bytes memory key = Bytes.toNibbles(_key)"
                let var_key_5203_mpos := expr_5207_mpos
                /// @src 26:3312:3317  "_root"
                let _398 := var__root_5180
                let expr_5213 := _398
                /// @src 26:3295:3318  "abi.encodePacked(_root)"
                let expr_5214_mpos := allocate_unbounded()
                let _399 := add(expr_5214_mpos, 0x20)
                let _400 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_399, expr_5213)
                mstore(expr_5214_mpos, sub(_400, add(expr_5214_mpos, 0x20)))
                finalize_allocation(expr_5214_mpos, sub(_400, expr_5214_mpos))
                /// @src 26:3266:3318  "bytes memory currentNodeID = abi.encodePacked(_root)"
                let var_currentNodeID_5210_mpos := expr_5214_mpos
                /// @src 26:3354:3355  "0"
                let expr_5218 := 0x00
                /// @src 26:3328:3355  "uint256 currentKeyIndex = 0"
                let var_currentKeyIndex_5217 := convert_t_rational_0_by_1_to_t_uint256(expr_5218)
                /// @src 26:3437:9631  "for (uint256 i = 0; i < proof.length; i++) {..."
                for {
                    /// @src 26:3454:3455  "0"
                    let expr_5222 := 0x00
                    /// @src 26:3442:3455  "uint256 i = 0"
                    let var_i_5221 := convert_t_rational_0_by_1_to_t_uint256(expr_5222)
                }
                1
                {
                    /// @src 26:3475:3478  "i++"
                    let _402 := var_i_5221
                    let _401 := increment_t_uint256(_402)
                    var_i_5221 := _401
                    let expr_5229 := _402
                }
                {
                    /// @src 26:3457:3458  "i"
                    let _403 := var_i_5221
                    let expr_5224 := _403
                    /// @src 26:3461:3466  "proof"
                    let _404_mpos := var_proof_5197_mpos
                    let expr_5225_mpos := _404_mpos
                    /// @src 26:3461:3473  "proof.length"
                    let expr_5226 := array_length_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5225_mpos)
                    /// @src 26:3457:3473  "i < proof.length"
                    let expr_5227 := lt(cleanup_t_uint256(expr_5224), cleanup_t_uint256(expr_5226))
                    if iszero(expr_5227) { break }
                    /// @src 26:3524:3529  "proof"
                    let _405_mpos := var_proof_5197_mpos
                    let expr_5234_mpos := _405_mpos
                    /// @src 26:3530:3531  "i"
                    let _406 := var_i_5221
                    let expr_5235 := _406
                    /// @src 26:3524:3532  "proof[i]"
                    let _407_mpos := mload(memory_array_index_access_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5234_mpos, expr_5235))
                    let expr_5236_mpos := _407_mpos
                    /// @src 26:3494:3532  "TrieNode memory currentNode = proof[i]"
                    let var_currentNode_5233_mpos := expr_5236_mpos
                    /// @src 26:3661:3676  "currentKeyIndex"
                    let _408 := var_currentKeyIndex_5217
                    let expr_5239 := _408
                    /// @src 26:3680:3683  "key"
                    let _409_mpos := var_key_5203_mpos
                    let expr_5240_mpos := _409_mpos
                    /// @src 26:3680:3690  "key.length"
                    let expr_5241 := array_length_t_bytes_memory_ptr(expr_5240_mpos)
                    /// @src 26:3661:3690  "currentKeyIndex <= key.length"
                    let expr_5242 := iszero(gt(cleanup_t_uint256(expr_5239), cleanup_t_uint256(expr_5241)))
                    /// @src 26:3636:3770  "require(..."
                    require_helper_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(expr_5242)
                    /// @src 26:3789:3804  "currentKeyIndex"
                    let _410 := var_currentKeyIndex_5217
                    let expr_5246 := _410
                    /// @src 26:3808:3809  "0"
                    let expr_5247 := 0x00
                    /// @src 26:3789:3809  "currentKeyIndex == 0"
                    let expr_5248 := eq(cleanup_t_uint256(expr_5246), convert_t_rational_0_by_1_to_t_uint256(expr_5247))
                    /// @src 26:3785:4680  "if (currentKeyIndex == 0) {..."
                    switch expr_5248
                    case 0 {
                        /// @src 26:4094:4105  "currentNode"
                        let _411_mpos := var_currentNode_5233_mpos
                        let expr_5265_mpos := _411_mpos
                        /// @src 26:4094:4113  "currentNode.encoded"
                        let _412 := add(expr_5265_mpos, 0)
                        let _413_mpos := mload(_412)
                        let expr_5266_mpos := _413_mpos
                        /// @src 26:4094:4120  "currentNode.encoded.length"
                        let expr_5267 := array_length_t_bytes_memory_ptr(expr_5266_mpos)
                        /// @src 26:4124:4126  "32"
                        let expr_5268 := 0x20
                        /// @src 26:4094:4126  "currentNode.encoded.length >= 32"
                        let expr_5269 := iszero(lt(cleanup_t_uint256(expr_5267), convert_t_rational_32_by_1_to_t_uint256(expr_5268)))
                        /// @src 26:4090:4680  "if (currentNode.encoded.length >= 32) {..."
                        switch expr_5269
                        case 0 {
                            /// @src 26:4538:4543  "Bytes"
                            let expr_5287_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:4550:4561  "currentNode"
                            let _414_mpos := var_currentNode_5233_mpos
                            let expr_5289_mpos := _414_mpos
                            /// @src 26:4550:4569  "currentNode.encoded"
                            let _415 := add(expr_5289_mpos, 0)
                            let _416_mpos := mload(_415)
                            let expr_5290_mpos := _416_mpos
                            /// @src 26:4571:4584  "currentNodeID"
                            let _417_mpos := var_currentNodeID_5210_mpos
                            let expr_5291_mpos := _417_mpos
                            /// @src 26:4538:4585  "Bytes.equal(currentNode.encoded, currentNodeID)"
                            let expr_5292 := fun_equal_7319(expr_5290_mpos, expr_5291_mpos)
                            /// @src 26:4509:4665  "require(..."
                            require_helper_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(expr_5292)
                        }
                        default /// @src 26:4090:4680  "if (currentNode.encoded.length >= 32) {..."
                        {
                            /// @src 26:4251:4256  "Bytes"
                            let expr_5271_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:4290:4301  "currentNode"
                            let _418_mpos := var_currentNode_5233_mpos
                            let expr_5276_mpos := _418_mpos
                            /// @src 26:4290:4309  "currentNode.encoded"
                            let _419 := add(expr_5276_mpos, 0)
                            let _420_mpos := mload(_419)
                            let expr_5277_mpos := _420_mpos
                            /// @src 26:4280:4310  "keccak256(currentNode.encoded)"
                            let expr_5278 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_5277_mpos), array_length_t_bytes_memory_ptr(expr_5277_mpos))
                            /// @src 26:4263:4311  "abi.encodePacked(keccak256(currentNode.encoded))"
                            let expr_5279_mpos := allocate_unbounded()
                            let _421 := add(expr_5279_mpos, 0x20)
                            let _422 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_421, expr_5278)
                            mstore(expr_5279_mpos, sub(_422, add(expr_5279_mpos, 0x20)))
                            finalize_allocation(expr_5279_mpos, sub(_422, expr_5279_mpos))
                            /// @src 26:4313:4326  "currentNodeID"
                            let _423_mpos := var_currentNodeID_5210_mpos
                            let expr_5280_mpos := _423_mpos
                            /// @src 26:4251:4327  "Bytes.equal(abi.encodePacked(keccak256(currentNode.encoded)), currentNodeID)"
                            let expr_5281 := fun_equal_7319(expr_5279_mpos, expr_5280_mpos)
                            /// @src 26:4222:4408  "require(..."
                            require_helper_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(expr_5281)
                        }
                    }
                    default /// @src 26:3785:4680  "if (currentKeyIndex == 0) {..."
                    {
                        /// @src 26:3922:3927  "Bytes"
                        let expr_5250_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                        /// @src 26:3961:3972  "currentNode"
                        let _424_mpos := var_currentNode_5233_mpos
                        let expr_5255_mpos := _424_mpos
                        /// @src 26:3961:3980  "currentNode.encoded"
                        let _425 := add(expr_5255_mpos, 0)
                        let _426_mpos := mload(_425)
                        let expr_5256_mpos := _426_mpos
                        /// @src 26:3951:3981  "keccak256(currentNode.encoded)"
                        let expr_5257 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_5256_mpos), array_length_t_bytes_memory_ptr(expr_5256_mpos))
                        /// @src 26:3934:3982  "abi.encodePacked(keccak256(currentNode.encoded))"
                        let expr_5258_mpos := allocate_unbounded()
                        let _427 := add(expr_5258_mpos, 0x20)
                        let _428 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_427, expr_5257)
                        mstore(expr_5258_mpos, sub(_428, add(expr_5258_mpos, 0x20)))
                        finalize_allocation(expr_5258_mpos, sub(_428, expr_5258_mpos))
                        /// @src 26:3984:3997  "currentNodeID"
                        let _429_mpos := var_currentNodeID_5210_mpos
                        let expr_5259_mpos := _429_mpos
                        /// @src 26:3922:3998  "Bytes.equal(abi.encodePacked(keccak256(currentNode.encoded)), currentNodeID)"
                        let expr_5260 := fun_equal_7319(expr_5258_mpos, expr_5259_mpos)
                        /// @src 26:3893:4069  "require(..."
                        require_helper_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(expr_5260)
                    }
                    /// @src 26:4698:4709  "currentNode"
                    let _430_mpos := var_currentNode_5233_mpos
                    let expr_5299_mpos := _430_mpos
                    /// @src 26:4698:4717  "currentNode.decoded"
                    let _431 := add(expr_5299_mpos, 32)
                    let _432_mpos := mload(_431)
                    let expr_5300_mpos := _432_mpos
                    /// @src 26:4698:4724  "currentNode.decoded.length"
                    let expr_5301 := array_length_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5300_mpos)
                    /// @src 26:4728:4746  "BRANCH_NODE_LENGTH"
                    let expr_5302 := constant_BRANCH_NODE_LENGTH_5126()
                    /// @src 26:4698:4746  "currentNode.decoded.length == BRANCH_NODE_LENGTH"
                    let expr_5303 := eq(cleanup_t_uint256(expr_5301), cleanup_t_uint256(expr_5302))
                    /// @src 26:4694:9621  "if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {..."
                    switch expr_5303
                    case 0 {
                        /// @src 26:6286:6297  "currentNode"
                        let _435_mpos := var_currentNode_5233_mpos
                        let expr_5371_mpos := _435_mpos
                        /// @src 26:6286:6305  "currentNode.decoded"
                        let _436 := add(expr_5371_mpos, 32)
                        let _437_mpos := mload(_436)
                        let expr_5372_mpos := _437_mpos
                        /// @src 26:6286:6312  "currentNode.decoded.length"
                        let expr_5373 := array_length_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5372_mpos)
                        /// @src 26:6316:6345  "LEAF_OR_EXTENSION_NODE_LENGTH"
                        let expr_5374 := constant_LEAF_OR_EXTENSION_NODE_LENGTH_5130()
                        /// @src 26:6286:6345  "currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH"
                        let expr_5375 := eq(cleanup_t_uint256(expr_5373), cleanup_t_uint256(expr_5374))
                        /// @src 26:6282:9621  "if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {..."
                        switch expr_5375
                        case 0 {
                            /// @src 26:9556:9606  "revert(\"MerkleTrie: received an unparseable node\")"
                            {
                                let _439 := allocate_unbounded()
                                mstore(_439, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                                let _440 := abi_encode_tuple_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3__to_t_string_memory_ptr__fromStack(add(_439, 4))
                                revert(_439, sub(_440, _439))
                            }
                        }
                        default /// @src 26:6282:9621  "if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {..."
                        {
                            /// @src 26:6398:6409  "currentNode"
                            let _441_mpos := var_currentNode_5233_mpos
                            let expr_5379_mpos := _441_mpos
                            /// @src 26:6385:6410  "_getNodePath(currentNode)"
                            let expr_5380_mpos := fun__getNodePath_5625(expr_5379_mpos)
                            /// @src 26:6365:6410  "bytes memory path = _getNodePath(currentNode)"
                            let var_path_5377_mpos := expr_5380_mpos
                            /// @src 26:6449:6453  "path"
                            let _442_mpos := var_path_5377_mpos
                            let expr_5386_mpos := _442_mpos
                            /// @src 26:6454:6455  "0"
                            let expr_5387 := 0x00
                            /// @src 26:6449:6456  "path[0]"
                            let _443 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5386_mpos, convert_t_rational_0_by_1_to_t_uint256(expr_5387)))
                            let expr_5388 := _443
                            /// @src 26:6443:6457  "uint8(path[0])"
                            let expr_5389 := convert_t_bytes1_to_t_uint8(expr_5388)
                            /// @src 26:6428:6457  "uint8 prefix = uint8(path[0])"
                            let var_prefix_5383 := expr_5389
                            /// @src 26:6490:6491  "2"
                            let expr_5393 := 0x02
                            /// @src 26:6495:6501  "prefix"
                            let _444 := var_prefix_5383
                            let expr_5394 := _444
                            /// @src 26:6504:6505  "2"
                            let expr_5395 := 0x02
                            /// @src 26:6495:6505  "prefix % 2"
                            let expr_5396 := mod_t_uint8(expr_5394, convert_t_rational_2_by_1_to_t_uint8(expr_5395))
                            /// @src 26:6494:6506  "(prefix % 2)"
                            let expr_5397 := expr_5396
                            /// @src 26:6490:6506  "2 - (prefix % 2)"
                            let expr_5398 := checked_sub_t_uint8(convert_t_rational_2_by_1_to_t_uint8(expr_5393), expr_5397)
                            /// @src 26:6475:6506  "uint8 offset = 2 - (prefix % 2)"
                            let var_offset_5392 := expr_5398
                            /// @src 26:6553:6558  "Bytes"
                            let expr_5402_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:6565:6569  "path"
                            let _445_mpos := var_path_5377_mpos
                            let expr_5404_mpos := _445_mpos
                            /// @src 26:6571:6577  "offset"
                            let _446 := var_offset_5392
                            let expr_5405 := _446
                            /// @src 26:6553:6578  "Bytes.slice(path, offset)"
                            let _447 := convert_t_uint8_to_t_uint256(expr_5405)
                            let expr_5406_mpos := fun_slice_7231(expr_5404_mpos, _447)
                            /// @src 26:6524:6578  "bytes memory pathRemainder = Bytes.slice(path, offset)"
                            let var_pathRemainder_5401_mpos := expr_5406_mpos
                            /// @src 26:6624:6629  "Bytes"
                            let expr_5410_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:6636:6639  "key"
                            let _448_mpos := var_key_5203_mpos
                            let expr_5412_mpos := _448_mpos
                            /// @src 26:6641:6656  "currentKeyIndex"
                            let _449 := var_currentKeyIndex_5217
                            let expr_5413 := _449
                            /// @src 26:6624:6657  "Bytes.slice(key, currentKeyIndex)"
                            let expr_5414_mpos := fun_slice_7231(expr_5412_mpos, expr_5413)
                            /// @src 26:6596:6657  "bytes memory keyRemainder = Bytes.slice(key, currentKeyIndex)"
                            let var_keyRemainder_5409_mpos := expr_5414_mpos
                            /// @src 26:6727:6740  "pathRemainder"
                            let _450_mpos := var_pathRemainder_5401_mpos
                            let expr_5419_mpos := _450_mpos
                            /// @src 26:6742:6754  "keyRemainder"
                            let _451_mpos := var_keyRemainder_5409_mpos
                            let expr_5420_mpos := _451_mpos
                            /// @src 26:6704:6755  "_getSharedNibbleLength(pathRemainder, keyRemainder)"
                            let expr_5421 := fun__getSharedNibbleLength_5672(expr_5419_mpos, expr_5420_mpos)
                            /// @src 26:6675:6755  "uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder)"
                            let var_sharedNibbleLength_5417 := expr_5421
                            /// @src 26:7038:7051  "pathRemainder"
                            let _452_mpos := var_pathRemainder_5401_mpos
                            let expr_5424_mpos := _452_mpos
                            /// @src 26:7038:7058  "pathRemainder.length"
                            let expr_5425 := array_length_t_bytes_memory_ptr(expr_5424_mpos)
                            /// @src 26:7062:7080  "sharedNibbleLength"
                            let _453 := var_sharedNibbleLength_5417
                            let expr_5426 := _453
                            /// @src 26:7038:7080  "pathRemainder.length == sharedNibbleLength"
                            let expr_5427 := eq(cleanup_t_uint256(expr_5425), cleanup_t_uint256(expr_5426))
                            /// @src 26:7009:7180  "require(..."
                            require_helper_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(expr_5427)
                            /// @src 26:7203:7209  "prefix"
                            let _454 := var_prefix_5383
                            let expr_5431 := _454
                            /// @src 26:7213:7229  "PREFIX_LEAF_EVEN"
                            let expr_5432 := constant_PREFIX_LEAF_EVEN_5142()
                            /// @src 26:7203:7229  "prefix == PREFIX_LEAF_EVEN"
                            let expr_5433 := eq(cleanup_t_uint8(expr_5431), cleanup_t_uint8(expr_5432))
                            /// @src 26:7203:7258  "prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD"
                            let expr_5437 := expr_5433
                            if iszero(expr_5437)
                            {
                                /// @src 26:7233:7239  "prefix"
                                let _456 := var_prefix_5383
                                let expr_5434 := _456
                                /// @src 26:7243:7258  "PREFIX_LEAF_ODD"
                                let expr_5435 := constant_PREFIX_LEAF_ODD_5146()
                                /// @src 26:7233:7258  "prefix == PREFIX_LEAF_ODD"
                                let expr_5436 := eq(cleanup_t_uint8(expr_5434), cleanup_t_uint8(expr_5435))
                                /// @src 26:7203:7258  "prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD"
                                expr_5437 := expr_5436
                            }
                            /// @src 26:7199:9518  "if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {..."
                            switch expr_5437
                            case 0 {
                                /// @src 26:8927:8933  "prefix"
                                let _458 := var_prefix_5383
                                let expr_5477 := _458
                                /// @src 26:8937:8958  "PREFIX_EXTENSION_EVEN"
                                let expr_5478 := constant_PREFIX_EXTENSION_EVEN_5134()
                                /// @src 26:8927:8958  "prefix == PREFIX_EXTENSION_EVEN"
                                let expr_5479 := eq(cleanup_t_uint8(expr_5477), cleanup_t_uint8(expr_5478))
                                /// @src 26:8927:8992  "prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD"
                                let expr_5483 := expr_5479
                                if iszero(expr_5483)
                                {
                                    /// @src 26:8962:8968  "prefix"
                                    let _460 := var_prefix_5383
                                    let expr_5480 := _460
                                    /// @src 26:8972:8992  "PREFIX_EXTENSION_ODD"
                                    let expr_5481 := constant_PREFIX_EXTENSION_ODD_5138()
                                    /// @src 26:8962:8992  "prefix == PREFIX_EXTENSION_ODD"
                                    let expr_5482 := eq(cleanup_t_uint8(expr_5480), cleanup_t_uint8(expr_5481))
                                    /// @src 26:8927:8992  "prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD"
                                    expr_5483 := expr_5482
                                }
                                /// @src 26:8923:9518  "if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {..."
                                switch expr_5483
                                case 0 {
                                    /// @src 26:9439:9499  "revert(\"MerkleTrie: received a node with an unknown prefix\")"
                                    {
                                        let _462 := allocate_unbounded()
                                        mstore(_462, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                                        let _463 := abi_encode_tuple_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70__to_t_string_memory_ptr__fromStack(add(_462, 4))
                                        revert(_462, sub(_463, _462))
                                    }
                                }
                                default /// @src 26:8923:9518  "if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {..."
                                {
                                    /// @src 26:9310:9321  "currentNode"
                                    let _464_mpos := var_currentNode_5233_mpos
                                    let expr_5486_mpos := _464_mpos
                                    /// @src 26:9310:9329  "currentNode.decoded"
                                    let _465 := add(expr_5486_mpos, 32)
                                    let _466_mpos := mload(_465)
                                    let expr_5487_mpos := _466_mpos
                                    /// @src 26:9330:9331  "1"
                                    let expr_5488 := 0x01
                                    /// @src 26:9310:9332  "currentNode.decoded[1]"
                                    let _467_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5487_mpos, convert_t_rational_1_by_1_to_t_uint256(expr_5488)))
                                    let expr_5489_mpos := _467_mpos
                                    /// @src 26:9299:9333  "_getNodeID(currentNode.decoded[1])"
                                    let expr_5490_mpos := fun__getNodeID_5604(expr_5489_mpos)
                                    /// @src 26:9283:9333  "currentNodeID = _getNodeID(currentNode.decoded[1])"
                                    var_currentNodeID_5210_mpos := expr_5490_mpos
                                    let _468_mpos := var_currentNodeID_5210_mpos
                                    let expr_5491_mpos := _468_mpos
                                    /// @src 26:9374:9392  "sharedNibbleLength"
                                    let _469 := var_sharedNibbleLength_5417
                                    let expr_5494 := _469
                                    /// @src 26:9355:9392  "currentKeyIndex += sharedNibbleLength"
                                    let _470 := var_currentKeyIndex_5217
                                    let expr_5495 := checked_add_t_uint256(_470, expr_5494)
                                    var_currentKeyIndex_5217 := expr_5495
                                }
                            }
                            default /// @src 26:7199:9518  "if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {..."
                            {
                                /// @src 26:7876:7888  "keyRemainder"
                                let _471_mpos := var_keyRemainder_5409_mpos
                                let expr_5439_mpos := _471_mpos
                                /// @src 26:7876:7895  "keyRemainder.length"
                                let expr_5440 := array_length_t_bytes_memory_ptr(expr_5439_mpos)
                                /// @src 26:7899:7917  "sharedNibbleLength"
                                let _472 := var_sharedNibbleLength_5417
                                let expr_5441 := _472
                                /// @src 26:7876:7917  "keyRemainder.length == sharedNibbleLength"
                                let expr_5442 := eq(cleanup_t_uint256(expr_5440), cleanup_t_uint256(expr_5441))
                                /// @src 26:7843:8028  "require(..."
                                require_helper_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(expr_5442)
                                /// @src 26:8398:8407  "RLPReader"
                                let expr_5448_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                                /// @src 26:8418:8429  "currentNode"
                                let _473_mpos := var_currentNode_5233_mpos
                                let expr_5450_mpos := _473_mpos
                                /// @src 26:8418:8437  "currentNode.decoded"
                                let _474 := add(expr_5450_mpos, 32)
                                let _475_mpos := mload(_474)
                                let expr_5451_mpos := _475_mpos
                                /// @src 26:8438:8439  "1"
                                let expr_5452 := 0x01
                                /// @src 26:8418:8440  "currentNode.decoded[1]"
                                let _476_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5451_mpos, convert_t_rational_1_by_1_to_t_uint256(expr_5452)))
                                let expr_5453_mpos := _476_mpos
                                /// @src 26:8398:8441  "RLPReader.readBytes(currentNode.decoded[1])"
                                let expr_5454_mpos := fun_readBytes_7553(expr_5453_mpos)
                                /// @src 26:8377:8441  "bytes memory value = RLPReader.readBytes(currentNode.decoded[1])"
                                let var_value_5447_mpos := expr_5454_mpos
                                /// @src 26:8496:8501  "value"
                                let _477_mpos := var_value_5447_mpos
                                let expr_5457_mpos := _477_mpos
                                /// @src 26:8496:8508  "value.length"
                                let expr_5458 := array_length_t_bytes_memory_ptr(expr_5457_mpos)
                                /// @src 26:8511:8512  "0"
                                let expr_5459 := 0x00
                                /// @src 26:8496:8512  "value.length > 0"
                                let expr_5460 := gt(cleanup_t_uint256(expr_5458), convert_t_rational_0_by_1_to_t_uint256(expr_5459))
                                /// @src 26:8463:8619  "require(..."
                                require_helper_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(expr_5460)
                                /// @src 26:8736:8737  "i"
                                let _478 := var_i_5221
                                let expr_5465 := _478
                                /// @src 26:8741:8746  "proof"
                                let _479_mpos := var_proof_5197_mpos
                                let expr_5466_mpos := _479_mpos
                                /// @src 26:8741:8753  "proof.length"
                                let expr_5467 := array_length_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5466_mpos)
                                /// @src 26:8756:8757  "1"
                                let expr_5468 := 0x01
                                /// @src 26:8741:8757  "proof.length - 1"
                                let expr_5469 := checked_sub_t_uint256(expr_5467, convert_t_rational_1_by_1_to_t_uint256(expr_5468))
                                /// @src 26:8736:8757  "i == proof.length - 1"
                                let expr_5470 := eq(cleanup_t_uint256(expr_5465), cleanup_t_uint256(expr_5469))
                                /// @src 26:8703:8863  "require(..."
                                require_helper_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(expr_5470)
                                /// @src 26:8893:8898  "value"
                                let _480_mpos := var_value_5447_mpos
                                let expr_5474_mpos := _480_mpos
                                /// @src 26:8886:8898  "return value"
                                var__5183_mpos := expr_5474_mpos
                                leave
                            }
                        }
                    }
                    default /// @src 26:4694:9621  "if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {..."
                    {
                        /// @src 26:4770:4785  "currentKeyIndex"
                        let _481 := var_currentKeyIndex_5217
                        let expr_5304 := _481
                        /// @src 26:4789:4792  "key"
                        let _482_mpos := var_key_5203_mpos
                        let expr_5305_mpos := _482_mpos
                        /// @src 26:4789:4799  "key.length"
                        let expr_5306 := array_length_t_bytes_memory_ptr(expr_5305_mpos)
                        /// @src 26:4770:4799  "currentKeyIndex == key.length"
                        let expr_5307 := eq(cleanup_t_uint256(expr_5304), cleanup_t_uint256(expr_5306))
                        /// @src 26:4766:6262  "if (currentKeyIndex == key.length) {..."
                        switch expr_5307
                        case 0 {
                            /// @src 26:6034:6037  "key"
                            let _483_mpos := var_key_5203_mpos
                            let expr_5343_mpos := _483_mpos
                            /// @src 26:6038:6053  "currentKeyIndex"
                            let _484 := var_currentKeyIndex_5217
                            let expr_5344 := _484
                            /// @src 26:6034:6054  "key[currentKeyIndex]"
                            let _485 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5343_mpos, expr_5344))
                            let expr_5345 := _485
                            /// @src 26:6028:6055  "uint8(key[currentKeyIndex])"
                            let expr_5346 := convert_t_bytes1_to_t_uint8(expr_5345)
                            /// @src 26:6010:6055  "uint8 branchKey = uint8(key[currentKeyIndex])"
                            let var_branchKey_5340 := expr_5346
                            /// @src 26:6113:6124  "currentNode"
                            let _486_mpos := var_currentNode_5233_mpos
                            let expr_5353_mpos := _486_mpos
                            /// @src 26:6113:6132  "currentNode.decoded"
                            let _487 := add(expr_5353_mpos, 32)
                            let _488_mpos := mload(_487)
                            let expr_5354_mpos := _488_mpos
                            /// @src 26:6133:6142  "branchKey"
                            let _489 := var_branchKey_5340
                            let expr_5355 := _489
                            /// @src 26:6113:6143  "currentNode.decoded[branchKey]"
                            let _490_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5354_mpos, convert_t_uint8_to_t_uint256(expr_5355)))
                            let expr_5356_mpos := _490_mpos
                            /// @src 26:6077:6143  "RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey]"
                            let var_nextNode_5352_mpos := expr_5356_mpos
                            /// @src 26:6192:6200  "nextNode"
                            let _491_mpos := var_nextNode_5352_mpos
                            let expr_5360_mpos := _491_mpos
                            /// @src 26:6181:6201  "_getNodeID(nextNode)"
                            let expr_5361_mpos := fun__getNodeID_5604(expr_5360_mpos)
                            /// @src 26:6165:6201  "currentNodeID = _getNodeID(nextNode)"
                            var_currentNodeID_5210_mpos := expr_5361_mpos
                            let _492_mpos := var_currentNodeID_5210_mpos
                            let expr_5362_mpos := _492_mpos
                            /// @src 26:6242:6243  "1"
                            let expr_5365 := 0x01
                            /// @src 26:6223:6243  "currentKeyIndex += 1"
                            let _493 := convert_t_rational_1_by_1_to_t_uint256(expr_5365)
                            let _494 := var_currentKeyIndex_5217
                            let expr_5366 := checked_add_t_uint256(_494, _493)
                            var_currentKeyIndex_5217 := expr_5366
                        }
                        default /// @src 26:4766:6262  "if (currentKeyIndex == key.length) {..."
                        {
                            /// @src 26:5310:5319  "RLPReader"
                            let expr_5310_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                            /// @src 26:5330:5341  "currentNode"
                            let _495_mpos := var_currentNode_5233_mpos
                            let expr_5312_mpos := _495_mpos
                            /// @src 26:5330:5349  "currentNode.decoded"
                            let _496 := add(expr_5312_mpos, 32)
                            let _497_mpos := mload(_496)
                            let expr_5313_mpos := _497_mpos
                            /// @src 26:5350:5360  "TREE_RADIX"
                            let expr_5314 := constant_TREE_RADIX_5120()
                            /// @src 26:5330:5361  "currentNode.decoded[TREE_RADIX]"
                            let _498_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5313_mpos, expr_5314))
                            let expr_5315_mpos := _498_mpos
                            /// @src 26:5310:5362  "RLPReader.readBytes(currentNode.decoded[TREE_RADIX])"
                            let expr_5316_mpos := fun_readBytes_7553(expr_5315_mpos)
                            /// @src 26:5289:5362  "bytes memory value = RLPReader.readBytes(currentNode.decoded[TREE_RADIX])"
                            let var_value_5309_mpos := expr_5316_mpos
                            /// @src 26:5417:5422  "value"
                            let _499_mpos := var_value_5309_mpos
                            let expr_5319_mpos := _499_mpos
                            /// @src 26:5417:5429  "value.length"
                            let expr_5320 := array_length_t_bytes_memory_ptr(expr_5319_mpos)
                            /// @src 26:5432:5433  "0"
                            let expr_5321 := 0x00
                            /// @src 26:5417:5433  "value.length > 0"
                            let expr_5322 := gt(cleanup_t_uint256(expr_5320), convert_t_rational_0_by_1_to_t_uint256(expr_5321))
                            /// @src 26:5384:5542  "require(..."
                            require_helper_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(expr_5322)
                            /// @src 26:5659:5660  "i"
                            let _500 := var_i_5221
                            let expr_5327 := _500
                            /// @src 26:5664:5669  "proof"
                            let _501_mpos := var_proof_5197_mpos
                            let expr_5328_mpos := _501_mpos
                            /// @src 26:5664:5676  "proof.length"
                            let expr_5329 := array_length_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5328_mpos)
                            /// @src 26:5679:5680  "1"
                            let expr_5330 := 0x01
                            /// @src 26:5664:5680  "proof.length - 1"
                            let expr_5331 := checked_sub_t_uint256(expr_5329, convert_t_rational_1_by_1_to_t_uint256(expr_5330))
                            /// @src 26:5659:5680  "i == proof.length - 1"
                            let expr_5332 := eq(cleanup_t_uint256(expr_5327), cleanup_t_uint256(expr_5331))
                            /// @src 26:5626:5788  "require(..."
                            require_helper_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(expr_5332)
                            /// @src 26:5818:5823  "value"
                            let _502_mpos := var_value_5309_mpos
                            let expr_5336_mpos := _502_mpos
                            /// @src 26:5811:5823  "return value"
                            var__5183_mpos := expr_5336_mpos
                            leave
                        }
                    }
                }
                /// @src 26:9641:9688  "revert(\"MerkleTrie: ran out of proof elements\")"
                {
                    let _503 := allocate_unbounded()
                    mstore(_503, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                    let _504 := abi_encode_tuple_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076__to_t_string_memory_ptr__fromStack(add(_503, 4))
                    revert(_503, sub(_504, _503))
                }
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr() -> ret
            { ret := 96 }
            function array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value) -> length
            { length := mload(value) }
            function array_allocation_size_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := mul(length, 0x20)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function allocate_memory_struct_t_struct$_TrieNode_$5116_memory_ptr() -> memPtr
            { memPtr := allocate_memory(64) }
            function zero_value_for_t_bytes_memory_ptr() -> ret
            { ret := 96 }
            function zero_value_for_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr() -> ret
            { ret := 96 }
            function allocate_and_zero_memory_struct_t_struct$_TrieNode_$5116_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory_struct_t_struct$_TrieNode_$5116_memory_ptr()
                let offset := memPtr
                mstore(offset, zero_value_for_t_bytes_memory_ptr())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr())
                offset := add(offset, 32)
            }
            function zero_value_for_t_struct$_TrieNode_$5116_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_TrieNode_$5116_memory_ptr()
            }
            function zero_complex_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes)
            {
                for { let i := 0 } lt(i, dataSizeInBytes) { i := add(i, 32) }
                {
                    mstore(add(dataStart, i), zero_value_for_t_struct$_TrieNode_$5116_memory_ptr())
                }
            }
            function allocate_and_zero_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_complex_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)
            }
            function memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 32)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            function allocate_memory_struct_t_struct$_TrieNode_$5116_storage_ptr() -> memPtr
            { memPtr := allocate_memory(64) }
            function write_to_memory_t_bytes_memory_ptr(memPtr, value)
            { mstore(memPtr, value) }
            function write_to_memory_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(memPtr, value)
            { mstore(memPtr, value) }
            function increment_wrapping_t_uint256(value) -> ret
            {
                ret := cleanup_t_uint256(add(value, 1))
            }
            /// @ast-id 5580 @src 26:10004:10426  "function _parseProof(bytes[] memory _proof) private pure returns (TrieNode[] memory) {..."
            function fun__parseProof_5580(var__proof_5524_mpos) -> var__5529_mpos
            {
                /// @src 26:10070:10087  "TrieNode[] memory"
                let zero_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr_505_mpos := zero_value_for_split_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr()
                var__5529_mpos := zero_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr_505_mpos
                /// @src 26:10116:10122  "_proof"
                let _506_mpos := var__proof_5524_mpos
                let expr_5533_mpos := _506_mpos
                /// @src 26:10116:10129  "_proof.length"
                let expr_5534 := array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5533_mpos)
                /// @src 26:10099:10129  "uint256 length = _proof.length"
                let var_length_5532 := expr_5534
                /// @src 26:10180:10186  "length"
                let _507 := var_length_5532
                let expr_5545 := _507
                /// @src 26:10165:10187  "new TrieNode[](length)"
                let expr_5546_mpos := allocate_and_zero_memory_array_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5545)
                /// @src 26:10139:10187  "TrieNode[] memory proof = new TrieNode[](length)"
                let var_proof_5540_mpos := expr_5546_mpos
                /// @src 26:10197:10398  "for (uint256 i = 0; i < length; ) {..."
                for {
                    /// @src 26:10214:10215  "0"
                    let expr_5550 := 0x00
                    /// @src 26:10202:10215  "uint256 i = 0"
                    let var_i_5549 := convert_t_rational_0_by_1_to_t_uint256(expr_5550)
                }
                1
                { }
                {
                    /// @src 26:10217:10218  "i"
                    let _508 := var_i_5549
                    let expr_5552 := _508
                    /// @src 26:10221:10227  "length"
                    let _509 := var_length_5532
                    let expr_5553 := _509
                    /// @src 26:10217:10227  "i < length"
                    let expr_5554 := lt(cleanup_t_uint256(expr_5552), cleanup_t_uint256(expr_5553))
                    if iszero(expr_5554) { break }
                    /// @src 26:10276:10282  "_proof"
                    let _510_mpos := var__proof_5524_mpos
                    let expr_5559_mpos := _510_mpos
                    /// @src 26:10283:10284  "i"
                    let _511 := var_i_5549
                    let expr_5560 := _511
                    /// @src 26:10276:10285  "_proof[i]"
                    let _512_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5559_mpos, expr_5560))
                    let expr_5561_mpos := _512_mpos
                    /// @src 26:10296:10305  "RLPReader"
                    let expr_5562_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10315:10321  "_proof"
                    let _513_mpos := var__proof_5524_mpos
                    let expr_5564_mpos := _513_mpos
                    /// @src 26:10322:10323  "i"
                    let _514 := var_i_5549
                    let expr_5565 := _514
                    /// @src 26:10315:10324  "_proof[i]"
                    let _515_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5564_mpos, expr_5565))
                    let expr_5566_mpos := _515_mpos
                    /// @src 26:10296:10325  "RLPReader.readList(_proof[i])"
                    let expr_5567_mpos := fun_readList_7507(expr_5566_mpos)
                    /// @src 26:10256:10328  "TrieNode({ encoded: _proof[i], decoded: RLPReader.readList(_proof[i]) })"
                    let expr_5568_mpos := allocate_memory_struct_t_struct$_TrieNode_$5116_storage_ptr()
                    write_to_memory_t_bytes_memory_ptr(add(expr_5568_mpos, 0), expr_5561_mpos)
                    write_to_memory_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(add(expr_5568_mpos, 32), expr_5567_mpos)
                    /// @src 26:10245:10250  "proof"
                    let _516_mpos := var_proof_5540_mpos
                    let expr_5555_mpos := _516_mpos
                    /// @src 26:10251:10252  "i"
                    let _517 := var_i_5549
                    let expr_5556 := _517
                    /// @src 26:10245:10328  "proof[i] = TrieNode({ encoded: _proof[i], decoded: RLPReader.readList(_proof[i]) })"
                    mstore(memory_array_index_access_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5555_mpos, expr_5556), expr_5568_mpos)
                    let _518_mpos := mload(memory_array_index_access_t_array$_t_struct$_TrieNode_$5116_memory_ptr_$dyn_memory_ptr(expr_5555_mpos, expr_5556))
                    let expr_5569_mpos := _518_mpos
                    /// @src 26:10370:10373  "++i"
                    let _520 := var_i_5549
                    let _519 := increment_wrapping_t_uint256(_520)
                    var_i_5549 := _519
                    let expr_5572 := _519
                }
                /// @src 26:10414:10419  "proof"
                let _521_mpos := var_proof_5540_mpos
                let expr_5577_mpos := _521_mpos
                /// @src 26:10407:10419  "return proof"
                var__5529_mpos := expr_5577_mpos
                leave
            }
            /// @ast-id 5604 @src 26:10745:10935  "function _getNodeID(RLPReader.RLPItem memory _node) private pure returns (bytes memory) {..."
            function fun__getNodeID_5604(var__node_5584_mpos) -> var__5587_mpos
            {
                /// @src 26:10819:10831  "bytes memory"
                let zero_t_bytes_memory_ptr_522_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5587_mpos := zero_t_bytes_memory_ptr_522_mpos
                /// @src 26:10850:10855  "_node"
                let _523_mpos := var__node_5584_mpos
                let expr_5589_mpos := _523_mpos
                /// @src 26:10850:10862  "_node.length"
                let _524 := add(expr_5589_mpos, 0)
                let _525 := read_from_memoryt_uint256(_524)
                let expr_5590 := _525
                /// @src 26:10865:10867  "32"
                let expr_5591 := 0x20
                /// @src 26:10850:10867  "_node.length < 32"
                let expr_5592 := lt(cleanup_t_uint256(expr_5590), convert_t_rational_32_by_1_to_t_uint256(expr_5591))
                /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                let expr_5601_mpos
                switch expr_5592
                case 0 {
                    /// @src 26:10902:10911  "RLPReader"
                    let expr_5597_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10922:10927  "_node"
                    let _526_mpos := var__node_5584_mpos
                    let expr_5599_mpos := _526_mpos
                    /// @src 26:10902:10928  "RLPReader.readBytes(_node)"
                    let expr_5600_mpos := fun_readBytes_7553(expr_5599_mpos)
                    /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                    expr_5601_mpos := expr_5600_mpos
                }
                default {
                    /// @src 26:10870:10879  "RLPReader"
                    let expr_5593_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10893:10898  "_node"
                    let _527_mpos := var__node_5584_mpos
                    let expr_5595_mpos := _527_mpos
                    /// @src 26:10870:10899  "RLPReader.readRawBytes(_node)"
                    let expr_5596_mpos := fun_readRawBytes_7586(expr_5595_mpos)
                    /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                    expr_5601_mpos := expr_5596_mpos
                }
                /// @src 26:10843:10928  "return _node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                var__5587_mpos := expr_5601_mpos
                leave
            }
            /// @ast-id 5625 @src 26:11134:11293  "function _getNodePath(TrieNode memory _node) private pure returns (bytes memory) {..."
            function fun__getNodePath_5625(var__node_5608_mpos) -> var__5611_mpos
            {
                /// @src 26:11201:11213  "bytes memory"
                let zero_t_bytes_memory_ptr_528_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5611_mpos := zero_t_bytes_memory_ptr_528_mpos
                /// @src 26:11232:11237  "Bytes"
                let expr_5613_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:11248:11257  "RLPReader"
                let expr_5615_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                /// @src 26:11268:11273  "_node"
                let _529_mpos := var__node_5608_mpos
                let expr_5617_mpos := _529_mpos
                /// @src 26:11268:11281  "_node.decoded"
                let _530 := add(expr_5617_mpos, 32)
                let _531_mpos := mload(_530)
                let expr_5618_mpos := _531_mpos
                /// @src 26:11282:11283  "0"
                let expr_5619 := 0x00
                /// @src 26:11268:11284  "_node.decoded[0]"
                let _532_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_5618_mpos, convert_t_rational_0_by_1_to_t_uint256(expr_5619)))
                let expr_5620_mpos := _532_mpos
                /// @src 26:11248:11285  "RLPReader.readBytes(_node.decoded[0])"
                let expr_5621_mpos := fun_readBytes_7553(expr_5620_mpos)
                /// @src 26:11232:11286  "Bytes.toNibbles(RLPReader.readBytes(_node.decoded[0]))"
                let expr_5622_mpos := fun_toNibbles_7300(expr_5621_mpos)
                /// @src 26:11225:11286  "return Bytes.toNibbles(RLPReader.readBytes(_node.decoded[0]))"
                var__5611_mpos := expr_5622_mpos
                leave
            }
            /// @ast-id 5672 @src 26:11536:11921  "function _getSharedNibbleLength(bytes memory _a, bytes memory _b)..."
            function fun__getSharedNibbleLength_5672(var__a_5628_mpos, var__b_5630_mpos) -> var__5633
            {
                /// @src 26:11648:11655  "uint256"
                let zero_t_uint256_533 := zero_value_for_split_t_uint256()
                var__5633 := zero_t_uint256_533
                /// @src 26:11671:11685  "uint256 shared"
                let var_shared_5636
                let zero_t_uint256_534 := zero_value_for_split_t_uint256()
                var_shared_5636 := zero_t_uint256_534
                /// @src 26:11710:11712  "_a"
                let _535_mpos := var__a_5628_mpos
                let expr_5640_mpos := _535_mpos
                /// @src 26:11710:11719  "_a.length"
                let expr_5641 := array_length_t_bytes_memory_ptr(expr_5640_mpos)
                /// @src 26:11722:11724  "_b"
                let _536_mpos := var__b_5630_mpos
                let expr_5642_mpos := _536_mpos
                /// @src 26:11722:11731  "_b.length"
                let expr_5643 := array_length_t_bytes_memory_ptr(expr_5642_mpos)
                /// @src 26:11710:11731  "_a.length < _b.length"
                let expr_5644 := lt(cleanup_t_uint256(expr_5641), cleanup_t_uint256(expr_5643))
                /// @src 26:11709:11732  "(_a.length < _b.length)"
                let expr_5645 := expr_5644
                /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                let expr_5650
                switch expr_5645
                case 0 {
                    /// @src 26:11747:11749  "_b"
                    let _537_mpos := var__b_5630_mpos
                    let expr_5648_mpos := _537_mpos
                    /// @src 26:11747:11756  "_b.length"
                    let expr_5649 := array_length_t_bytes_memory_ptr(expr_5648_mpos)
                    /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                    expr_5650 := expr_5649
                }
                default {
                    /// @src 26:11735:11737  "_a"
                    let _538_mpos := var__a_5628_mpos
                    let expr_5646_mpos := _538_mpos
                    /// @src 26:11735:11744  "_a.length"
                    let expr_5647 := array_length_t_bytes_memory_ptr(expr_5646_mpos)
                    /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                    expr_5650 := expr_5647
                }
                /// @src 26:11695:11756  "uint256 max = (_a.length < _b.length) ? _a.length : _b.length"
                let var_max_5639 := expr_5650
                /// @src 26:11766:11892  "for (; shared < max && _a[shared] == _b[shared]; ) {..."
                for { } 1 { }
                {
                    /// @src 26:11773:11779  "shared"
                    let _539 := var_shared_5636
                    let expr_5652 := _539
                    /// @src 26:11782:11785  "max"
                    let _540 := var_max_5639
                    let expr_5653 := _540
                    /// @src 26:11773:11785  "shared < max"
                    let expr_5654 := lt(cleanup_t_uint256(expr_5652), cleanup_t_uint256(expr_5653))
                    /// @src 26:11773:11813  "shared < max && _a[shared] == _b[shared]"
                    let expr_5662 := expr_5654
                    if expr_5662
                    {
                        /// @src 26:11789:11791  "_a"
                        let _541_mpos := var__a_5628_mpos
                        let expr_5655_mpos := _541_mpos
                        /// @src 26:11792:11798  "shared"
                        let _542 := var_shared_5636
                        let expr_5656 := _542
                        /// @src 26:11789:11799  "_a[shared]"
                        let _543 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5655_mpos, expr_5656))
                        let expr_5657 := _543
                        /// @src 26:11803:11805  "_b"
                        let _544_mpos := var__b_5630_mpos
                        let expr_5658_mpos := _544_mpos
                        /// @src 26:11806:11812  "shared"
                        let _545 := var_shared_5636
                        let expr_5659 := _545
                        /// @src 26:11803:11813  "_b[shared]"
                        let _546 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5658_mpos, expr_5659))
                        let expr_5660 := _546
                        /// @src 26:11789:11813  "_a[shared] == _b[shared]"
                        let expr_5661 := eq(cleanup_t_bytes1(expr_5657), cleanup_t_bytes1(expr_5660))
                        /// @src 26:11773:11813  "shared < max && _a[shared] == _b[shared]"
                        expr_5662 := expr_5661
                    }
                    if iszero(expr_5662) { break }
                    /// @src 26:11859:11867  "++shared"
                    let _548 := var_shared_5636
                    let _547 := increment_wrapping_t_uint256(_548)
                    var_shared_5636 := _547
                    let expr_5664 := _547
                }
                /// @src 26:11908:11914  "shared"
                let _549 := var_shared_5636
                let expr_5669 := _549
                /// @src 26:11901:11914  "return shared"
                var__5633 := expr_5669
                leave
            }
            /// @ast-id 6444 @src 8:311:413  "function max(int256 a, int256 b) internal pure returns (int256) {..."
            function fun_max_6444(var_a_6429, var_b_6431) -> var__6434
            {
                /// @src 8:367:373  "int256"
                let zero_t_int256_550 := zero_value_for_split_t_int256()
                var__6434 := zero_t_int256_550
                /// @src 8:392:393  "a"
                let _551 := var_a_6429
                let expr_6436 := _551
                /// @src 8:397:398  "b"
                let _552 := var_b_6431
                let expr_6437 := _552
                /// @src 8:392:398  "a >= b"
                let expr_6438 := iszero(slt(cleanup_t_int256(expr_6436), cleanup_t_int256(expr_6437)))
                /// @src 8:392:406  "a >= b ? a : b"
                let expr_6441
                switch expr_6438
                case 0 {
                    /// @src 8:405:406  "b"
                    let _553 := var_b_6431
                    let expr_6440 := _553
                    /// @src 8:392:406  "a >= b ? a : b"
                    expr_6441 := expr_6440
                }
                default {
                    /// @src 8:401:402  "a"
                    let _554 := var_a_6429
                    let expr_6439 := _554
                    /// @src 8:392:406  "a >= b ? a : b"
                    expr_6441 := expr_6439
                }
                /// @src 8:385:406  "return a >= b ? a : b"
                var__6434 := expr_6441
                leave
            }
            /// @ast-id 6462 @src 8:491:592  "function min(int256 a, int256 b) internal pure returns (int256) {..."
            function fun_min_6462(var_a_6447, var_b_6449) -> var__6452
            {
                /// @src 8:547:553  "int256"
                let zero_t_int256_555 := zero_value_for_split_t_int256()
                var__6452 := zero_t_int256_555
                /// @src 8:572:573  "a"
                let _556 := var_a_6447
                let expr_6454 := _556
                /// @src 8:576:577  "b"
                let _557 := var_b_6449
                let expr_6455 := _557
                /// @src 8:572:577  "a < b"
                let expr_6456 := slt(cleanup_t_int256(expr_6454), cleanup_t_int256(expr_6455))
                /// @src 8:572:585  "a < b ? a : b"
                let expr_6459
                switch expr_6456
                case 0 {
                    /// @src 8:584:585  "b"
                    let _558 := var_b_6449
                    let expr_6458 := _558
                    /// @src 8:572:585  "a < b ? a : b"
                    expr_6459 := expr_6458
                }
                default {
                    /// @src 8:580:581  "a"
                    let _559 := var_a_6447
                    let expr_6457 := _559
                    /// @src 8:572:585  "a < b ? a : b"
                    expr_6459 := expr_6457
                }
                /// @src 8:565:585  "return a < b ? a : b"
                var__6452 := expr_6459
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function convert_t_rational_1000000000000000000_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000000000000000_by_1(value)))
            }
            /// @src 9:459:495  "uint256 internal constant WAD = 1e18"
            function constant_WAD_6534() -> ret
            {
                /// @src 9:491:495  "1e18"
                let expr_6533 := 0x0de0b6b3a7640000
                let _563 := convert_t_rational_1000000000000000000_by_1_to_t_uint256(expr_6533)
                ret := _563
            }
            /// @ast-id 6622 @src 9:1208:1481  "function powWad(int256 x, int256 y) internal pure returns (int256) {..."
            function fun_powWad_6622(var_x_6600, var_y_6602) -> var__6605
            {
                /// @src 9:1267:1273  "int256"
                let zero_t_int256_560 := zero_value_for_split_t_int256()
                var__6605 := zero_t_int256_560
                /// @src 9:1405:1406  "x"
                let _561 := var_x_6600
                let expr_6609 := _561
                /// @src 9:1399:1407  "lnWad(x)"
                let expr_6610 := fun_lnWad_7042(expr_6609)
                /// @src 9:1410:1411  "y"
                let _562 := var_y_6602
                let expr_6611 := _562
                /// @src 9:1399:1411  "lnWad(x) * y"
                let expr_6612 := checked_mul_t_int256(expr_6610, expr_6611)
                /// @src 9:1398:1412  "(lnWad(x) * y)"
                let expr_6613 := expr_6612
                /// @src 9:1422:1425  "WAD"
                let expr_6616 := constant_WAD_6534()
                /// @src 9:1415:1426  "int256(WAD)"
                let expr_6617 := convert_t_uint256_to_t_int256(expr_6616)
                /// @src 9:1398:1426  "(lnWad(x) * y) / int256(WAD)"
                let expr_6618 := checked_div_t_int256(expr_6613, expr_6617)
                /// @src 9:1391:1427  "expWad((lnWad(x) * y) / int256(WAD))"
                let expr_6619 := fun_expWad_6817(expr_6618)
                /// @src 9:1384:1427  "return expWad((lnWad(x) * y) / int256(WAD))"
                var__6605 := expr_6619
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_rational_minus_42139678854452767551_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_minus_42139678854452767551_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_minus_42139678854452767551_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_0_by_1(value)))
            }
            function cleanup_t_rational_135305999368893231589_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_135305999368893231589_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_135305999368893231589_by_1(value)))
            }
            function store_literal_in_memory_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7(memPtr)
            {
                mstore(add(memPtr, 0), "EXP_OVERFLOW")
            }
            function abi_encode_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)
                store_literal_in_memory_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7_to_t_string_memory_ptr_fromStack(tail)
            }
            function cleanup_t_rational_78_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_78_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_78_by_1(value)))
            }
            function shift_left_dynamic(bits, value) -> newValue
            { newValue := shl(bits, value) }
            function shift_left_t_int256_t_uint8(value, bits) -> result
            {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_int256(shift_left_dynamic(bits, cleanup_t_int256(value)))
            }
            function cleanup_t_rational_3814697265625_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3814697265625_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3814697265625_by_1(value)))
            }
            function wrapping_div_t_int256(x, y) -> r
            {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if iszero(y) { panic_error_0x12() }
                r := sdiv(x, y)
            }
            function cleanup_t_rational_96_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_96_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_96_by_1(value)))
            }
            function cleanup_t_rational_54916777467707473351141471128_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_54916777467707473351141471128_by_1(value)))
            }
            function cleanup_t_rational_39614081257132168796771975168_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_39614081257132168796771975168_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_39614081257132168796771975168_by_1(value)))
            }
            function wrapping_add_t_int256(x, y) -> sum
            {
                sum := cleanup_t_int256(add(x, y))
            }
            function shift_right_signed_dynamic(bits, value) -> result
            { result := sar(bits, value) }
            function shift_right_t_int256_t_uint8(value, bits) -> result
            {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_int256(shift_right_signed_dynamic(bits, cleanup_t_int256(value)))
            }
            function wrapping_mul_t_int256(x, y) -> product
            {
                product := cleanup_t_int256(mul(x, y))
            }
            function wrapping_sub_t_int256(x, y) -> diff
            {
                diff := cleanup_t_int256(sub(x, y))
            }
            function cleanup_t_rational_1346386616545796478920950773328_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1346386616545796478920950773328_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1346386616545796478920950773328_by_1(value)))
            }
            function cleanup_t_rational_57155421227552351082224309758442_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_57155421227552351082224309758442_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_57155421227552351082224309758442_by_1(value)))
            }
            function cleanup_t_rational_94201549194550492254356042504812_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_94201549194550492254356042504812_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_94201549194550492254356042504812_by_1(value)))
            }
            function cleanup_t_rational_28719021644029726153956944680412240_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_28719021644029726153956944680412240_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_28719021644029726153956944680412240_by_1(value)))
            }
            function cleanup_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1(value)))
            }
            function cleanup_t_rational_2855989394907223263936484059900_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_2855989394907223263936484059900_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_2855989394907223263936484059900_by_1(value)))
            }
            function cleanup_t_rational_50020603652535783019961831881945_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_50020603652535783019961831881945_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_50020603652535783019961831881945_by_1(value)))
            }
            function cleanup_t_rational_533845033583426703283633433725380_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_533845033583426703283633433725380_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_533845033583426703283633433725380_by_1(value)))
            }
            function cleanup_t_rational_3604857256930695427073651918091429_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3604857256930695427073651918091429_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3604857256930695427073651918091429_by_1(value)))
            }
            function cleanup_t_rational_14423608567350463180887372962807573_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_14423608567350463180887372962807573_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_14423608567350463180887372962807573_by_1(value)))
            }
            function cleanup_t_rational_26449188498355588339934803723976023_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_26449188498355588339934803723976023_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_26449188498355588339934803723976023_by_1(value)))
            }
            function cleanup_t_rational_3822833074963236453042738258902158003155416615667_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3822833074963236453042738258902158003155416615667_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_3822833074963236453042738258902158003155416615667_by_1(value)))
            }
            function wrapping_mul_t_uint256(x, y) -> product
            {
                product := cleanup_t_uint256(mul(x, y))
            }
            function cleanup_t_rational_195_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_195_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_195_by_1(value)))
            }
            function shift_right_t_uint256_t_uint256(value, bits) -> result
            {
                bits := cleanup_t_uint256(bits)
                result := cleanup_t_uint256(shift_right_unsigned_dynamic(bits, cleanup_t_uint256(value)))
            }
            /// @ast-id 6817 @src 9:1487:4590  "function expWad(int256 x) internal pure returns (int256 r) {..."
            function fun_expWad_6817(var_x_6624) -> var_r_6627
            {
                /// @src 9:1536:1544  "int256 r"
                let zero_t_int256_564 := zero_value_for_split_t_int256()
                var_r_6627 := zero_t_int256_564
                /// @src 9:1713:1714  "x"
                let _565 := var_x_6624
                let expr_6629 := _565
                /// @src 9:1718:1739  "-42139678854452767551"
                let expr_6631 := 0xfffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c1
                /// @src 9:1713:1739  "x <= -42139678854452767551"
                let expr_6632 := iszero(sgt(cleanup_t_int256(expr_6629), convert_t_rational_minus_42139678854452767551_by_1_to_t_int256(expr_6631)))
                /// @src 9:1709:1749  "if (x <= -42139678854452767551) return 0"
                if expr_6632
                {
                    /// @src 9:1748:1749  "0"
                    let expr_6633 := 0x00
                    /// @src 9:1741:1749  "return 0"
                    var_r_6627 := convert_t_rational_0_by_1_to_t_int256(expr_6633)
                    leave
                }
                /// @src 9:1943:1944  "x"
                let _566 := var_x_6624
                let expr_6636 := _566
                /// @src 9:1948:1969  "135305999368893231589"
                let expr_6637 := 0x0755bf798b4a1bf1e5
                /// @src 9:1943:1969  "x >= 135305999368893231589"
                let expr_6638 := iszero(slt(cleanup_t_int256(expr_6636), convert_t_rational_135305999368893231589_by_1_to_t_int256(expr_6637)))
                /// @src 9:1939:1993  "if (x >= 135305999368893231589) revert(\"EXP_OVERFLOW\")"
                if expr_6638
                {
                    /// @src 9:1971:1993  "revert(\"EXP_OVERFLOW\")"
                    {
                        let _567 := allocate_unbounded()
                        mstore(_567, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                        let _568 := abi_encode_tuple_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7__to_t_string_memory_ptr__fromStack(add(_567, 4))
                        revert(_567, sub(_568, _567))
                    }
                }
                /// @src 9:2255:2256  "x"
                let _569 := var_x_6624
                let expr_6645 := _569
                /// @src 9:2260:2262  "78"
                let expr_6646 := 0x4e
                /// @src 9:2255:2262  "x << 78"
                let _570 := convert_t_rational_78_by_1_to_t_uint8(expr_6646)
                let expr_6647 := shift_left_t_int256_t_uint8(expr_6645, _570)
                /// @src 9:2254:2263  "(x << 78)"
                let expr_6648 := expr_6647
                /// @src 9:2266:2271  "5**18"
                let expr_6651 := 0x03782dace9d9
                /// @src 9:2254:2271  "(x << 78) / 5**18"
                let expr_6652 := wrapping_div_t_int256(expr_6648, convert_t_rational_3814697265625_by_1_to_t_int256(expr_6651))
                /// @src 9:2250:2271  "x = (x << 78) / 5**18"
                var_x_6624 := expr_6652
                let expr_6653 := expr_6652
                /// @src 9:2548:2549  "x"
                let _571 := var_x_6624
                let expr_6657 := _571
                /// @src 9:2553:2555  "96"
                let expr_6658 := 0x60
                /// @src 9:2548:2555  "x << 96"
                let _572 := convert_t_rational_96_by_1_to_t_uint8(expr_6658)
                let expr_6659 := shift_left_t_int256_t_uint8(expr_6657, _572)
                /// @src 9:2547:2556  "(x << 96)"
                let expr_6660 := expr_6659
                /// @src 9:2559:2588  "54916777467707473351141471128"
                let expr_6661 := 0xb17217f7d1cf79abc9e3b398
                /// @src 9:2547:2588  "(x << 96) / 54916777467707473351141471128"
                let expr_6662 := wrapping_div_t_int256(expr_6660, convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(expr_6661))
                /// @src 9:2591:2596  "2**95"
                let expr_6665 := 0x800000000000000000000000
                /// @src 9:2547:2596  "(x << 96) / 54916777467707473351141471128 + 2**95"
                let expr_6666 := wrapping_add_t_int256(expr_6662, convert_t_rational_39614081257132168796771975168_by_1_to_t_int256(expr_6665))
                /// @src 9:2546:2597  "((x << 96) / 54916777467707473351141471128 + 2**95)"
                let expr_6667 := expr_6666
                /// @src 9:2601:2603  "96"
                let expr_6668 := 0x60
                /// @src 9:2546:2603  "((x << 96) / 54916777467707473351141471128 + 2**95) >> 96"
                let _573 := convert_t_rational_96_by_1_to_t_uint8(expr_6668)
                let expr_6669 := shift_right_t_int256_t_uint8(expr_6667, _573)
                /// @src 9:2535:2603  "int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96"
                let var_k_6656 := expr_6669
                /// @src 9:2621:2622  "x"
                let _574 := var_x_6624
                let expr_6672 := _574
                /// @src 9:2625:2626  "k"
                let _575 := var_k_6656
                let expr_6673 := _575
                /// @src 9:2629:2658  "54916777467707473351141471128"
                let expr_6674 := 0xb17217f7d1cf79abc9e3b398
                /// @src 9:2625:2658  "k * 54916777467707473351141471128"
                let expr_6675 := wrapping_mul_t_int256(expr_6673, convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(expr_6674))
                /// @src 9:2621:2658  "x - k * 54916777467707473351141471128"
                let expr_6676 := wrapping_sub_t_int256(expr_6672, expr_6675)
                /// @src 9:2617:2658  "x = x - k * 54916777467707473351141471128"
                var_x_6624 := expr_6676
                let expr_6677 := expr_6676
                /// @src 9:2870:2871  "x"
                let _576 := var_x_6624
                let expr_6681 := _576
                /// @src 9:2874:2905  "1346386616545796478920950773328"
                let expr_6682 := 0x10fe68e7fd37d0007b713f7650
                /// @src 9:2870:2905  "x + 1346386616545796478920950773328"
                let expr_6683 := wrapping_add_t_int256(expr_6681, convert_t_rational_1346386616545796478920950773328_by_1_to_t_int256(expr_6682))
                /// @src 9:2859:2905  "int256 y = x + 1346386616545796478920950773328"
                let var_y_6680 := expr_6683
                /// @src 9:2925:2926  "y"
                let _577 := var_y_6680
                let expr_6686 := _577
                /// @src 9:2929:2930  "x"
                let _578 := var_x_6624
                let expr_6687 := _578
                /// @src 9:2925:2930  "y * x"
                let expr_6688 := wrapping_mul_t_int256(expr_6686, expr_6687)
                /// @src 9:2924:2931  "(y * x)"
                let expr_6689 := expr_6688
                /// @src 9:2935:2937  "96"
                let expr_6690 := 0x60
                /// @src 9:2924:2937  "(y * x) >> 96"
                let _579 := convert_t_rational_96_by_1_to_t_uint8(expr_6690)
                let expr_6691 := shift_right_t_int256_t_uint8(expr_6689, _579)
                /// @src 9:2923:2938  "((y * x) >> 96)"
                let expr_6692 := expr_6691
                /// @src 9:2941:2973  "57155421227552351082224309758442"
                let expr_6693 := 0x02d16720577bd19bf614176fe9ea
                /// @src 9:2923:2973  "((y * x) >> 96) + 57155421227552351082224309758442"
                let expr_6694 := wrapping_add_t_int256(expr_6692, convert_t_rational_57155421227552351082224309758442_by_1_to_t_int256(expr_6693))
                /// @src 9:2919:2973  "y = ((y * x) >> 96) + 57155421227552351082224309758442"
                var_y_6680 := expr_6694
                let expr_6695 := expr_6694
                /// @src 9:2998:2999  "y"
                let _580 := var_y_6680
                let expr_6699 := _580
                /// @src 9:3002:3003  "x"
                let _581 := var_x_6624
                let expr_6700 := _581
                /// @src 9:2998:3003  "y + x"
                let expr_6701 := wrapping_add_t_int256(expr_6699, expr_6700)
                /// @src 9:3006:3038  "94201549194550492254356042504812"
                let expr_6702 := 0x04a4fd9f2a8b96949216d2255a6c
                /// @src 9:2998:3038  "y + x - 94201549194550492254356042504812"
                let expr_6703 := wrapping_sub_t_int256(expr_6701, convert_t_rational_94201549194550492254356042504812_by_1_to_t_int256(expr_6702))
                /// @src 9:2987:3038  "int256 p = y + x - 94201549194550492254356042504812"
                let var_p_6698 := expr_6703
                /// @src 9:3058:3059  "p"
                let _582 := var_p_6698
                let expr_6706 := _582
                /// @src 9:3062:3063  "y"
                let _583 := var_y_6680
                let expr_6707 := _583
                /// @src 9:3058:3063  "p * y"
                let expr_6708 := wrapping_mul_t_int256(expr_6706, expr_6707)
                /// @src 9:3057:3064  "(p * y)"
                let expr_6709 := expr_6708
                /// @src 9:3068:3070  "96"
                let expr_6710 := 0x60
                /// @src 9:3057:3070  "(p * y) >> 96"
                let _584 := convert_t_rational_96_by_1_to_t_uint8(expr_6710)
                let expr_6711 := shift_right_t_int256_t_uint8(expr_6709, _584)
                /// @src 9:3056:3071  "((p * y) >> 96)"
                let expr_6712 := expr_6711
                /// @src 9:3074:3109  "28719021644029726153956944680412240"
                let expr_6713 := 0x0587f503bb6ea29d25fcb740196450
                /// @src 9:3056:3109  "((p * y) >> 96) + 28719021644029726153956944680412240"
                let expr_6714 := wrapping_add_t_int256(expr_6712, convert_t_rational_28719021644029726153956944680412240_by_1_to_t_int256(expr_6713))
                /// @src 9:3052:3109  "p = ((p * y) >> 96) + 28719021644029726153956944680412240"
                var_p_6698 := expr_6714
                let expr_6715 := expr_6714
                /// @src 9:3127:3128  "p"
                let _585 := var_p_6698
                let expr_6718 := _585
                /// @src 9:3131:3132  "x"
                let _586 := var_x_6624
                let expr_6719 := _586
                /// @src 9:3127:3132  "p * x"
                let expr_6720 := wrapping_mul_t_int256(expr_6718, expr_6719)
                /// @src 9:3136:3176  "4385272521454847904659076985693276 << 96"
                let expr_6723 := 0xd835ebba824c98fb31b83b2ca45c000000000000000000000000
                /// @src 9:3135:3177  "(4385272521454847904659076985693276 << 96)"
                let expr_6724 := expr_6723
                /// @src 9:3127:3177  "p * x + (4385272521454847904659076985693276 << 96)"
                let expr_6725 := wrapping_add_t_int256(expr_6720, convert_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1_to_t_int256(expr_6724))
                /// @src 9:3123:3177  "p = p * x + (4385272521454847904659076985693276 << 96)"
                var_p_6698 := expr_6725
                let expr_6726 := expr_6725
                /// @src 9:3300:3301  "x"
                let _587 := var_x_6624
                let expr_6730 := _587
                /// @src 9:3304:3335  "2855989394907223263936484059900"
                let expr_6731 := 0x240c330e9fb2d9cbaf0fd5aafc
                /// @src 9:3300:3335  "x - 2855989394907223263936484059900"
                let expr_6732 := wrapping_sub_t_int256(expr_6730, convert_t_rational_2855989394907223263936484059900_by_1_to_t_int256(expr_6731))
                /// @src 9:3289:3335  "int256 q = x - 2855989394907223263936484059900"
                let var_q_6729 := expr_6732
                /// @src 9:3355:3356  "q"
                let _588 := var_q_6729
                let expr_6735 := _588
                /// @src 9:3359:3360  "x"
                let _589 := var_x_6624
                let expr_6736 := _589
                /// @src 9:3355:3360  "q * x"
                let expr_6737 := wrapping_mul_t_int256(expr_6735, expr_6736)
                /// @src 9:3354:3361  "(q * x)"
                let expr_6738 := expr_6737
                /// @src 9:3365:3367  "96"
                let expr_6739 := 0x60
                /// @src 9:3354:3367  "(q * x) >> 96"
                let _590 := convert_t_rational_96_by_1_to_t_uint8(expr_6739)
                let expr_6740 := shift_right_t_int256_t_uint8(expr_6738, _590)
                /// @src 9:3353:3368  "((q * x) >> 96)"
                let expr_6741 := expr_6740
                /// @src 9:3371:3403  "50020603652535783019961831881945"
                let expr_6742 := 0x0277594991cfc85f6e2461837cd9
                /// @src 9:3353:3403  "((q * x) >> 96) + 50020603652535783019961831881945"
                let expr_6743 := wrapping_add_t_int256(expr_6741, convert_t_rational_50020603652535783019961831881945_by_1_to_t_int256(expr_6742))
                /// @src 9:3349:3403  "q = ((q * x) >> 96) + 50020603652535783019961831881945"
                var_q_6729 := expr_6743
                let expr_6744 := expr_6743
                /// @src 9:3423:3424  "q"
                let _591 := var_q_6729
                let expr_6747 := _591
                /// @src 9:3427:3428  "x"
                let _592 := var_x_6624
                let expr_6748 := _592
                /// @src 9:3423:3428  "q * x"
                let expr_6749 := wrapping_mul_t_int256(expr_6747, expr_6748)
                /// @src 9:3422:3429  "(q * x)"
                let expr_6750 := expr_6749
                /// @src 9:3433:3435  "96"
                let expr_6751 := 0x60
                /// @src 9:3422:3435  "(q * x) >> 96"
                let _593 := convert_t_rational_96_by_1_to_t_uint8(expr_6751)
                let expr_6752 := shift_right_t_int256_t_uint8(expr_6750, _593)
                /// @src 9:3421:3436  "((q * x) >> 96)"
                let expr_6753 := expr_6752
                /// @src 9:3439:3472  "533845033583426703283633433725380"
                let expr_6754 := 0x1a521255e34f6a5061b25ef1c9c4
                /// @src 9:3421:3472  "((q * x) >> 96) - 533845033583426703283633433725380"
                let expr_6755 := wrapping_sub_t_int256(expr_6753, convert_t_rational_533845033583426703283633433725380_by_1_to_t_int256(expr_6754))
                /// @src 9:3417:3472  "q = ((q * x) >> 96) - 533845033583426703283633433725380"
                var_q_6729 := expr_6755
                let expr_6756 := expr_6755
                /// @src 9:3492:3493  "q"
                let _594 := var_q_6729
                let expr_6759 := _594
                /// @src 9:3496:3497  "x"
                let _595 := var_x_6624
                let expr_6760 := _595
                /// @src 9:3492:3497  "q * x"
                let expr_6761 := wrapping_mul_t_int256(expr_6759, expr_6760)
                /// @src 9:3491:3498  "(q * x)"
                let expr_6762 := expr_6761
                /// @src 9:3502:3504  "96"
                let expr_6763 := 0x60
                /// @src 9:3491:3504  "(q * x) >> 96"
                let _596 := convert_t_rational_96_by_1_to_t_uint8(expr_6763)
                let expr_6764 := shift_right_t_int256_t_uint8(expr_6762, _596)
                /// @src 9:3490:3505  "((q * x) >> 96)"
                let expr_6765 := expr_6764
                /// @src 9:3508:3542  "3604857256930695427073651918091429"
                let expr_6766 := 0xb1bbb201f443cf962f1a1d3db4a5
                /// @src 9:3490:3542  "((q * x) >> 96) + 3604857256930695427073651918091429"
                let expr_6767 := wrapping_add_t_int256(expr_6765, convert_t_rational_3604857256930695427073651918091429_by_1_to_t_int256(expr_6766))
                /// @src 9:3486:3542  "q = ((q * x) >> 96) + 3604857256930695427073651918091429"
                var_q_6729 := expr_6767
                let expr_6768 := expr_6767
                /// @src 9:3562:3563  "q"
                let _597 := var_q_6729
                let expr_6771 := _597
                /// @src 9:3566:3567  "x"
                let _598 := var_x_6624
                let expr_6772 := _598
                /// @src 9:3562:3567  "q * x"
                let expr_6773 := wrapping_mul_t_int256(expr_6771, expr_6772)
                /// @src 9:3561:3568  "(q * x)"
                let expr_6774 := expr_6773
                /// @src 9:3572:3574  "96"
                let expr_6775 := 0x60
                /// @src 9:3561:3574  "(q * x) >> 96"
                let _599 := convert_t_rational_96_by_1_to_t_uint8(expr_6775)
                let expr_6776 := shift_right_t_int256_t_uint8(expr_6774, _599)
                /// @src 9:3560:3575  "((q * x) >> 96)"
                let expr_6777 := expr_6776
                /// @src 9:3578:3613  "14423608567350463180887372962807573"
                let expr_6778 := 0x02c72388d9f74f51a9331fed693f15
                /// @src 9:3560:3613  "((q * x) >> 96) - 14423608567350463180887372962807573"
                let expr_6779 := wrapping_sub_t_int256(expr_6777, convert_t_rational_14423608567350463180887372962807573_by_1_to_t_int256(expr_6778))
                /// @src 9:3556:3613  "q = ((q * x) >> 96) - 14423608567350463180887372962807573"
                var_q_6729 := expr_6779
                let expr_6780 := expr_6779
                /// @src 9:3633:3634  "q"
                let _600 := var_q_6729
                let expr_6783 := _600
                /// @src 9:3637:3638  "x"
                let _601 := var_x_6624
                let expr_6784 := _601
                /// @src 9:3633:3638  "q * x"
                let expr_6785 := wrapping_mul_t_int256(expr_6783, expr_6784)
                /// @src 9:3632:3639  "(q * x)"
                let expr_6786 := expr_6785
                /// @src 9:3643:3645  "96"
                let expr_6787 := 0x60
                /// @src 9:3632:3645  "(q * x) >> 96"
                let _602 := convert_t_rational_96_by_1_to_t_uint8(expr_6787)
                let expr_6788 := shift_right_t_int256_t_uint8(expr_6786, _602)
                /// @src 9:3631:3646  "((q * x) >> 96)"
                let expr_6789 := expr_6788
                /// @src 9:3649:3684  "26449188498355588339934803723976023"
                let expr_6790 := 0x05180bb14799ab47a8a8cb2a527d57
                /// @src 9:3631:3684  "((q * x) >> 96) + 26449188498355588339934803723976023"
                let expr_6791 := wrapping_add_t_int256(expr_6789, convert_t_rational_26449188498355588339934803723976023_by_1_to_t_int256(expr_6790))
                /// @src 9:3627:3684  "q = ((q * x) >> 96) + 26449188498355588339934803723976023"
                var_q_6729 := expr_6791
                let expr_6792 := expr_6791
                /// @src 9:3699:4026  "assembly {..."
                {
                    var_r_6627 := sdiv(var_p_6698, var_q_6729)
                }
                /// @src 9:4497:4498  "r"
                let _603 := var_r_6627
                let expr_6800 := _603
                /// @src 9:4489:4499  "uint256(r)"
                let expr_6801 := convert_t_int256_to_t_uint256(expr_6800)
                /// @src 9:4502:4551  "3822833074963236453042738258902158003155416615667"
                let expr_6802 := 0x029d9dc38563c32e5c2f6dc192ee70ef65f9978af3
                /// @src 9:4489:4551  "uint256(r) * 3822833074963236453042738258902158003155416615667"
                let expr_6803 := wrapping_mul_t_uint256(expr_6801, convert_t_rational_3822833074963236453042738258902158003155416615667_by_1_to_t_uint256(expr_6802))
                /// @src 9:4488:4552  "(uint256(r) * 3822833074963236453042738258902158003155416615667)"
                let expr_6804 := expr_6803
                /// @src 9:4564:4567  "195"
                let expr_6807 := 0xc3
                /// @src 9:4570:4571  "k"
                let _604 := var_k_6656
                let expr_6808 := _604
                /// @src 9:4564:4571  "195 - k"
                let expr_6809 := wrapping_sub_t_int256(convert_t_rational_195_by_1_to_t_int256(expr_6807), expr_6808)
                /// @src 9:4556:4572  "uint256(195 - k)"
                let expr_6810 := convert_t_int256_to_t_uint256(expr_6809)
                /// @src 9:4488:4572  "(uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)"
                let expr_6811 := shift_right_t_uint256_t_uint256(expr_6804, expr_6810)
                /// @src 9:4481:4573  "int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k))"
                let expr_6812 := convert_t_uint256_to_t_int256(expr_6811)
                /// @src 9:4477:4573  "r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k))"
                var_r_6627 := expr_6812
                let expr_6813 := expr_6812
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(memPtr)
            {
                mstore(add(memPtr, 0), "UNDEFINED")
            }
            function abi_encode_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 9)
                store_literal_in_memory_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_96_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_96_by_1(value)))
            }
            function cleanup_t_rational_159_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_159_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_159_by_1(value)))
            }
            function shift_left_t_int256_t_uint256(value, bits) -> result
            {
                bits := cleanup_t_uint256(bits)
                result := cleanup_t_int256(shift_left_dynamic(bits, cleanup_t_int256(value)))
            }
            function convert_t_rational_159_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_159_by_1(value)))
            }
            function shift_right_t_uint256_t_uint8(value, bits) -> result
            {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_uint256(shift_right_unsigned_dynamic(bits, cleanup_t_uint256(value)))
            }
            function cleanup_t_rational_3273285459638523848632254066296_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_3273285459638523848632254066296_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3273285459638523848632254066296_by_1(value)))
            }
            function cleanup_t_rational_24828157081833163892658089445524_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_24828157081833163892658089445524_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_24828157081833163892658089445524_by_1(value)))
            }
            function cleanup_t_rational_43456485725739037958740375743393_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_43456485725739037958740375743393_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_43456485725739037958740375743393_by_1(value)))
            }
            function cleanup_t_rational_11111509109440967052023855526967_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_11111509109440967052023855526967_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_11111509109440967052023855526967_by_1(value)))
            }
            function cleanup_t_rational_45023709667254063763336534515857_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_45023709667254063763336534515857_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_45023709667254063763336534515857_by_1(value)))
            }
            function cleanup_t_rational_14706773417378608786704636184526_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_14706773417378608786704636184526_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_14706773417378608786704636184526_by_1(value)))
            }
            function cleanup_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1(value)))
            }
            function cleanup_t_rational_5573035233440673466300451813936_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_5573035233440673466300451813936_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_5573035233440673466300451813936_by_1(value)))
            }
            function cleanup_t_rational_71694874799317883764090561454958_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_71694874799317883764090561454958_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_71694874799317883764090561454958_by_1(value)))
            }
            function cleanup_t_rational_283447036172924575727196451306956_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_283447036172924575727196451306956_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_283447036172924575727196451306956_by_1(value)))
            }
            function cleanup_t_rational_401686690394027663651624208769553_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_401686690394027663651624208769553_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_401686690394027663651624208769553_by_1(value)))
            }
            function cleanup_t_rational_204048457590392012362485061816622_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_204048457590392012362485061816622_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_204048457590392012362485061816622_by_1(value)))
            }
            function cleanup_t_rational_31853899698501571402653359427138_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_31853899698501571402653359427138_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_31853899698501571402653359427138_by_1(value)))
            }
            function cleanup_t_rational_909429971244387300277376558375_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_909429971244387300277376558375_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_909429971244387300277376558375_by_1(value)))
            }
            function cleanup_t_rational_1677202110996718588342820967067443963516166_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1677202110996718588342820967067443963516166_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1677202110996718588342820967067443963516166_by_1(value)))
            }
            function cleanup_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1(value)))
            }
            function cleanup_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1_to_t_int256(value) -> converted
            {
                converted := cleanup_t_int256(identity(cleanup_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1(value)))
            }
            function cleanup_t_rational_174_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_174_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_174_by_1(value)))
            }
            /// @ast-id 7042 @src 9:4596:7543  "function lnWad(int256 x) internal pure returns (int256 r) {..."
            function fun_lnWad_7042(var_x_6819) -> var_r_6822
            {
                /// @src 9:4644:4652  "int256 r"
                let zero_t_int256_605 := zero_value_for_split_t_int256()
                var_r_6822 := zero_t_int256_605
                /// @src 9:4696:4697  "x"
                let _606 := var_x_6819
                let expr_6825 := _606
                /// @src 9:4700:4701  "0"
                let expr_6826 := 0x00
                /// @src 9:4696:4701  "x > 0"
                let expr_6827 := sgt(cleanup_t_int256(expr_6825), convert_t_rational_0_by_1_to_t_int256(expr_6826))
                /// @src 9:4688:4715  "require(x > 0, \"UNDEFINED\")"
                require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(expr_6827)
                /// @src 9:5138:5139  "x"
                let _607 := var_x_6819
                let expr_6838 := _607
                /// @src 9:5130:5140  "uint256(x)"
                let expr_6839 := convert_t_int256_to_t_uint256(expr_6838)
                /// @src 9:5125:5141  "log2(uint256(x))"
                let expr_6840 := fun_log2_7106(expr_6839)
                /// @src 9:5118:5142  "int256(log2(uint256(x)))"
                let expr_6841 := convert_t_uint256_to_t_int256(expr_6840)
                /// @src 9:5145:5147  "96"
                let expr_6842 := 0x60
                /// @src 9:5118:5147  "int256(log2(uint256(x))) - 96"
                let expr_6843 := wrapping_sub_t_int256(expr_6841, convert_t_rational_96_by_1_to_t_int256(expr_6842))
                /// @src 9:5107:5147  "int256 k = int256(log2(uint256(x))) - 96"
                let var_k_6832 := expr_6843
                /// @src 9:5175:5178  "159"
                let expr_6848 := 0x9f
                /// @src 9:5181:5182  "k"
                let _608 := var_k_6832
                let expr_6849 := _608
                /// @src 9:5175:5182  "159 - k"
                let expr_6850 := wrapping_sub_t_int256(convert_t_rational_159_by_1_to_t_int256(expr_6848), expr_6849)
                /// @src 9:5167:5183  "uint256(159 - k)"
                let expr_6851 := convert_t_int256_to_t_uint256(expr_6850)
                /// @src 9:5161:5183  "x <<= uint256(159 - k)"
                let _609 := var_x_6819
                let expr_6852 := shift_left_t_int256_t_uint256(_609, expr_6851)
                var_x_6819 := expr_6852
                /// @src 9:5216:5217  "x"
                let _610 := var_x_6819
                let expr_6859 := _610
                /// @src 9:5208:5218  "uint256(x)"
                let expr_6860 := convert_t_int256_to_t_uint256(expr_6859)
                /// @src 9:5222:5225  "159"
                let expr_6861 := 0x9f
                /// @src 9:5208:5225  "uint256(x) >> 159"
                let _611 := convert_t_rational_159_by_1_to_t_uint8(expr_6861)
                let expr_6862 := shift_right_t_uint256_t_uint8(expr_6860, _611)
                /// @src 9:5201:5226  "int256(uint256(x) >> 159)"
                let expr_6863 := convert_t_uint256_to_t_int256(expr_6862)
                /// @src 9:5197:5226  "x = int256(uint256(x) >> 159)"
                var_x_6819 := expr_6863
                let expr_6864 := expr_6863
                /// @src 9:5394:5395  "x"
                let _612 := var_x_6819
                let expr_6868 := _612
                /// @src 9:5398:5429  "3273285459638523848632254066296"
                let expr_6869 := 0x29508e458543d8aa4df2abee78
                /// @src 9:5394:5429  "x + 3273285459638523848632254066296"
                let expr_6870 := wrapping_add_t_int256(expr_6868, convert_t_rational_3273285459638523848632254066296_by_1_to_t_int256(expr_6869))
                /// @src 9:5383:5429  "int256 p = x + 3273285459638523848632254066296"
                let var_p_6867 := expr_6870
                /// @src 9:5449:5450  "p"
                let _613 := var_p_6867
                let expr_6873 := _613
                /// @src 9:5453:5454  "x"
                let _614 := var_x_6819
                let expr_6874 := _614
                /// @src 9:5449:5454  "p * x"
                let expr_6875 := wrapping_mul_t_int256(expr_6873, expr_6874)
                /// @src 9:5448:5455  "(p * x)"
                let expr_6876 := expr_6875
                /// @src 9:5459:5461  "96"
                let expr_6877 := 0x60
                /// @src 9:5448:5461  "(p * x) >> 96"
                let _615 := convert_t_rational_96_by_1_to_t_uint8(expr_6877)
                let expr_6878 := shift_right_t_int256_t_uint8(expr_6876, _615)
                /// @src 9:5447:5462  "((p * x) >> 96)"
                let expr_6879 := expr_6878
                /// @src 9:5465:5497  "24828157081833163892658089445524"
                let expr_6880 := 0x0139601a2efabe717e604cbb4894
                /// @src 9:5447:5497  "((p * x) >> 96) + 24828157081833163892658089445524"
                let expr_6881 := wrapping_add_t_int256(expr_6879, convert_t_rational_24828157081833163892658089445524_by_1_to_t_int256(expr_6880))
                /// @src 9:5443:5497  "p = ((p * x) >> 96) + 24828157081833163892658089445524"
                var_p_6867 := expr_6881
                let expr_6882 := expr_6881
                /// @src 9:5517:5518  "p"
                let _616 := var_p_6867
                let expr_6885 := _616
                /// @src 9:5521:5522  "x"
                let _617 := var_x_6819
                let expr_6886 := _617
                /// @src 9:5517:5522  "p * x"
                let expr_6887 := wrapping_mul_t_int256(expr_6885, expr_6886)
                /// @src 9:5516:5523  "(p * x)"
                let expr_6888 := expr_6887
                /// @src 9:5527:5529  "96"
                let expr_6889 := 0x60
                /// @src 9:5516:5529  "(p * x) >> 96"
                let _618 := convert_t_rational_96_by_1_to_t_uint8(expr_6889)
                let expr_6890 := shift_right_t_int256_t_uint8(expr_6888, _618)
                /// @src 9:5515:5530  "((p * x) >> 96)"
                let expr_6891 := expr_6890
                /// @src 9:5533:5565  "43456485725739037958740375743393"
                let expr_6892 := 0x02247f7a7b6594320649aa03aba1
                /// @src 9:5515:5565  "((p * x) >> 96) + 43456485725739037958740375743393"
                let expr_6893 := wrapping_add_t_int256(expr_6891, convert_t_rational_43456485725739037958740375743393_by_1_to_t_int256(expr_6892))
                /// @src 9:5511:5565  "p = ((p * x) >> 96) + 43456485725739037958740375743393"
                var_p_6867 := expr_6893
                let expr_6894 := expr_6893
                /// @src 9:5585:5586  "p"
                let _619 := var_p_6867
                let expr_6897 := _619
                /// @src 9:5589:5590  "x"
                let _620 := var_x_6819
                let expr_6898 := _620
                /// @src 9:5585:5590  "p * x"
                let expr_6899 := wrapping_mul_t_int256(expr_6897, expr_6898)
                /// @src 9:5584:5591  "(p * x)"
                let expr_6900 := expr_6899
                /// @src 9:5595:5597  "96"
                let expr_6901 := 0x60
                /// @src 9:5584:5597  "(p * x) >> 96"
                let _621 := convert_t_rational_96_by_1_to_t_uint8(expr_6901)
                let expr_6902 := shift_right_t_int256_t_uint8(expr_6900, _621)
                /// @src 9:5583:5598  "((p * x) >> 96)"
                let expr_6903 := expr_6902
                /// @src 9:5601:5633  "11111509109440967052023855526967"
                let expr_6904 := 0x8c3f38e95a6b1ff2ab1c3b3437
                /// @src 9:5583:5633  "((p * x) >> 96) - 11111509109440967052023855526967"
                let expr_6905 := wrapping_sub_t_int256(expr_6903, convert_t_rational_11111509109440967052023855526967_by_1_to_t_int256(expr_6904))
                /// @src 9:5579:5633  "p = ((p * x) >> 96) - 11111509109440967052023855526967"
                var_p_6867 := expr_6905
                let expr_6906 := expr_6905
                /// @src 9:5653:5654  "p"
                let _622 := var_p_6867
                let expr_6909 := _622
                /// @src 9:5657:5658  "x"
                let _623 := var_x_6819
                let expr_6910 := _623
                /// @src 9:5653:5658  "p * x"
                let expr_6911 := wrapping_mul_t_int256(expr_6909, expr_6910)
                /// @src 9:5652:5659  "(p * x)"
                let expr_6912 := expr_6911
                /// @src 9:5663:5665  "96"
                let expr_6913 := 0x60
                /// @src 9:5652:5665  "(p * x) >> 96"
                let _624 := convert_t_rational_96_by_1_to_t_uint8(expr_6913)
                let expr_6914 := shift_right_t_int256_t_uint8(expr_6912, _624)
                /// @src 9:5651:5666  "((p * x) >> 96)"
                let expr_6915 := expr_6914
                /// @src 9:5669:5701  "45023709667254063763336534515857"
                let expr_6916 := 0x02384773bdf1ac5676facced6091
                /// @src 9:5651:5701  "((p * x) >> 96) - 45023709667254063763336534515857"
                let expr_6917 := wrapping_sub_t_int256(expr_6915, convert_t_rational_45023709667254063763336534515857_by_1_to_t_int256(expr_6916))
                /// @src 9:5647:5701  "p = ((p * x) >> 96) - 45023709667254063763336534515857"
                var_p_6867 := expr_6917
                let expr_6918 := expr_6917
                /// @src 9:5721:5722  "p"
                let _625 := var_p_6867
                let expr_6921 := _625
                /// @src 9:5725:5726  "x"
                let _626 := var_x_6819
                let expr_6922 := _626
                /// @src 9:5721:5726  "p * x"
                let expr_6923 := wrapping_mul_t_int256(expr_6921, expr_6922)
                /// @src 9:5720:5727  "(p * x)"
                let expr_6924 := expr_6923
                /// @src 9:5731:5733  "96"
                let expr_6925 := 0x60
                /// @src 9:5720:5733  "(p * x) >> 96"
                let _627 := convert_t_rational_96_by_1_to_t_uint8(expr_6925)
                let expr_6926 := shift_right_t_int256_t_uint8(expr_6924, _627)
                /// @src 9:5719:5734  "((p * x) >> 96)"
                let expr_6927 := expr_6926
                /// @src 9:5737:5769  "14706773417378608786704636184526"
                let expr_6928 := 0xb9a025d814b29c212b8b1a07ce
                /// @src 9:5719:5769  "((p * x) >> 96) - 14706773417378608786704636184526"
                let expr_6929 := wrapping_sub_t_int256(expr_6927, convert_t_rational_14706773417378608786704636184526_by_1_to_t_int256(expr_6928))
                /// @src 9:5715:5769  "p = ((p * x) >> 96) - 14706773417378608786704636184526"
                var_p_6867 := expr_6929
                let expr_6930 := expr_6929
                /// @src 9:5787:5788  "p"
                let _628 := var_p_6867
                let expr_6933 := _628
                /// @src 9:5791:5792  "x"
                let _629 := var_x_6819
                let expr_6934 := _629
                /// @src 9:5787:5792  "p * x"
                let expr_6935 := wrapping_mul_t_int256(expr_6933, expr_6934)
                /// @src 9:5796:5832  "795164235651350426258249787498 << 96"
                let expr_6938 := 0x0a09507084cc699bb0e71ea86a000000000000000000000000
                /// @src 9:5795:5833  "(795164235651350426258249787498 << 96)"
                let expr_6939 := expr_6938
                /// @src 9:5787:5833  "p * x - (795164235651350426258249787498 << 96)"
                let expr_6940 := wrapping_sub_t_int256(expr_6935, convert_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1_to_t_int256(expr_6939))
                /// @src 9:5783:5833  "p = p * x - (795164235651350426258249787498 << 96)"
                var_p_6867 := expr_6940
                let expr_6941 := expr_6940
                /// @src 9:5997:5998  "x"
                let _630 := var_x_6819
                let expr_6945 := _630
                /// @src 9:6001:6032  "5573035233440673466300451813936"
                let expr_6946 := 0x465772b2bbbb5f824b15207a30
                /// @src 9:5997:6032  "x + 5573035233440673466300451813936"
                let expr_6947 := wrapping_add_t_int256(expr_6945, convert_t_rational_5573035233440673466300451813936_by_1_to_t_int256(expr_6946))
                /// @src 9:5986:6032  "int256 q = x + 5573035233440673466300451813936"
                let var_q_6944 := expr_6947
                /// @src 9:6052:6053  "q"
                let _631 := var_q_6944
                let expr_6950 := _631
                /// @src 9:6056:6057  "x"
                let _632 := var_x_6819
                let expr_6951 := _632
                /// @src 9:6052:6057  "q * x"
                let expr_6952 := wrapping_mul_t_int256(expr_6950, expr_6951)
                /// @src 9:6051:6058  "(q * x)"
                let expr_6953 := expr_6952
                /// @src 9:6062:6064  "96"
                let expr_6954 := 0x60
                /// @src 9:6051:6064  "(q * x) >> 96"
                let _633 := convert_t_rational_96_by_1_to_t_uint8(expr_6954)
                let expr_6955 := shift_right_t_int256_t_uint8(expr_6953, _633)
                /// @src 9:6050:6065  "((q * x) >> 96)"
                let expr_6956 := expr_6955
                /// @src 9:6068:6100  "71694874799317883764090561454958"
                let expr_6957 := 0x0388eaa27412d5aca026815d636e
                /// @src 9:6050:6100  "((q * x) >> 96) + 71694874799317883764090561454958"
                let expr_6958 := wrapping_add_t_int256(expr_6956, convert_t_rational_71694874799317883764090561454958_by_1_to_t_int256(expr_6957))
                /// @src 9:6046:6100  "q = ((q * x) >> 96) + 71694874799317883764090561454958"
                var_q_6944 := expr_6958
                let expr_6959 := expr_6958
                /// @src 9:6120:6121  "q"
                let _634 := var_q_6944
                let expr_6962 := _634
                /// @src 9:6124:6125  "x"
                let _635 := var_x_6819
                let expr_6963 := _635
                /// @src 9:6120:6125  "q * x"
                let expr_6964 := wrapping_mul_t_int256(expr_6962, expr_6963)
                /// @src 9:6119:6126  "(q * x)"
                let expr_6965 := expr_6964
                /// @src 9:6130:6132  "96"
                let expr_6966 := 0x60
                /// @src 9:6119:6132  "(q * x) >> 96"
                let _636 := convert_t_rational_96_by_1_to_t_uint8(expr_6966)
                let expr_6967 := shift_right_t_int256_t_uint8(expr_6965, _636)
                /// @src 9:6118:6133  "((q * x) >> 96)"
                let expr_6968 := expr_6967
                /// @src 9:6136:6169  "283447036172924575727196451306956"
                let expr_6969 := 0x0df99ac502031bf953eff472fdcc
                /// @src 9:6118:6169  "((q * x) >> 96) + 283447036172924575727196451306956"
                let expr_6970 := wrapping_add_t_int256(expr_6968, convert_t_rational_283447036172924575727196451306956_by_1_to_t_int256(expr_6969))
                /// @src 9:6114:6169  "q = ((q * x) >> 96) + 283447036172924575727196451306956"
                var_q_6944 := expr_6970
                let expr_6971 := expr_6970
                /// @src 9:6189:6190  "q"
                let _637 := var_q_6944
                let expr_6974 := _637
                /// @src 9:6193:6194  "x"
                let _638 := var_x_6819
                let expr_6975 := _638
                /// @src 9:6189:6194  "q * x"
                let expr_6976 := wrapping_mul_t_int256(expr_6974, expr_6975)
                /// @src 9:6188:6195  "(q * x)"
                let expr_6977 := expr_6976
                /// @src 9:6199:6201  "96"
                let expr_6978 := 0x60
                /// @src 9:6188:6201  "(q * x) >> 96"
                let _639 := convert_t_rational_96_by_1_to_t_uint8(expr_6978)
                let expr_6979 := shift_right_t_int256_t_uint8(expr_6977, _639)
                /// @src 9:6187:6202  "((q * x) >> 96)"
                let expr_6980 := expr_6979
                /// @src 9:6205:6238  "401686690394027663651624208769553"
                let expr_6981 := 0x13cdffb29d51d99322bdff5f2211
                /// @src 9:6187:6238  "((q * x) >> 96) + 401686690394027663651624208769553"
                let expr_6982 := wrapping_add_t_int256(expr_6980, convert_t_rational_401686690394027663651624208769553_by_1_to_t_int256(expr_6981))
                /// @src 9:6183:6238  "q = ((q * x) >> 96) + 401686690394027663651624208769553"
                var_q_6944 := expr_6982
                let expr_6983 := expr_6982
                /// @src 9:6258:6259  "q"
                let _640 := var_q_6944
                let expr_6986 := _640
                /// @src 9:6262:6263  "x"
                let _641 := var_x_6819
                let expr_6987 := _641
                /// @src 9:6258:6263  "q * x"
                let expr_6988 := wrapping_mul_t_int256(expr_6986, expr_6987)
                /// @src 9:6257:6264  "(q * x)"
                let expr_6989 := expr_6988
                /// @src 9:6268:6270  "96"
                let expr_6990 := 0x60
                /// @src 9:6257:6270  "(q * x) >> 96"
                let _642 := convert_t_rational_96_by_1_to_t_uint8(expr_6990)
                let expr_6991 := shift_right_t_int256_t_uint8(expr_6989, _642)
                /// @src 9:6256:6271  "((q * x) >> 96)"
                let expr_6992 := expr_6991
                /// @src 9:6274:6307  "204048457590392012362485061816622"
                let expr_6993 := 0x0a0f742023def783a307a986912e
                /// @src 9:6256:6307  "((q * x) >> 96) + 204048457590392012362485061816622"
                let expr_6994 := wrapping_add_t_int256(expr_6992, convert_t_rational_204048457590392012362485061816622_by_1_to_t_int256(expr_6993))
                /// @src 9:6252:6307  "q = ((q * x) >> 96) + 204048457590392012362485061816622"
                var_q_6944 := expr_6994
                let expr_6995 := expr_6994
                /// @src 9:6327:6328  "q"
                let _643 := var_q_6944
                let expr_6998 := _643
                /// @src 9:6331:6332  "x"
                let _644 := var_x_6819
                let expr_6999 := _644
                /// @src 9:6327:6332  "q * x"
                let expr_7000 := wrapping_mul_t_int256(expr_6998, expr_6999)
                /// @src 9:6326:6333  "(q * x)"
                let expr_7001 := expr_7000
                /// @src 9:6337:6339  "96"
                let expr_7002 := 0x60
                /// @src 9:6326:6339  "(q * x) >> 96"
                let _645 := convert_t_rational_96_by_1_to_t_uint8(expr_7002)
                let expr_7003 := shift_right_t_int256_t_uint8(expr_7001, _645)
                /// @src 9:6325:6340  "((q * x) >> 96)"
                let expr_7004 := expr_7003
                /// @src 9:6343:6375  "31853899698501571402653359427138"
                let expr_7005 := 0x01920d8043ca89b5239253284e42
                /// @src 9:6325:6375  "((q * x) >> 96) + 31853899698501571402653359427138"
                let expr_7006 := wrapping_add_t_int256(expr_7004, convert_t_rational_31853899698501571402653359427138_by_1_to_t_int256(expr_7005))
                /// @src 9:6321:6375  "q = ((q * x) >> 96) + 31853899698501571402653359427138"
                var_q_6944 := expr_7006
                let expr_7007 := expr_7006
                /// @src 9:6395:6396  "q"
                let _646 := var_q_6944
                let expr_7010 := _646
                /// @src 9:6399:6400  "x"
                let _647 := var_x_6819
                let expr_7011 := _647
                /// @src 9:6395:6400  "q * x"
                let expr_7012 := wrapping_mul_t_int256(expr_7010, expr_7011)
                /// @src 9:6394:6401  "(q * x)"
                let expr_7013 := expr_7012
                /// @src 9:6405:6407  "96"
                let expr_7014 := 0x60
                /// @src 9:6394:6407  "(q * x) >> 96"
                let _648 := convert_t_rational_96_by_1_to_t_uint8(expr_7014)
                let expr_7015 := shift_right_t_int256_t_uint8(expr_7013, _648)
                /// @src 9:6393:6408  "((q * x) >> 96)"
                let expr_7016 := expr_7015
                /// @src 9:6411:6441  "909429971244387300277376558375"
                let expr_7017 := 0x0b7a86d7375468fac667a0a527
                /// @src 9:6393:6441  "((q * x) >> 96) + 909429971244387300277376558375"
                let expr_7018 := wrapping_add_t_int256(expr_7016, convert_t_rational_909429971244387300277376558375_by_1_to_t_int256(expr_7017))
                /// @src 9:6389:6441  "q = ((q * x) >> 96) + 909429971244387300277376558375"
                var_q_6944 := expr_7018
                let expr_7019 := expr_7018
                /// @src 9:6455:6759  "assembly {..."
                {
                    var_r_6822 := sdiv(var_p_6867, var_q_6944)
                }
                /// @src 9:7125:7168  "1677202110996718588342820967067443963516166"
                let expr_7023 := 0x1340daa0d5f769dba1915cef59f0815a5506
                /// @src 9:7120:7168  "r *= 1677202110996718588342820967067443963516166"
                let _649 := convert_t_rational_1677202110996718588342820967067443963516166_by_1_to_t_int256(expr_7023)
                let _650 := var_r_6822
                let expr_7024 := wrapping_mul_t_int256(_650, _649)
                var_r_6822 := expr_7024
                /// @src 9:7232:7303  "16597577552685614221487285958193947469193820559219878177908093499208371"
                let expr_7027 := 0x0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b3
                /// @src 9:7306:7307  "k"
                let _651 := var_k_6832
                let expr_7028 := _651
                /// @src 9:7232:7307  "16597577552685614221487285958193947469193820559219878177908093499208371 * k"
                let expr_7029 := wrapping_mul_t_int256(convert_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1_to_t_int256(expr_7027), expr_7028)
                /// @src 9:7227:7307  "r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k"
                let _652 := var_r_6822
                let expr_7030 := wrapping_add_t_int256(_652, expr_7029)
                var_r_6822 := expr_7030
                /// @src 9:7380:7452  "600920179829731861736702779321621459595472258049074101567377883020018308"
                let expr_7033 := 0x57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b8864284
                /// @src 9:7375:7452  "r += 600920179829731861736702779321621459595472258049074101567377883020018308"
                let _653 := convert_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1_to_t_int256(expr_7033)
                let _654 := var_r_6822
                let expr_7034 := wrapping_add_t_int256(_654, _653)
                var_r_6822 := expr_7034
                /// @src 9:7523:7526  "174"
                let expr_7037 := 0xae
                /// @src 9:7517:7526  "r >>= 174"
                let _655 := convert_t_rational_174_by_1_to_t_uint8(expr_7037)
                let _656 := var_r_6822
                let expr_7038 := shift_right_t_int256_t_uint8(_656, _655)
                var_r_6822 := expr_7038
            }
            /// @ast-id 7106 @src 9:15328:15903  "function log2(uint256 x) internal pure returns (uint256 r) {..."
            function fun_log2_7106(var_x_7092) -> var_r_7095
            {
                /// @src 9:15376:15385  "uint256 r"
                let zero_t_uint256_657 := zero_value_for_split_t_uint256()
                var_r_7095 := zero_t_uint256_657
                /// @src 9:15405:15406  "x"
                let _658 := var_x_7092
                let expr_7098 := _658
                /// @src 9:15409:15410  "0"
                let expr_7099 := 0x00
                /// @src 9:15405:15410  "x > 0"
                let expr_7100 := gt(cleanup_t_uint256(expr_7098), convert_t_rational_0_by_1_to_t_uint256(expr_7099))
                /// @src 9:15397:15424  "require(x > 0, \"UNDEFINED\")"
                require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(expr_7100)
                /// @src 9:15435:15897  "assembly {..."
                {
                    var_r_7095 := shl(7, lt(0xffffffffffffffffffffffffffffffff, var_x_7092))
                    var_r_7095 := or(var_r_7095, shl(6, lt(0xffffffffffffffff, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, shl(5, lt(0xffffffff, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, shl(4, lt(0xffff, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, shl(3, lt(0xff, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, shl(2, lt(0xf, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, shl(1, lt(0x3, shr(var_r_7095, var_x_7092))))
                    var_r_7095 := or(var_r_7095, lt(0x1, shr(var_r_7095, var_x_7092)))
                }
            }
            /// @ast-id 7231 @src 17:3924:4161  "function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {..."
            function fun_slice_7231(var__bytes_7203_mpos, var__start_7205) -> var__7208_mpos
            {
                /// @src 17:3999:4011  "bytes memory"
                let zero_t_bytes_memory_ptr_659_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7208_mpos := zero_t_bytes_memory_ptr_659_mpos
                /// @src 17:4027:4033  "_start"
                let _660 := var__start_7205
                let expr_7210 := _660
                /// @src 17:4037:4043  "_bytes"
                let _661_mpos := var__bytes_7203_mpos
                let expr_7211_mpos := _661_mpos
                /// @src 17:4037:4050  "_bytes.length"
                let expr_7212 := array_length_t_bytes_memory_ptr(expr_7211_mpos)
                /// @src 17:4027:4050  "_start >= _bytes.length"
                let expr_7213 := iszero(lt(cleanup_t_uint256(expr_7210), cleanup_t_uint256(expr_7212)))
                /// @src 17:4023:4093  "if (_start >= _bytes.length) {..."
                if expr_7213
                {
                    /// @src 17:4073:4082  "bytes(\"\")"
                    let expr_7217_mpos := convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr()
                    /// @src 17:4066:4082  "return bytes(\"\")"
                    var__7208_mpos := expr_7217_mpos
                    leave
                }
                /// @src 17:4115:4121  "_bytes"
                let _662_mpos := var__bytes_7203_mpos
                let expr_7222_mpos := _662_mpos
                /// @src 17:4123:4129  "_start"
                let _663 := var__start_7205
                let expr_7223 := _663
                /// @src 17:4131:4137  "_bytes"
                let _664_mpos := var__bytes_7203_mpos
                let expr_7224_mpos := _664_mpos
                /// @src 17:4131:4144  "_bytes.length"
                let expr_7225 := array_length_t_bytes_memory_ptr(expr_7224_mpos)
                /// @src 17:4147:4153  "_start"
                let _665 := var__start_7205
                let expr_7226 := _665
                /// @src 17:4131:4153  "_bytes.length - _start"
                let expr_7227 := checked_sub_t_uint256(expr_7225, expr_7226)
                /// @src 17:4109:4154  "slice(_bytes, _start, _bytes.length - _start)"
                let expr_7228_mpos := fun_slice_7200(expr_7222_mpos, expr_7223, expr_7227)
                /// @src 17:4102:4154  "return slice(_bytes, _start, _bytes.length - _start)"
                var__7208_mpos := expr_7228_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function cleanup_t_rational_31_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_31_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_31_by_1(value)))
            }
            function wrapping_add_t_uint256(x, y) -> sum
            {
                sum := cleanup_t_uint256(add(x, y))
            }
            function store_literal_in_memory_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(memPtr)
            {
                mstore(add(memPtr, 0), "slice_overflow")
            }
            function abi_encode_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)
                store_literal_in_memory_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(memPtr)
            {
                mstore(add(memPtr, 0), "slice_outOfBounds")
            }
            function abi_encode_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)
                store_literal_in_memory_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 7200 @src 17:688:3570  "function slice(..."
            function fun_slice_7200(var__bytes_7155_mpos, var__start_7157, var__length_7159) -> var__7162_mpos
            {
                /// @src 17:810:822  "bytes memory"
                let zero_t_bytes_memory_ptr_666_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7162_mpos := zero_t_bytes_memory_ptr_666_mpos
                /// @src 17:866:873  "_length"
                let _667 := var__length_7159
                let expr_7165 := _667
                /// @src 17:876:878  "31"
                let expr_7166 := 0x1f
                /// @src 17:866:878  "_length + 31"
                let expr_7167 := wrapping_add_t_uint256(expr_7165, convert_t_rational_31_by_1_to_t_uint256(expr_7166))
                /// @src 17:882:889  "_length"
                let _668 := var__length_7159
                let expr_7168 := _668
                /// @src 17:866:889  "_length + 31 >= _length"
                let expr_7169 := iszero(lt(cleanup_t_uint256(expr_7167), cleanup_t_uint256(expr_7168)))
                /// @src 17:858:908  "require(_length + 31 >= _length, \"slice_overflow\")"
                require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(expr_7169)
                /// @src 17:930:936  "_start"
                let _669 := var__start_7157
                let expr_7174 := _669
                /// @src 17:939:946  "_length"
                let _670 := var__length_7159
                let expr_7175 := _670
                /// @src 17:930:946  "_start + _length"
                let expr_7176 := wrapping_add_t_uint256(expr_7174, expr_7175)
                /// @src 17:950:956  "_start"
                let _671 := var__start_7157
                let expr_7177 := _671
                /// @src 17:930:956  "_start + _length >= _start"
                let expr_7178 := iszero(lt(cleanup_t_uint256(expr_7176), cleanup_t_uint256(expr_7177)))
                /// @src 17:922:975  "require(_start + _length >= _start, \"slice_overflow\")"
                require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(expr_7178)
                /// @src 17:997:1003  "_bytes"
                let _672_mpos := var__bytes_7155_mpos
                let expr_7183_mpos := _672_mpos
                /// @src 17:997:1010  "_bytes.length"
                let expr_7184 := array_length_t_bytes_memory_ptr(expr_7183_mpos)
                /// @src 17:1014:1020  "_start"
                let _673 := var__start_7157
                let expr_7185 := _673
                /// @src 17:1023:1030  "_length"
                let _674 := var__length_7159
                let expr_7186 := _674
                /// @src 17:1014:1030  "_start + _length"
                let expr_7187 := wrapping_add_t_uint256(expr_7185, expr_7186)
                /// @src 17:997:1030  "_bytes.length >= _start + _length"
                let expr_7188 := iszero(lt(cleanup_t_uint256(expr_7184), cleanup_t_uint256(expr_7187)))
                /// @src 17:989:1052  "require(_bytes.length >= _start + _length, \"slice_outOfBounds\")"
                require_helper_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(expr_7188)
                /// @src 17:1073:1095  "bytes memory tempBytes"
                let var_tempBytes_7194_mpos
                let zero_t_bytes_memory_ptr_675_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var_tempBytes_7194_mpos := zero_t_bytes_memory_ptr_675_mpos
                /// @src 17:1106:3537  "assembly {..."
                {
                    switch iszero(var__length_7159)
                    case 0 {
                        var_tempBytes_7194_mpos := mload(0x40)
                        let usr$lengthmod := and(var__length_7159, 31)
                        let usr$mc := add(add(var_tempBytes_7194_mpos, usr$lengthmod), mul(0x20, iszero(usr$lengthmod)))
                        let usr$end := add(usr$mc, var__length_7159)
                        for {
                            let usr$cc := add(add(add(var__bytes_7155_mpos, usr$lengthmod), mul(0x20, iszero(usr$lengthmod))), var__start_7157)
                        }
                        lt(usr$mc, usr$end)
                        {
                            usr$mc := add(usr$mc, 0x20)
                            usr$cc := add(usr$cc, 0x20)
                        }
                        { mstore(usr$mc, mload(usr$cc)) }
                        mstore(var_tempBytes_7194_mpos, var__length_7159)
                        mstore(0x40, and(add(usr$mc, 31), not(31)))
                    }
                    default {
                        var_tempBytes_7194_mpos := mload(0x40)
                        mstore(var_tempBytes_7194_mpos, 0)
                        mstore(0x40, add(var_tempBytes_7194_mpos, 0x20))
                    }
                }
                /// @src 17:3554:3563  "tempBytes"
                let _676_mpos := var_tempBytes_7194_mpos
                let expr_7197_mpos := _676_mpos
                /// @src 17:3547:3563  "return tempBytes"
                var__7162_mpos := expr_7197_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_bytes1() -> ret
            { ret := 0 }
            function cleanup_t_rational_4_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_4_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_4_by_1(value)))
            }
            function shift_right_t_bytes1_t_uint8(value, bits) -> result
            {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_bytes1(shift_right_unsigned_dynamic(bits, cleanup_t_bytes1(value)))
            }
            function cleanup_t_rational_15_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_15_by_1_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_15_by_1(value)))
            }
            /// @ast-id 7300 @src 17:4477:4934  "function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {..."
            function fun_toNibbles_7300(var__bytes_7234_mpos) -> var__7237_mpos
            {
                /// @src 17:4540:4552  "bytes memory"
                let zero_t_bytes_memory_ptr_677_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7237_mpos := zero_t_bytes_memory_ptr_677_mpos
                /// @src 17:4586:4592  "_bytes"
                let _678_mpos := var__bytes_7234_mpos
                let expr_7241_mpos := _678_mpos
                /// @src 17:4586:4599  "_bytes.length"
                let expr_7242 := array_length_t_bytes_memory_ptr(expr_7241_mpos)
                /// @src 17:4564:4599  "uint256 bytesLength = _bytes.length"
                let var_bytesLength_7240 := expr_7242
                /// @src 17:4642:4653  "bytesLength"
                let _679 := var_bytesLength_7240
                let expr_7248 := _679
                /// @src 17:4656:4657  "2"
                let expr_7249 := 0x02
                /// @src 17:4642:4657  "bytesLength * 2"
                let expr_7250 := checked_mul_t_uint256(expr_7248, convert_t_rational_2_by_1_to_t_uint256(expr_7249))
                /// @src 17:4632:4658  "new bytes(bytesLength * 2)"
                let expr_7251_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_7250)
                /// @src 17:4609:4658  "bytes memory nibbles = new bytes(bytesLength * 2)"
                let var_nibbles_7245_mpos := expr_7251_mpos
                /// @src 17:4668:4676  "bytes1 b"
                let var_b_7254
                let zero_t_bytes1_680 := zero_value_for_split_t_bytes1()
                var_b_7254 := zero_t_bytes1_680
                /// @src 17:4687:4903  "for (uint256 i = 0; i < bytesLength; ) {..."
                for {
                    /// @src 17:4704:4705  "0"
                    let expr_7258 := 0x00
                    /// @src 17:4692:4705  "uint256 i = 0"
                    let var_i_7257 := convert_t_rational_0_by_1_to_t_uint256(expr_7258)
                }
                1
                { }
                {
                    /// @src 17:4707:4708  "i"
                    let _681 := var_i_7257
                    let expr_7260 := _681
                    /// @src 17:4711:4722  "bytesLength"
                    let _682 := var_bytesLength_7240
                    let expr_7261 := _682
                    /// @src 17:4707:4722  "i < bytesLength"
                    let expr_7262 := lt(cleanup_t_uint256(expr_7260), cleanup_t_uint256(expr_7261))
                    if iszero(expr_7262) { break }
                    /// @src 17:4744:4750  "_bytes"
                    let _683_mpos := var__bytes_7234_mpos
                    let expr_7264_mpos := _683_mpos
                    /// @src 17:4751:4752  "i"
                    let _684 := var_i_7257
                    let expr_7265 := _684
                    /// @src 17:4744:4753  "_bytes[i]"
                    let _685 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_7264_mpos, expr_7265))
                    let expr_7266 := _685
                    /// @src 17:4740:4753  "b = _bytes[i]"
                    var_b_7254 := expr_7266
                    let expr_7267 := expr_7266
                    /// @src 17:4784:4785  "b"
                    let _686 := var_b_7254
                    let expr_7274 := _686
                    /// @src 17:4789:4790  "4"
                    let expr_7275 := 0x04
                    /// @src 17:4784:4790  "b >> 4"
                    let _687 := convert_t_rational_4_by_1_to_t_uint8(expr_7275)
                    let expr_7276 := shift_right_t_bytes1_t_uint8(expr_7274, _687)
                    /// @src 17:4767:4774  "nibbles"
                    let _688_mpos := var_nibbles_7245_mpos
                    let expr_7269_mpos := _688_mpos
                    /// @src 17:4775:4776  "i"
                    let _689 := var_i_7257
                    let expr_7270 := _689
                    /// @src 17:4779:4780  "2"
                    let expr_7271 := 0x02
                    /// @src 17:4775:4780  "i * 2"
                    let expr_7272 := checked_mul_t_uint256(expr_7270, convert_t_rational_2_by_1_to_t_uint256(expr_7271))
                    /// @src 17:4767:4790  "nibbles[i * 2] = b >> 4"
                    let _690 := expr_7276
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_7269_mpos, expr_7272), byte(0, _690))
                    let expr_7277 := expr_7276
                    /// @src 17:4825:4826  "b"
                    let _691 := var_b_7254
                    let expr_7286 := _691
                    /// @src 17:4829:4833  "0x0f"
                    let expr_7287 := 0x0f
                    /// @src 17:4825:4833  "b & 0x0f"
                    let expr_7288 := and(expr_7286, convert_t_rational_15_by_1_to_t_bytes1(expr_7287))
                    /// @src 17:4804:4811  "nibbles"
                    let _692_mpos := var_nibbles_7245_mpos
                    let expr_7279_mpos := _692_mpos
                    /// @src 17:4812:4813  "i"
                    let _693 := var_i_7257
                    let expr_7280 := _693
                    /// @src 17:4816:4817  "2"
                    let expr_7281 := 0x02
                    /// @src 17:4812:4817  "i * 2"
                    let expr_7282 := checked_mul_t_uint256(expr_7280, convert_t_rational_2_by_1_to_t_uint256(expr_7281))
                    /// @src 17:4820:4821  "1"
                    let expr_7283 := 0x01
                    /// @src 17:4812:4821  "i * 2 + 1"
                    let expr_7284 := checked_add_t_uint256(expr_7282, convert_t_rational_1_by_1_to_t_uint256(expr_7283))
                    /// @src 17:4804:4833  "nibbles[i * 2 + 1] = b & 0x0f"
                    let _694 := expr_7288
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_7279_mpos, expr_7284), byte(0, _694))
                    let expr_7289 := expr_7288
                    /// @src 17:4875:4878  "++i"
                    let _696 := var_i_7257
                    let _695 := increment_wrapping_t_uint256(_696)
                    var_i_7257 := _695
                    let expr_7292 := _695
                }
                /// @src 17:4920:4927  "nibbles"
                let _697_mpos := var_nibbles_7245_mpos
                let expr_7297_mpos := _697_mpos
                /// @src 17:4913:4927  "return nibbles"
                var__7237_mpos := expr_7297_mpos
                leave
            }
            /// @ast-id 7319 @src 17:5219:5367  "function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {..."
            function fun_equal_7319(var__bytes_7303_mpos, var__other_7305_mpos) -> var__7308
            {
                /// @src 17:5299:5303  "bool"
                let zero_t_bool_698 := zero_value_for_split_t_bool()
                var__7308 := zero_t_bool_698
                /// @src 17:5332:5338  "_bytes"
                let _699_mpos := var__bytes_7303_mpos
                let expr_7311_mpos := _699_mpos
                /// @src 17:5322:5339  "keccak256(_bytes)"
                let expr_7312 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_7311_mpos), array_length_t_bytes_memory_ptr(expr_7311_mpos))
                /// @src 17:5353:5359  "_other"
                let _700_mpos := var__other_7305_mpos
                let expr_7314_mpos := _700_mpos
                /// @src 17:5343:5360  "keccak256(_other)"
                let expr_7315 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_7314_mpos), array_length_t_bytes_memory_ptr(expr_7314_mpos))
                /// @src 17:5322:5360  "keccak256(_bytes) == keccak256(_other)"
                let expr_7316 := eq(cleanup_t_bytes32(expr_7312), cleanup_t_bytes32(expr_7315))
                /// @src 17:5315:5360  "return keccak256(_bytes) == keccak256(_other)"
                var__7308 := expr_7316
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr() -> ret
            { ret := 96 }
            /// @ast-id 7507 @src 24:4047:4172  "function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {..."
            function fun_readList_7507(var__in_7493_mpos) -> var__7498_mpos
            {
                /// @src 24:4106:4122  "RLPItem[] memory"
                let zero_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr_701_mpos := zero_value_for_split_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr()
                var__7498_mpos := zero_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr_701_mpos
                /// @src 24:4160:4163  "_in"
                let _702_mpos := var__in_7493_mpos
                let expr_7502_mpos := _702_mpos
                /// @src 24:4150:4164  "toRLPItem(_in)"
                let expr_7503_mpos := fun_toRLPItem_7367(expr_7502_mpos)
                /// @src 24:4141:4165  "readList(toRLPItem(_in))"
                let expr_7504_mpos := fun_readList_7490(expr_7503_mpos)
                /// @src 24:4134:4165  "return readList(toRLPItem(_in))"
                var__7498_mpos := expr_7504_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function allocate_memory_struct_t_struct$_RLPItem_$7334_memory_ptr() -> memPtr
            { memPtr := allocate_memory(64) }
            function zero_value_for_t_uint256() -> ret
            { ret := 0 }
            function zero_value_for_t_userDefinedValueType$_MemoryPointer_$7325() -> ret
            { ret := 0 }
            function allocate_and_zero_memory_struct_t_struct$_RLPItem_$7334_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory_struct_t_struct$_RLPItem_$7334_memory_ptr()
                let offset := memPtr
                mstore(offset, zero_value_for_t_uint256())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_userDefinedValueType$_MemoryPointer_$7325())
                offset := add(offset, 32)
            }
            function zero_value_for_split_t_struct$_RLPItem_$7334_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_RLPItem_$7334_memory_ptr()
            }
            function store_literal_in_memory_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of an RLP item")
                mstore(add(memPtr, 32), " must be greater than zero to be")
                mstore(add(memPtr, 64), " decodable")
            }
            function abi_encode_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function zero_value_for_split_t_userDefinedValueType$_MemoryPointer_$7325() -> ret
            { ret := 0 }
            function allocate_memory_struct_t_struct$_RLPItem_$7334_storage_ptr() -> memPtr
            { memPtr := allocate_memory(64) }
            function write_to_memory_t_uint256(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint256(value))
            }
            function write_to_memory_t_userDefinedValueType$_MemoryPointer_$7325(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint256(value))
            }
            /// @ast-id 7367 @src 24:1385:1804  "function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {..."
            function fun_toRLPItem_7367(var__in_7341_mpos) -> var__7345_mpos
            {
                /// @src 24:1445:1459  "RLPItem memory"
                let zero_t_struct$_RLPItem_$7334_memory_ptr_703_mpos := zero_value_for_split_t_struct$_RLPItem_$7334_memory_ptr()
                var__7345_mpos := zero_t_struct$_RLPItem_$7334_memory_ptr_703_mpos
                /// @src 24:1535:1538  "_in"
                let _704_mpos := var__in_7341_mpos
                let expr_7348_mpos := _704_mpos
                /// @src 24:1535:1545  "_in.length"
                let expr_7349 := array_length_t_bytes_memory_ptr(expr_7348_mpos)
                /// @src 24:1548:1549  "0"
                let expr_7350 := 0x00
                /// @src 24:1535:1549  "_in.length > 0"
                let expr_7351 := gt(cleanup_t_uint256(expr_7349), convert_t_rational_0_by_1_to_t_uint256(expr_7350))
                /// @src 24:1514:1649  "require(..."
                require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(expr_7351)
                /// @src 24:1660:1677  "MemoryPointer ptr"
                let var_ptr_7357
                let zero_t_userDefinedValueType$_MemoryPointer_$7325_705 := zero_value_for_split_t_userDefinedValueType$_MemoryPointer_$7325()
                var_ptr_7357 := zero_t_userDefinedValueType$_MemoryPointer_$7325_705
                /// @src 24:1687:1739  "assembly {..."
                {
                    var_ptr_7357 := add(var__in_7341_mpos, 32)
                }
                /// @src 24:1774:1777  "_in"
                let _706_mpos := var__in_7341_mpos
                let expr_7361_mpos := _706_mpos
                /// @src 24:1774:1784  "_in.length"
                let expr_7362 := array_length_t_bytes_memory_ptr(expr_7361_mpos)
                /// @src 24:1791:1794  "ptr"
                let _707 := var_ptr_7357
                let expr_7363 := _707
                /// @src 24:1756:1797  "RLPItem({ length: _in.length, ptr: ptr })"
                let expr_7364_mpos := allocate_memory_struct_t_struct$_RLPItem_$7334_storage_ptr()
                write_to_memory_t_uint256(add(expr_7364_mpos, 0), expr_7362)
                write_to_memory_t_userDefinedValueType$_MemoryPointer_$7325(add(expr_7364_mpos, 32), expr_7363)
                /// @src 24:1749:1797  "return RLPItem({ length: _in.length, ptr: ptr })"
                var__7345_mpos := expr_7364_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function panic_error_0x21()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x21)
                revert(0, 0x24)
            }
            function validator_assert_t_enum$_RLPItemType_$7328(value)
            {
                if iszero(lt(value, 2)) { panic_error_0x21() }
            }
            function cleanup_t_enum$_RLPItemType_$7328(value) -> cleaned
            {
                cleaned := value
                validator_assert_t_enum$_RLPItemType_$7328(value)
            }
            function store_literal_in_memory_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: decoded item type for")
                mstore(add(memPtr, 32), " list is not a list item")
            }
            function abi_encode_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)
                store_literal_in_memory_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: list item has an inva")
                mstore(add(memPtr, 32), "lid data remainder")
            }
            function abi_encode_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @src 24:1144:1190  "uint256 internal constant MAX_LIST_LENGTH = 32"
            function constant_MAX_LIST_LENGTH_7338() -> ret
            {
                /// @src 24:1188:1190  "32"
                let expr_7337 := 0x20
                let _716 := convert_t_rational_32_by_1_to_t_uint256(expr_7337)
                ret := _716
            }
            function array_allocation_size_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := mul(length, 0x20)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_value_for_t_struct$_RLPItem_$7334_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_RLPItem_$7334_memory_ptr()
            }
            function zero_complex_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes)
            {
                for { let i := 0 } lt(i, dataSizeInBytes) { i := add(i, 32) }
                {
                    mstore(add(dataStart, i), zero_value_for_t_struct$_RLPItem_$7334_memory_ptr())
                }
            }
            function allocate_and_zero_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_complex_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)
            }
            function read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(ptr) -> returnValue
            {
                let value := cleanup_t_uint256(mload(ptr))
                returnValue := value
            }
            /// @ast-id 7490 @src 24:1978:3873  "function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {..."
            function fun_readList_7490(var__in_7371_mpos) -> var__7376_mpos
            {
                /// @src 24:2039:2055  "RLPItem[] memory"
                let zero_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr_708_mpos := zero_value_for_split_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr()
                var__7376_mpos := zero_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr_708_mpos
                /// @src 24:2146:2149  "_in"
                let _709_mpos := var__in_7371_mpos
                let expr_7386_mpos := _709_mpos
                /// @src 24:2132:2150  "_decodeLength(_in)"
                let expr_7387_component_1, expr_7387_component_2, expr_7387_component_3 := fun__decodeLength_7809(expr_7386_mpos)
                /// @src 24:2067:2150  "(uint256 listOffset, uint256 listLength, RLPItemType itemType) = _decodeLength(_in)"
                let var_listOffset_7379 := expr_7387_component_1
                let var_listLength_7381 := expr_7387_component_2
                let var_itemType_7384 := expr_7387_component_3
                /// @src 24:2182:2190  "itemType"
                let _710 := var_itemType_7384
                let expr_7390 := _710
                /// @src 24:2194:2215  "RLPItemType.LIST_ITEM"
                let expr_7392 := 1
                /// @src 24:2182:2215  "itemType == RLPItemType.LIST_ITEM"
                let expr_7393 := eq(cleanup_t_enum$_RLPItemType_$7328(expr_7390), cleanup_t_enum$_RLPItemType_$7328(expr_7392))
                /// @src 24:2161:2297  "require(..."
                require_helper_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(expr_7393)
                /// @src 24:2329:2339  "listOffset"
                let _711 := var_listOffset_7379
                let expr_7398 := _711
                /// @src 24:2342:2352  "listLength"
                let _712 := var_listLength_7381
                let expr_7399 := _712
                /// @src 24:2329:2352  "listOffset + listLength"
                let expr_7400 := checked_add_t_uint256(expr_7398, expr_7399)
                /// @src 24:2356:2359  "_in"
                let _713_mpos := var__in_7371_mpos
                let expr_7401_mpos := _713_mpos
                /// @src 24:2356:2366  "_in.length"
                let _714 := add(expr_7401_mpos, 0)
                let _715 := read_from_memoryt_uint256(_714)
                let expr_7402 := _715
                /// @src 24:2329:2366  "listOffset + listLength == _in.length"
                let expr_7403 := eq(cleanup_t_uint256(expr_7400), cleanup_t_uint256(expr_7402))
                /// @src 24:2308:2442  "require(..."
                require_helper_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(expr_7403)
                /// @src 24:2882:2897  "MAX_LIST_LENGTH"
                let expr_7416 := constant_MAX_LIST_LENGTH_7338()
                /// @src 24:2868:2898  "new RLPItem[](MAX_LIST_LENGTH)"
                let expr_7417_mpos := allocate_and_zero_memory_array_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_7416)
                /// @src 24:2845:2898  "RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH)"
                let var_out_7411_mpos := expr_7417_mpos
                /// @src 24:2929:2930  "0"
                let expr_7421 := 0x00
                /// @src 24:2909:2930  "uint256 itemCount = 0"
                let var_itemCount_7420 := convert_t_rational_0_by_1_to_t_uint256(expr_7421)
                /// @src 24:2957:2967  "listOffset"
                let _717 := var_listOffset_7379
                let expr_7425 := _717
                /// @src 24:2940:2967  "uint256 offset = listOffset"
                let var_offset_7424 := expr_7425
                /// @src 24:2977:3714  "while (offset < _in.length) {..."
                for { } 1 { }
                {
                    /// @src 24:2984:2990  "offset"
                    let _718 := var_offset_7424
                    let expr_7427 := _718
                    /// @src 24:2993:2996  "_in"
                    let _719_mpos := var__in_7371_mpos
                    let expr_7428_mpos := _719_mpos
                    /// @src 24:2993:3003  "_in.length"
                    let _720 := add(expr_7428_mpos, 0)
                    let _721 := read_from_memoryt_uint256(_720)
                    let expr_7429 := _721
                    /// @src 24:2984:3003  "offset < _in.length"
                    let expr_7430 := lt(cleanup_t_uint256(expr_7427), cleanup_t_uint256(expr_7429))
                    if iszero(expr_7430) { break }
                    /// @src 24:3133:3136  "_in"
                    let _722_mpos := var__in_7371_mpos
                    let expr_7437_mpos := _722_mpos
                    /// @src 24:3133:3143  "_in.length"
                    let _723 := add(expr_7437_mpos, 0)
                    let _724 := read_from_memoryt_uint256(_723)
                    let expr_7438 := _724
                    /// @src 24:3146:3152  "offset"
                    let _725 := var_offset_7424
                    let expr_7439 := _725
                    /// @src 24:3133:3152  "_in.length - offset"
                    let expr_7440 := checked_sub_t_uint256(expr_7438, expr_7439)
                    /// @src 24:3219:3222  "_in"
                    let _726_mpos := var__in_7371_mpos
                    let expr_7445_mpos := _726_mpos
                    /// @src 24:3219:3226  "_in.ptr"
                    let _727 := add(expr_7445_mpos, 32)
                    let _728 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(_727)
                    let expr_7446 := _728
                    /// @src 24:3198:3227  "MemoryPointer.unwrap(_in.ptr)"
                    let expr_7447 := convert_t_uint256_to_t_uint256(expr_7446)
                    /// @src 24:3230:3236  "offset"
                    let _729 := var_offset_7424
                    let expr_7448 := _729
                    /// @src 24:3198:3236  "MemoryPointer.unwrap(_in.ptr) + offset"
                    let expr_7449 := checked_add_t_uint256(expr_7447, expr_7448)
                    /// @src 24:3179:3237  "MemoryPointer.wrap(MemoryPointer.unwrap(_in.ptr) + offset)"
                    let expr_7450 := convert_t_uint256_to_t_uint256(expr_7449)
                    /// @src 24:3095:3256  "RLPItem({..."
                    let expr_7451_mpos := allocate_memory_struct_t_struct$_RLPItem_$7334_storage_ptr()
                    write_to_memory_t_uint256(add(expr_7451_mpos, 0), expr_7440)
                    write_to_memory_t_userDefinedValueType$_MemoryPointer_$7325(add(expr_7451_mpos, 32), expr_7450)
                    /// @src 24:3064:3270  "_decodeLength(..."
                    let expr_7452_component_1, expr_7452_component_2, expr_7452_component_3 := fun__decodeLength_7809(expr_7451_mpos)
                    /// @src 24:3019:3270  "(uint256 itemOffset, uint256 itemLength, ) = _decodeLength(..."
                    let var_itemOffset_7432 := expr_7452_component_1
                    let var_itemLength_7434 := expr_7452_component_2
                    /// @src 24:3508:3518  "itemLength"
                    let _730 := var_itemLength_7434
                    let expr_7458 := _730
                    /// @src 24:3521:3531  "itemOffset"
                    let _731 := var_itemOffset_7432
                    let expr_7459 := _731
                    /// @src 24:3508:3531  "itemLength + itemOffset"
                    let expr_7460 := checked_add_t_uint256(expr_7458, expr_7459)
                    /// @src 24:3594:3597  "_in"
                    let _732_mpos := var__in_7371_mpos
                    let expr_7465_mpos := _732_mpos
                    /// @src 24:3594:3601  "_in.ptr"
                    let _733 := add(expr_7465_mpos, 32)
                    let _734 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(_733)
                    let expr_7466 := _734
                    /// @src 24:3573:3602  "MemoryPointer.unwrap(_in.ptr)"
                    let expr_7467 := convert_t_uint256_to_t_uint256(expr_7466)
                    /// @src 24:3605:3611  "offset"
                    let _735 := var_offset_7424
                    let expr_7468 := _735
                    /// @src 24:3573:3611  "MemoryPointer.unwrap(_in.ptr) + offset"
                    let expr_7469 := checked_add_t_uint256(expr_7467, expr_7468)
                    /// @src 24:3554:3612  "MemoryPointer.wrap(MemoryPointer.unwrap(_in.ptr) + offset)"
                    let expr_7470 := convert_t_uint256_to_t_uint256(expr_7469)
                    /// @src 24:3474:3627  "RLPItem({..."
                    let expr_7471_mpos := allocate_memory_struct_t_struct$_RLPItem_$7334_storage_ptr()
                    write_to_memory_t_uint256(add(expr_7471_mpos, 0), expr_7460)
                    write_to_memory_t_userDefinedValueType$_MemoryPointer_$7325(add(expr_7471_mpos, 32), expr_7470)
                    /// @src 24:3457:3460  "out"
                    let _736_mpos := var_out_7411_mpos
                    let expr_7454_mpos := _736_mpos
                    /// @src 24:3461:3470  "itemCount"
                    let _737 := var_itemCount_7420
                    let expr_7455 := _737
                    /// @src 24:3457:3627  "out[itemCount] = RLPItem({..."
                    mstore(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_7454_mpos, expr_7455), expr_7471_mpos)
                    let _738_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7334_memory_ptr_$dyn_memory_ptr(expr_7454_mpos, expr_7455))
                    let expr_7472_mpos := _738_mpos
                    /// @src 24:3655:3656  "1"
                    let expr_7475 := 0x01
                    /// @src 24:3642:3656  "itemCount += 1"
                    let _739 := convert_t_rational_1_by_1_to_t_uint256(expr_7475)
                    let _740 := var_itemCount_7420
                    let expr_7476 := checked_add_t_uint256(_740, _739)
                    var_itemCount_7420 := expr_7476
                    /// @src 24:3680:3690  "itemOffset"
                    let _741 := var_itemOffset_7432
                    let expr_7479 := _741
                    /// @src 24:3693:3703  "itemLength"
                    let _742 := var_itemLength_7434
                    let expr_7480 := _742
                    /// @src 24:3680:3703  "itemOffset + itemLength"
                    let expr_7481 := checked_add_t_uint256(expr_7479, expr_7480)
                    /// @src 24:3670:3703  "offset += itemOffset + itemLength"
                    let _743 := var_offset_7424
                    let expr_7482 := checked_add_t_uint256(_743, expr_7481)
                    var_offset_7424 := expr_7482
                }
                /// @src 24:3791:3846  "assembly {..."
                {
                    mstore(var_out_7411_mpos, var_itemCount_7420)
                }
                /// @src 24:3863:3866  "out"
                let _744_mpos := var_out_7411_mpos
                let expr_7487_mpos := _744_mpos
                /// @src 24:3856:3866  "return out"
                var__7376_mpos := expr_7487_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function store_literal_in_memory_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: decoded item type for")
                mstore(add(memPtr, 32), " bytes is not a data item")
            }
            function abi_encode_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 57)
                store_literal_in_memory_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: bytes value contains ")
                mstore(add(memPtr, 32), "an invalid remainder")
            }
            function abi_encode_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)
                store_literal_in_memory_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 7553 @src 24:4325:4852  "function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {..."
            function fun_readBytes_7553(var__in_7511_mpos) -> var__7514_mpos
            {
                /// @src 24:4387:4399  "bytes memory"
                let zero_t_bytes_memory_ptr_745_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7514_mpos := zero_t_bytes_memory_ptr_745_mpos
                /// @src 24:4490:4493  "_in"
                let _746_mpos := var__in_7511_mpos
                let expr_7524_mpos := _746_mpos
                /// @src 24:4476:4494  "_decodeLength(_in)"
                let expr_7525_component_1, expr_7525_component_2, expr_7525_component_3 := fun__decodeLength_7809(expr_7524_mpos)
                /// @src 24:4411:4494  "(uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in)"
                let var_itemOffset_7517 := expr_7525_component_1
                let var_itemLength_7519 := expr_7525_component_2
                let var_itemType_7522 := expr_7525_component_3
                /// @src 24:4526:4534  "itemType"
                let _747 := var_itemType_7522
                let expr_7528 := _747
                /// @src 24:4538:4559  "RLPItemType.DATA_ITEM"
                let expr_7530 := 0
                /// @src 24:4526:4559  "itemType == RLPItemType.DATA_ITEM"
                let expr_7531 := eq(cleanup_t_enum$_RLPItemType_$7328(expr_7528), cleanup_t_enum$_RLPItemType_$7328(expr_7530))
                /// @src 24:4505:4642  "require(..."
                require_helper_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(expr_7531)
                /// @src 24:4674:4677  "_in"
                let _748_mpos := var__in_7511_mpos
                let expr_7536_mpos := _748_mpos
                /// @src 24:4674:4684  "_in.length"
                let _749 := add(expr_7536_mpos, 0)
                let _750 := read_from_memoryt_uint256(_749)
                let expr_7537 := _750
                /// @src 24:4688:4698  "itemOffset"
                let _751 := var_itemOffset_7517
                let expr_7538 := _751
                /// @src 24:4701:4711  "itemLength"
                let _752 := var_itemLength_7519
                let expr_7539 := _752
                /// @src 24:4688:4711  "itemOffset + itemLength"
                let expr_7540 := checked_add_t_uint256(expr_7538, expr_7539)
                /// @src 24:4674:4711  "_in.length == itemOffset + itemLength"
                let expr_7541 := eq(cleanup_t_uint256(expr_7537), cleanup_t_uint256(expr_7540))
                /// @src 24:4653:4789  "require(..."
                require_helper_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(expr_7541)
                /// @src 24:4813:4816  "_in"
                let _753_mpos := var__in_7511_mpos
                let expr_7546_mpos := _753_mpos
                /// @src 24:4813:4820  "_in.ptr"
                let _754 := add(expr_7546_mpos, 32)
                let _755 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(_754)
                let expr_7547 := _755
                /// @src 24:4822:4832  "itemOffset"
                let _756 := var_itemOffset_7517
                let expr_7548 := _756
                /// @src 24:4834:4844  "itemLength"
                let _757 := var_itemLength_7519
                let expr_7549 := _757
                /// @src 24:4807:4845  "_copy(_in.ptr, itemOffset, itemLength)"
                let expr_7550_mpos := fun__copy_7849(expr_7547, expr_7548, expr_7549)
                /// @src 24:4800:4845  "return _copy(_in.ptr, itemOffset, itemLength)"
                var__7514_mpos := expr_7550_mpos
                leave
            }
            /// @ast-id 7586 @src 24:5281:5413  "function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {..."
            function fun_readRawBytes_7586(var__in_7572_mpos) -> var__7575_mpos
            {
                /// @src 24:5346:5358  "bytes memory"
                let zero_t_bytes_memory_ptr_758_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7575_mpos := zero_t_bytes_memory_ptr_758_mpos
                /// @src 24:5383:5386  "_in"
                let _759_mpos := var__in_7572_mpos
                let expr_7578_mpos := _759_mpos
                /// @src 24:5383:5390  "_in.ptr"
                let _760 := add(expr_7578_mpos, 32)
                let _761 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(_760)
                let expr_7579 := _761
                /// @src 24:5392:5393  "0"
                let expr_7580 := 0x00
                /// @src 24:5395:5398  "_in"
                let _762_mpos := var__in_7572_mpos
                let expr_7581_mpos := _762_mpos
                /// @src 24:5395:5405  "_in.length"
                let _763 := add(expr_7581_mpos, 0)
                let _764 := read_from_memoryt_uint256(_763)
                let expr_7582 := _764
                /// @src 24:5377:5406  "_copy(_in.ptr, 0, _in.length)"
                let _765 := convert_t_rational_0_by_1_to_t_uint256(expr_7580)
                let expr_7583_mpos := fun__copy_7849(expr_7579, _765, expr_7582)
                /// @src 24:5370:5406  "return _copy(_in.ptr, 0, _in.length)"
                var__7575_mpos := expr_7583_mpos
                leave
            }
            /// @src 12:1057:21080  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            function zero_value_for_split_t_enum$_RLPItemType_$7328() -> ret
            { ret := 0 }
            function cleanup_t_rational_127_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_127_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_127_by_1(value)))
            }
            function cleanup_t_rational_183_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_183_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_183_by_1(value)))
            }
            function cleanup_t_rational_191_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_191_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_191_by_1(value)))
            }
            function cleanup_t_rational_247_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_247_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_247_by_1(value)))
            }
            function store_literal_in_memory_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be > than length of list lengt")
                mstore(add(memPtr, 64), "h (long list)")
            }
            function abi_encode_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_0_by_1_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_0_by_1(value)))
            }
            function store_literal_in_memory_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t not have any leading zeros (lo")
                mstore(add(memPtr, 64), "ng list)")
            }
            function abi_encode_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_55_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_55_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_55_by_1(value)))
            }
            function store_literal_in_memory_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than 55 bytes (long")
                mstore(add(memPtr, 64), " list)")
            }
            function abi_encode_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than total length (")
                mstore(add(memPtr, 64), "long list)")
            }
            function abi_encode_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_192_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_192_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_192_by_1(value)))
            }
            function store_literal_in_memory_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than list length (s")
                mstore(add(memPtr, 64), "hort list)")
            }
            function abi_encode_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be > than length of string len")
                mstore(add(memPtr, 64), "gth (long string)")
            }
            function abi_encode_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 81)
                store_literal_in_memory_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t not have any leading zeros (lo")
                mstore(add(memPtr, 64), "ng string)")
            }
            function abi_encode_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than 55 bytes (long")
                mstore(add(memPtr, 64), " string)")
            }
            function abi_encode_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function store_literal_in_memory_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than total length (")
                mstore(add(memPtr, 64), "long string)")
            }
            function abi_encode_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 76)
                store_literal_in_memory_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function cleanup_t_rational_128_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_128_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_128_by_1(value)))
            }
            function store_literal_in_memory_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: length of content mus")
                mstore(add(memPtr, 32), "t be greater than string length ")
                mstore(add(memPtr, 64), "(short string)")
            }
            function abi_encode_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 78)
                store_literal_in_memory_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_rational_128_by_1_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_128_by_1(value)))
            }
            function store_literal_in_memory_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(memPtr)
            {
                mstore(add(memPtr, 0), "RLPReader: invalid prefix, singl")
                mstore(add(memPtr, 32), "e byte < 0x80 are not prefixed (")
                mstore(add(memPtr, 64), "short string)")
            }
            function abi_encode_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(pos)
                end := add(pos, 96)
            }
            function abi_encode_tuple_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 7809 @src 24:5678:10001  "function _decodeLength(RLPItem memory _in)..."
            function fun__decodeLength_7809(var__in_7590_mpos) -> var__7593, var__7595, var__7598
            {
                /// @src 24:5780:5787  "uint256"
                let zero_t_uint256_766 := zero_value_for_split_t_uint256()
                var__7593 := zero_t_uint256_766
                /// @src 24:5801:5808  "uint256"
                let zero_t_uint256_767 := zero_value_for_split_t_uint256()
                var__7595 := zero_t_uint256_767
                /// @src 24:5822:5833  "RLPItemType"
                let zero_t_enum$_RLPItemType_$7328_768 := zero_value_for_split_t_enum$_RLPItemType_$7328()
                var__7598 := zero_t_enum$_RLPItemType_$7328_768
                /// @src 24:6161:6164  "_in"
                let _769_mpos := var__in_7590_mpos
                let expr_7601_mpos := _769_mpos
                /// @src 24:6161:6171  "_in.length"
                let _770 := add(expr_7601_mpos, 0)
                let _771 := read_from_memoryt_uint256(_770)
                let expr_7602 := _771
                /// @src 24:6174:6175  "0"
                let expr_7603 := 0x00
                /// @src 24:6161:6175  "_in.length > 0"
                let expr_7604 := gt(cleanup_t_uint256(expr_7602), convert_t_rational_0_by_1_to_t_uint256(expr_7603))
                /// @src 24:6140:6275  "require(..."
                require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(expr_7604)
                /// @src 24:6306:6309  "_in"
                let _772_mpos := var__in_7590_mpos
                let expr_7611_mpos := _772_mpos
                /// @src 24:6306:6313  "_in.ptr"
                let _773 := add(expr_7611_mpos, 32)
                let _774 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7325(_773)
                let expr_7612 := _774
                /// @src 24:6286:6313  "MemoryPointer ptr = _in.ptr"
                let var_ptr_7610 := expr_7612
                /// @src 24:6323:6337  "uint256 prefix"
                let var_prefix_7615
                let zero_t_uint256_775 := zero_value_for_split_t_uint256()
                var_prefix_7615 := zero_t_uint256_775
                /// @src 24:6347:6409  "assembly {..."
                {
                    var_prefix_7615 := byte(0, mload(var_ptr_7610))
                }
                /// @src 24:6423:6429  "prefix"
                let _776 := var_prefix_7615
                let expr_7618 := _776
                /// @src 24:6433:6437  "0x7f"
                let expr_7619 := 0x7f
                /// @src 24:6423:6437  "prefix <= 0x7f"
                let expr_7620 := iszero(gt(cleanup_t_uint256(expr_7618), convert_t_rational_127_by_1_to_t_uint256(expr_7619)))
                /// @src 24:6419:9995  "if (prefix <= 0x7f) {..."
                switch expr_7620
                case 0 {
                    /// @src 24:6538:6544  "prefix"
                    let _777 := var_prefix_7615
                    let expr_7628 := _777
                    /// @src 24:6548:6552  "0xb7"
                    let expr_7629 := 0xb7
                    /// @src 24:6538:6552  "prefix <= 0xb7"
                    let expr_7630 := iszero(gt(cleanup_t_uint256(expr_7628), convert_t_rational_183_by_1_to_t_uint256(expr_7629)))
                    /// @src 24:6534:9995  "if (prefix <= 0xb7) {..."
                    switch expr_7630
                    case 0 {
                        /// @src 24:7279:7285  "prefix"
                        let _778 := var_prefix_7615
                        let expr_7667 := _778
                        /// @src 24:7289:7293  "0xbf"
                        let expr_7668 := 0xbf
                        /// @src 24:7279:7293  "prefix <= 0xbf"
                        let expr_7669 := iszero(gt(cleanup_t_uint256(expr_7667), convert_t_rational_191_by_1_to_t_uint256(expr_7668)))
                        /// @src 24:7275:9995  "if (prefix <= 0xbf) {..."
                        switch expr_7669
                        case 0 {
                            /// @src 24:8458:8464  "prefix"
                            let _779 := var_prefix_7615
                            let expr_7725 := _779
                            /// @src 24:8468:8472  "0xf7"
                            let expr_7726 := 0xf7
                            /// @src 24:8458:8472  "prefix <= 0xf7"
                            let expr_7727 := iszero(gt(cleanup_t_uint256(expr_7725), convert_t_rational_247_by_1_to_t_uint256(expr_7726)))
                            /// @src 24:8454:9995  "if (prefix <= 0xf7) {..."
                            switch expr_7727
                            case 0 {
                                /// @src 24:8907:8913  "prefix"
                                let _780 := var_prefix_7615
                                let expr_7751 := _780
                                /// @src 24:8916:8920  "0xf7"
                                let expr_7752 := 0xf7
                                /// @src 24:8907:8920  "prefix - 0xf7"
                                let expr_7753 := checked_sub_t_uint256(expr_7751, convert_t_rational_247_by_1_to_t_uint256(expr_7752))
                                /// @src 24:8884:8920  "uint256 lenOfListLen = prefix - 0xf7"
                                let var_lenOfListLen_7750 := expr_7753
                                /// @src 24:8960:8963  "_in"
                                let _781_mpos := var__in_7590_mpos
                                let expr_7756_mpos := _781_mpos
                                /// @src 24:8960:8970  "_in.length"
                                let _782 := add(expr_7756_mpos, 0)
                                let _783 := read_from_memoryt_uint256(_782)
                                let expr_7757 := _783
                                /// @src 24:8973:8985  "lenOfListLen"
                                let _784 := var_lenOfListLen_7750
                                let expr_7758 := _784
                                /// @src 24:8960:8985  "_in.length > lenOfListLen"
                                let expr_7759 := gt(cleanup_t_uint256(expr_7757), cleanup_t_uint256(expr_7758))
                                /// @src 24:8935:9096  "require(..."
                                require_helper_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(expr_7759)
                                /// @src 24:9111:9136  "bytes1 firstByteOfContent"
                                let var_firstByteOfContent_7764
                                let zero_t_bytes1_785 := zero_value_for_split_t_bytes1()
                                var_firstByteOfContent_7764 := zero_t_bytes1_785
                                /// @src 24:9150:9252  "assembly {..."
                                {
                                    var_firstByteOfContent_7764 := and(mload(add(var_ptr_7610, 1)), shl(248, 0xff))
                                }
                                /// @src 24:9291:9309  "firstByteOfContent"
                                let _786 := var_firstByteOfContent_7764
                                let expr_7768 := _786
                                /// @src 24:9313:9317  "0x00"
                                let expr_7769 := 0x00
                                /// @src 24:9291:9317  "firstByteOfContent != 0x00"
                                let expr_7770 := iszero(eq(cleanup_t_bytes1(expr_7768), convert_t_rational_0_by_1_to_t_bytes1(expr_7769)))
                                /// @src 24:9266:9423  "require(..."
                                require_helper_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(expr_7770)
                                /// @src 24:9438:9453  "uint256 listLen"
                                let var_listLen_7775
                                let zero_t_uint256_787 := zero_value_for_split_t_uint256()
                                var_listLen_7775 := zero_t_uint256_787
                                /// @src 24:9467:9574  "assembly {..."
                                {
                                    var_listLen_7775 := shr(sub(256, mul(8, var_lenOfListLen_7750)), mload(add(var_ptr_7610, 1)))
                                }
                                /// @src 24:9613:9620  "listLen"
                                let _788 := var_listLen_7775
                                let expr_7779 := _788
                                /// @src 24:9623:9625  "55"
                                let expr_7780 := 0x37
                                /// @src 24:9613:9625  "listLen > 55"
                                let expr_7781 := gt(cleanup_t_uint256(expr_7779), convert_t_rational_55_by_1_to_t_uint256(expr_7780))
                                /// @src 24:9588:9729  "require(..."
                                require_helper_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(expr_7781)
                                /// @src 24:9769:9772  "_in"
                                let _789_mpos := var__in_7590_mpos
                                let expr_7786_mpos := _789_mpos
                                /// @src 24:9769:9779  "_in.length"
                                let _790 := add(expr_7786_mpos, 0)
                                let _791 := read_from_memoryt_uint256(_790)
                                let expr_7787 := _791
                                /// @src 24:9782:9794  "lenOfListLen"
                                let _792 := var_lenOfListLen_7750
                                let expr_7788 := _792
                                /// @src 24:9797:9804  "listLen"
                                let _793 := var_listLen_7775
                                let expr_7789 := _793
                                /// @src 24:9782:9804  "lenOfListLen + listLen"
                                let expr_7790 := checked_add_t_uint256(expr_7788, expr_7789)
                                /// @src 24:9769:9804  "_in.length > lenOfListLen + listLen"
                                let expr_7791 := gt(cleanup_t_uint256(expr_7787), cleanup_t_uint256(expr_7790))
                                /// @src 24:9744:9912  "require(..."
                                require_helper_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(expr_7791)
                                /// @src 24:9935:9936  "1"
                                let expr_7795 := 0x01
                                /// @src 24:9939:9951  "lenOfListLen"
                                let _794 := var_lenOfListLen_7750
                                let expr_7796 := _794
                                /// @src 24:9935:9951  "1 + lenOfListLen"
                                let expr_7797 := checked_add_t_uint256(convert_t_rational_1_by_1_to_t_uint256(expr_7795), expr_7796)
                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7801_component_1 := expr_7797
                                /// @src 24:9953:9960  "listLen"
                                let _795 := var_listLen_7775
                                let expr_7798 := _795
                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7801_component_2 := expr_7798
                                /// @src 24:9962:9983  "RLPItemType.LIST_ITEM"
                                let expr_7800 := 1
                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7801_component_3 := expr_7800
                                /// @src 24:9927:9984  "return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                var__7593 := expr_7801_component_1
                                var__7595 := expr_7801_component_2
                                var__7598 := expr_7801_component_3
                                leave
                            }
                            default /// @src 24:8454:9995  "if (prefix <= 0xf7) {..."
                            {
                                /// @src 24:8589:8595  "prefix"
                                let _796 := var_prefix_7615
                                let expr_7730 := _796
                                /// @src 24:8598:8602  "0xc0"
                                let expr_7731 := 0xc0
                                /// @src 24:8589:8602  "prefix - 0xc0"
                                let expr_7732 := checked_sub_t_uint256(expr_7730, convert_t_rational_192_by_1_to_t_uint256(expr_7731))
                                /// @src 24:8571:8602  "uint256 listLen = prefix - 0xc0"
                                let var_listLen_7729 := expr_7732
                                /// @src 24:8642:8645  "_in"
                                let _797_mpos := var__in_7590_mpos
                                let expr_7735_mpos := _797_mpos
                                /// @src 24:8642:8652  "_in.length"
                                let _798 := add(expr_7735_mpos, 0)
                                let _799 := read_from_memoryt_uint256(_798)
                                let expr_7736 := _799
                                /// @src 24:8655:8662  "listLen"
                                let _800 := var_listLen_7729
                                let expr_7737 := _800
                                /// @src 24:8642:8662  "_in.length > listLen"
                                let expr_7738 := gt(cleanup_t_uint256(expr_7736), cleanup_t_uint256(expr_7737))
                                /// @src 24:8617:8770  "require(..."
                                require_helper_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(expr_7738)
                                /// @src 24:8793:8794  "1"
                                let expr_7742 := 0x01
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7746_component_1 := expr_7742
                                /// @src 24:8796:8803  "listLen"
                                let _801 := var_listLen_7729
                                let expr_7743 := _801
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7746_component_2 := expr_7743
                                /// @src 24:8805:8826  "RLPItemType.LIST_ITEM"
                                let expr_7745 := 1
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7746_component_3 := expr_7745
                                /// @src 24:8785:8827  "return (1, listLen, RLPItemType.LIST_ITEM)"
                                var__7593 := convert_t_rational_1_by_1_to_t_uint256(expr_7746_component_1)
                                var__7595 := expr_7746_component_2
                                var__7598 := expr_7746_component_3
                                leave
                            }
                        }
                        default /// @src 24:7275:9995  "if (prefix <= 0xbf) {..."
                        {
                            /// @src 24:7359:7365  "prefix"
                            let _802 := var_prefix_7615
                            let expr_7672 := _802
                            /// @src 24:7368:7372  "0xb7"
                            let expr_7673 := 0xb7
                            /// @src 24:7359:7372  "prefix - 0xb7"
                            let expr_7674 := checked_sub_t_uint256(expr_7672, convert_t_rational_183_by_1_to_t_uint256(expr_7673))
                            /// @src 24:7337:7372  "uint256 lenOfStrLen = prefix - 0xb7"
                            let var_lenOfStrLen_7671 := expr_7674
                            /// @src 24:7412:7415  "_in"
                            let _803_mpos := var__in_7590_mpos
                            let expr_7677_mpos := _803_mpos
                            /// @src 24:7412:7422  "_in.length"
                            let _804 := add(expr_7677_mpos, 0)
                            let _805 := read_from_memoryt_uint256(_804)
                            let expr_7678 := _805
                            /// @src 24:7425:7436  "lenOfStrLen"
                            let _806 := var_lenOfStrLen_7671
                            let expr_7679 := _806
                            /// @src 24:7412:7436  "_in.length > lenOfStrLen"
                            let expr_7680 := gt(cleanup_t_uint256(expr_7678), cleanup_t_uint256(expr_7679))
                            /// @src 24:7387:7551  "require(..."
                            require_helper_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(expr_7680)
                            /// @src 24:7566:7591  "bytes1 firstByteOfContent"
                            let var_firstByteOfContent_7685
                            let zero_t_bytes1_807 := zero_value_for_split_t_bytes1()
                            var_firstByteOfContent_7685 := zero_t_bytes1_807
                            /// @src 24:7605:7707  "assembly {..."
                            {
                                var_firstByteOfContent_7685 := and(mload(add(var_ptr_7610, 1)), shl(248, 0xff))
                            }
                            /// @src 24:7746:7764  "firstByteOfContent"
                            let _808 := var_firstByteOfContent_7685
                            let expr_7689 := _808
                            /// @src 24:7768:7772  "0x00"
                            let expr_7690 := 0x00
                            /// @src 24:7746:7772  "firstByteOfContent != 0x00"
                            let expr_7691 := iszero(eq(cleanup_t_bytes1(expr_7689), convert_t_rational_0_by_1_to_t_bytes1(expr_7690)))
                            /// @src 24:7721:7880  "require(..."
                            require_helper_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(expr_7691)
                            /// @src 24:7895:7909  "uint256 strLen"
                            let var_strLen_7696
                            let zero_t_uint256_809 := zero_value_for_split_t_uint256()
                            var_strLen_7696 := zero_t_uint256_809
                            /// @src 24:7923:8028  "assembly {..."
                            {
                                var_strLen_7696 := shr(sub(256, mul(8, var_lenOfStrLen_7671)), mload(add(var_ptr_7610, 1)))
                            }
                            /// @src 24:8067:8073  "strLen"
                            let _810 := var_strLen_7696
                            let expr_7700 := _810
                            /// @src 24:8076:8078  "55"
                            let expr_7701 := 0x37
                            /// @src 24:8067:8078  "strLen > 55"
                            let expr_7702 := gt(cleanup_t_uint256(expr_7700), convert_t_rational_55_by_1_to_t_uint256(expr_7701))
                            /// @src 24:8042:8184  "require(..."
                            require_helper_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(expr_7702)
                            /// @src 24:8224:8227  "_in"
                            let _811_mpos := var__in_7590_mpos
                            let expr_7707_mpos := _811_mpos
                            /// @src 24:8224:8234  "_in.length"
                            let _812 := add(expr_7707_mpos, 0)
                            let _813 := read_from_memoryt_uint256(_812)
                            let expr_7708 := _813
                            /// @src 24:8237:8248  "lenOfStrLen"
                            let _814 := var_lenOfStrLen_7671
                            let expr_7709 := _814
                            /// @src 24:8251:8257  "strLen"
                            let _815 := var_strLen_7696
                            let expr_7710 := _815
                            /// @src 24:8237:8257  "lenOfStrLen + strLen"
                            let expr_7711 := checked_add_t_uint256(expr_7709, expr_7710)
                            /// @src 24:8224:8257  "_in.length > lenOfStrLen + strLen"
                            let expr_7712 := gt(cleanup_t_uint256(expr_7708), cleanup_t_uint256(expr_7711))
                            /// @src 24:8199:8367  "require(..."
                            require_helper_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(expr_7712)
                            /// @src 24:8390:8391  "1"
                            let expr_7716 := 0x01
                            /// @src 24:8394:8405  "lenOfStrLen"
                            let _816 := var_lenOfStrLen_7671
                            let expr_7717 := _816
                            /// @src 24:8390:8405  "1 + lenOfStrLen"
                            let expr_7718 := checked_add_t_uint256(convert_t_rational_1_by_1_to_t_uint256(expr_7716), expr_7717)
                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7722_component_1 := expr_7718
                            /// @src 24:8407:8413  "strLen"
                            let _817 := var_strLen_7696
                            let expr_7719 := _817
                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7722_component_2 := expr_7719
                            /// @src 24:8415:8436  "RLPItemType.DATA_ITEM"
                            let expr_7721 := 0
                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7722_component_3 := expr_7721
                            /// @src 24:8382:8437  "return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            var__7593 := expr_7722_component_1
                            var__7595 := expr_7722_component_2
                            var__7598 := expr_7722_component_3
                            leave
                        }
                    }
                    default /// @src 24:6534:9995  "if (prefix <= 0xb7) {..."
                    {
                        /// @src 24:6671:6677  "prefix"
                        let _818 := var_prefix_7615
                        let expr_7633 := _818
                        /// @src 24:6680:6684  "0x80"
                        let expr_7634 := 0x80
                        /// @src 24:6671:6684  "prefix - 0x80"
                        let expr_7635 := checked_sub_t_uint256(expr_7633, convert_t_rational_128_by_1_to_t_uint256(expr_7634))
                        /// @src 24:6654:6684  "uint256 strLen = prefix - 0x80"
                        let var_strLen_7632 := expr_7635
                        /// @src 24:6724:6727  "_in"
                        let _819_mpos := var__in_7590_mpos
                        let expr_7638_mpos := _819_mpos
                        /// @src 24:6724:6734  "_in.length"
                        let _820 := add(expr_7638_mpos, 0)
                        let _821 := read_from_memoryt_uint256(_820)
                        let expr_7639 := _821
                        /// @src 24:6737:6743  "strLen"
                        let _822 := var_strLen_7632
                        let expr_7640 := _822
                        /// @src 24:6724:6743  "_in.length > strLen"
                        let expr_7641 := gt(cleanup_t_uint256(expr_7639), cleanup_t_uint256(expr_7640))
                        /// @src 24:6699:6855  "require(..."
                        require_helper_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(expr_7641)
                        /// @src 24:6870:6895  "bytes1 firstByteOfContent"
                        let var_firstByteOfContent_7646
                        let zero_t_bytes1_823 := zero_value_for_split_t_bytes1()
                        var_firstByteOfContent_7646 := zero_t_bytes1_823
                        /// @src 24:6909:7011  "assembly {..."
                        {
                            var_firstByteOfContent_7646 := and(mload(add(var_ptr_7610, 1)), shl(248, 0xff))
                        }
                        /// @src 24:7050:7056  "strLen"
                        let _824 := var_strLen_7632
                        let expr_7650 := _824
                        /// @src 24:7060:7061  "1"
                        let expr_7651 := 0x01
                        /// @src 24:7050:7061  "strLen != 1"
                        let expr_7652 := iszero(eq(cleanup_t_uint256(expr_7650), convert_t_rational_1_by_1_to_t_uint256(expr_7651)))
                        /// @src 24:7050:7091  "strLen != 1 || firstByteOfContent >= 0x80"
                        let expr_7656 := expr_7652
                        if iszero(expr_7656)
                        {
                            /// @src 24:7065:7083  "firstByteOfContent"
                            let _825 := var_firstByteOfContent_7646
                            let expr_7653 := _825
                            /// @src 24:7087:7091  "0x80"
                            let expr_7654 := 0x80
                            /// @src 24:7065:7091  "firstByteOfContent >= 0x80"
                            let expr_7655 := iszero(lt(cleanup_t_bytes1(expr_7653), convert_t_rational_128_by_1_to_t_bytes1(expr_7654)))
                            /// @src 24:7050:7091  "strLen != 1 || firstByteOfContent >= 0x80"
                            expr_7656 := expr_7655
                        }
                        /// @src 24:7025:7202  "require(..."
                        require_helper_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(expr_7656)
                        /// @src 24:7225:7226  "1"
                        let expr_7660 := 0x01
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7664_component_1 := expr_7660
                        /// @src 24:7228:7234  "strLen"
                        let _826 := var_strLen_7632
                        let expr_7661 := _826
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7664_component_2 := expr_7661
                        /// @src 24:7236:7257  "RLPItemType.DATA_ITEM"
                        let expr_7663 := 0
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7664_component_3 := expr_7663
                        /// @src 24:7217:7258  "return (1, strLen, RLPItemType.DATA_ITEM)"
                        var__7593 := convert_t_rational_1_by_1_to_t_uint256(expr_7664_component_1)
                        var__7595 := expr_7664_component_2
                        var__7598 := expr_7664_component_3
                        leave
                    }
                }
                default /// @src 24:6419:9995  "if (prefix <= 0x7f) {..."
                {
                    /// @src 24:6489:6490  "0"
                    let expr_7621 := 0x00
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7625_component_1 := expr_7621
                    /// @src 24:6492:6493  "1"
                    let expr_7622 := 0x01
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7625_component_2 := expr_7622
                    /// @src 24:6495:6516  "RLPItemType.DATA_ITEM"
                    let expr_7624 := 0
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7625_component_3 := expr_7624
                    /// @src 24:6481:6517  "return (0, 1, RLPItemType.DATA_ITEM)"
                    var__7593 := convert_t_rational_0_by_1_to_t_uint256(expr_7625_component_1)
                    var__7595 := convert_t_rational_1_by_1_to_t_uint256(expr_7625_component_2)
                    var__7598 := expr_7625_component_3
                    leave
                }
            }
            /// @ast-id 7849 @src 24:10281:11214  "function _copy(..."
            function fun__copy_7849(var__src_7813, var__offset_7815, var__length_7817) -> var__7820_mpos
            {
                /// @src 24:10402:10414  "bytes memory"
                let zero_t_bytes_memory_ptr_827_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7820_mpos := zero_t_bytes_memory_ptr_827_mpos
                /// @src 24:10455:10462  "_length"
                let _828 := var__length_7817
                let expr_7826 := _828
                /// @src 24:10445:10463  "new bytes(_length)"
                let expr_7827_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_7826)
                /// @src 24:10426:10463  "bytes memory out = new bytes(_length)"
                let var_out_7823_mpos := expr_7827_mpos
                /// @src 24:10477:10484  "_length"
                let _829 := var__length_7817
                let expr_7829 := _829
                /// @src 24:10488:10489  "0"
                let expr_7830 := 0x00
                /// @src 24:10477:10489  "_length == 0"
                let expr_7831 := eq(cleanup_t_uint256(expr_7829), convert_t_rational_0_by_1_to_t_uint256(expr_7830))
                /// @src 24:10473:10526  "if (_length == 0) {..."
                if expr_7831
                {
                    /// @src 24:10512:10515  "out"
                    let _830_mpos := var_out_7823_mpos
                    let expr_7832_mpos := _830_mpos
                    /// @src 24:10505:10515  "return out"
                    var__7820_mpos := expr_7832_mpos
                    leave
                }
                /// @src 24:10820:10824  "_src"
                let _831 := var__src_7813
                let expr_7840 := _831
                /// @src 24:10799:10825  "MemoryPointer.unwrap(_src)"
                let expr_7841 := convert_t_uint256_to_t_uint256(expr_7840)
                /// @src 24:10828:10835  "_offset"
                let _832 := var__offset_7815
                let expr_7842 := _832
                /// @src 24:10799:10835  "MemoryPointer.unwrap(_src) + _offset"
                let expr_7843 := checked_add_t_uint256(expr_7841, expr_7842)
                /// @src 24:10785:10835  "uint256 src = MemoryPointer.unwrap(_src) + _offset"
                let var_src_7837 := expr_7843
                /// @src 24:10845:11187  "assembly {..."
                {
                    let usr$dest := add(var_out_7823_mpos, 32)
                    let usr$i := 0
                    for { } lt(usr$i, var__length_7817) { usr$i := add(usr$i, 32) }
                    {
                        mstore(add(usr$dest, usr$i), mload(add(var_src_7837, usr$i)))
                    }
                    if gt(usr$i, var__length_7817)
                    {
                        mstore(add(usr$dest, var__length_7817), 0)
                    }
                }
                /// @src 24:11204:11207  "out"
                let _833_mpos := var_out_7823_mpos
                let expr_7846_mpos := _833_mpos
                /// @src 24:11197:11207  "return out"
                var__7820_mpos := expr_7846_mpos
                leave
            }
        }
        data ".metadata" hex"a264697066735822122089fc67fe7bf9aa78f17a4cd97b6bd5558044587be40a843b92f1940c222d611f64736f6c634300080f0033"
    }
}

Optimized IR:

Optimized IR:
/// @use-src 0:"./node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol", 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 3:"./node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol", 14:"contracts/L1/SystemConfig.sol", 29:"contracts/universal/Semver.sol"
object "SystemConfig_2855" {
    code {
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        mstore(64, memoryguard(224))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_2533_object_SystemConfig_2855()
        constructor_SystemConfig_2855(_1, _2, _3, _4, _5, _6, _7)
        let _8 := allocate_unbounded()
        codecopy(_8, dataoffset("SystemConfig_2855_deployed"), datasize("SystemConfig_2855_deployed"))
        setimmutable(_8, "1425", mload(128))
        setimmutable(_8, "1428", mload(160))
        setimmutable(_8, "1431", mload(192))
        return(_8, datasize("SystemConfig_2855_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function cleanup_t_address(value) -> cleaned
        {
            cleaned := cleanup_t_uint160(value)
        }
        function validator_revert_t_address(value)
        {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }
        function abi_decode_t_address_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_address(value)
        }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function validator_revert_t_uint256(value)
        {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint256_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }
        function cleanup_t_bytes32(value) -> cleaned
        { cleaned := value }
        function validator_revert_t_bytes32(value)
        {
            if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
        }
        function abi_decode_t_bytes32_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_bytes32(value)
        }
        function cleanup_t_uint64(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffff)
        }
        function validator_revert_t_uint64(value)
        {
            if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint64_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint64(value)
        }
        function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
        { revert(0, 0) }
        function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421()
        { revert(0, 0) }
        function cleanup_t_uint32(value) -> cleaned
        {
            cleaned := and(value, 0xffffffff)
        }
        function validator_revert_t_uint32(value)
        {
            if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint32_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint32(value)
        }
        function cleanup_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function validator_revert_t_uint8(value)
        {
            if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint8_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint8(value)
        }
        function cleanup_t_uint128(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
        }
        function validator_revert_t_uint128(value)
        {
            if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint128_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint128(value)
        }
        function abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(headStart, end) -> value
        {
            if slt(sub(end, headStart), 0xc0)
            {
                revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
            }
            value := allocate_memory(0xc0)
            {
                let offset := 0
                mstore(add(value, 0x00), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
            }
            {
                let offset := 32
                mstore(add(value, 0x20), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))
            }
            {
                let offset := 64
                mstore(add(value, 0x40), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))
            }
            {
                let offset := 96
                mstore(add(value, 0x60), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
            }
            {
                let offset := 128
                mstore(add(value, 0x80), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))
            }
            {
                let offset := 160
                mstore(add(value, 0xa0), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))
            }
        }
        function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
        {
            if slt(sub(dataEnd, headStart), 384)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 64
                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 96
                value3 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 128
                value4 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 160
                value5 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 192
                value6 := abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_2533_object_SystemConfig_2855() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6
        {
            let programSize := datasize("SystemConfig_2855")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2128_memory_ptr_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        function cleanup_t_rational_1_by_1(value) -> cleaned
        { cleaned := value }
        function identity(value) -> ret
        { ret := value }
        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }
        function cleanup_t_rational_3_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_3_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
        }
        function cleanup_t_rational_0_by_1(value) -> cleaned
        { cleaned := value }
        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }
        /// @ast-id 2533 @src 14:3337:3882  "constructor(..."
        function constructor_SystemConfig_2855(var__owner_2501, var__overhead_2503, var__scalar_2505, var__batcherHash_2507, var__gasLimit_2509, var__unsafeBlockSigner_2511, var__config_2514_mpos)
        {
            /// @src 14:3586:3587  "1"
            let expr_2517 := 0x01
            let _9 := convert_t_rational_1_by_1_to_t_uint256(expr_2517)
            /// @src 14:3589:3590  "3"
            let expr_2518 := 0x03
            let _10 := convert_t_rational_3_by_1_to_t_uint256(expr_2518)
            /// @src 14:3592:3593  "0"
            let expr_2519 := 0x00
            let _11 := convert_t_rational_0_by_1_to_t_uint256(expr_2519)
            /// @src 14:3337:3882  "constructor(..."
            constructor_Semver_1483(_9, _10, _11)
            /// @src 14:3638:3644  "_owner"
            let _12 := var__owner_2501
            let expr_2523 := _12
            /// @src 14:3669:3678  "_overhead"
            let _13 := var__overhead_2503
            let expr_2524 := _13
            /// @src 14:3701:3708  "_scalar"
            let _14 := var__scalar_2505
            let expr_2525 := _14
            /// @src 14:3736:3748  "_batcherHash"
            let _15 := var__batcherHash_2507
            let expr_2526 := _15
            /// @src 14:3773:3782  "_gasLimit"
            let _16 := var__gasLimit_2509
            let expr_2527 := _16
            /// @src 14:3816:3834  "_unsafeBlockSigner"
            let _17 := var__unsafeBlockSigner_2511
            let expr_2528 := _17
            /// @src 14:3857:3864  "_config"
            let _18_mpos := var__config_2514_mpos
            let expr_2529_mpos := _18_mpos
            fun_initialize_2594(expr_2523, expr_2524, expr_2525, expr_2526, expr_2527, expr_2528, expr_2529_mpos)
        }
        /// @ast-id 1454 @src 29:726:919  "constructor(..."
        function constructor_Semver_1483(var__major_1434, var__minor_1436, var__patch_1438)
        {
            constructor_OwnableUpgradeable_5102()
            /// @src 29:842:848  "_major"
            let _19 := var__major_1434
            let expr_1442 := _19
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _20 := expr_1442
            mstore(128, _20)
            let expr_1443 := expr_1442
            /// @src 29:874:880  "_minor"
            let _21 := var__minor_1436
            let expr_1446 := _21
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _22 := expr_1446
            mstore(160, _22)
            let expr_1447 := expr_1446
            /// @src 29:906:912  "_patch"
            let _23 := var__patch_1438
            let expr_1450 := _23
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _24 := expr_1450
            mstore(192, _24)
            let expr_1451 := expr_1450
        }
        /// @src 0:708:3153  "abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {..."
        function constructor_OwnableUpgradeable_5102()
        {
            constructor_ContextUpgradeable_7149()
        }
        /// @src 3:651:1344  "abstract contract ContextUpgradeable is Initializable {..."
        function constructor_ContextUpgradeable_7149()
        {
            constructor_Initializable_3528()
        }
        /// @src 1:2383:5669  "abstract contract Initializable {..."
        function constructor_Initializable_3528()
        { }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function shift_right_8_unsigned(value) -> newValue
        { newValue := shr(8, value) }
        function cleanup_from_storage_t_bool(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_1t_bool(slot_value) -> value
        {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }
        function read_from_storage_split_offset_1_t_bool(slot) -> value
        {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))
        }
        function cleanup_t_bool(value) -> cleaned
        {
            cleaned := iszero(iszero(value))
        }
        function shift_right_0_unsigned(value) -> newValue
        { newValue := shr(0, value) }
        function cleanup_from_storage_t_uint8(value) -> cleaned
        { cleaned := and(value, 0xff) }
        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_uint8(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))
        }
        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_Initializable_$3528_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
        {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }
        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is alrea")
            mstore(add(memPtr, 32), "dy initialized")
        }
        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function shift_left_0(value) -> newValue
        { newValue := shl(0, value) }
        function update_byte_slice_1_shift_0(value, toInsert) -> result
        {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint8_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }
        function prepare_store_t_uint8(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_8(value) -> newValue
        { newValue := shl(8, value) }
        function update_byte_slice_1_shift_1(value, toInsert) -> result
        {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_bool_to_t_bool(value) -> converted
        {
            converted := cleanup_t_bool(value)
        }
        function prepare_store_t_bool(value) -> ret
        { ret := value }
        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
        {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }
        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
        {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }
        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
        {
            tail := add(headStart, 32)
            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
        }
        /// @ast-id 3448 @src 1:3078:3584  "modifier initializer() {..."
        function modifier_initializer_2552(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
        {
            /// @src 1:3134:3147  "_initializing"
            let _25 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3397 := _25
            /// @src 1:3133:3147  "!_initializing"
            let expr_3398 := cleanup_t_bool(iszero(expr_3397))
            /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_3396 := expr_3398
            /// @src 1:3179:3193  "isTopLevelCall"
            let _26 := var_isTopLevelCall_3396
            let expr_3401 := _26
            /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
            let expr_3405 := expr_3401
            if expr_3405
            {
                /// @src 1:3197:3209  "_initialized"
                let _27 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_3402 := _27
                /// @src 1:3212:3213  "1"
                let expr_3403 := 0x01
                /// @src 1:3197:3213  "_initialized < 1"
                let expr_3404 := lt(cleanup_t_uint8(expr_3402), convert_t_rational_1_by_1_to_t_uint8(expr_3403))
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                expr_3405 := expr_3404
            }
            /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
            let expr_3406 := expr_3405
            /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
            let expr_3420 := expr_3406
            if iszero(expr_3420)
            {
                /// @src 1:3220:3238  "AddressUpgradeable"
                let expr_3407_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                /// @src 1:3258:3262  "this"
                let expr_3411_address := address()
                /// @src 1:3250:3263  "address(this)"
                let expr_3412 := convert_t_contract$_Initializable_$3528_to_t_address(expr_3411_address)
                /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                let expr_3413 := fun_isContract_5691(expr_3412)
                /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                let expr_3414 := cleanup_t_bool(iszero(expr_3413))
                /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                let expr_3418 := expr_3414
                if expr_3418
                {
                    /// @src 1:3268:3280  "_initialized"
                    let _28 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_3415 := _28
                    /// @src 1:3284:3285  "1"
                    let expr_3416 := 0x01
                    /// @src 1:3268:3285  "_initialized == 1"
                    let expr_3417 := eq(cleanup_t_uint8(expr_3415), convert_t_rational_1_by_1_to_t_uint8(expr_3416))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    expr_3418 := expr_3417
                }
                /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3419 := expr_3418
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                expr_3420 := expr_3419
            }
            /// @src 1:3157:3358  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3420)
            /// @src 1:3383:3384  "1"
            let expr_3425 := 0x01
            /// @src 1:3368:3384  "_initialized = 1"
            let _29 := convert_t_rational_1_by_1_to_t_uint8(expr_3425)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _29)
            let expr_3426 := _29
            /// @src 1:3398:3412  "isTopLevelCall"
            let _30 := var_isTopLevelCall_3396
            let expr_3428 := _30
            /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            if expr_3428
            {
                /// @src 1:3444:3448  "true"
                let expr_3430 := 0x01
                /// @src 1:3428:3448  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3430)
                let expr_3431 := expr_3430
            }
            /// @src 1:3468:3469  "_"
            fun_initialize_2594_inner(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
            /// @src 1:3483:3497  "isTopLevelCall"
            let _31 := var_isTopLevelCall_3396
            let expr_3436 := _31
            /// @src 1:3479:3578  "if (isTopLevelCall) {..."
            if expr_3436
            {
                /// @src 1:3529:3534  "false"
                let expr_3438 := 0x00
                /// @src 1:3513:3534  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3438)
                let expr_3439 := expr_3438
                /// @src 1:3565:3566  "1"
                let expr_3442 := 0x01
                /// @src 1:3553:3567  "Initialized(1)"
                let _32 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _33 := allocate_unbounded()
                    let _34 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_33, expr_3442)
                    log1(_33, sub(_34, _33), _32)
                }
            }
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function update_byte_slice_32_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint256_to_t_uint256(value) -> converted
        {
            converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
        }
        function prepare_store_t_uint256(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
        }
        function convert_t_bytes32_to_t_bytes32(value) -> converted
        {
            converted := cleanup_t_bytes32(value)
        }
        function prepare_store_t_bytes32(value) -> ret
        {
            ret := shift_right_0_unsigned(value)
        }
        function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
        {
            let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
        }
        function update_byte_slice_8_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint64_to_t_uint64(value) -> converted
        {
            converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
        }
        function prepare_store_t_uint64(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint64_to_t_uint64(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_0(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }
        function store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(memPtr)
        {
            mstore(add(memPtr, 0), "SystemConfig: gas limit too low")
        }
        function abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)
            store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(pos)
            end := add(pos, 32)
        }
        function abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @src 14:4422:5053  "function initialize(..."
        function fun_initialize_2594_inner(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
        {
            fun___Ownable_init_4997()
            /// @src 14:4745:4751  "_owner"
            let _35 := var__owner_2536
            let expr_2558 := _35
            fun_transferOwnership_5076(expr_2558)
            /// @src 14:4773:4782  "_overhead"
            let _36 := var__overhead_2538
            let expr_2562 := _36
            /// @src 14:4762:4782  "overhead = _overhead"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2562)
            let expr_2563 := expr_2562
            /// @src 14:4801:4808  "_scalar"
            let _37 := var__scalar_2540
            let expr_2566 := _37
            /// @src 14:4792:4808  "scalar = _scalar"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2566)
            let expr_2567 := expr_2566
            /// @src 14:4832:4844  "_batcherHash"
            let _38 := var__batcherHash_2542
            let expr_2570 := _38
            /// @src 14:4818:4844  "batcherHash = _batcherHash"
            update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2570)
            let expr_2571 := expr_2570
            /// @src 14:4865:4874  "_gasLimit"
            let _39 := var__gasLimit_2544
            let expr_2574 := _39
            /// @src 14:4854:4874  "gasLimit = _gasLimit"
            update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2574)
            let expr_2575 := expr_2574
            /// @src 14:4906:4924  "_unsafeBlockSigner"
            let _40 := var__unsafeBlockSigner_2546
            let expr_2578 := _40
            fun__setUnsafeBlockSigner_2765(expr_2578)
            /// @src 14:4954:4961  "_config"
            let _41_mpos := var__config_2549_mpos
            let expr_2582_mpos := _41_mpos
            fun__setResourceConfig_2854(expr_2582_mpos)
            /// @src 14:4980:4989  "_gasLimit"
            let _42 := var__gasLimit_2544
            let expr_2586 := _42
            /// @src 14:4993:5010  "minimumGasLimit()"
            let expr_2588 := fun_minimumGasLimit_2613()
            /// @src 14:4980:5010  "_gasLimit >= minimumGasLimit()"
            let expr_2589 := iszero(lt(cleanup_t_uint64(expr_2586), cleanup_t_uint64(expr_2588)))
            /// @src 14:4972:5046  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
            require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2589)
        }
        /// @ast-id 2594 @src 14:4422:5053  "function initialize(..."
        function fun_initialize_2594(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
        {
            modifier_initializer_2552(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function zero_value_for_split_t_uint64() -> ret
        { ret := 0 }
        function cleanup_from_storage_t_uint32(value) -> cleaned
        {
            cleaned := and(value, 0xffffffff)
        }
        function extract_from_storage_value_offset_0t_uint32(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint32(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_uint32(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_uint32(sload(slot))
        }
        function convert_t_uint32_to_t_uint64(value) -> converted
        {
            converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
        }
        function shift_right_80_unsigned(value) -> newValue
        { newValue := shr(80, value) }
        function extract_from_storage_value_offset_10t_uint32(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint32(shift_right_80_unsigned(slot_value))
        }
        function read_from_storage_split_offset_10_t_uint32(slot) -> value
        {
            value := extract_from_storage_value_offset_10t_uint32(sload(slot))
        }
        function panic_error_0x11()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x11)
            revert(0, 0x24)
        }
        function checked_add_t_uint64(x, y) -> sum
        {
            x := cleanup_t_uint64(x)
            y := cleanup_t_uint64(y)
            if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }
            sum := add(x, y)
        }
        /// @ast-id 2613 @src 14:5509:5670  "function minimumGasLimit() public view returns (uint64) {..."
        function fun_minimumGasLimit_2613() -> var__2598
        {
            /// @src 14:5557:5563  "uint64"
            let zero_t_uint64_43 := zero_value_for_split_t_uint64()
            var__2598 := zero_t_uint64_43
            /// @src 14:5589:5604  "_resourceConfig"
            let _44_slot := 0x69
            let expr_2602_slot := _44_slot
            /// @src 14:5589:5621  "_resourceConfig.maxResourceLimit"
            let _45 := add(expr_2602_slot, 0)
            let _46 := read_from_storage_split_offset_0_t_uint32(_45)
            let expr_2603 := _46
            /// @src 14:5582:5622  "uint64(_resourceConfig.maxResourceLimit)"
            let expr_2604 := convert_t_uint32_to_t_uint64(expr_2603)
            /// @src 14:5632:5647  "_resourceConfig"
            let _47_slot := 0x69
            let expr_2607_slot := _47_slot
            /// @src 14:5632:5662  "_resourceConfig.systemTxMaxGas"
            let _48 := add(expr_2607_slot, 0)
            let _49 := read_from_storage_split_offset_10_t_uint32(_48)
            let expr_2608 := _49
            /// @src 14:5625:5663  "uint64(_resourceConfig.systemTxMaxGas)"
            let expr_2609 := convert_t_uint32_to_t_uint64(expr_2608)
            /// @src 14:5582:5663  "uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
            let expr_2610 := checked_add_t_uint64(expr_2604, expr_2609)
            /// @src 14:5575:5663  "return uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
            var__2598 := expr_2610
            leave
        }
        /// @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
        function constant_UNSAFE_BLOCK_SIGNER_SLOT_2472() -> ret
        {
            /// @src 14:1648:1691  "keccak256(\"systemconfig.unsafeblocksigner\")"
            let expr_2471 := 0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08
            let _50 := expr_2471
            ret := _50
        }
        /// @ast-id 2765 @src 14:8083:8281  "function _setUnsafeBlockSigner(address _unsafeBlockSigner) internal {..."
        function fun__setUnsafeBlockSigner_2765(var__unsafeBlockSigner_2756)
        {
            /// @src 14:8176:8200  "UNSAFE_BLOCK_SIGNER_SLOT"
            let expr_2761 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2472()
            /// @src 14:8161:8200  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
            let var_slot_2760 := expr_2761
            /// @src 14:8210:8275  "assembly {..."
            {
                sstore(var_slot_2760, var__unsafeBlockSigner_2756)
            }
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function read_from_memoryt_uint32(ptr) -> returnValue
        {
            let value := cleanup_t_uint32(mload(ptr))
            returnValue := value
        }
        function read_from_memoryt_uint128(ptr) -> returnValue
        {
            let value := cleanup_t_uint128(mload(ptr))
            returnValue := value
        }
        function convert_t_uint32_to_t_uint128(value) -> converted
        {
            converted := cleanup_t_uint128(identity(cleanup_t_uint32(value)))
        }
        function store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(memPtr)
        {
            mstore(add(memPtr, 0), "SystemConfig: min base fee must ")
            mstore(add(memPtr, 32), "be less than max base")
        }
        function abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
            store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function read_from_memoryt_uint8(ptr) -> returnValue
        {
            let value := cleanup_t_uint8(mload(ptr))
            returnValue := value
        }
        function store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(memPtr)
        {
            mstore(add(memPtr, 0), "SystemConfig: denominator must b")
            mstore(add(memPtr, 32), "e larger than 1")
        }
        function abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
            store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function checked_add_t_uint32(x, y) -> sum
        {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)
            if gt(x, sub(0xffffffff, y)) { panic_error_0x11() }
            sum := add(x, y)
        }
        function cleanup_from_storage_t_uint64(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffff)
        }
        function extract_from_storage_value_offset_0t_uint64(slot_value) -> value
        {
            value := cleanup_from_storage_t_uint64(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_uint64(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_uint64(sload(slot))
        }
        function convert_t_rational_0_by_1_to_t_uint8(value) -> converted
        {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
        }
        function store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(memPtr)
        {
            mstore(add(memPtr, 0), "SystemConfig: elasticity multipl")
            mstore(add(memPtr, 32), "ier cannot be 0")
        }
        function abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
            store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function convert_t_uint8_to_t_uint32(value) -> converted
        {
            converted := cleanup_t_uint32(identity(cleanup_t_uint8(value)))
        }
        function panic_error_0x12()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x12)
            revert(0, 0x24)
        }
        function checked_div_t_uint32(x, y) -> r
        {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)
            if iszero(y) { panic_error_0x12() }
            r := div(x, y)
        }
        function checked_mul_t_uint32(x, y) -> product
        {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)
            if and(iszero(iszero(x)), gt(y, div(0xffffffff, x))) { panic_error_0x11() }
            product := mul(x, y)
        }
        function store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(memPtr)
        {
            mstore(add(memPtr, 0), "SystemConfig: precision loss wit")
            mstore(add(memPtr, 32), "h target resource limit")
        }
        function abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
            store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        function panic_error_0x00()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x00)
            revert(0, 0x24)
        }
        function update_byte_slice_4_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint32_to_t_uint32(value) -> converted
        {
            converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
        }
        function prepare_store_t_uint32(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_uint32_to_t_uint32(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_0(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }
        function shift_left_32(value) -> newValue
        { newValue := shl(32, value) }
        function update_byte_slice_1_shift_4(value, toInsert) -> result
        {
            let mask := 0xff00000000
            toInsert := shift_left_32(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function update_storage_value_offset_4t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_4(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_40(value) -> newValue
        { newValue := shl(40, value) }
        function update_byte_slice_1_shift_5(value, toInsert) -> result
        {
            let mask := 0xff0000000000
            toInsert := shift_left_40(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function update_storage_value_offset_5t_uint8_to_t_uint8(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_5(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }
        function shift_left_48(value) -> newValue
        { newValue := shl(48, value) }
        function update_byte_slice_4_shift_6(value, toInsert) -> result
        {
            let mask := 0xffffffff000000000000
            toInsert := shift_left_48(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function update_storage_value_offset_6t_uint32_to_t_uint32(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_6(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }
        function shift_left_80(value) -> newValue
        { newValue := shl(80, value) }
        function update_byte_slice_4_shift_10(value, toInsert) -> result
        {
            let mask := 0xffffffff00000000000000000000
            toInsert := shift_left_80(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function update_storage_value_offset_10t_uint32_to_t_uint32(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_10(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }
        function shift_left_112(value) -> newValue
        { newValue := shl(112, value) }
        function update_byte_slice_16_shift_14(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffff0000000000000000000000000000
            toInsert := shift_left_112(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_uint128_to_t_uint128(value) -> converted
        {
            converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
        }
        function prepare_store_t_uint128(value) -> ret
        { ret := value }
        function update_storage_value_offset_14t_uint128_to_t_uint128(slot, value_0)
        {
            let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
            sstore(slot, update_byte_slice_16_shift_14(sload(slot), prepare_store_t_uint128(convertedValue_0)))
        }
        function copy_struct_to_storage_from_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value)
        {
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 0)
                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                update_storage_value_offset_0t_uint32_to_t_uint32(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 32)
                let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)
                update_storage_value_offset_4t_uint8_to_t_uint8(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 64)
                let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)
                update_storage_value_offset_5t_uint8_to_t_uint8(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 96)
                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                update_storage_value_offset_6t_uint32_to_t_uint32(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 128)
                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                update_storage_value_offset_10t_uint32_to_t_uint32(memberSlot, memberValue_0)
            }
            {
                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 160)
                let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                update_storage_value_offset_14t_uint128_to_t_uint128(memberSlot, memberValue_0)
            }
        }
        function update_storage_value_offset_0t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value_0)
        {
            copy_struct_to_storage_from_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value_0)
        }
        /// @ast-id 2854 @src 14:9240:10633  "function _setResourceConfig(ResourceMetering.ResourceConfig memory _config) internal {..."
        function fun__setResourceConfig_2854(var__config_2793_mpos)
        {
            /// @src 14:9424:9431  "_config"
            let _51_mpos := var__config_2793_mpos
            let expr_2797_mpos := _51_mpos
            /// @src 14:9424:9446  "_config.minimumBaseFee"
            let _52 := add(expr_2797_mpos, 96)
            let _53 := read_from_memoryt_uint32(_52)
            let expr_2798 := _53
            /// @src 14:9450:9457  "_config"
            let _54_mpos := var__config_2793_mpos
            let expr_2799_mpos := _54_mpos
            /// @src 14:9450:9472  "_config.maximumBaseFee"
            let _55 := add(expr_2799_mpos, 160)
            let _56 := read_from_memoryt_uint128(_55)
            let expr_2800 := _56
            /// @src 14:9424:9472  "_config.minimumBaseFee <= _config.maximumBaseFee"
            let expr_2801 := iszero(gt(convert_t_uint32_to_t_uint128(expr_2798), cleanup_t_uint128(expr_2800)))
            /// @src 14:9403:9551  "require(..."
            require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(expr_2801)
            /// @src 14:9645:9652  "_config"
            let _57_mpos := var__config_2793_mpos
            let expr_2806_mpos := _57_mpos
            /// @src 14:9645:9680  "_config.baseFeeMaxChangeDenominator"
            let _58 := add(expr_2806_mpos, 64)
            let _59 := read_from_memoryt_uint8(_58)
            let expr_2807 := _59
            /// @src 14:9683:9684  "1"
            let expr_2808 := 0x01
            /// @src 14:9645:9684  "_config.baseFeeMaxChangeDenominator > 1"
            let expr_2809 := gt(cleanup_t_uint8(expr_2807), convert_t_rational_1_by_1_to_t_uint8(expr_2808))
            /// @src 14:9624:9757  "require(..."
            require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(expr_2809)
            /// @src 14:9966:9973  "_config"
            let _60_mpos := var__config_2793_mpos
            let expr_2814_mpos := _60_mpos
            /// @src 14:9966:9990  "_config.maxResourceLimit"
            let _61 := add(expr_2814_mpos, 0)
            let _62 := read_from_memoryt_uint32(_61)
            let expr_2815 := _62
            /// @src 14:9993:10000  "_config"
            let _63_mpos := var__config_2793_mpos
            let expr_2816_mpos := _63_mpos
            /// @src 14:9993:10015  "_config.systemTxMaxGas"
            let _64 := add(expr_2816_mpos, 128)
            let _65 := read_from_memoryt_uint32(_64)
            let expr_2817 := _65
            /// @src 14:9966:10015  "_config.maxResourceLimit + _config.systemTxMaxGas"
            let expr_2818 := checked_add_t_uint32(expr_2815, expr_2817)
            /// @src 14:10019:10027  "gasLimit"
            let _66 := read_from_storage_split_offset_0_t_uint64(0x68)
            let expr_2819 := _66
            /// @src 14:9966:10027  "_config.maxResourceLimit + _config.systemTxMaxGas <= gasLimit"
            let expr_2820 := iszero(gt(convert_t_uint32_to_t_uint64(expr_2818), cleanup_t_uint64(expr_2819)))
            /// @src 14:9945:10084  "require(..."
            require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2820)
            /// @src 14:10172:10179  "_config"
            let _67_mpos := var__config_2793_mpos
            let expr_2825_mpos := _67_mpos
            /// @src 14:10172:10200  "_config.elasticityMultiplier"
            let _68 := add(expr_2825_mpos, 32)
            let _69 := read_from_memoryt_uint8(_68)
            let expr_2826 := _69
            /// @src 14:10203:10204  "0"
            let expr_2827 := 0x00
            /// @src 14:10172:10204  "_config.elasticityMultiplier > 0"
            let expr_2828 := gt(cleanup_t_uint8(expr_2826), convert_t_rational_0_by_1_to_t_uint8(expr_2827))
            /// @src 14:10151:10277  "require(..."
            require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(expr_2828)
            /// @src 14:10377:10384  "_config"
            let _70_mpos := var__config_2793_mpos
            let expr_2833_mpos := _70_mpos
            /// @src 14:10377:10401  "_config.maxResourceLimit"
            let _71 := add(expr_2833_mpos, 0)
            let _72 := read_from_memoryt_uint32(_71)
            let expr_2834 := _72
            /// @src 14:10404:10411  "_config"
            let _73_mpos := var__config_2793_mpos
            let expr_2835_mpos := _73_mpos
            /// @src 14:10404:10432  "_config.elasticityMultiplier"
            let _74 := add(expr_2835_mpos, 32)
            let _75 := read_from_memoryt_uint8(_74)
            let expr_2836 := _75
            /// @src 14:10377:10432  "_config.maxResourceLimit / _config.elasticityMultiplier"
            let expr_2837 := checked_div_t_uint32(expr_2834, convert_t_uint8_to_t_uint32(expr_2836))
            /// @src 14:10376:10433  "(_config.maxResourceLimit / _config.elasticityMultiplier)"
            let expr_2838 := expr_2837
            /// @src 14:10452:10459  "_config"
            let _76_mpos := var__config_2793_mpos
            let expr_2839_mpos := _76_mpos
            /// @src 14:10452:10480  "_config.elasticityMultiplier"
            let _77 := add(expr_2839_mpos, 32)
            let _78 := read_from_memoryt_uint8(_77)
            let expr_2840 := _78
            /// @src 14:10376:10480  "(_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2841 := checked_mul_t_uint32(expr_2838, convert_t_uint8_to_t_uint32(expr_2840))
            /// @src 14:10375:10481  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2842 := expr_2841
            /// @src 14:10485:10492  "_config"
            let _79_mpos := var__config_2793_mpos
            let expr_2843_mpos := _79_mpos
            /// @src 14:10485:10509  "_config.maxResourceLimit"
            let _80 := add(expr_2843_mpos, 0)
            let _81 := read_from_memoryt_uint32(_80)
            let expr_2844 := _81
            /// @src 14:10375:10509  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2845 := eq(cleanup_t_uint32(expr_2842), cleanup_t_uint32(expr_2844))
            /// @src 14:10354:10590  "require(..."
            require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(expr_2845)
            /// @src 14:10619:10626  "_config"
            let _82_mpos := var__config_2793_mpos
            let expr_2850_mpos := _82_mpos
            /// @src 14:10601:10626  "_resourceConfig = _config"
            update_storage_value_offset_0t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(0x69, expr_2850_mpos)
            let _83_slot := 0x69
            let expr_2851_slot := _83_slot
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
        {
            mstore(add(memPtr, 0), "Initializable: contract is not i")
            mstore(add(memPtr, 32), "nitializing")
        }
        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_4991()
        {
            /// @src 1:4910:4923  "_initializing"
            let _84 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3485 := _84
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
            /// @src 1:4981:4982  "_"
            fun___Ownable_init_4997_inner()
        }
        /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
        function fun___Ownable_init_4997_inner()
        {
            fun___Ownable_init_unchained_5008()
        }
        /// @ast-id 4997
        function fun___Ownable_init_4997()
        {
            modifier_onlyInitializing_4991()
        }
        /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_5000()
        {
            /// @src 1:4910:4923  "_initializing"
            let _85 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3485 := _85
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
            /// @src 1:4981:4982  "_"
            fun___Ownable_init_unchained_5008_inner()
        }
        /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
        function fun___Ownable_init_unchained_5008_inner()
        {
            /// @src 0:1195:1207  "_msgSender()"
            let expr_5004 := fun__msgSender_7134()
            fun__transferOwnership_5096(expr_5004)
        }
        /// @ast-id 5008 @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
        function fun___Ownable_init_unchained_5008()
        {
            modifier_onlyInitializing_5000()
        }
        /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
        function modifier_onlyOwner_5059(var_newOwner_5056)
        {
            fun__checkOwner_5039()
            /// @src 0:1357:1358  "_"
            fun_transferOwnership_5076_inner(var_newOwner_5056)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
        }
        function convert_t_rational_0_by_1_to_t_address(value) -> converted
        {
            converted := convert_t_rational_0_by_1_to_t_uint160(value)
        }
        function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr)
        {
            mstore(add(memPtr, 0), "Ownable: new owner is the zero a")
            mstore(add(memPtr, 32), "ddress")
        }
        function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
            store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)
            end := add(pos, 64)
        }
        function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
        function fun_transferOwnership_5076_inner(var_newOwner_5056)
        {
            /// @src 0:2409:2417  "newOwner"
            let _86 := var_newOwner_5056
            let expr_5062 := _86
            /// @src 0:2429:2430  "0"
            let expr_5065 := 0x00
            /// @src 0:2421:2431  "address(0)"
            let expr_5066 := convert_t_rational_0_by_1_to_t_address(expr_5065)
            /// @src 0:2409:2431  "newOwner != address(0)"
            let expr_5067 := iszero(eq(cleanup_t_address(expr_5062), cleanup_t_address(expr_5066)))
            /// @src 0:2401:2474  "require(newOwner != address(0), \"Ownable: new owner is the zero address\")"
            require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(expr_5067)
            /// @src 0:2503:2511  "newOwner"
            let _87 := var_newOwner_5056
            let expr_5072 := _87
            fun__transferOwnership_5096(expr_5072)
        }
        /// @ast-id 5076 @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
        function fun_transferOwnership_5076(var_newOwner_5056)
        {
            modifier_onlyOwner_5059(var_newOwner_5056)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr)
        {
            mstore(add(memPtr, 0), "Ownable: caller is not the owner")
        }
        function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end
        {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)
            store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)
            end := add(pos, 32)
        }
        function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(headStart) -> tail
        {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(tail)
        }
        function require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(condition)
        {
            if iszero(condition)
            {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                revert(memPtr, sub(end, memPtr))
            }
        }
        /// @ast-id 5039 @src 0:1599:1729  "function _checkOwner() internal view virtual {..."
        function fun__checkOwner_5039()
        {
            /// @src 0:1662:1669  "owner()"
            let expr_5031 := fun_owner_5025()
            /// @src 0:1673:1685  "_msgSender()"
            let expr_5033 := fun__msgSender_7134()
            /// @src 0:1662:1685  "owner() == _msgSender()"
            let expr_5034 := eq(cleanup_t_address(expr_5031), cleanup_t_address(expr_5033))
            /// @src 0:1654:1722  "require(owner() == _msgSender(), \"Ownable: caller is not the owner\")"
            require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(expr_5034)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function zero_value_for_split_t_address() -> ret
        { ret := 0 }
        function cleanup_from_storage_t_address(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function extract_from_storage_value_offset_0t_address(slot_value) -> value
        {
            value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
        }
        function read_from_storage_split_offset_0_t_address(slot) -> value
        {
            value := extract_from_storage_value_offset_0t_address(sload(slot))
        }
        /// @ast-id 5025 @src 0:1441:1526  "function owner() public view virtual returns (address) {..."
        function fun_owner_5025() -> var__5020
        {
            /// @src 0:1487:1494  "address"
            let zero_t_address_88 := zero_value_for_split_t_address()
            var__5020 := zero_t_address_88
            /// @src 0:1513:1519  "_owner"
            let _89 := read_from_storage_split_offset_0_t_address(0x33)
            let expr_5022 := _89
            /// @src 0:1506:1519  "return _owner"
            var__5020 := expr_5022
            leave
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function update_byte_slice_20_shift_0(value, toInsert) -> result
        {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }
        function convert_t_address_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function prepare_store_t_address(value) -> ret
        { ret := value }
        function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
        {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }
        function abi_encode_tuple__to__fromStack(headStart) -> tail
        { tail := add(headStart, 0) }
        /// @ast-id 5096 @src 0:2673:2860  "function _transferOwnership(address newOwner) internal virtual {..."
        function fun__transferOwnership_5096(var_newOwner_5079)
        {
            /// @src 0:2765:2771  "_owner"
            let _90 := read_from_storage_split_offset_0_t_address(0x33)
            let expr_5084 := _90
            /// @src 0:2746:2771  "address oldOwner = _owner"
            let var_oldOwner_5083 := expr_5084
            /// @src 0:2790:2798  "newOwner"
            let _91 := var_newOwner_5079
            let expr_5087 := _91
            /// @src 0:2781:2798  "_owner = newOwner"
            update_storage_value_offset_0t_address_to_t_address(0x33, expr_5087)
            let expr_5088 := expr_5087
            /// @src 0:2834:2842  "oldOwner"
            let _92 := var_oldOwner_5083
            let expr_5091 := _92
            /// @src 0:2844:2852  "newOwner"
            let _93 := var_newOwner_5079
            let expr_5092 := _93
            /// @src 0:2813:2853  "OwnershipTransferred(oldOwner, newOwner)"
            let _94 := 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0
            let _95 := convert_t_address_to_t_address(expr_5091)
            let _96 := convert_t_address_to_t_address(expr_5092)
            {
                let _97 := allocate_unbounded()
                let _98 := abi_encode_tuple__to__fromStack(_97)
                log3(_97, sub(_98, _97), _94, _95, _96)
            }
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        function zero_value_for_split_t_bool() -> ret
        { ret := 0 }
        /// @ast-id 5691 @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_5691(var_account_5679) -> var__5682
        {
            /// @src 2:1246:1250  "bool"
            let zero_t_bool_99 := zero_value_for_split_t_bool()
            var__5682 := zero_t_bool_99
            /// @src 2:1476:1483  "account"
            let _100 := var_account_5679
            let expr_5684 := _100
            /// @src 2:1476:1495  "account.code.length"
            let expr_5686 := extcodesize(expr_5684)
            /// @src 2:1498:1499  "0"
            let expr_5687 := 0x00
            /// @src 2:1476:1499  "account.code.length > 0"
            let expr_5688 := gt(cleanup_t_uint256(expr_5686), convert_t_rational_0_by_1_to_t_uint256(expr_5687))
            /// @src 2:1469:1499  "return account.code.length > 0"
            var__5682 := expr_5688
            leave
        }
        /// @ast-id 7134 @src 3:850:946  "function _msgSender() internal view virtual returns (address) {..."
        function fun__msgSender_7134() -> var__7128
        {
            /// @src 3:903:910  "address"
            let zero_t_address_101 := zero_value_for_split_t_address()
            var__7128 := zero_t_address_101
            /// @src 3:929:939  "msg.sender"
            let expr_7131 := caller()
            /// @src 3:922:939  "return msg.sender"
            var__7128 := expr_7131
            leave
        }
    }
    /// @use-src 0:"./node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol", 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 3:"./node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 14:"contracts/L1/SystemConfig.sol", 29:"contracts/universal/Semver.sol"
    object "SystemConfig_2855_deployed" {
        code {
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x0c18c162 { external_fun_overhead_2475() }
                case 0x18d13918 {
                    external_fun_setUnsafeBlockSigner_2657()
                }
                case 0x1fd19ee1 {
                    external_fun_unsafeBlockSigner_2630()
                }
                case 0x4add321d {
                    external_fun_minimumGasLimit_2613()
                }
                case 0x4f16540b {
                    external_fun_UNSAFE_BLOCK_SIGNER_SLOT_2472()
                }
                case 0x54fd4d50 { external_fun_version_1482() }
                case 0x715018a6 {
                    external_fun_renounceOwnership_5053()
                }
                case 0x8da5cb5b { external_fun_owner_5025() }
                case 0x935f029e {
                    external_fun_setGasConfig_2718()
                }
                case 0xb40a817c {
                    external_fun_setGasLimit_2753()
                }
                case 0xc71973f6 {
                    external_fun_setResourceConfig_2789()
                }
                case 0xc9b26f61 {
                    external_fun_setBatcherHash_2684()
                }
                case 0xcc731b02 {
                    external_fun_resourceConfig_2775()
                }
                case 0xe81b2c6d {
                    external_fun_batcherHash_2481()
                }
                case 0xf2fde38b {
                    external_fun_transferOwnership_5076()
                }
                case 0xf45e65d8 { external_fun_scalar_2478() }
                case 0xf68016b7 { external_fun_gasLimit_2484() }
                case 0xf975e925 {
                    external_fun_initialize_2594()
                }
                case 0xffa1ad74 { external_fun_VERSION_2466() }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function shift_right_unsigned_dynamic(bits, value) -> newValue
            { newValue := shr(bits, value) }
            function cleanup_from_storage_t_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)
            }
            /// @ast-id 2475 @src 14:1792:1815  "uint256 public overhead"
            function getter_fun_overhead_2475() -> ret
            {
                let slot := 101
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint256(value))
            }
            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
            }
            function external_fun_overhead_2475()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_overhead_2475()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
            { revert(0, 0) }
            function cleanup_t_uint160(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_t_address(value) -> cleaned
            {
                cleaned := cleanup_t_uint160(value)
            }
            function validator_revert_t_address(value)
            {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }
            function abi_decode_t_address(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }
            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__to__fromStack(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_setUnsafeBlockSigner_2657()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_setUnsafeBlockSigner_2657(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_address_to_t_address_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_address(value))
            }
            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_address_to_t_address_fromStack(value0, add(headStart, 0))
            }
            function external_fun_unsafeBlockSigner_2630()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_unsafeBlockSigner_2630()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_uint64(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_uint64(value))
            }
            function abi_encode_tuple_t_uint64__to_t_uint64__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_uint64_to_t_uint64_fromStack(value0, add(headStart, 0))
            }
            function external_fun_minimumGasLimit_2613()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_minimumGasLimit_2613()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            /// @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
            function constant_UNSAFE_BLOCK_SIGNER_SLOT_2472() -> ret
            {
                /// @src 14:1648:1691  "keccak256(\"systemconfig.unsafeblocksigner\")"
                let expr_2471 := 0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08
                let _1 := expr_2471
                ret := _1
            }
            /// @ast-id 2472 @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
            function getter_fun_UNSAFE_BLOCK_SIGNER_SLOT_2472() -> ret_0
            {
                ret_0 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2472()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function cleanup_t_bytes32(value) -> cleaned
            { cleaned := value }
            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos)
            {
                mstore(pos, cleanup_t_bytes32(value))
            }
            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0, add(headStart, 0))
            }
            function external_fun_UNSAFE_BLOCK_SIGNER_SLOT_2472()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_UNSAFE_BLOCK_SIGNER_SLOT_2472()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length) { mstore(add(dst, length), 0) }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_version_1482()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_version_1482()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_renounceOwnership_5053()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                fun_renounceOwnership_5053()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_owner_5025()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_owner_5025()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_uint256(value)
            {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint256(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }
            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1
            {
                if slt(sub(dataEnd, headStart), 64)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_setGasConfig_2718()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1 := abi_decode_tuple_t_uint256t_uint256(4, calldatasize())
                fun_setGasConfig_2718(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_uint64(value)
            {
                if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint64(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint64(value)
            }
            function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_setGasLimit_2753()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_uint64(4, calldatasize())
                fun_setGasLimit_2753(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
            { revert(0, 0) }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421()
            { revert(0, 0) }
            function cleanup_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function validator_revert_t_uint32(value)
            {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint32(value)
            }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function validator_revert_t_uint8(value)
            {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint8(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint8(value)
            }
            function cleanup_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function validator_revert_t_uint128(value)
            {
                if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
            }
            function abi_decode_t_uint128(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_uint128(value)
            }
            function abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr(headStart, end) -> value
            {
                if slt(sub(end, headStart), 0xc0)
                {
                    revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f()
                }
                value := allocate_memory(0xc0)
                {
                    let offset := 0
                    mstore(add(value, 0x00), abi_decode_t_uint32(add(headStart, offset), end))
                }
                {
                    let offset := 32
                    mstore(add(value, 0x20), abi_decode_t_uint8(add(headStart, offset), end))
                }
                {
                    let offset := 64
                    mstore(add(value, 0x40), abi_decode_t_uint8(add(headStart, offset), end))
                }
                {
                    let offset := 96
                    mstore(add(value, 0x60), abi_decode_t_uint32(add(headStart, offset), end))
                }
                {
                    let offset := 128
                    mstore(add(value, 0x80), abi_decode_t_uint32(add(headStart, offset), end))
                }
                {
                    let offset := 160
                    mstore(add(value, 0xa0), abi_decode_t_uint128(add(headStart, offset), end))
                }
            }
            function abi_decode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 192)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_setResourceConfig_2789()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr(4, calldatasize())
                fun_setResourceConfig_2789(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function validator_revert_t_bytes32(value)
            {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }
            function abi_decode_t_bytes32(offset, end) -> value
            {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }
            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0
            {
                if slt(sub(dataEnd, headStart), 32)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_setBatcherHash_2684()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_bytes32(4, calldatasize())
                fun_setBatcherHash_2684(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_encode_t_uint32_to_t_uint32(value, pos)
            {
                mstore(pos, cleanup_t_uint32(value))
            }
            function abi_encode_t_uint8_to_t_uint8(value, pos)
            {
                mstore(pos, cleanup_t_uint8(value))
            }
            function abi_encode_t_uint128_to_t_uint128(value, pos)
            {
                mstore(pos, cleanup_t_uint128(value))
            }
            function abi_encode_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_memory_ptr_fromStack(value, pos)
            {
                let tail := add(pos, 0xc0)
                {
                    let memberValue0 := mload(add(value, 0x00))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x00))
                }
                {
                    let memberValue0 := mload(add(value, 0x20))
                    abi_encode_t_uint8_to_t_uint8(memberValue0, add(pos, 0x20))
                }
                {
                    let memberValue0 := mload(add(value, 0x40))
                    abi_encode_t_uint8_to_t_uint8(memberValue0, add(pos, 0x40))
                }
                {
                    let memberValue0 := mload(add(value, 0x60))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x60))
                }
                {
                    let memberValue0 := mload(add(value, 0x80))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x80))
                }
                {
                    let memberValue0 := mload(add(value, 0xa0))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0xa0))
                }
            }
            function abi_encode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr__to_t_struct$_ResourceConfig_$2128_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 192)
                abi_encode_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_memory_ptr_fromStack(value0, add(headStart, 0))
            }
            function external_fun_resourceConfig_2775()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_resourceConfig_2775()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_ResourceConfig_$2128_memory_ptr__to_t_struct$_ResourceConfig_$2128_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_bytes32(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)
            }
            /// @ast-id 2481 @src 14:2127:2153  "bytes32 public batcherHash"
            function getter_fun_batcherHash_2481() -> ret
            {
                let slot := 103
                let offset := 0
                ret := read_from_storage_split_dynamic_t_bytes32(slot, offset)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function external_fun_batcherHash_2481()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_batcherHash_2481()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function external_fun_transferOwnership_5076()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0 := abi_decode_tuple_t_address(4, calldatasize())
                fun_transferOwnership_5076(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            /// @ast-id 2478 @src 14:1918:1939  "uint256 public scalar"
            function getter_fun_scalar_2478() -> ret
            {
                let slot := 102
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function external_fun_scalar_2478()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_scalar_2478()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_from_storage_t_uint64(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function extract_from_storage_value_dynamict_uint64(slot_value, offset) -> value
            {
                value := cleanup_from_storage_t_uint64(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }
            function read_from_storage_split_dynamic_t_uint64(slot, offset) -> value
            {
                value := extract_from_storage_value_dynamict_uint64(sload(slot), offset)
            }
            /// @ast-id 2484 @src 14:2211:2233  "uint64 public gasLimit"
            function getter_fun_gasLimit_2484() -> ret
            {
                let slot := 104
                let offset := 0
                ret := read_from_storage_split_dynamic_t_uint64(slot, offset)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function external_fun_gasLimit_2484()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_gasLimit_2484()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2128_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6
            {
                if slt(sub(dataEnd, headStart), 384)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
                {
                    let offset := 0
                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value4 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 160
                    value5 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 192
                    value6 := abi_decode_t_struct$_ResourceConfig_$2128_memory_ptr(add(headStart, offset), dataEnd)
                }
            }
            function external_fun_initialize_2594()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2128_memory_ptr(4, calldatasize())
                fun_initialize_2594(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            /// @src 14:1252:1287  "uint256 public constant VERSION = 0"
            function constant_VERSION_2466() -> ret
            {
                /// @src 14:1286:1287  "0"
                let expr_2465 := 0x00
                let _2 := convert_t_rational_0_by_1_to_t_uint256(expr_2465)
                ret := _2
            }
            /// @ast-id 2466 @src 14:1252:1287  "uint256 public constant VERSION = 0"
            function getter_fun_VERSION_2466() -> ret_0
            {
                ret_0 := constant_VERSION_2466()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function external_fun_VERSION_2466()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := getter_fun_VERSION_2466()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_string_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr)
            { mstore(add(memPtr, 0), ".") }
            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }
            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2) -> end
            {
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2, pos)
                end := pos
            }
            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1482 @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1482() -> var__1458_mpos
            {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_3_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1458_mpos := zero_t_string_memory_ptr_3_mpos
                /// @src 29:1203:1210  "Strings"
                let expr_1464_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _4 := loadimmutable("1425")
                let expr_1466 := _4
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1467_mpos := fun_toString_3909(expr_1466)
                /// @src 29:1281:1288  "Strings"
                let expr_1469_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _5 := loadimmutable("1428")
                let expr_1471 := _5
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1472_mpos := fun_toString_3909(expr_1471)
                /// @src 29:1359:1366  "Strings"
                let expr_1474_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _6 := loadimmutable("1431")
                let expr_1476 := _6
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1477_mpos := fun_toString_3909(expr_1476)
                /// @src 29:1165:1408  "abi.encodePacked(..."
                let expr_1478_mpos := allocate_unbounded()
                let _7 := add(expr_1478_mpos, 0x20)
                let _8 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_7, expr_1467_mpos, expr_1472_mpos, expr_1477_mpos)
                mstore(expr_1478_mpos, sub(_8, add(expr_1478_mpos, 0x20)))
                finalize_allocation(expr_1478_mpos, sub(_8, expr_1478_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1479_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1478_mpos)
                /// @src 29:1122:1422  "return..."
                var__1458_mpos := expr_1479_mpos
                leave
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function shift_right_8_unsigned(value) -> newValue
            { newValue := shr(8, value) }
            function cleanup_from_storage_t_bool(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_1t_bool(slot_value) -> value
            {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }
            function read_from_storage_split_offset_1_t_bool(slot) -> value
            {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))
            }
            function cleanup_t_bool(value) -> cleaned
            {
                cleaned := iszero(iszero(value))
            }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function cleanup_from_storage_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))
            }
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }
            function convert_t_uint160_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }
            function convert_t_uint160_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_uint160(value)
            }
            function convert_t_contract$_Initializable_$3528_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is alrea")
                mstore(add(memPtr, 32), "dy initialized")
            }
            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function shift_left_0(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_1_shift_0(value, toInsert) -> result
            {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint8_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }
            function prepare_store_t_uint8(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_8(value) -> newValue
            { newValue := shl(8, value) }
            function update_byte_slice_1_shift_1(value, toInsert) -> result
            {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_bool_to_t_bool(value) -> converted
            {
                converted := cleanup_t_bool(value)
            }
            function prepare_store_t_bool(value) -> ret
            { ret := value }
            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0)
            {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }
            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos)
            {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }
            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0, add(headStart, 0))
            }
            /// @ast-id 3448 @src 1:3078:3584  "modifier initializer() {..."
            function modifier_initializer_2552(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
            {
                /// @src 1:3134:3147  "_initializing"
                let _9 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3397 := _9
                /// @src 1:3133:3147  "!_initializing"
                let expr_3398 := cleanup_t_bool(iszero(expr_3397))
                /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_3396 := expr_3398
                /// @src 1:3179:3193  "isTopLevelCall"
                let _10 := var_isTopLevelCall_3396
                let expr_3401 := _10
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                let expr_3405 := expr_3401
                if expr_3405
                {
                    /// @src 1:3197:3209  "_initialized"
                    let _11 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_3402 := _11
                    /// @src 1:3212:3213  "1"
                    let expr_3403 := 0x01
                    /// @src 1:3197:3213  "_initialized < 1"
                    let expr_3404 := lt(cleanup_t_uint8(expr_3402), convert_t_rational_1_by_1_to_t_uint8(expr_3403))
                    /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                    expr_3405 := expr_3404
                }
                /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
                let expr_3406 := expr_3405
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3420 := expr_3406
                if iszero(expr_3420)
                {
                    /// @src 1:3220:3238  "AddressUpgradeable"
                    let expr_3407_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                    /// @src 1:3258:3262  "this"
                    let expr_3411_address := address()
                    /// @src 1:3250:3263  "address(this)"
                    let expr_3412 := convert_t_contract$_Initializable_$3528_to_t_address(expr_3411_address)
                    /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                    let expr_3413 := fun_isContract_5691(expr_3412)
                    /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                    let expr_3414 := cleanup_t_bool(iszero(expr_3413))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    let expr_3418 := expr_3414
                    if expr_3418
                    {
                        /// @src 1:3268:3280  "_initialized"
                        let _12 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_3415 := _12
                        /// @src 1:3284:3285  "1"
                        let expr_3416 := 0x01
                        /// @src 1:3268:3285  "_initialized == 1"
                        let expr_3417 := eq(cleanup_t_uint8(expr_3415), convert_t_rational_1_by_1_to_t_uint8(expr_3416))
                        /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                        expr_3418 := expr_3417
                    }
                    /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    let expr_3419 := expr_3418
                    /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    expr_3420 := expr_3419
                }
                /// @src 1:3157:3358  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3420)
                /// @src 1:3383:3384  "1"
                let expr_3425 := 0x01
                /// @src 1:3368:3384  "_initialized = 1"
                let _13 := convert_t_rational_1_by_1_to_t_uint8(expr_3425)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _13)
                let expr_3426 := _13
                /// @src 1:3398:3412  "isTopLevelCall"
                let _14 := var_isTopLevelCall_3396
                let expr_3428 := _14
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                if expr_3428
                {
                    /// @src 1:3444:3448  "true"
                    let expr_3430 := 0x01
                    /// @src 1:3428:3448  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3430)
                    let expr_3431 := expr_3430
                }
                /// @src 1:3468:3469  "_"
                fun_initialize_2594_inner(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
                /// @src 1:3483:3497  "isTopLevelCall"
                let _15 := var_isTopLevelCall_3396
                let expr_3436 := _15
                /// @src 1:3479:3578  "if (isTopLevelCall) {..."
                if expr_3436
                {
                    /// @src 1:3529:3534  "false"
                    let expr_3438 := 0x00
                    /// @src 1:3513:3534  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3438)
                    let expr_3439 := expr_3438
                    /// @src 1:3565:3566  "1"
                    let expr_3442 := 0x01
                    /// @src 1:3553:3567  "Initialized(1)"
                    let _16 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _17 := allocate_unbounded()
                        let _18 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_17, expr_3442)
                        log1(_17, sub(_18, _17), _16)
                    }
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function update_byte_slice_32_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint256_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }
            function prepare_store_t_uint256(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }
            function convert_t_bytes32_to_t_bytes32(value) -> converted
            {
                converted := cleanup_t_bytes32(value)
            }
            function prepare_store_t_bytes32(value) -> ret
            {
                ret := shift_right_0_unsigned(value)
            }
            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0)
            {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }
            function update_byte_slice_8_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint64_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
            }
            function prepare_store_t_uint64(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint64_to_t_uint64(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_0(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }
            function store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(memPtr)
            {
                mstore(add(memPtr, 0), "SystemConfig: gas limit too low")
            }
            function abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)
                store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @src 14:4422:5053  "function initialize(..."
            function fun_initialize_2594_inner(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
            {
                fun___Ownable_init_4997()
                /// @src 14:4745:4751  "_owner"
                let _19 := var__owner_2536
                let expr_2558 := _19
                fun_transferOwnership_5076(expr_2558)
                /// @src 14:4773:4782  "_overhead"
                let _20 := var__overhead_2538
                let expr_2562 := _20
                /// @src 14:4762:4782  "overhead = _overhead"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2562)
                let expr_2563 := expr_2562
                /// @src 14:4801:4808  "_scalar"
                let _21 := var__scalar_2540
                let expr_2566 := _21
                /// @src 14:4792:4808  "scalar = _scalar"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2566)
                let expr_2567 := expr_2566
                /// @src 14:4832:4844  "_batcherHash"
                let _22 := var__batcherHash_2542
                let expr_2570 := _22
                /// @src 14:4818:4844  "batcherHash = _batcherHash"
                update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2570)
                let expr_2571 := expr_2570
                /// @src 14:4865:4874  "_gasLimit"
                let _23 := var__gasLimit_2544
                let expr_2574 := _23
                /// @src 14:4854:4874  "gasLimit = _gasLimit"
                update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2574)
                let expr_2575 := expr_2574
                /// @src 14:4906:4924  "_unsafeBlockSigner"
                let _24 := var__unsafeBlockSigner_2546
                let expr_2578 := _24
                fun__setUnsafeBlockSigner_2765(expr_2578)
                /// @src 14:4954:4961  "_config"
                let _25_mpos := var__config_2549_mpos
                let expr_2582_mpos := _25_mpos
                fun__setResourceConfig_2854(expr_2582_mpos)
                /// @src 14:4980:4989  "_gasLimit"
                let _26 := var__gasLimit_2544
                let expr_2586 := _26
                /// @src 14:4993:5010  "minimumGasLimit()"
                let expr_2588 := fun_minimumGasLimit_2613()
                /// @src 14:4980:5010  "_gasLimit >= minimumGasLimit()"
                let expr_2589 := iszero(lt(cleanup_t_uint64(expr_2586), cleanup_t_uint64(expr_2588)))
                /// @src 14:4972:5046  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2589)
            }
            /// @ast-id 2594 @src 14:4422:5053  "function initialize(..."
            function fun_initialize_2594(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
            {
                modifier_initializer_2552(var__owner_2536, var__overhead_2538, var__scalar_2540, var__batcherHash_2542, var__gasLimit_2544, var__unsafeBlockSigner_2546, var__config_2549_mpos)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function zero_value_for_split_t_uint64() -> ret
            { ret := 0 }
            function cleanup_from_storage_t_uint32(value) -> cleaned
            {
                cleaned := and(value, 0xffffffff)
            }
            function extract_from_storage_value_offset_0t_uint32(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint32(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint32(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint32(sload(slot))
            }
            function convert_t_uint32_to_t_uint64(value) -> converted
            {
                converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
            }
            function shift_right_80_unsigned(value) -> newValue
            { newValue := shr(80, value) }
            function extract_from_storage_value_offset_10t_uint32(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint32(shift_right_80_unsigned(slot_value))
            }
            function read_from_storage_split_offset_10_t_uint32(slot) -> value
            {
                value := extract_from_storage_value_offset_10t_uint32(sload(slot))
            }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_add_t_uint64(x, y) -> sum
            {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            /// @ast-id 2613 @src 14:5509:5670  "function minimumGasLimit() public view returns (uint64) {..."
            function fun_minimumGasLimit_2613() -> var__2598
            {
                /// @src 14:5557:5563  "uint64"
                let zero_t_uint64_27 := zero_value_for_split_t_uint64()
                var__2598 := zero_t_uint64_27
                /// @src 14:5589:5604  "_resourceConfig"
                let _28_slot := 0x69
                let expr_2602_slot := _28_slot
                /// @src 14:5589:5621  "_resourceConfig.maxResourceLimit"
                let _29 := add(expr_2602_slot, 0)
                let _30 := read_from_storage_split_offset_0_t_uint32(_29)
                let expr_2603 := _30
                /// @src 14:5582:5622  "uint64(_resourceConfig.maxResourceLimit)"
                let expr_2604 := convert_t_uint32_to_t_uint64(expr_2603)
                /// @src 14:5632:5647  "_resourceConfig"
                let _31_slot := 0x69
                let expr_2607_slot := _31_slot
                /// @src 14:5632:5662  "_resourceConfig.systemTxMaxGas"
                let _32 := add(expr_2607_slot, 0)
                let _33 := read_from_storage_split_offset_10_t_uint32(_32)
                let expr_2608 := _33
                /// @src 14:5625:5663  "uint64(_resourceConfig.systemTxMaxGas)"
                let expr_2609 := convert_t_uint32_to_t_uint64(expr_2608)
                /// @src 14:5582:5663  "uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
                let expr_2610 := checked_add_t_uint64(expr_2604, expr_2609)
                /// @src 14:5575:5663  "return uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
                var__2598 := expr_2610
                leave
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function zero_value_for_split_t_address() -> ret
            { ret := 0 }
            /// @ast-id 2630 @src 14:6008:6229  "function unsafeBlockSigner() external view returns (address) {..."
            function fun_unsafeBlockSigner_2630() -> var__2617
            {
                /// @src 14:6060:6067  "address"
                let zero_t_address_34 := zero_value_for_split_t_address()
                var__2617 := zero_t_address_34
                /// @src 14:6079:6091  "address addr"
                let var_addr_2620
                let zero_t_address_35 := zero_value_for_split_t_address()
                var_addr_2620 := zero_t_address_35
                /// @src 14:6116:6140  "UNSAFE_BLOCK_SIGNER_SLOT"
                let expr_2624 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2472()
                /// @src 14:6101:6140  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
                let var_slot_2623 := expr_2624
                /// @src 14:6150:6202  "assembly {..."
                {
                    var_addr_2620 := sload(var_slot_2623)
                }
                /// @src 14:6218:6222  "addr"
                let _36 := var_addr_2620
                let expr_2627 := _36
                /// @src 14:6211:6222  "return addr"
                var__2617 := expr_2627
                leave
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2636(var__unsafeBlockSigner_2633)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_setUnsafeBlockSigner_2657_inner(var__unsafeBlockSigner_2633)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function panic_error_0x21()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x21)
                revert(0, 0x24)
            }
            function validator_assert_t_enum$_UpdateType_$2462(value)
            {
                if iszero(lt(value, 4)) { panic_error_0x21() }
            }
            function cleanup_t_enum$_UpdateType_$2462(value) -> cleaned
            {
                cleaned := value
                validator_assert_t_enum$_UpdateType_$2462(value)
            }
            function convert_t_enum$_UpdateType_$2462_to_t_enum$_UpdateType_$2462(value) -> converted
            {
                converted := cleanup_t_enum$_UpdateType_$2462(value)
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0, tail)
            }
            /// @src 14:6380:6650  "function setUnsafeBlockSigner(address _unsafeBlockSigner) external onlyOwner {..."
            function fun_setUnsafeBlockSigner_2657_inner(var__unsafeBlockSigner_2633)
            {
                /// @src 14:6489:6507  "_unsafeBlockSigner"
                let _37 := var__unsafeBlockSigner_2633
                let expr_2639 := _37
                fun__setUnsafeBlockSigner_2765(expr_2639)
                /// @src 14:6550:6568  "_unsafeBlockSigner"
                let _38 := var__unsafeBlockSigner_2633
                let expr_2646 := _38
                /// @src 14:6539:6569  "abi.encode(_unsafeBlockSigner)"
                let expr_2647_mpos := allocate_unbounded()
                let _39 := add(expr_2647_mpos, 0x20)
                let _40 := abi_encode_tuple_t_address__to_t_address__fromStack(_39, expr_2646)
                mstore(expr_2647_mpos, sub(_40, add(expr_2647_mpos, 0x20)))
                finalize_allocation(expr_2647_mpos, sub(_40, expr_2647_mpos))
                /// @src 14:6519:6569  "bytes memory data = abi.encode(_unsafeBlockSigner)"
                let var_data_2643_mpos := expr_2647_mpos
                /// @src 14:6597:6604  "VERSION"
                let expr_2650 := constant_VERSION_2466()
                /// @src 14:6606:6636  "UpdateType.UNSAFE_BLOCK_SIGNER"
                let expr_2652 := 3
                /// @src 14:6638:6642  "data"
                let _41_mpos := var_data_2643_mpos
                let expr_2653_mpos := _41_mpos
                /// @src 14:6584:6643  "ConfigUpdate(VERSION, UpdateType.UNSAFE_BLOCK_SIGNER, data)"
                let _42 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _43 := convert_t_uint256_to_t_uint256(expr_2650)
                let _44 := convert_t_enum$_UpdateType_$2462_to_t_enum$_UpdateType_$2462(expr_2652)
                {
                    let _45 := allocate_unbounded()
                    let _46 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_45, expr_2653_mpos)
                    log3(_45, sub(_46, _45), _42, _43, _44)
                }
            }
            /// @ast-id 2657 @src 14:6380:6650  "function setUnsafeBlockSigner(address _unsafeBlockSigner) external onlyOwner {..."
            function fun_setUnsafeBlockSigner_2657(var__unsafeBlockSigner_2633)
            {
                modifier_onlyOwner_2636(var__unsafeBlockSigner_2633)
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2663(var__batcherHash_2660)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_setBatcherHash_2684_inner(var__batcherHash_2660)
            }
            /// @src 14:6765:6990  "function setBatcherHash(bytes32 _batcherHash) external onlyOwner {..."
            function fun_setBatcherHash_2684_inner(var__batcherHash_2660)
            {
                /// @src 14:6854:6866  "_batcherHash"
                let _47 := var__batcherHash_2660
                let expr_2666 := _47
                /// @src 14:6840:6866  "batcherHash = _batcherHash"
                update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2666)
                let expr_2667 := expr_2666
                /// @src 14:6908:6920  "_batcherHash"
                let _48 := var__batcherHash_2660
                let expr_2673 := _48
                /// @src 14:6897:6921  "abi.encode(_batcherHash)"
                let expr_2674_mpos := allocate_unbounded()
                let _49 := add(expr_2674_mpos, 0x20)
                let _50 := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(_49, expr_2673)
                mstore(expr_2674_mpos, sub(_50, add(expr_2674_mpos, 0x20)))
                finalize_allocation(expr_2674_mpos, sub(_50, expr_2674_mpos))
                /// @src 14:6877:6921  "bytes memory data = abi.encode(_batcherHash)"
                let var_data_2670_mpos := expr_2674_mpos
                /// @src 14:6949:6956  "VERSION"
                let expr_2677 := constant_VERSION_2466()
                /// @src 14:6958:6976  "UpdateType.BATCHER"
                let expr_2679 := 0
                /// @src 14:6978:6982  "data"
                let _51_mpos := var_data_2670_mpos
                let expr_2680_mpos := _51_mpos
                /// @src 14:6936:6983  "ConfigUpdate(VERSION, UpdateType.BATCHER, data)"
                let _52 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _53 := convert_t_uint256_to_t_uint256(expr_2677)
                let _54 := convert_t_enum$_UpdateType_$2462_to_t_enum$_UpdateType_$2462(expr_2679)
                {
                    let _55 := allocate_unbounded()
                    let _56 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_55, expr_2680_mpos)
                    log3(_55, sub(_56, _55), _52, _53, _54)
                }
            }
            /// @ast-id 2684 @src 14:6765:6990  "function setBatcherHash(bytes32 _batcherHash) external onlyOwner {..."
            function fun_setBatcherHash_2684(var__batcherHash_2660)
            {
                modifier_onlyOwner_2663(var__batcherHash_2660)
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2692(var__overhead_2687, var__scalar_2689)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_setGasConfig_2718_inner(var__overhead_2687, var__scalar_2689)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(headStart, value0, value1) -> tail
            {
                tail := add(headStart, 64)
                abi_encode_t_uint256_to_t_uint256_fromStack(value0, add(headStart, 0))
                abi_encode_t_uint256_to_t_uint256_fromStack(value1, add(headStart, 32))
            }
            /// @src 14:7140:7406  "function setGasConfig(uint256 _overhead, uint256 _scalar) external onlyOwner {..."
            function fun_setGasConfig_2718_inner(var__overhead_2687, var__scalar_2689)
            {
                /// @src 14:7238:7247  "_overhead"
                let _57 := var__overhead_2687
                let expr_2695 := _57
                /// @src 14:7227:7247  "overhead = _overhead"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2695)
                let expr_2696 := expr_2695
                /// @src 14:7266:7273  "_scalar"
                let _58 := var__scalar_2689
                let expr_2699 := _58
                /// @src 14:7257:7273  "scalar = _scalar"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2699)
                let expr_2700 := expr_2699
                /// @src 14:7315:7324  "_overhead"
                let _59 := var__overhead_2687
                let expr_2706 := _59
                /// @src 14:7326:7333  "_scalar"
                let _60 := var__scalar_2689
                let expr_2707 := _60
                /// @src 14:7304:7334  "abi.encode(_overhead, _scalar)"
                let expr_2708_mpos := allocate_unbounded()
                let _61 := add(expr_2708_mpos, 0x20)
                let _62 := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(_61, expr_2706, expr_2707)
                mstore(expr_2708_mpos, sub(_62, add(expr_2708_mpos, 0x20)))
                finalize_allocation(expr_2708_mpos, sub(_62, expr_2708_mpos))
                /// @src 14:7284:7334  "bytes memory data = abi.encode(_overhead, _scalar)"
                let var_data_2703_mpos := expr_2708_mpos
                /// @src 14:7362:7369  "VERSION"
                let expr_2711 := constant_VERSION_2466()
                /// @src 14:7371:7392  "UpdateType.GAS_CONFIG"
                let expr_2713 := 1
                /// @src 14:7394:7398  "data"
                let _63_mpos := var_data_2703_mpos
                let expr_2714_mpos := _63_mpos
                /// @src 14:7349:7399  "ConfigUpdate(VERSION, UpdateType.GAS_CONFIG, data)"
                let _64 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _65 := convert_t_uint256_to_t_uint256(expr_2711)
                let _66 := convert_t_enum$_UpdateType_$2462_to_t_enum$_UpdateType_$2462(expr_2713)
                {
                    let _67 := allocate_unbounded()
                    let _68 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_67, expr_2714_mpos)
                    log3(_67, sub(_68, _67), _64, _65, _66)
                }
            }
            /// @ast-id 2718 @src 14:7140:7406  "function setGasConfig(uint256 _overhead, uint256 _scalar) external onlyOwner {..."
            function fun_setGasConfig_2718(var__overhead_2687, var__scalar_2689)
            {
                modifier_onlyOwner_2692(var__overhead_2687, var__scalar_2689)
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2724(var__gasLimit_2721)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_setGasLimit_2753_inner(var__gasLimit_2721)
            }
            /// @src 14:7515:7810  "function setGasLimit(uint64 _gasLimit) external onlyOwner {..."
            function fun_setGasLimit_2753_inner(var__gasLimit_2721)
            {
                /// @src 14:7591:7600  "_gasLimit"
                let _69 := var__gasLimit_2721
                let expr_2727 := _69
                /// @src 14:7604:7621  "minimumGasLimit()"
                let expr_2729 := fun_minimumGasLimit_2613()
                /// @src 14:7591:7621  "_gasLimit >= minimumGasLimit()"
                let expr_2730 := iszero(lt(cleanup_t_uint64(expr_2727), cleanup_t_uint64(expr_2729)))
                /// @src 14:7583:7657  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2730)
                /// @src 14:7678:7687  "_gasLimit"
                let _70 := var__gasLimit_2721
                let expr_2735 := _70
                /// @src 14:7667:7687  "gasLimit = _gasLimit"
                update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2735)
                let expr_2736 := expr_2735
                /// @src 14:7729:7738  "_gasLimit"
                let _71 := var__gasLimit_2721
                let expr_2742 := _71
                /// @src 14:7718:7739  "abi.encode(_gasLimit)"
                let expr_2743_mpos := allocate_unbounded()
                let _72 := add(expr_2743_mpos, 0x20)
                let _73 := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(_72, expr_2742)
                mstore(expr_2743_mpos, sub(_73, add(expr_2743_mpos, 0x20)))
                finalize_allocation(expr_2743_mpos, sub(_73, expr_2743_mpos))
                /// @src 14:7698:7739  "bytes memory data = abi.encode(_gasLimit)"
                let var_data_2739_mpos := expr_2743_mpos
                /// @src 14:7767:7774  "VERSION"
                let expr_2746 := constant_VERSION_2466()
                /// @src 14:7776:7796  "UpdateType.GAS_LIMIT"
                let expr_2748 := 2
                /// @src 14:7798:7802  "data"
                let _74_mpos := var_data_2739_mpos
                let expr_2749_mpos := _74_mpos
                /// @src 14:7754:7803  "ConfigUpdate(VERSION, UpdateType.GAS_LIMIT, data)"
                let _75 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _76 := convert_t_uint256_to_t_uint256(expr_2746)
                let _77 := convert_t_enum$_UpdateType_$2462_to_t_enum$_UpdateType_$2462(expr_2748)
                {
                    let _78 := allocate_unbounded()
                    let _79 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_78, expr_2749_mpos)
                    log3(_78, sub(_79, _78), _75, _76, _77)
                }
            }
            /// @ast-id 2753 @src 14:7515:7810  "function setGasLimit(uint64 _gasLimit) external onlyOwner {..."
            function fun_setGasLimit_2753(var__gasLimit_2721)
            {
                modifier_onlyOwner_2724(var__gasLimit_2721)
            }
            /// @ast-id 2765 @src 14:8083:8281  "function _setUnsafeBlockSigner(address _unsafeBlockSigner) internal {..."
            function fun__setUnsafeBlockSigner_2765(var__unsafeBlockSigner_2756)
            {
                /// @src 14:8176:8200  "UNSAFE_BLOCK_SIGNER_SLOT"
                let expr_2761 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2472()
                /// @src 14:8161:8200  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
                let var_slot_2760 := expr_2761
                /// @src 14:8210:8275  "assembly {..."
                {
                    sstore(var_slot_2760, var__unsafeBlockSigner_2756)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function allocate_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory(192)
            }
            function zero_value_for_t_uint32() -> ret
            { ret := 0 }
            function zero_value_for_t_uint8() -> ret
            { ret := 0 }
            function zero_value_for_t_uint128() -> ret
            { ret := 0 }
            function allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr() -> memPtr
            {
                memPtr := allocate_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr()
                let offset := memPtr
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)
                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)
            }
            function zero_value_for_split_t_struct$_ResourceConfig_$2128_memory_ptr() -> ret
            {
                ret := allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr()
            }
            function write_to_memory_t_uint32(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint32(value))
            }
            function shift_right_32_unsigned(value) -> newValue
            { newValue := shr(32, value) }
            function extract_from_storage_value_offset_4t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_32_unsigned(slot_value))
            }
            function read_from_storage_split_offset_4_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_4t_uint8(sload(slot))
            }
            function write_to_memory_t_uint8(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint8(value))
            }
            function shift_right_40_unsigned(value) -> newValue
            { newValue := shr(40, value) }
            function extract_from_storage_value_offset_5t_uint8(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint8(shift_right_40_unsigned(slot_value))
            }
            function read_from_storage_split_offset_5_t_uint8(slot) -> value
            {
                value := extract_from_storage_value_offset_5t_uint8(sload(slot))
            }
            function shift_right_48_unsigned(value) -> newValue
            { newValue := shr(48, value) }
            function extract_from_storage_value_offset_6t_uint32(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint32(shift_right_48_unsigned(slot_value))
            }
            function read_from_storage_split_offset_6_t_uint32(slot) -> value
            {
                value := extract_from_storage_value_offset_6t_uint32(sload(slot))
            }
            function shift_right_112_unsigned(value) -> newValue
            { newValue := shr(112, value) }
            function cleanup_from_storage_t_uint128(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_14t_uint128(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint128(shift_right_112_unsigned(slot_value))
            }
            function read_from_storage_split_offset_14_t_uint128(slot) -> value
            {
                value := extract_from_storage_value_offset_14t_uint128(sload(slot))
            }
            function write_to_memory_t_uint128(memPtr, value)
            {
                mstore(memPtr, cleanup_t_uint128(value))
            }
            function read_from_storage_reference_type_t_struct$_ResourceConfig_$2128_memory_ptr(slot) -> value
            {
                value := allocate_memory_struct_t_struct$_ResourceConfig_$2128_memory_ptr()
                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 0), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_4_t_uint8(add(slot, 0))
                    write_to_memory_t_uint8(add(value, 32), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_5_t_uint8(add(slot, 0))
                    write_to_memory_t_uint8(add(value, 64), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_6_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 96), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_10_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 128), memberValue_0)
                }
                {
                    let memberValue_0 := read_from_storage_split_offset_14_t_uint128(add(slot, 0))
                    write_to_memory_t_uint128(add(value, 160), memberValue_0)
                }
            }
            function convert_t_struct$_ResourceConfig_$2128_storage_to_t_struct$_ResourceConfig_$2128_memory_ptr(value) -> converted
            {
                converted := read_from_storage_reference_type_t_struct$_ResourceConfig_$2128_memory_ptr(value)
            }
            /// @ast-id 2775 @src 14:8460:8588  "function resourceConfig() external view returns (ResourceMetering.ResourceConfig memory) {..."
            function fun_resourceConfig_2775() -> var__2770_mpos
            {
                /// @src 14:8509:8547  "ResourceMetering.ResourceConfig memory"
                let zero_t_struct$_ResourceConfig_$2128_memory_ptr_80_mpos := zero_value_for_split_t_struct$_ResourceConfig_$2128_memory_ptr()
                var__2770_mpos := zero_t_struct$_ResourceConfig_$2128_memory_ptr_80_mpos
                /// @src 14:8566:8581  "_resourceConfig"
                let _81_slot := 0x69
                let expr_2772_slot := _81_slot
                /// @src 14:8559:8581  "return _resourceConfig"
                var__2770_mpos := convert_t_struct$_ResourceConfig_$2128_storage_to_t_struct$_ResourceConfig_$2128_memory_ptr(expr_2772_slot)
                leave
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2782(var__config_2779_mpos)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_setResourceConfig_2789_inner(var__config_2779_mpos)
            }
            /// @src 14:8874:9012  "function setResourceConfig(ResourceMetering.ResourceConfig memory _config) external onlyOwner {..."
            function fun_setResourceConfig_2789_inner(var__config_2779_mpos)
            {
                /// @src 14:8997:9004  "_config"
                let _82_mpos := var__config_2779_mpos
                let expr_2785_mpos := _82_mpos
                fun__setResourceConfig_2854(expr_2785_mpos)
            }
            /// @ast-id 2789 @src 14:8874:9012  "function setResourceConfig(ResourceMetering.ResourceConfig memory _config) external onlyOwner {..."
            function fun_setResourceConfig_2789(var__config_2779_mpos)
            {
                modifier_onlyOwner_2782(var__config_2779_mpos)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function read_from_memoryt_uint32(ptr) -> returnValue
            {
                let value := cleanup_t_uint32(mload(ptr))
                returnValue := value
            }
            function read_from_memoryt_uint128(ptr) -> returnValue
            {
                let value := cleanup_t_uint128(mload(ptr))
                returnValue := value
            }
            function convert_t_uint32_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint32(value)))
            }
            function store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(memPtr)
            {
                mstore(add(memPtr, 0), "SystemConfig: min base fee must ")
                mstore(add(memPtr, 32), "be less than max base")
            }
            function abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function read_from_memoryt_uint8(ptr) -> returnValue
            {
                let value := cleanup_t_uint8(mload(ptr))
                returnValue := value
            }
            function store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(memPtr)
            {
                mstore(add(memPtr, 0), "SystemConfig: denominator must b")
                mstore(add(memPtr, 32), "e larger than 1")
            }
            function abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
                store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function checked_add_t_uint32(x, y) -> sum
            {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)
                if gt(x, sub(0xffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function extract_from_storage_value_offset_0t_uint64(slot_value) -> value
            {
                value := cleanup_from_storage_t_uint64(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_uint64(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_uint64(sload(slot))
            }
            function convert_t_rational_0_by_1_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
            }
            function store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(memPtr)
            {
                mstore(add(memPtr, 0), "SystemConfig: elasticity multipl")
                mstore(add(memPtr, 32), "ier cannot be 0")
            }
            function abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
                store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function convert_t_uint8_to_t_uint32(value) -> converted
            {
                converted := cleanup_t_uint32(identity(cleanup_t_uint8(value)))
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_uint32(x, y) -> r
            {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function checked_mul_t_uint32(x, y) -> product
            {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)
                if and(iszero(iszero(x)), gt(y, div(0xffffffff, x))) { panic_error_0x11() }
                product := mul(x, y)
            }
            function store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(memPtr)
            {
                mstore(add(memPtr, 0), "SystemConfig: precision loss wit")
                mstore(add(memPtr, 32), "h target resource limit")
            }
            function abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            function panic_error_0x00()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }
            function update_byte_slice_4_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint32_to_t_uint32(value) -> converted
            {
                converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
            }
            function prepare_store_t_uint32(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_uint32_to_t_uint32(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_0(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }
            function shift_left_32(value) -> newValue
            { newValue := shl(32, value) }
            function update_byte_slice_1_shift_4(value, toInsert) -> result
            {
                let mask := 0xff00000000
                toInsert := shift_left_32(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_4t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_4(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_40(value) -> newValue
            { newValue := shl(40, value) }
            function update_byte_slice_1_shift_5(value, toInsert) -> result
            {
                let mask := 0xff0000000000
                toInsert := shift_left_40(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_5t_uint8_to_t_uint8(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_5(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }
            function shift_left_48(value) -> newValue
            { newValue := shl(48, value) }
            function update_byte_slice_4_shift_6(value, toInsert) -> result
            {
                let mask := 0xffffffff000000000000
                toInsert := shift_left_48(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_6t_uint32_to_t_uint32(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_6(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }
            function shift_left_80(value) -> newValue
            { newValue := shl(80, value) }
            function update_byte_slice_4_shift_10(value, toInsert) -> result
            {
                let mask := 0xffffffff00000000000000000000
                toInsert := shift_left_80(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function update_storage_value_offset_10t_uint32_to_t_uint32(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_10(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }
            function shift_left_112(value) -> newValue
            { newValue := shl(112, value) }
            function update_byte_slice_16_shift_14(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffff0000000000000000000000000000
                toInsert := shift_left_112(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_uint128_to_t_uint128(value) -> converted
            {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }
            function prepare_store_t_uint128(value) -> ret
            { ret := value }
            function update_storage_value_offset_14t_uint128_to_t_uint128(slot, value_0)
            {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_14(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }
            function copy_struct_to_storage_from_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value)
            {
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)
                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                    update_storage_value_offset_0t_uint32_to_t_uint32(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 32)
                    let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)
                    update_storage_value_offset_4t_uint8_to_t_uint8(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 64)
                    let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)
                    update_storage_value_offset_5t_uint8_to_t_uint8(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 96)
                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                    update_storage_value_offset_6t_uint32_to_t_uint32(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 128)
                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)
                    update_storage_value_offset_10t_uint32_to_t_uint32(memberSlot, memberValue_0)
                }
                {
                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 160)
                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)
                    update_storage_value_offset_14t_uint128_to_t_uint128(memberSlot, memberValue_0)
                }
            }
            function update_storage_value_offset_0t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value_0)
            {
                copy_struct_to_storage_from_t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(slot, value_0)
            }
            /// @ast-id 2854 @src 14:9240:10633  "function _setResourceConfig(ResourceMetering.ResourceConfig memory _config) internal {..."
            function fun__setResourceConfig_2854(var__config_2793_mpos)
            {
                /// @src 14:9424:9431  "_config"
                let _83_mpos := var__config_2793_mpos
                let expr_2797_mpos := _83_mpos
                /// @src 14:9424:9446  "_config.minimumBaseFee"
                let _84 := add(expr_2797_mpos, 96)
                let _85 := read_from_memoryt_uint32(_84)
                let expr_2798 := _85
                /// @src 14:9450:9457  "_config"
                let _86_mpos := var__config_2793_mpos
                let expr_2799_mpos := _86_mpos
                /// @src 14:9450:9472  "_config.maximumBaseFee"
                let _87 := add(expr_2799_mpos, 160)
                let _88 := read_from_memoryt_uint128(_87)
                let expr_2800 := _88
                /// @src 14:9424:9472  "_config.minimumBaseFee <= _config.maximumBaseFee"
                let expr_2801 := iszero(gt(convert_t_uint32_to_t_uint128(expr_2798), cleanup_t_uint128(expr_2800)))
                /// @src 14:9403:9551  "require(..."
                require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(expr_2801)
                /// @src 14:9645:9652  "_config"
                let _89_mpos := var__config_2793_mpos
                let expr_2806_mpos := _89_mpos
                /// @src 14:9645:9680  "_config.baseFeeMaxChangeDenominator"
                let _90 := add(expr_2806_mpos, 64)
                let _91 := read_from_memoryt_uint8(_90)
                let expr_2807 := _91
                /// @src 14:9683:9684  "1"
                let expr_2808 := 0x01
                /// @src 14:9645:9684  "_config.baseFeeMaxChangeDenominator > 1"
                let expr_2809 := gt(cleanup_t_uint8(expr_2807), convert_t_rational_1_by_1_to_t_uint8(expr_2808))
                /// @src 14:9624:9757  "require(..."
                require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(expr_2809)
                /// @src 14:9966:9973  "_config"
                let _92_mpos := var__config_2793_mpos
                let expr_2814_mpos := _92_mpos
                /// @src 14:9966:9990  "_config.maxResourceLimit"
                let _93 := add(expr_2814_mpos, 0)
                let _94 := read_from_memoryt_uint32(_93)
                let expr_2815 := _94
                /// @src 14:9993:10000  "_config"
                let _95_mpos := var__config_2793_mpos
                let expr_2816_mpos := _95_mpos
                /// @src 14:9993:10015  "_config.systemTxMaxGas"
                let _96 := add(expr_2816_mpos, 128)
                let _97 := read_from_memoryt_uint32(_96)
                let expr_2817 := _97
                /// @src 14:9966:10015  "_config.maxResourceLimit + _config.systemTxMaxGas"
                let expr_2818 := checked_add_t_uint32(expr_2815, expr_2817)
                /// @src 14:10019:10027  "gasLimit"
                let _98 := read_from_storage_split_offset_0_t_uint64(0x68)
                let expr_2819 := _98
                /// @src 14:9966:10027  "_config.maxResourceLimit + _config.systemTxMaxGas <= gasLimit"
                let expr_2820 := iszero(gt(convert_t_uint32_to_t_uint64(expr_2818), cleanup_t_uint64(expr_2819)))
                /// @src 14:9945:10084  "require(..."
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2820)
                /// @src 14:10172:10179  "_config"
                let _99_mpos := var__config_2793_mpos
                let expr_2825_mpos := _99_mpos
                /// @src 14:10172:10200  "_config.elasticityMultiplier"
                let _100 := add(expr_2825_mpos, 32)
                let _101 := read_from_memoryt_uint8(_100)
                let expr_2826 := _101
                /// @src 14:10203:10204  "0"
                let expr_2827 := 0x00
                /// @src 14:10172:10204  "_config.elasticityMultiplier > 0"
                let expr_2828 := gt(cleanup_t_uint8(expr_2826), convert_t_rational_0_by_1_to_t_uint8(expr_2827))
                /// @src 14:10151:10277  "require(..."
                require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(expr_2828)
                /// @src 14:10377:10384  "_config"
                let _102_mpos := var__config_2793_mpos
                let expr_2833_mpos := _102_mpos
                /// @src 14:10377:10401  "_config.maxResourceLimit"
                let _103 := add(expr_2833_mpos, 0)
                let _104 := read_from_memoryt_uint32(_103)
                let expr_2834 := _104
                /// @src 14:10404:10411  "_config"
                let _105_mpos := var__config_2793_mpos
                let expr_2835_mpos := _105_mpos
                /// @src 14:10404:10432  "_config.elasticityMultiplier"
                let _106 := add(expr_2835_mpos, 32)
                let _107 := read_from_memoryt_uint8(_106)
                let expr_2836 := _107
                /// @src 14:10377:10432  "_config.maxResourceLimit / _config.elasticityMultiplier"
                let expr_2837 := checked_div_t_uint32(expr_2834, convert_t_uint8_to_t_uint32(expr_2836))
                /// @src 14:10376:10433  "(_config.maxResourceLimit / _config.elasticityMultiplier)"
                let expr_2838 := expr_2837
                /// @src 14:10452:10459  "_config"
                let _108_mpos := var__config_2793_mpos
                let expr_2839_mpos := _108_mpos
                /// @src 14:10452:10480  "_config.elasticityMultiplier"
                let _109 := add(expr_2839_mpos, 32)
                let _110 := read_from_memoryt_uint8(_109)
                let expr_2840 := _110
                /// @src 14:10376:10480  "(_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2841 := checked_mul_t_uint32(expr_2838, convert_t_uint8_to_t_uint32(expr_2840))
                /// @src 14:10375:10481  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2842 := expr_2841
                /// @src 14:10485:10492  "_config"
                let _111_mpos := var__config_2793_mpos
                let expr_2843_mpos := _111_mpos
                /// @src 14:10485:10509  "_config.maxResourceLimit"
                let _112 := add(expr_2843_mpos, 0)
                let _113 := read_from_memoryt_uint32(_112)
                let expr_2844 := _113
                /// @src 14:10375:10509  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2845 := eq(cleanup_t_uint32(expr_2842), cleanup_t_uint32(expr_2844))
                /// @src 14:10354:10590  "require(..."
                require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(expr_2845)
                /// @src 14:10619:10626  "_config"
                let _114_mpos := var__config_2793_mpos
                let expr_2850_mpos := _114_mpos
                /// @src 14:10601:10626  "_resourceConfig = _config"
                update_storage_value_offset_0t_struct$_ResourceConfig_$2128_memory_ptr_to_t_struct$_ResourceConfig_$2128_storage(0x69, expr_2850_mpos)
                let _115_slot := 0x69
                let expr_2851_slot := _115_slot
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr)
            { mstore(add(memPtr, 0), "0") }
            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }
            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function cleanup_t_rational_10_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function array_allocation_size_t_bytes_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes)
            {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }
            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function cleanup_t_rational_48_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function convert_t_uint256_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }
            function cleanup_t_bytes1(value) -> cleaned
            {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }
            function shift_left_248(value) -> newValue
            { newValue := shl(248, value) }
            function convert_t_uint8_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 1)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            /// @ast-id 3909 @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3909(var_value_3833) -> var__3836_mpos
            {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_116_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3836_mpos := zero_t_string_memory_ptr_116_mpos
                /// @src 6:665:670  "value"
                let _117 := var_value_3833
                let expr_3838 := _117
                /// @src 6:674:675  "0"
                let expr_3839 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3840 := eq(cleanup_t_uint256(expr_3838), convert_t_rational_0_by_1_to_t_uint256(expr_3839))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3840
                {
                    /// @src 6:691:701  "return \"0\""
                    var__3836_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                }
                /// @src 6:736:741  "value"
                let _118 := var_value_3833
                let expr_3847 := _118
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3846 := expr_3847
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3850
                let zero_t_uint256_119 := zero_value_for_split_t_uint256()
                var_digits_3850 := zero_t_uint256_119
                /// @src 6:775:850  "while (temp != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:782:786  "temp"
                    let _120 := var_temp_3846
                    let expr_3852 := _120
                    /// @src 6:790:791  "0"
                    let expr_3853 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3854 := iszero(eq(cleanup_t_uint256(expr_3852), convert_t_rational_0_by_1_to_t_uint256(expr_3853)))
                    if iszero(expr_3854) { break }
                    /// @src 6:807:815  "digits++"
                    let _122 := var_digits_3850
                    let _121 := increment_t_uint256(_122)
                    var_digits_3850 := _121
                    let expr_3856 := _122
                    /// @src 6:837:839  "10"
                    let expr_3859 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _123 := convert_t_rational_10_by_1_to_t_uint256(expr_3859)
                    let _124 := var_temp_3846
                    let expr_3860 := checked_div_t_uint256(_124, _123)
                    var_temp_3846 := expr_3860
                }
                /// @src 6:891:897  "digits"
                let _125 := var_digits_3850
                let expr_3868 := _125
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3869_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3868)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3865_mpos := expr_3869_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:915:920  "value"
                    let _126 := var_value_3833
                    let expr_3871 := _126
                    /// @src 6:924:925  "0"
                    let expr_3872 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3873 := iszero(eq(cleanup_t_uint256(expr_3871), convert_t_rational_0_by_1_to_t_uint256(expr_3872)))
                    if iszero(expr_3873) { break }
                    /// @src 6:951:952  "1"
                    let expr_3875 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _127 := convert_t_rational_1_by_1_to_t_uint256(expr_3875)
                    let _128 := var_digits_3850
                    let expr_3876 := checked_sub_t_uint256(_128, _127)
                    var_digits_3850 := expr_3876
                    /// @src 6:996:998  "48"
                    let expr_3885 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _129 := var_value_3833
                    let expr_3888 := _129
                    /// @src 6:1017:1019  "10"
                    let expr_3889 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3890 := mod_t_uint256(expr_3888, convert_t_rational_10_by_1_to_t_uint256(expr_3889))
                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3891 := expr_3890
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3892 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3885), expr_3891)
                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3893 := convert_t_uint256_to_t_uint8(expr_3892)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3894 := convert_t_uint8_to_t_bytes1(expr_3893)
                    /// @src 6:966:972  "buffer"
                    let _130_mpos := var_buffer_3865_mpos
                    let expr_3878_mpos := _130_mpos
                    /// @src 6:973:979  "digits"
                    let _131 := var_digits_3850
                    let expr_3879 := _131
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _132 := expr_3894
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3878_mpos, expr_3879), byte(0, _132))
                    let expr_3895 := expr_3894
                    /// @src 6:1045:1047  "10"
                    let expr_3898 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _133 := convert_t_rational_10_by_1_to_t_uint256(expr_3898)
                    let _134 := var_value_3833
                    let expr_3899 := checked_div_t_uint256(_134, _133)
                    var_value_3833 := expr_3899
                }
                /// @src 6:1081:1087  "buffer"
                let _135_mpos := var_buffer_3865_mpos
                let expr_3905_mpos := _135_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3906_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3905_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3836_mpos := expr_3906_mpos
                leave
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr)
            {
                mstore(add(memPtr, 0), "Initializable: contract is not i")
                mstore(add(memPtr, 32), "nitializing")
            }
            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_4991()
            {
                /// @src 1:4910:4923  "_initializing"
                let _136 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3485 := _136
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
                /// @src 1:4981:4982  "_"
                fun___Ownable_init_4997_inner()
            }
            /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
            function fun___Ownable_init_4997_inner()
            {
                fun___Ownable_init_unchained_5008()
            }
            /// @ast-id 4997
            function fun___Ownable_init_4997()
            {
                modifier_onlyInitializing_4991()
            }
            /// @ast-id 3491 @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_5000()
            {
                /// @src 1:4910:4923  "_initializing"
                let _137 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3485 := _137
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3485)
                /// @src 1:4981:4982  "_"
                fun___Ownable_init_unchained_5008_inner()
            }
            /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
            function fun___Ownable_init_unchained_5008_inner()
            {
                /// @src 0:1195:1207  "_msgSender()"
                let expr_5004 := fun__msgSender_7134()
                fun__transferOwnership_5096(expr_5004)
            }
            /// @ast-id 5008 @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
            function fun___Ownable_init_unchained_5008()
            {
                modifier_onlyInitializing_5000()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function cleanup_from_storage_t_address(value) -> cleaned
            {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function extract_from_storage_value_offset_0t_address(slot_value) -> value
            {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }
            function read_from_storage_split_offset_0_t_address(slot) -> value
            {
                value := extract_from_storage_value_offset_0t_address(sload(slot))
            }
            /// @ast-id 5025 @src 0:1441:1526  "function owner() public view virtual returns (address) {..."
            function fun_owner_5025() -> var__5020
            {
                /// @src 0:1487:1494  "address"
                let zero_t_address_138 := zero_value_for_split_t_address()
                var__5020 := zero_t_address_138
                /// @src 0:1513:1519  "_owner"
                let _139 := read_from_storage_split_offset_0_t_address(0x33)
                let expr_5022 := _139
                /// @src 0:1506:1519  "return _owner"
                var__5020 := expr_5022
                leave
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr)
            {
                mstore(add(memPtr, 0), "Ownable: caller is not the owner")
            }
            function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)
                store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)
                end := add(pos, 32)
            }
            function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @ast-id 5039 @src 0:1599:1729  "function _checkOwner() internal view virtual {..."
            function fun__checkOwner_5039()
            {
                /// @src 0:1662:1669  "owner()"
                let expr_5031 := fun_owner_5025()
                /// @src 0:1673:1685  "_msgSender()"
                let expr_5033 := fun__msgSender_7134()
                /// @src 0:1662:1685  "owner() == _msgSender()"
                let expr_5034 := eq(cleanup_t_address(expr_5031), cleanup_t_address(expr_5033))
                /// @src 0:1654:1722  "require(owner() == _msgSender(), \"Ownable: caller is not the owner\")"
                require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(expr_5034)
            }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_5043()
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_renounceOwnership_5053_inner()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted
            {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }
            function convert_t_rational_0_by_1_to_t_address(value) -> converted
            {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }
            /// @src 0:2071:2172  "function renounceOwnership() public virtual onlyOwner {..."
            function fun_renounceOwnership_5053_inner()
            {
                /// @src 0:2162:2163  "0"
                let expr_5048 := 0x00
                /// @src 0:2154:2164  "address(0)"
                let expr_5049 := convert_t_rational_0_by_1_to_t_address(expr_5048)
                fun__transferOwnership_5096(expr_5049)
            }
            /// @ast-id 5053 @src 0:2071:2172  "function renounceOwnership() public virtual onlyOwner {..."
            function fun_renounceOwnership_5053()
            { modifier_onlyOwner_5043() }
            /// @ast-id 5016 @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_5059(var_newOwner_5056)
            {
                fun__checkOwner_5039()
                /// @src 0:1357:1358  "_"
                fun_transferOwnership_5076_inner(var_newOwner_5056)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr)
            {
                mstore(add(memPtr, 0), "Ownable: new owner is the zero a")
                mstore(add(memPtr, 32), "ddress")
            }
            function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
                store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)
                end := add(pos, 64)
            }
            function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(tail)
            }
            function require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(condition)
            {
                if iszero(condition)
                {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(add(memPtr, 4))
                    revert(memPtr, sub(end, memPtr))
                }
            }
            /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
            function fun_transferOwnership_5076_inner(var_newOwner_5056)
            {
                /// @src 0:2409:2417  "newOwner"
                let _140 := var_newOwner_5056
                let expr_5062 := _140
                /// @src 0:2429:2430  "0"
                let expr_5065 := 0x00
                /// @src 0:2421:2431  "address(0)"
                let expr_5066 := convert_t_rational_0_by_1_to_t_address(expr_5065)
                /// @src 0:2409:2431  "newOwner != address(0)"
                let expr_5067 := iszero(eq(cleanup_t_address(expr_5062), cleanup_t_address(expr_5066)))
                /// @src 0:2401:2474  "require(newOwner != address(0), \"Ownable: new owner is the zero address\")"
                require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(expr_5067)
                /// @src 0:2503:2511  "newOwner"
                let _141 := var_newOwner_5056
                let expr_5072 := _141
                fun__transferOwnership_5096(expr_5072)
            }
            /// @ast-id 5076 @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
            function fun_transferOwnership_5076(var_newOwner_5056)
            {
                modifier_onlyOwner_5059(var_newOwner_5056)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function update_byte_slice_20_shift_0(value, toInsert) -> result
            {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_t_address_to_t_address(value) -> converted
            {
                converted := convert_t_uint160_to_t_address(value)
            }
            function prepare_store_t_address(value) -> ret
            { ret := value }
            function update_storage_value_offset_0t_address_to_t_address(slot, value_0)
            {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }
            /// @ast-id 5096 @src 0:2673:2860  "function _transferOwnership(address newOwner) internal virtual {..."
            function fun__transferOwnership_5096(var_newOwner_5079)
            {
                /// @src 0:2765:2771  "_owner"
                let _142 := read_from_storage_split_offset_0_t_address(0x33)
                let expr_5084 := _142
                /// @src 0:2746:2771  "address oldOwner = _owner"
                let var_oldOwner_5083 := expr_5084
                /// @src 0:2790:2798  "newOwner"
                let _143 := var_newOwner_5079
                let expr_5087 := _143
                /// @src 0:2781:2798  "_owner = newOwner"
                update_storage_value_offset_0t_address_to_t_address(0x33, expr_5087)
                let expr_5088 := expr_5087
                /// @src 0:2834:2842  "oldOwner"
                let _144 := var_oldOwner_5083
                let expr_5091 := _144
                /// @src 0:2844:2852  "newOwner"
                let _145 := var_newOwner_5079
                let expr_5092 := _145
                /// @src 0:2813:2853  "OwnershipTransferred(oldOwner, newOwner)"
                let _146 := 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0
                let _147 := convert_t_address_to_t_address(expr_5091)
                let _148 := convert_t_address_to_t_address(expr_5092)
                {
                    let _149 := allocate_unbounded()
                    let _150 := abi_encode_tuple__to__fromStack(_149)
                    log3(_149, sub(_150, _149), _146, _147, _148)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            function zero_value_for_split_t_bool() -> ret
            { ret := 0 }
            /// @ast-id 5691 @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_5691(var_account_5679) -> var__5682
            {
                /// @src 2:1246:1250  "bool"
                let zero_t_bool_151 := zero_value_for_split_t_bool()
                var__5682 := zero_t_bool_151
                /// @src 2:1476:1483  "account"
                let _152 := var_account_5679
                let expr_5684 := _152
                /// @src 2:1476:1495  "account.code.length"
                let expr_5686 := extcodesize(expr_5684)
                /// @src 2:1498:1499  "0"
                let expr_5687 := 0x00
                /// @src 2:1476:1499  "account.code.length > 0"
                let expr_5688 := gt(cleanup_t_uint256(expr_5686), convert_t_rational_0_by_1_to_t_uint256(expr_5687))
                /// @src 2:1469:1499  "return account.code.length > 0"
                var__5682 := expr_5688
                leave
            }
            /// @ast-id 7134 @src 3:850:946  "function _msgSender() internal view virtual returns (address) {..."
            function fun__msgSender_7134() -> var__7128
            {
                /// @src 3:903:910  "address"
                let zero_t_address_153 := zero_value_for_split_t_address()
                var__7128 := zero_t_address_153
                /// @src 3:929:939  "msg.sender"
                let expr_7131 := caller()
                /// @src 3:922:939  "return msg.sender"
                var__7128 := expr_7131
                leave
            }
        }
        data ".metadata" hex"a26469706673582212206d27e4a1c1dad7de701c542f6b6e3008b44c30cb8a9b3ef71b0d403581ce1ee964736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 15:"contracts/libraries/Arithmetic.sol"
object "Arithmetic_4909" {
    code {
        /// @src 15:297:1413  "library Arithmetic {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Arithmetic_4909_deployed"), datasize("Arithmetic_4909_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Arithmetic_4909_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Arithmetic_4909()
        { }
    }
    /// @use-src 15:"contracts/libraries/Arithmetic.sol"
    object "Arithmetic_4909_deployed" {
        code {
            /// @src 15:297:1413  "library Arithmetic {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122021c00ebfab5786efa94fad4f08adfa5f658f5f64b7a98f77fb9a87082523dfb564736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 16:"contracts/libraries/Burn.sol"
object "Burn_4954" {
    code {
        /// @src 16:120:633  "library Burn {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Burn_4954_deployed"), datasize("Burn_4954_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Burn_4954_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Burn_4954()
        { }
    }
    /// @use-src 16:"contracts/libraries/Burn.sol"
    object "Burn_4954_deployed" {
        code {
            /// @src 16:120:633  "library Burn {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122029f66c57d89b14d2902e029561ee3149d1922984856073cb647a32bc03df047064736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 16:"contracts/libraries/Burn.sol"
object "Burner_4970" {
    code {
        /// @src 16:900:999  "contract Burner {..."
        mstore(64, memoryguard(128))
        constructor_Burner_4970()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Burner_4970_deployed"), datasize("Burner_4970_deployed"))
        return(_1, datasize("Burner_4970_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function cleanup_t_uint160(value) -> cleaned
        {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }
        function identity(value) -> ret
        { ret := value }
        function convert_t_uint160_to_t_uint160(value) -> converted
        {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }
        function convert_t_uint160_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_contract$_Burner_$4970_to_t_address(value) -> converted
        {
            converted := convert_t_uint160_to_t_address(value)
        }
        function convert_t_uint160_to_t_address_payable(value) -> converted
        {
            converted := convert_t_uint160_to_t_uint160(value)
        }
        function convert_t_address_to_t_address_payable(value) -> converted
        {
            converted := convert_t_uint160_to_t_address_payable(value)
        }
        /// @ast-id 4969 @src 16:922:997  "constructor() payable {..."
        function constructor_Burner_4970()
        {
            /// @src 16:983:987  "this"
            let expr_4963_address := address()
            /// @src 16:975:988  "address(this)"
            let expr_4964 := convert_t_contract$_Burner_$4970_to_t_address(expr_4963_address)
            /// @src 16:967:989  "payable(address(this))"
            let expr_4965 := convert_t_address_to_t_address_payable(expr_4964)
            selfdestruct(expr_4965)
        }
    }
    /// @use-src 16:"contracts/libraries/Burn.sol"
    object "Burner_4970_deployed" {
        code {
            /// @src 16:900:999  "contract Burner {..."
            mstore(64, memoryguard(128))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220c249b140e236f7ebbb95adffe88c1a59123cb1c25a384c07051621238932459d64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 17:"contracts/libraries/Bytes.sol"
object "Bytes_7320" {
    code {
        /// @src 17:141:5369  "library Bytes {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Bytes_7320_deployed"), datasize("Bytes_7320_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Bytes_7320_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Bytes_7320()
        { }
    }
    /// @use-src 17:"contracts/libraries/Bytes.sol"
    object "Bytes_7320_deployed" {
        code {
            /// @src 17:141:5369  "library Bytes {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122070c6ab2a3c03933554d3d8171690a96d03b8a71a9d4be885b10456f22e4081ad64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 18:"contracts/libraries/Constants.sol"
object "Constants_2901" {
    code {
        /// @src 18:400:2074  "library Constants {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Constants_2901_deployed"), datasize("Constants_2901_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Constants_2901_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Constants_2901()
        { }
    }
    /// @use-src 18:"contracts/libraries/Constants.sol"
    object "Constants_2901_deployed" {
        code {
            /// @src 18:400:2074  "library Constants {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212206d11b2c44cbe1cd1b05109086575142f864c2815bd28d1f3dbe60958ae8299e064736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 19:"contracts/libraries/Encoding.sol"
object "Encoding_3821" {
    code {
        /// @src 19:287:5715  "library Encoding {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Encoding_3821_deployed"), datasize("Encoding_3821_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Encoding_3821_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Encoding_3821()
        { }
    }
    /// @use-src 19:"contracts/libraries/Encoding.sol"
    object "Encoding_3821_deployed" {
        code {
            /// @src 19:287:5715  "library Encoding {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122099d9cefabbabfee5248160c59826ef61fcaeedbdb140f2a2998f8f96b1f1745b64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 20:"contracts/libraries/Hashing.sol"
object "Hashing_3123" {
    code {
        /// @src 20:237:5788  "library Hashing {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Hashing_3123_deployed"), datasize("Hashing_3123_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Hashing_3123_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Hashing_3123()
        { }
    }
    /// @use-src 20:"contracts/libraries/Hashing.sol"
    object "Hashing_3123_deployed" {
        code {
            /// @src 20:237:5788  "library Hashing {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212201928796d27d9b1175d042388c4e834761d8816a1c0029e347fc09d94ccf9d94a64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 21:"contracts/libraries/Predeploys.sol"
object "Predeploys_880" {
    code {
        /// @src 21:179:4036  "library Predeploys {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Predeploys_880_deployed"), datasize("Predeploys_880_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Predeploys_880_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Predeploys_880()
        { }
    }
    /// @use-src 21:"contracts/libraries/Predeploys.sol"
    object "Predeploys_880_deployed" {
        code {
            /// @src 21:179:4036  "library Predeploys {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122047f3a3a476f87c9608a66b36cf0e211134b150095f608204291e366a600c143664736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 22:"contracts/libraries/SafeCall.sol"
object "SafeCall_3193" {
    code {
        /// @src 22:124:5952  "library SafeCall {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SafeCall_3193_deployed"), datasize("SafeCall_3193_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("SafeCall_3193_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_SafeCall_3193()
        { }
    }
    /// @use-src 22:"contracts/libraries/SafeCall.sol"
    object "SafeCall_3193_deployed" {
        code {
            /// @src 22:124:5952  "library SafeCall {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212203a3d90e5915cfbd65ee4e8e48d76e7c392d777079453957131ecef1197924ecd64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 23:"contracts/libraries/Types.sol"
object "Types_3245" {
    code {
        /// @src 23:161:3327  "library Types {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Types_3245_deployed"), datasize("Types_3245_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("Types_3245_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_Types_3245()
        { }
    }
    /// @use-src 23:"contracts/libraries/Types.sol"
    object "Types_3245_deployed" {
        code {
            /// @src 23:161:3327  "library Types {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220468766842e9af21b9a6224aaa583d886d59c00455e55f0119a208fe2980c0e2b64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 24:"contracts/libraries/rlp/RLPReader.sol"
object "RLPReader_7850" {
    code {
        /// @src 24:394:11216  "library RLPReader {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("RLPReader_7850_deployed"), datasize("RLPReader_7850_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("RLPReader_7850_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_RLPReader_7850()
        { }
    }
    /// @use-src 24:"contracts/libraries/rlp/RLPReader.sol"
    object "RLPReader_7850_deployed" {
        code {
            /// @src 24:394:11216  "library RLPReader {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212202b3a389f9e573f83caed87a2b80ba9c46711a43519efe26be3d93d375efcfda964736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 25:"contracts/libraries/rlp/RLPWriter.sol"
object "RLPWriter_6423" {
    code {
        /// @src 25:388:6136  "library RLPWriter {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("RLPWriter_6423_deployed"), datasize("RLPWriter_6423_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("RLPWriter_6423_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_RLPWriter_6423()
        { }
    }
    /// @use-src 25:"contracts/libraries/rlp/RLPWriter.sol"
    object "RLPWriter_6423_deployed" {
        code {
            /// @src 25:388:6136  "library RLPWriter {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122072a64daaa2cc080b82b97c038bc89f2c580add577a63bade8b93494a19dcb86e64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 26:"contracts/libraries/trie/MerkleTrie.sol"
object "MerkleTrie_5673" {
    code {
        /// @src 26:427:11923  "library MerkleTrie {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("MerkleTrie_5673_deployed"), datasize("MerkleTrie_5673_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("MerkleTrie_5673_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_MerkleTrie_5673()
        { }
    }
    /// @use-src 26:"contracts/libraries/trie/MerkleTrie.sol"
    object "MerkleTrie_5673_deployed" {
        code {
            /// @src 26:427:11923  "library MerkleTrie {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a264697066735822122062bf519237e8b62744bfa742cab40050381b72927424f4a5ce3c399b47a32bd464736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 27:"contracts/libraries/trie/SecureMerkleTrie.sol"
object "SecureMerkleTrie_3324" {
    code {
        /// @src 27:338:2253  "library SecureMerkleTrie {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SecureMerkleTrie_3324_deployed"), datasize("SecureMerkleTrie_3324_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("SecureMerkleTrie_3324_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_SecureMerkleTrie_3324()
        { }
    }
    /// @use-src 27:"contracts/libraries/trie/SecureMerkleTrie.sol"
    object "SecureMerkleTrie_3324_deployed" {
        code {
            /// @src 27:338:2253  "library SecureMerkleTrie {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220870a28e39c0669f23148665dab3f44765c94b22fc88e5073295c28b65984d7a364736f6c634300080f0033"
    }
}

Optimized IR:

Optimized IR:
/// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
object "CrossDomainMessengerLegacySpacer0_897" {
    code {
        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        constructor_CrossDomainMessengerLegacySpacer0_897()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("CrossDomainMessengerLegacySpacer0_897_deployed"), datasize("CrossDomainMessengerLegacySpacer0_897_deployed"))
        return(_1, datasize("CrossDomainMessengerLegacySpacer0_897_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_CrossDomainMessengerLegacySpacer0_897()
        { }
    }
    /// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
    object "CrossDomainMessengerLegacySpacer0_897_deployed" {
        code {
            /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
            mstore(64, memoryguard(128))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220081d280fcd0b806f2ac4275b0b76436cce5ae6a453eff743296d48b117d1de1a64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
object "CrossDomainMessengerLegacySpacer1_938" {
    code {
        /// @src 28:1210:3196  "contract CrossDomainMessengerLegacySpacer1 {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        constructor_CrossDomainMessengerLegacySpacer1_938()
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("CrossDomainMessengerLegacySpacer1_938_deployed"), datasize("CrossDomainMessengerLegacySpacer1_938_deployed"))
        return(_1, datasize("CrossDomainMessengerLegacySpacer1_938_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_CrossDomainMessengerLegacySpacer1_938()
        { }
    }
    /// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
    object "CrossDomainMessengerLegacySpacer1_938_deployed" {
        code {
            /// @src 28:1210:3196  "contract CrossDomainMessengerLegacySpacer1 {..."
            mstore(64, memoryguard(128))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a26469706673582212200dbf38a6df10a2ccd1bf0c3f879ce406aef53a069d5593dce7aa9c0621458d3f64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 29:"contracts/universal/Semver.sol"
object "Semver_1483" {
    code {
        /// @src 29:223:1431  "contract Semver {..."
        mstore(64, memoryguard(224))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1, _2, _3 := copy_arguments_for_constructor_1454_object_Semver_1483()
        constructor_Semver_1483(_1, _2, _3)
        let _4 := allocate_unbounded()
        codecopy(_4, dataoffset("Semver_1483_deployed"), datasize("Semver_1483_deployed"))
        setimmutable(_4, "1425", mload(128))
        setimmutable(_4, "1428", mload(160))
        setimmutable(_4, "1431", mload(192))
        return(_4, datasize("Semver_1483_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function round_up_to_mul_of_32(value) -> result
        {
            result := and(add(value, 31), not(31))
        }
        function panic_error_0x41()
        {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }
        function finalize_allocation(memPtr, size)
        {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }
        function allocate_memory(size) -> memPtr
        {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }
        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
        { revert(0, 0) }
        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()
        { revert(0, 0) }
        function cleanup_t_uint256(value) -> cleaned
        { cleaned := value }
        function validator_revert_t_uint256(value)
        {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }
        function abi_decode_t_uint256_fromMemory(offset, end) -> value
        {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }
        function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2
        {
            if slt(sub(dataEnd, headStart), 96)
            {
                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            }
            {
                let offset := 0
                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 64
                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }
        }
        function copy_arguments_for_constructor_1454_object_Semver_1483() -> ret_param_0, ret_param_1, ret_param_2
        {
            let programSize := datasize("Semver_1483")
            let argSize := sub(codesize(), programSize)
            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)
            ret_param_0, ret_param_1, ret_param_2 := abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }
        /// @ast-id 1454 @src 29:726:919  "constructor(..."
        function constructor_Semver_1483(var__major_1434, var__minor_1436, var__patch_1438)
        {
            /// @src 29:842:848  "_major"
            let _5 := var__major_1434
            let expr_1442 := _5
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _6 := expr_1442
            mstore(128, _6)
            let expr_1443 := expr_1442
            /// @src 29:874:880  "_minor"
            let _7 := var__minor_1436
            let expr_1446 := _7
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _8 := expr_1446
            mstore(160, _8)
            let expr_1447 := expr_1446
            /// @src 29:906:912  "_patch"
            let _9 := var__patch_1438
            let expr_1450 := _9
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _10 := expr_1450
            mstore(192, _10)
            let expr_1451 := expr_1450
        }
    }
    /// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 29:"contracts/universal/Semver.sol"
    object "Semver_1483_deployed" {
        code {
            /// @src 29:223:1431  "contract Semver {..."
            mstore(64, memoryguard(128))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector
                case 0x54fd4d50 { external_fun_version_1482() }
                default { }
            }
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode_tuple_(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function array_length_t_string_memory_ptr(value) -> length
            { length := mload(value) }
            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos
            {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }
            function copy_memory_to_memory(src, dst, length)
            {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length) { mstore(add(dst, length), 0) }
            }
            function round_up_to_mul_of_32(value) -> result
            {
                result := and(add(value, 31), not(31))
            }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }
            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0, tail)
            }
            function external_fun_version_1482()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 := fun_version_1482()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos, ret_0)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function zero_value_for_split_t_string_memory_ptr() -> ret
            { ret := 96 }
            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos
            { updated_pos := pos }
            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end
            {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }
            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr)
            { mstore(add(memPtr, 0), ".") }
            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end
            {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }
            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos, value0, value1, value2) -> end
            {
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1, pos)
                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos)
                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2, pos)
                end := pos
            }
            function panic_error_0x41()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function finalize_allocation(memPtr, size)
            {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted
            { converted := value }
            /// @ast-id 1482 @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1482() -> var__1458_mpos
            {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_1_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1458_mpos := zero_t_string_memory_ptr_1_mpos
                /// @src 29:1203:1210  "Strings"
                let expr_1464_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _2 := loadimmutable("1425")
                let expr_1466 := _2
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1467_mpos := fun_toString_3909(expr_1466)
                /// @src 29:1281:1288  "Strings"
                let expr_1469_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _3 := loadimmutable("1428")
                let expr_1471 := _3
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1472_mpos := fun_toString_3909(expr_1471)
                /// @src 29:1359:1366  "Strings"
                let expr_1474_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _4 := loadimmutable("1431")
                let expr_1476 := _4
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1477_mpos := fun_toString_3909(expr_1476)
                /// @src 29:1165:1408  "abi.encodePacked(..."
                let expr_1478_mpos := allocate_unbounded()
                let _5 := add(expr_1478_mpos, 0x20)
                let _6 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_5, expr_1467_mpos, expr_1472_mpos, expr_1477_mpos)
                mstore(expr_1478_mpos, sub(_6, add(expr_1478_mpos, 0x20)))
                finalize_allocation(expr_1478_mpos, sub(_6, expr_1478_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1479_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1478_mpos)
                /// @src 29:1122:1422  "return..."
                var__1458_mpos := expr_1479_mpos
                leave
            }
            /// @src 29:223:1431  "contract Semver {..."
            function cleanup_t_uint256(value) -> cleaned
            { cleaned := value }
            function cleanup_t_rational_0_by_1(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }
            function array_allocation_size_t_string_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr)
            { mstore(add(memPtr, 0), "0") }
            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr
            {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }
            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted
            {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }
            function zero_value_for_split_t_uint256() -> ret
            { ret := 0 }
            function panic_error_0x11()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function increment_t_uint256(value) -> ret
            {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }
            function cleanup_t_rational_10_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }
            function panic_error_0x12()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }
            function checked_div_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := div(x, y)
            }
            function array_allocation_size_t_bytes_memory_ptr(length) -> size
            {
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }
                size := round_up_to_mul_of_32(length)
                size := add(size, 0x20)
            }
            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)
                mstore(memPtr, length)
            }
            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes)
            {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }
            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr
            {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)
                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)
                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }
            function cleanup_t_rational_1_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }
            function checked_sub_t_uint256(x, y) -> diff
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if lt(x, y) { panic_error_0x11() }
                diff := sub(x, y)
            }
            function mod_t_uint256(x, y) -> r
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }
            function cleanup_t_rational_48_by_1(value) -> cleaned
            { cleaned := value }
            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted
            {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }
            function checked_add_t_uint256(x, y) -> sum
            {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }
                sum := add(x, y)
            }
            function cleanup_t_uint8(value) -> cleaned
            { cleaned := and(value, 0xff) }
            function convert_t_uint256_to_t_uint8(value) -> converted
            {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }
            function cleanup_t_bytes1(value) -> cleaned
            {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }
            function shift_left_248(value) -> newValue
            { newValue := shl(248, value) }
            function convert_t_uint8_to_t_bytes1(value) -> converted
            {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }
            function panic_error_0x32()
            {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function array_length_t_bytes_memory_ptr(value) -> length
            { length := mload(value) }
            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr
            {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) { panic_error_0x32() }
                let offset := mul(index, 1)
                offset := add(offset, 32)
                addr := add(baseRef, offset)
            }
            /// @ast-id 3909 @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3909(var_value_3833) -> var__3836_mpos
            {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_7_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3836_mpos := zero_t_string_memory_ptr_7_mpos
                /// @src 6:665:670  "value"
                let _8 := var_value_3833
                let expr_3838 := _8
                /// @src 6:674:675  "0"
                let expr_3839 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3840 := eq(cleanup_t_uint256(expr_3838), convert_t_rational_0_by_1_to_t_uint256(expr_3839))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3840
                {
                    /// @src 6:691:701  "return \"0\""
                    var__3836_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                }
                /// @src 6:736:741  "value"
                let _9 := var_value_3833
                let expr_3847 := _9
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3846 := expr_3847
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3850
                let zero_t_uint256_10 := zero_value_for_split_t_uint256()
                var_digits_3850 := zero_t_uint256_10
                /// @src 6:775:850  "while (temp != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:782:786  "temp"
                    let _11 := var_temp_3846
                    let expr_3852 := _11
                    /// @src 6:790:791  "0"
                    let expr_3853 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3854 := iszero(eq(cleanup_t_uint256(expr_3852), convert_t_rational_0_by_1_to_t_uint256(expr_3853)))
                    if iszero(expr_3854) { break }
                    /// @src 6:807:815  "digits++"
                    let _13 := var_digits_3850
                    let _12 := increment_t_uint256(_13)
                    var_digits_3850 := _12
                    let expr_3856 := _13
                    /// @src 6:837:839  "10"
                    let expr_3859 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _14 := convert_t_rational_10_by_1_to_t_uint256(expr_3859)
                    let _15 := var_temp_3846
                    let expr_3860 := checked_div_t_uint256(_15, _14)
                    var_temp_3846 := expr_3860
                }
                /// @src 6:891:897  "digits"
                let _16 := var_digits_3850
                let expr_3868 := _16
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3869_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3868)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3865_mpos := expr_3869_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for { } 1 { }
                {
                    /// @src 6:915:920  "value"
                    let _17 := var_value_3833
                    let expr_3871 := _17
                    /// @src 6:924:925  "0"
                    let expr_3872 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3873 := iszero(eq(cleanup_t_uint256(expr_3871), convert_t_rational_0_by_1_to_t_uint256(expr_3872)))
                    if iszero(expr_3873) { break }
                    /// @src 6:951:952  "1"
                    let expr_3875 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _18 := convert_t_rational_1_by_1_to_t_uint256(expr_3875)
                    let _19 := var_digits_3850
                    let expr_3876 := checked_sub_t_uint256(_19, _18)
                    var_digits_3850 := expr_3876
                    /// @src 6:996:998  "48"
                    let expr_3885 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _20 := var_value_3833
                    let expr_3888 := _20
                    /// @src 6:1017:1019  "10"
                    let expr_3889 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3890 := mod_t_uint256(expr_3888, convert_t_rational_10_by_1_to_t_uint256(expr_3889))
                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3891 := expr_3890
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3892 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3885), expr_3891)
                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3893 := convert_t_uint256_to_t_uint8(expr_3892)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3894 := convert_t_uint8_to_t_bytes1(expr_3893)
                    /// @src 6:966:972  "buffer"
                    let _21_mpos := var_buffer_3865_mpos
                    let expr_3878_mpos := _21_mpos
                    /// @src 6:973:979  "digits"
                    let _22 := var_digits_3850
                    let expr_3879 := _22
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _23 := expr_3894
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3878_mpos, expr_3879), byte(0, _23))
                    let expr_3895 := expr_3894
                    /// @src 6:1045:1047  "10"
                    let expr_3898 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _24 := convert_t_rational_10_by_1_to_t_uint256(expr_3898)
                    let _25 := var_value_3833
                    let expr_3899 := checked_div_t_uint256(_25, _24)
                    var_value_3833 := expr_3899
                }
                /// @src 6:1081:1087  "buffer"
                let _26_mpos := var_buffer_3865_mpos
                let expr_3905_mpos := _26_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3906_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3905_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3836_mpos := expr_3906_mpos
                leave
            }
        }
        data ".metadata" hex"a26469706673582212205560938468ae24a1d742f2dd2d854bcbc20f27507cb92a398ccd97d39e4ab22d64736f6c634300080f0033"
    }
}

Optimized IR:
/// @use-src 30:"contracts/vendor/AddressAliasHelper.sol"
object "AddressAliasHelper_3377" {
    code {
        /// @src 30:674:1732  "library AddressAliasHelper {..."
        mstore(64, memoryguard(128))
        if callvalue()
        {
            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        }
        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("AddressAliasHelper_3377_deployed"), datasize("AddressAliasHelper_3377_deployed"))
        setimmutable(_1, "library_deploy_address", address())
        return(_1, datasize("AddressAliasHelper_3377_deployed"))
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
        function constructor_AddressAliasHelper_3377()
        { }
    }
    /// @use-src 30:"contracts/vendor/AddressAliasHelper.sol"
    object "AddressAliasHelper_3377_deployed" {
        code {
            /// @src 30:674:1732  "library AddressAliasHelper {..."
            mstore(64, memoryguard(128))
            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))
            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            function shift_right_224_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
        }
        data ".metadata" hex"a2646970667358221220be2decf563b8aab2375182e756cb41fa2b7e6dc7e4f116987b8d4c733d8121d164736f6c634300080f0033"
    }
}


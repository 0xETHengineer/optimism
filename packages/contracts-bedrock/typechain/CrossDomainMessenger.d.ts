/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrossDomainMessengerInterface extends ethers.utils.Interface {
  functions: {
    "MESSAGE_VERSION()": FunctionFragment;
    "MIN_GAS_CONSTANT_OVERHEAD()": FunctionFragment;
    "MIN_GAS_DYNAMIC_OVERHEAD()": FunctionFragment;
    "baseGas(bytes)": FunctionFragment;
    "blockedSystemAddresses(address)": FunctionFragment;
    "messageNonce()": FunctionFragment;
    "otherMessenger()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "receivedMessages(bytes32)": FunctionFragment;
    "relayMessage(uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendMessage(address,bytes,uint32)": FunctionFragment;
    "successfulMessages(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "xDomainMessageSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MESSAGE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_CONSTANT_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseGas", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "blockedSystemAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "messageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "otherMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessage",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_CONSTANT_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockedSystemAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;

  events: {
    "FailedRelayedMessage(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RelayedMessage(bytes32)": EventFragment;
    "SentMessage(address,address,bytes,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FailedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type FailedRelayedMessageEvent = TypedEvent<
  [string] & { msgHash: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RelayedMessageEvent = TypedEvent<[string] & { msgHash: string }>;

export type SentMessageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    target: string;
    sender: string;
    message: string;
    messageNonce: BigNumber;
    gasLimit: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class CrossDomainMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrossDomainMessengerInterface;

  functions: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<[number]>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<[number]>;

    MIN_GAS_DYNAMIC_OVERHEAD(overrides?: CallOverrides): Promise<[number]>;

    baseGas(_message: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    blockedSystemAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    messageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    otherMessenger(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    receivedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _minGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
  };

  MESSAGE_VERSION(overrides?: CallOverrides): Promise<number>;

  MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<number>;

  MIN_GAS_DYNAMIC_OVERHEAD(overrides?: CallOverrides): Promise<number>;

  baseGas(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

  blockedSystemAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  otherMessenger(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  receivedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  relayMessage(
    _nonce: BigNumberish,
    _sender: string,
    _target: string,
    _value: BigNumberish,
    _minGasLimit: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _target: string,
    _message: BytesLike,
    _minGasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  successfulMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<number>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<number>;

    MIN_GAS_DYNAMIC_OVERHEAD(overrides?: CallOverrides): Promise<number>;

    baseGas(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

    blockedSystemAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    otherMessenger(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    receivedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _minGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FailedRelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): TypedEventFilter<[string], { msgHash: string }>;

    FailedRelayedMessage(
      msgHash?: BytesLike | null
    ): TypedEventFilter<[string], { msgHash: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): TypedEventFilter<[string], { msgHash: string }>;

    RelayedMessage(
      msgHash?: BytesLike | null
    ): TypedEventFilter<[string], { msgHash: string }>;

    "SentMessage(address,address,bytes,uint256,uint256)"(
      target?: string | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        target: string;
        sender: string;
        message: string;
        messageNonce: BigNumber;
        gasLimit: BigNumber;
      }
    >;

    SentMessage(
      target?: string | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        target: string;
        sender: string;
        message: string;
        messageNonce: BigNumber;
        gasLimit: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_DYNAMIC_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    baseGas(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    blockedSystemAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    otherMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    receivedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _minGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_GAS_CONSTANT_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_GAS_DYNAMIC_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseGas(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockedSystemAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _minGasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    successfulMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L2OutputOracleInterface extends ethers.utils.Interface {
  functions: {
    "HISTORICAL_TOTAL_BLOCKS()": FunctionFragment;
    "L2_BLOCK_TIME()": FunctionFragment;
    "STARTING_BLOCK_TIMESTAMP()": FunctionFragment;
    "SUBMISSION_INTERVAL()": FunctionFragment;
    "appendL2Output(bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "computeL2BlockNumber(uint256)": FunctionFragment;
    "deleteL2Output((bytes32,uint256))": FunctionFragment;
    "getL2Output(uint256)": FunctionFragment;
    "latestBlockTimestamp()": FunctionFragment;
    "nextTimestamp()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "HISTORICAL_TOTAL_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L2_BLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STARTING_BLOCK_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appendL2Output",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeL2BlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteL2Output",
    values: [{ outputRoot: BytesLike; timestamp: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2Output",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "HISTORICAL_TOTAL_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L2_BLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARTING_BLOCK_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appendL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeL2BlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "l2OutputAppended(bytes32,uint256,uint256)": EventFragment;
    "l2OutputDeleted(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "l2OutputAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "l2OutputDeleted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type l2OutputAppendedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _l2Output: string;
    _l1Timestamp: BigNumber;
    _l2timestamp: BigNumber;
  }
>;

export type l2OutputDeletedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _l2Output: string;
    _l1Timestamp: BigNumber;
    _l2timestamp: BigNumber;
  }
>;

export class L2OutputOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L2OutputOracleInterface;

  functions: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    STARTING_BLOCK_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    appendL2Output(
      _l2Output: BytesLike,
      _l2timestamp: BigNumberish,
      _l1Blockhash: BytesLike,
      _l1Blocknumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeL2BlockNumber(
      _l2timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deleteL2Output(
      _proposal: { outputRoot: BytesLike; timestamp: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getL2Output(
      _l2Timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { outputRoot: string; timestamp: BigNumber }]
    >;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  STARTING_BLOCK_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  appendL2Output(
    _l2Output: BytesLike,
    _l2timestamp: BigNumberish,
    _l1Blockhash: BytesLike,
    _l1Blocknumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeL2BlockNumber(
    _l2timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deleteL2Output(
    _proposal: { outputRoot: BytesLike; timestamp: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getL2Output(
    _l2Timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { outputRoot: string; timestamp: BigNumber }
  >;

  latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  nextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_BLOCK_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    appendL2Output(
      _l2Output: BytesLike,
      _l2timestamp: BigNumberish,
      _l1Blockhash: BytesLike,
      _l1Blocknumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    computeL2BlockNumber(
      _l2timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Output(
      _proposal: { outputRoot: BytesLike; timestamp: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    getL2Output(
      _l2Timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { outputRoot: string; timestamp: BigNumber }
    >;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "l2OutputAppended(bytes32,uint256,uint256)"(
      _l2Output?: BytesLike | null,
      _l1Timestamp?: BigNumberish | null,
      _l2timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _l2Output: string; _l1Timestamp: BigNumber; _l2timestamp: BigNumber }
    >;

    l2OutputAppended(
      _l2Output?: BytesLike | null,
      _l1Timestamp?: BigNumberish | null,
      _l2timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _l2Output: string; _l1Timestamp: BigNumber; _l2timestamp: BigNumber }
    >;

    "l2OutputDeleted(bytes32,uint256,uint256)"(
      _l2Output?: BytesLike | null,
      _l1Timestamp?: BigNumberish | null,
      _l2timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _l2Output: string; _l1Timestamp: BigNumber; _l2timestamp: BigNumber }
    >;

    l2OutputDeleted(
      _l2Output?: BytesLike | null,
      _l1Timestamp?: BigNumberish | null,
      _l2timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _l2Output: string; _l1Timestamp: BigNumber; _l2timestamp: BigNumber }
    >;
  };

  estimateGas: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_BLOCK_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    appendL2Output(
      _l2Output: BytesLike,
      _l2timestamp: BigNumberish,
      _l1Blockhash: BytesLike,
      _l1Blocknumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeL2BlockNumber(
      _l2timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Output(
      _proposal: { outputRoot: BytesLike; timestamp: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getL2Output(
      _l2Timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nextTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HISTORICAL_TOTAL_BLOCKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STARTING_BLOCK_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBMISSION_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendL2Output(
      _l2Output: BytesLike,
      _l2timestamp: BigNumberish,
      _l1Blockhash: BytesLike,
      _l1Blocknumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeL2BlockNumber(
      _l2timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteL2Output(
      _proposal: { outputRoot: BytesLike; timestamp: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getL2Output(
      _l2Timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

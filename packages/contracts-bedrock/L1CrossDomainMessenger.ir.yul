IR:

IR:

IR:

/// @use-src 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
object "AddressUpgradeable_5834" {
    code {
        /// @src 2:194:7366  "library AddressUpgradeable {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("AddressUpgradeable_5834_deployed"), datasize("AddressUpgradeable_5834_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("AddressUpgradeable_5834_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 2:194:7366  "library AddressUpgradeable {..."
        function constructor_AddressUpgradeable_5834() {

            /// @src 2:194:7366  "library AddressUpgradeable {..."

        }
        /// @src 2:194:7366  "library AddressUpgradeable {..."

    }
    /// @use-src 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
    object "AddressUpgradeable_5834_deployed" {
        code {
            /// @src 2:194:7366  "library AddressUpgradeable {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220ee29612122b40341337adad56f51d5e715df4561a9699773f6fe9cbad2783cc264736f6c634300080f0033"
    }

}


IR:

IR:

IR:

/// @use-src 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol"
object "Address_4260" {
    code {
        /// @src 5:194:8305  "library Address {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Address_4260_deployed"), datasize("Address_4260_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Address_4260_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 5:194:8305  "library Address {..."
        function constructor_Address_4260() {

            /// @src 5:194:8305  "library Address {..."

        }
        /// @src 5:194:8305  "library Address {..."

    }
    /// @use-src 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol"
    object "Address_4260_deployed" {
        code {
            /// @src 5:194:8305  "library Address {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212206bd9b3f4b0ca9199dce5ddc1537c9680203beba98ff6e72664857d06a8cb9bc864736f6c634300080f0033"
    }

}


IR:

/// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol"
object "Strings_3965" {
    code {
        /// @src 6:161:2396  "library Strings {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Strings_3965_deployed"), datasize("Strings_3965_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Strings_3965_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 6:161:2396  "library Strings {..."
        function constructor_Strings_3965() {

            /// @src 6:161:2396  "library Strings {..."

        }
        /// @src 6:161:2396  "library Strings {..."

    }
    /// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol"
    object "Strings_3965_deployed" {
        code {
            /// @src 6:161:2396  "library Strings {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122013acc81d429affb465e9a910ed88be13af82ac7c13f78a47b7caceaa29a0e53d64736f6c634300080f0033"
    }

}


IR:

/// @use-src 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol"
object "Math_4764" {
    code {
        /// @src 7:202:8826  "library Math {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Math_4764_deployed"), datasize("Math_4764_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Math_4764_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 7:202:8826  "library Math {..."
        function constructor_Math_4764() {

            /// @src 7:202:8826  "library Math {..."

        }
        /// @src 7:202:8826  "library Math {..."

    }
    /// @use-src 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol"
    object "Math_4764_deployed" {
        code {
            /// @src 7:202:8826  "library Math {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212209a65d3c2d4e00394eda1a1408f8a1dc41750e8dcc6c91020c200c3071e74333964736f6c634300080f0033"
    }

}


IR:

/// @use-src 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol"
object "SignedMath_6446" {
    code {
        /// @src 8:215:1263  "library SignedMath {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SignedMath_6446_deployed"), datasize("SignedMath_6446_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("SignedMath_6446_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 8:215:1263  "library SignedMath {..."
        function constructor_SignedMath_6446() {

            /// @src 8:215:1263  "library SignedMath {..."

        }
        /// @src 8:215:1263  "library SignedMath {..."

    }
    /// @use-src 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol"
    object "SignedMath_6446_deployed" {
        code {
            /// @src 8:215:1263  "library SignedMath {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220a8f632505579f7ef6112037ebfd64d91e2a8258a0921e0323d2b7beda244d6e164736f6c634300080f0033"
    }

}


IR:

/// @use-src 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol"
object "FixedPointMathLib_7025" {
    code {
        /// @src 9:234:15905  "library FixedPointMathLib {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("FixedPointMathLib_7025_deployed"), datasize("FixedPointMathLib_7025_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("FixedPointMathLib_7025_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 9:234:15905  "library FixedPointMathLib {..."
        function constructor_FixedPointMathLib_7025() {

            /// @src 9:234:15905  "library FixedPointMathLib {..."

        }
        /// @src 9:234:15905  "library FixedPointMathLib {..."

    }
    /// @use-src 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol"
    object "FixedPointMathLib_7025_deployed" {
        code {
            /// @src 9:234:15905  "library FixedPointMathLib {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122054b8cc197ef58cddbfb8aadcc94042f14187de20fa092733016604005f1f23bf64736f6c634300080f0033"
    }

}


IR:

/// @use-src 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 10:"contracts/L1/L1CrossDomainMessenger.sol", 18:"contracts/libraries/Constants.sol", 21:"contracts/libraries/Predeploys.sol", 28:"contracts/universal/CrossDomainMessenger.sol", 29:"contracts/universal/Semver.sol"
object "L1CrossDomainMessenger_125" {
    code {
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
        mstore(64, memoryguard(288))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := copy_arguments_for_constructor_42_object_L1CrossDomainMessenger_125()
        constructor_L1CrossDomainMessenger_125(_1)

        let _2 := allocate_unbounded()
        codecopy(_2, dataoffset("L1CrossDomainMessenger_125_deployed"), datasize("L1CrossDomainMessenger_125_deployed"))

        setimmutable(_2, "939", mload(128))

        setimmutable(_2, "1367", mload(160))

        setimmutable(_2, "1370", mload(192))

        setimmutable(_2, "1373", mload(224))

        setimmutable(_2, "18", mload(256))

        return(_2, datasize("L1CrossDomainMessenger_125_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        function round_up_to_mul_of_32(value) -> result {
            result := and(add(value, 31), not(31))
        }

        function panic_error_0x41() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }

        function finalize_allocation(memPtr, size) {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            // protect against overflow
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }

        function allocate_memory(size) -> memPtr {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }

        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
            revert(0, 0)
        }

        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
            revert(0, 0)
        }

        function cleanup_t_uint160(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function cleanup_t_address_payable(value) -> cleaned {
            cleaned := cleanup_t_uint160(value)
        }

        function cleanup_t_contract$_OptimismPortal_$775(value) -> cleaned {
            cleaned := cleanup_t_address_payable(value)
        }

        function validator_revert_t_contract$_OptimismPortal_$775(value) {
            if iszero(eq(value, cleanup_t_contract$_OptimismPortal_$775(value))) { revert(0, 0) }
        }

        function abi_decode_t_contract$_OptimismPortal_$775_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_contract$_OptimismPortal_$775(value)
        }

        function abi_decode_tuple_t_contract$_OptimismPortal_$775_fromMemory(headStart, dataEnd) -> value0 {
            if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            {

                let offset := 0

                value0 := abi_decode_t_contract$_OptimismPortal_$775_fromMemory(add(headStart, offset), dataEnd)
            }

        }

        function copy_arguments_for_constructor_42_object_L1CrossDomainMessenger_125() -> ret_param_0 {
            let programSize := datasize("L1CrossDomainMessenger_125")
            let argSize := sub(codesize(), programSize)

            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)

            ret_param_0 := abi_decode_tuple_t_contract$_OptimismPortal_$775_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }

        function cleanup_t_rational_1_by_1(value) -> cleaned {
            cleaned := value
        }

        function cleanup_t_uint256(value) -> cleaned {
            cleaned := value
        }

        function identity(value) -> ret {
            ret := value
        }

        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }

        function cleanup_t_rational_0_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }

        /// @src 21:462:566  "address internal constant L2_CROSS_DOMAIN_MESSENGER =..."
        function constant_L2_CROSS_DOMAIN_MESSENGER_786() -> ret {
            /// @src 21:524:566  "0x4200000000000000000000000000000000000007"
            let expr_785 := 0x4200000000000000000000000000000000000007
            let _6 := expr_785

            ret := _6
        }

        /// @ast-id 42
        /// @src 10:936:1122  "constructor(OptimismPortal _portal)..."
        function constructor_L1CrossDomainMessenger_125(var__portal_22_address) {
            /// @src 10:987:988  "1"
            let expr_25 := 0x01
            let _3 := convert_t_rational_1_by_1_to_t_uint256(expr_25)
            /// @src 10:990:991  "1"
            let expr_26 := 0x01
            let _4 := convert_t_rational_1_by_1_to_t_uint256(expr_26)
            /// @src 10:993:994  "0"
            let expr_27 := 0x00
            let _5 := convert_t_rational_0_by_1_to_t_uint256(expr_27)
            /// @src 10:1025:1035  "Predeploys"
            let expr_30_address := linkersymbol("contracts/libraries/Predeploys.sol:Predeploys")
            /// @src 10:1025:1061  "Predeploys.L2_CROSS_DOMAIN_MESSENGER"
            let expr_31 := constant_L2_CROSS_DOMAIN_MESSENGER_786()
            let _7 := expr_31

            /// @src 10:936:1122  "constructor(OptimismPortal _portal)..."
            constructor_Semver_1425(_3, _4, _5, _7)

            /// @src 10:1086:1093  "_portal"
            let _8_address := var__portal_22_address
            let expr_35_address := _8_address
            /// @src 10:1077:1093  "PORTAL = _portal"
            let _9_address := expr_35_address
            mstore(256, _9_address)
            let expr_36_address := expr_35_address
            fun_initialize_52()

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @ast-id 1396
        /// @src 29:726:919  "constructor(..."
        function constructor_Semver_1425(var__major_1376, var__minor_1378, var__patch_1380, _7) {

            /// @src 29:726:919  "constructor(..."
            constructor_CrossDomainMessenger_1359(_7)

            /// @src 29:842:848  "_major"
            let _10 := var__major_1376
            let expr_1384 := _10
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _11 := expr_1384
            mstore(160, _11)
            let expr_1385 := expr_1384
            /// @src 29:874:880  "_minor"
            let _12 := var__minor_1378
            let expr_1388 := _12
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _13 := expr_1388
            mstore(192, _13)
            let expr_1389 := expr_1388
            /// @src 29:906:912  "_patch"
            let _14 := var__patch_1380
            let expr_1392 := _14
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _15 := expr_1392
            mstore(224, _15)
            let expr_1393 := expr_1392

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @ast-id 1006
        /// @src 28:8100:8187  "constructor(address _otherMessenger) {..."
        function constructor_CrossDomainMessenger_1359(var__otherMessenger_998) {

            /// @src 28:8100:8187  "constructor(address _otherMessenger) {..."
            constructor_CrossDomainMessengerLegacySpacer1_909()

            /// @src 28:8165:8180  "_otherMessenger"
            let _16 := var__otherMessenger_998
            let expr_1002 := _16
            /// @src 28:8147:8180  "OTHER_MESSENGER = _otherMessenger"
            let _17 := expr_1002
            mstore(128, _17)
            let expr_1003 := expr_1002

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."
        function constructor_CrossDomainMessengerLegacySpacer1_909() {

            /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."
            constructor_Initializable_3446()

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @src 1:2383:5669  "abstract contract Initializable {..."
        function constructor_Initializable_3446() {

            /// @src 1:2383:5669  "abstract contract Initializable {..."
            constructor_CrossDomainMessengerLegacySpacer0_868()

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
        function constructor_CrossDomainMessengerLegacySpacer0_868() {

            /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        function shift_right_168_unsigned(value) -> newValue {
            newValue :=

            shr(168, value)

        }

        function cleanup_from_storage_t_bool(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_21t_bool(slot_value) -> value {
            value := cleanup_from_storage_t_bool(shift_right_168_unsigned(slot_value))
        }

        function read_from_storage_split_offset_21_t_bool(slot) -> value {
            value := extract_from_storage_value_offset_21t_bool(sload(slot))

        }

        function cleanup_t_bool(value) -> cleaned {
            cleaned := iszero(iszero(value))
        }

        function shift_right_160_unsigned(value) -> newValue {
            newValue :=

            shr(160, value)

        }

        function cleanup_from_storage_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_20t_uint8(slot_value) -> value {
            value := cleanup_from_storage_t_uint8(shift_right_160_unsigned(slot_value))
        }

        function read_from_storage_split_offset_20_t_uint8(slot) -> value {
            value := extract_from_storage_value_offset_20t_uint8(sload(slot))

        }

        function cleanup_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }

        function convert_t_uint160_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }

        function convert_t_uint160_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_contract$_Initializable_$3446_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }

        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is alrea")

            mstore(add(memPtr, 32), "dy initialized")

        }

        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function shift_left_160(value) -> newValue {
            newValue :=

            shl(160, value)

        }

        function update_byte_slice_1_shift_20(value, toInsert) -> result {
            let mask := 0xff0000000000000000000000000000000000000000
            toInsert := shift_left_160(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint8_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }

        function prepare_store_t_uint8(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_20t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_20(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_168(value) -> newValue {
            newValue :=

            shl(168, value)

        }

        function update_byte_slice_1_shift_21(value, toInsert) -> result {
            let mask := 0xff000000000000000000000000000000000000000000
            toInsert := shift_left_168(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_bool_to_t_bool(value) -> converted {
            converted := cleanup_t_bool(value)
        }

        function prepare_store_t_bool(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_21t_bool_to_t_bool(slot, value_0) {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_21(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }

        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }

        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
            tail := add(headStart, 32)

            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

        }

        /// @ast-id 3366
        /// @src 1:3078:3584  "modifier initializer() {..."
        function modifier_initializer_46() {

            /// @src 1:3134:3147  "_initializing"
            let _18 := read_from_storage_split_offset_21_t_bool(0x00)
            let expr_3315 := _18
            /// @src 1:3133:3147  "!_initializing"
            let expr_3316 := cleanup_t_bool(iszero(expr_3315))
            /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_3314 := expr_3316
            /// @src 1:3179:3193  "isTopLevelCall"
            let _19 := var_isTopLevelCall_3314
            let expr_3319 := _19
            /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
            let expr_3323 := expr_3319
            if expr_3323 {
                /// @src 1:3197:3209  "_initialized"
                let _20 := read_from_storage_split_offset_20_t_uint8(0x00)
                let expr_3320 := _20
                /// @src 1:3212:3213  "1"
                let expr_3321 := 0x01
                /// @src 1:3197:3213  "_initialized < 1"
                let expr_3322 := lt(cleanup_t_uint8(expr_3320), convert_t_rational_1_by_1_to_t_uint8(expr_3321))
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                expr_3323 := expr_3322
            }
            /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
            let expr_3324 := expr_3323
            /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
            let expr_3338 := expr_3324
            if iszero(expr_3338) {
                /// @src 1:3220:3238  "AddressUpgradeable"
                let expr_3325_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                /// @src 1:3258:3262  "this"
                let expr_3329_address := address()
                /// @src 1:3250:3263  "address(this)"
                let expr_3330 := convert_t_contract$_Initializable_$3446_to_t_address(expr_3329_address)
                /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                let expr_3331 := fun_isContract_5609(expr_3330)
                /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                let expr_3332 := cleanup_t_bool(iszero(expr_3331))
                /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                let expr_3336 := expr_3332
                if expr_3336 {
                    /// @src 1:3268:3280  "_initialized"
                    let _21 := read_from_storage_split_offset_20_t_uint8(0x00)
                    let expr_3333 := _21
                    /// @src 1:3284:3285  "1"
                    let expr_3334 := 0x01
                    /// @src 1:3268:3285  "_initialized == 1"
                    let expr_3335 := eq(cleanup_t_uint8(expr_3333), convert_t_rational_1_by_1_to_t_uint8(expr_3334))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    expr_3336 := expr_3335
                }
                /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3337 := expr_3336
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                expr_3338 := expr_3337
            }
            /// @src 1:3157:3358  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3338)
            /// @src 1:3383:3384  "1"
            let expr_3343 := 0x01
            /// @src 1:3368:3384  "_initialized = 1"
            let _22 := convert_t_rational_1_by_1_to_t_uint8(expr_3343)
            update_storage_value_offset_20t_uint8_to_t_uint8(0x00, _22)
            let expr_3344 := _22
            /// @src 1:3398:3412  "isTopLevelCall"
            let _23 := var_isTopLevelCall_3314
            let expr_3346 := _23
            /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            if expr_3346 {
                /// @src 1:3444:3448  "true"
                let expr_3348 := 0x01
                /// @src 1:3428:3448  "_initializing = true"
                update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3348)
                let expr_3349 := expr_3348
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            }
            /// @src 1:3468:3469  "_"
            fun_initialize_52_inner()
            /// @src 1:3483:3497  "isTopLevelCall"
            let _24 := var_isTopLevelCall_3314
            let expr_3354 := _24
            /// @src 1:3479:3578  "if (isTopLevelCall) {..."
            if expr_3354 {
                /// @src 1:3529:3534  "false"
                let expr_3356 := 0x00
                /// @src 1:3513:3534  "_initializing = false"
                update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3356)
                let expr_3357 := expr_3356
                /// @src 1:3565:3566  "1"
                let expr_3360 := 0x01
                /// @src 1:3553:3567  "Initialized(1)"
                let _25 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _26 := allocate_unbounded()
                    let _27 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_26 , expr_3360)
                    log1(_26, sub(_27, _26) , _25)
                }/// @src 1:3479:3578  "if (isTopLevelCall) {..."
            }

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @src 10:1172:1259  "function initialize() public initializer {..."
        function fun_initialize_52_inner() {

            fun___CrossDomainMessenger_init_1332()

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @ast-id 52
        /// @src 10:1172:1259  "function initialize() public initializer {..."
        function fun_initialize_52() {

            modifier_initializer_46()
        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is not i")

            mstore(add(memPtr, 32), "nitializing")

        }

        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @ast-id 3409
        /// @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_1324() {

            /// @src 1:4910:4923  "_initializing"
            let _28 := read_from_storage_split_offset_21_t_bool(0x00)
            let expr_3403 := _28
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
            /// @src 1:4981:4982  "_"
            fun___CrossDomainMessenger_init_1332_inner()

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
        function constant_DEFAULT_L2_SENDER_2813() -> ret {
            /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
            let expr_2812 := 0xdead
            let _29 := expr_2812

            ret := _29
        }

        function shift_left_0(value) -> newValue {
            newValue :=

            shl(0, value)

        }

        function update_byte_slice_20_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_address_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function prepare_store_t_address(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }

        /// @src 28:16811:16939  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
        function fun___CrossDomainMessenger_init_1332_inner() {

            /// @src 28:16905:16914  "Constants"
            let expr_1327_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
            /// @src 28:16905:16932  "Constants.DEFAULT_L2_SENDER"
            let expr_1328 := constant_DEFAULT_L2_SENDER_2813()
            /// @src 28:16886:16932  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
            update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1328)
            let expr_1329 := expr_1328

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        /// @ast-id 1332
        /// @src 28:16811:16939  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
        function fun___CrossDomainMessenger_init_1332() {

            modifier_onlyInitializing_1324()
        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        function zero_value_for_split_t_bool() -> ret {
            ret := 0
        }

        /// @ast-id 5609
        /// @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_5609(var_account_5597) -> var__5600 {
            /// @src 2:1246:1250  "bool"
            let zero_t_bool_30 := zero_value_for_split_t_bool()
            var__5600 := zero_t_bool_30

            /// @src 2:1476:1483  "account"
            let _31 := var_account_5597
            let expr_5602 := _31
            /// @src 2:1476:1495  "account.code.length"
            let expr_5604 := extcodesize(expr_5602)
            /// @src 2:1498:1499  "0"
            let expr_5605 := 0x00
            /// @src 2:1476:1499  "account.code.length > 0"
            let expr_5606 := gt(cleanup_t_uint256(expr_5604), convert_t_rational_0_by_1_to_t_uint256(expr_5605))
            /// @src 2:1469:1499  "return account.code.length > 0"
            var__5600 := expr_5606
            leave

        }
        /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

    }
    // moose
    /// @use-src 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 10:"contracts/L1/L1CrossDomainMessenger.sol", 18:"contracts/libraries/Constants.sol", 19:"contracts/libraries/Encoding.sol", 20:"contracts/libraries/Hashing.sol", 22:"contracts/libraries/SafeCall.sol", 28:"contracts/universal/CrossDomainMessenger.sol", 29:"contracts/universal/Semver.sol"
    object "L1CrossDomainMessenger_125_deployed" {
        code {
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."
            mstore(64, 128)

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x028f85f7
                {
                    // MIN_GAS_CALLDATA_OVERHEAD()

                    external_fun_MIN_GAS_CALLDATA_OVERHEAD_936()
                }

                case 0x0c568498
                {
                    // MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()

                    external_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932()
                }

                case 0x0ff754ea
                {
                    // PORTAL()

                    external_fun_PORTAL_18()
                }

                case 0x2828d7e8
                {
                    // MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()

                    external_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928()
                }

                case 0x3dbb202b
                {
                    // sendMessage(address,bytes,uint32)

                    external_fun_sendMessage_1063()
                }

                case 0x3f827a5a
                {
                    // MESSAGE_VERSION()

                    external_fun_MESSAGE_VERSION_920()
                }

                case 0x54fd4d50
                {
                    // version()

                    external_fun_version_1424()
                }

                case 0x6e296e45
                {
                    // xDomainMessageSender()

                    external_fun_xDomainMessageSender_1274()
                }

                case 0x7dea7cc3
                {
                    // MIN_GAS_CONSTANT_OVERHEAD()

                    external_fun_MIN_GAS_CONSTANT_OVERHEAD_924()
                }

                case 0x8129fc1c
                {
                    // initialize()

                    external_fun_initialize_52()
                }

                case 0x9fce812c
                {
                    // OTHER_MESSENGER()

                    external_fun_OTHER_MESSENGER_939()
                }

                case 0xa4e7f8bd
                {
                    // failedMessages(bytes32)

                    external_fun_failedMessages_955()
                }

                case 0xb1b1b209
                {
                    // successfulMessages(bytes32)

                    external_fun_successfulMessages_944()
                }

                case 0xb28ade25
                {
                    // baseGas(bytes,uint32)

                    external_fun_baseGas_1320()
                }

                case 0xd764ad0b
                {
                    // relayMessage(uint256,address,address,uint256,uint256,bytes)

                    external_fun_relayMessage_1257()
                }

                case 0xecc70428
                {
                    // messageNonce()

                    external_fun_messageNonce_1287()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function cleanup_t_rational_16_by_1(value) -> cleaned {
                cleaned := value
            }

            function cleanup_t_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }

            function identity(value) -> ret {
                ret := value
            }

            function convert_t_rational_16_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_16_by_1(value)))
            }

            /// @src 28:4588:4641  "uint64 public constant MIN_GAS_CALLDATA_OVERHEAD = 16"
            function constant_MIN_GAS_CALLDATA_OVERHEAD_936() -> ret {
                /// @src 28:4639:4641  "16"
                let expr_935 := 0x10
                let _1 := convert_t_rational_16_by_1_to_t_uint64(expr_935)

                ret := _1
            }

            /// @ast-id 936
            /// @src 28:4588:4641  "uint64 public constant MIN_GAS_CALLDATA_OVERHEAD = 16"
            function getter_fun_MIN_GAS_CALLDATA_OVERHEAD_936() -> ret_0 {
                ret_0 := constant_MIN_GAS_CALLDATA_OVERHEAD_936()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint64(value))
            }

            function abi_encode_tuple_t_uint64__to_t_uint64__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_MIN_GAS_CALLDATA_OVERHEAD_936() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_MIN_GAS_CALLDATA_OVERHEAD_936()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_rational_1000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1000_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_1000_by_1(value)))
            }

            /// @src 28:4416:4482  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 1000"
            function constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932() -> ret {
                /// @src 28:4478:4482  "1000"
                let expr_931 := 0x03e8
                let _2 := convert_t_rational_1000_by_1_to_t_uint64(expr_931)

                ret := _2
            }

            /// @ast-id 932
            /// @src 28:4416:4482  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR = 1000"
            function getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932() -> ret_0 {
                ret_0 := constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function external_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 18
            /// @src 10:762:800  "OptimismPortal public immutable PORTAL"
            function getter_fun_PORTAL_18() -> rval {
                rval := loadimmutable("18")
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function cleanup_t_uint160(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function convert_t_uint160_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }

            function convert_t_uint160_to_t_address_payable(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            function convert_t_contract$_OptimismPortal_$775_to_t_address_payable(value) -> converted {
                converted := convert_t_uint160_to_t_address_payable(value)
            }

            function abi_encode_t_contract$_OptimismPortal_$775_to_t_address_payable_fromStack(value, pos) {
                mstore(pos, convert_t_contract$_OptimismPortal_$775_to_t_address_payable(value))
            }

            function abi_encode_tuple_t_contract$_OptimismPortal_$775__to_t_address_payable__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_contract$_OptimismPortal_$775_to_t_address_payable_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_PORTAL_18() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_PORTAL_18()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_OptimismPortal_$775__to_t_address_payable__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_rational_1016_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1016_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_1016_by_1(value)))
            }

            /// @src 28:4244:4308  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 1016"
            function constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928() -> ret {
                /// @src 28:4304:4308  "1016"
                let expr_927 := 0x03f8
                let _3 := convert_t_rational_1016_by_1_to_t_uint64(expr_927)

                ret := _3
            }

            /// @ast-id 928
            /// @src 28:4244:4308  "uint64 public constant MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR = 1016"
            function getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928() -> ret_0 {
                ret_0 := constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function external_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
                revert(0, 0)
            }

            function cleanup_t_address(value) -> cleaned {
                cleaned := cleanup_t_uint160(value)
            }

            function validator_revert_t_address(value) {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }

            function abi_decode_t_address(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }

            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {
                revert(0, 0)
            }

            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {
                revert(0, 0)
            }

            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {
                revert(0, 0)
            }

            // bytes
            function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {
                if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }
                length := calldataload(offset)
                if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }
                arrayPos := add(offset, 0x20)
                if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }
            }

            function cleanup_t_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }

            function validator_revert_t_uint32(value) {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint32(value)
            }

            function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint32(headStart, dataEnd) -> value0, value1, value2, value3 {
                if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value1, value2 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value3 := abi_decode_t_uint32(add(headStart, offset), dataEnd)
                }

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function external_fun_sendMessage_1063() {

                let param_0, param_1, param_2, param_3 :=  abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint32(4, calldatasize())
                fun_sendMessage_1063(param_0, param_1, param_2, param_3)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_rational_1_by_1(value) -> cleaned {
                cleaned := value
            }

            function cleanup_t_uint16(value) -> cleaned {
                cleaned := and(value, 0xffff)
            }

            function convert_t_rational_1_by_1_to_t_uint16(value) -> converted {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_1_by_1(value)))
            }

            /// @src 28:3945:3987  "uint16 public constant MESSAGE_VERSION = 1"
            function constant_MESSAGE_VERSION_920() -> ret {
                /// @src 28:3986:3987  "1"
                let expr_919 := 0x01
                let _4 := convert_t_rational_1_by_1_to_t_uint16(expr_919)

                ret := _4
            }

            /// @ast-id 920
            /// @src 28:3945:3987  "uint16 public constant MESSAGE_VERSION = 1"
            function getter_fun_MESSAGE_VERSION_920() -> ret_0 {
                ret_0 := constant_MESSAGE_VERSION_920()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint16(value))
            }

            function abi_encode_tuple_t_uint16__to_t_uint16__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_MESSAGE_VERSION_920() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_MESSAGE_VERSION_920()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint16__to_t_uint16__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length)
                {
                    // clear end
                    mstore(add(dst, length), 0)
                }
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_version_1424() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_version_1424()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_t_address_to_t_address_fromStack(value, pos) {
                mstore(pos, cleanup_t_address(value))
            }

            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_xDomainMessageSender_1274() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_xDomainMessageSender_1274()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_rational_200000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_200000_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_200000_by_1(value)))
            }

            /// @src 28:4080:4138  "uint64 public constant MIN_GAS_CONSTANT_OVERHEAD = 200_000"
            function constant_MIN_GAS_CONSTANT_OVERHEAD_924() -> ret {
                /// @src 28:4131:4138  "200_000"
                let expr_923 := 0x030d40
                let _5 := convert_t_rational_200000_by_1_to_t_uint64(expr_923)

                ret := _5
            }

            /// @ast-id 924
            /// @src 28:4080:4138  "uint64 public constant MIN_GAS_CONSTANT_OVERHEAD = 200_000"
            function getter_fun_MIN_GAS_CONSTANT_OVERHEAD_924() -> ret_0 {
                ret_0 := constant_MIN_GAS_CONSTANT_OVERHEAD_924()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function external_fun_MIN_GAS_CONSTANT_OVERHEAD_924() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_MIN_GAS_CONSTANT_OVERHEAD_924()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_initialize_52() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                fun_initialize_52()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 939
            /// @src 28:4751:4791  "address public immutable OTHER_MESSENGER"
            function getter_fun_OTHER_MESSENGER_939() -> rval {
                rval := loadimmutable("939")
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function external_fun_OTHER_MESSENGER_939() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_OTHER_MESSENGER_939()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function validator_revert_t_bytes32(value) {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }

            function abi_decode_t_bytes32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }

            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

            }

            function convert_t_bytes32_to_t_bytes32(value) -> converted {
                converted := cleanup_t_bytes32(value)
            }

            function mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot , key) -> dataSlot {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }

            function shift_right_unsigned_dynamic(bits, value) -> newValue {
                newValue :=

                shr(bits, value)

            }

            function cleanup_from_storage_t_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value {
                value := cleanup_from_storage_t_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_bool(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)

            }

            /// @ast-id 955
            /// @src 28:6080:6126  "mapping(bytes32 => bool) public failedMessages"
            function getter_fun_failedMessages_955(key_0) -> ret {

                let slot := 206
                let offset := 0

                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)

                ret := read_from_storage_split_dynamic_t_bool(slot, offset)

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function cleanup_t_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }

            function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {
                mstore(pos, cleanup_t_bool(value))
            }

            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_failedMessages_955() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 :=  getter_fun_failedMessages_955(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 944
            /// @src 28:5060:5110  "mapping(bytes32 => bool) public successfulMessages"
            function getter_fun_successfulMessages_944(key_0) -> ret {

                let slot := 203
                let offset := 0

                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)

                ret := read_from_storage_split_dynamic_t_bool(slot, offset)

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function external_fun_successfulMessages_944() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 :=  getter_fun_successfulMessages_944(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_decode_tuple_t_bytes_calldata_ptrt_uint32(headStart, dataEnd) -> value0, value1, value2 {
                if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value2 := abi_decode_t_uint32(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_baseGas_1320() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0, param_1, param_2 :=  abi_decode_tuple_t_bytes_calldata_ptrt_uint32(4, calldatasize())
                let ret_0 :=  fun_baseGas_1320(param_0, param_1, param_2)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function validator_revert_t_uint256(value) {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }

            function abi_decode_tuple_t_uint256t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {
                if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value2 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 96

                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 128

                    value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := calldataload(add(headStart, 160))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value5, value6 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_relayMessage_1257() {

                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 :=  abi_decode_tuple_t_uint256t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(4, calldatasize())
                fun_relayMessage_1257(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint256(value))
            }

            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_messageNonce_1287() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_messageNonce_1287()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function shift_right_168_unsigned(value) -> newValue {
                newValue :=

                shr(168, value)

            }

            function extract_from_storage_value_offset_21t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_168_unsigned(slot_value))
            }

            function read_from_storage_split_offset_21_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_21t_bool(sload(slot))

            }

            function shift_right_160_unsigned(value) -> newValue {
                newValue :=

                shr(160, value)

            }

            function cleanup_from_storage_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_20t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_160_unsigned(slot_value))
            }

            function read_from_storage_split_offset_20_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_20t_uint8(sload(slot))

            }

            function cleanup_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_uint160_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            function convert_t_contract$_Initializable_$3446_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is alrea")

                mstore(add(memPtr, 32), "dy initialized")

            }

            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function shift_left_160(value) -> newValue {
                newValue :=

                shl(160, value)

            }

            function update_byte_slice_1_shift_20(value, toInsert) -> result {
                let mask := 0xff0000000000000000000000000000000000000000
                toInsert := shift_left_160(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint8_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }

            function prepare_store_t_uint8(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_20t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_20(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_168(value) -> newValue {
                newValue :=

                shl(168, value)

            }

            function update_byte_slice_1_shift_21(value, toInsert) -> result {
                let mask := 0xff000000000000000000000000000000000000000000
                toInsert := shift_left_168(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_bool_to_t_bool(value) -> converted {
                converted := cleanup_t_bool(value)
            }

            function prepare_store_t_bool(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_21t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_21(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }

            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

            }

            /// @ast-id 3366
            /// @src 1:3078:3584  "modifier initializer() {..."
            function modifier_initializer_46() {

                /// @src 1:3134:3147  "_initializing"
                let _6 := read_from_storage_split_offset_21_t_bool(0x00)
                let expr_3315 := _6
                /// @src 1:3133:3147  "!_initializing"
                let expr_3316 := cleanup_t_bool(iszero(expr_3315))
                /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_3314 := expr_3316
                /// @src 1:3179:3193  "isTopLevelCall"
                let _7 := var_isTopLevelCall_3314
                let expr_3319 := _7
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                let expr_3323 := expr_3319
                if expr_3323 {
                    /// @src 1:3197:3209  "_initialized"
                    let _8 := read_from_storage_split_offset_20_t_uint8(0x00)
                    let expr_3320 := _8
                    /// @src 1:3212:3213  "1"
                    let expr_3321 := 0x01
                    /// @src 1:3197:3213  "_initialized < 1"
                    let expr_3322 := lt(cleanup_t_uint8(expr_3320), convert_t_rational_1_by_1_to_t_uint8(expr_3321))
                    /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                    expr_3323 := expr_3322
                }
                /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
                let expr_3324 := expr_3323
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3338 := expr_3324
                if iszero(expr_3338) {
                    /// @src 1:3220:3238  "AddressUpgradeable"
                    let expr_3325_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                    /// @src 1:3258:3262  "this"
                    let expr_3329_address := address()
                    /// @src 1:3250:3263  "address(this)"
                    let expr_3330 := convert_t_contract$_Initializable_$3446_to_t_address(expr_3329_address)
                    /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                    let expr_3331 := fun_isContract_5609(expr_3330)
                    /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                    let expr_3332 := cleanup_t_bool(iszero(expr_3331))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    let expr_3336 := expr_3332
                    if expr_3336 {
                        /// @src 1:3268:3280  "_initialized"
                        let _9 := read_from_storage_split_offset_20_t_uint8(0x00)
                        let expr_3333 := _9
                        /// @src 1:3284:3285  "1"
                        let expr_3334 := 0x01
                        /// @src 1:3268:3285  "_initialized == 1"
                        let expr_3335 := eq(cleanup_t_uint8(expr_3333), convert_t_rational_1_by_1_to_t_uint8(expr_3334))
                        /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                        expr_3336 := expr_3335
                    }
                    /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    let expr_3337 := expr_3336
                    /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    expr_3338 := expr_3337
                }
                /// @src 1:3157:3358  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3338)
                /// @src 1:3383:3384  "1"
                let expr_3343 := 0x01
                /// @src 1:3368:3384  "_initialized = 1"
                let _10 := convert_t_rational_1_by_1_to_t_uint8(expr_3343)
                update_storage_value_offset_20t_uint8_to_t_uint8(0x00, _10)
                let expr_3344 := _10
                /// @src 1:3398:3412  "isTopLevelCall"
                let _11 := var_isTopLevelCall_3314
                let expr_3346 := _11
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                if expr_3346 {
                    /// @src 1:3444:3448  "true"
                    let expr_3348 := 0x01
                    /// @src 1:3428:3448  "_initializing = true"
                    update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3348)
                    let expr_3349 := expr_3348
                    /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                }
                /// @src 1:3468:3469  "_"
                fun_initialize_52_inner()
                /// @src 1:3483:3497  "isTopLevelCall"
                let _12 := var_isTopLevelCall_3314
                let expr_3354 := _12
                /// @src 1:3479:3578  "if (isTopLevelCall) {..."
                if expr_3354 {
                    /// @src 1:3529:3534  "false"
                    let expr_3356 := 0x00
                    /// @src 1:3513:3534  "_initializing = false"
                    update_storage_value_offset_21t_bool_to_t_bool(0x00, expr_3356)
                    let expr_3357 := expr_3356
                    /// @src 1:3565:3566  "1"
                    let expr_3360 := 0x01
                    /// @src 1:3553:3567  "Initialized(1)"
                    let _13 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _14 := allocate_unbounded()
                        let _15 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_14 , expr_3360)
                        log1(_14, sub(_15, _14) , _13)
                    }/// @src 1:3479:3578  "if (isTopLevelCall) {..."
                }

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @src 10:1172:1259  "function initialize() public initializer {..."
            function fun_initialize_52_inner() {

                fun___CrossDomainMessenger_init_1332()

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 52
            /// @src 10:1172:1259  "function initialize() public initializer {..."
            function fun_initialize_52() {

                modifier_initializer_46()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function convert_t_contract$_CrossDomainMessenger_$1359_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function cleanup_t_bytes4(value) -> cleaned {
                cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)
            }

            function shift_left_224(value) -> newValue {
                newValue :=

                shl(224, value)

            }

            function convert_t_uint32_to_t_bytes4(value) -> converted {
                converted := cleanup_t_bytes4(shift_left_224(cleanup_t_uint32(value)))
            }

            function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint32(value))
            }

            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_calldata_to_memory(src, dst, length) {
                calldatacopy(dst, src, length)
                // clear end
                mstore(add(dst, length), 0)
            }

            // bytes -> bytes
            function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)

                copy_calldata_to_memory(start, pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_calldata_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_memory_ptr__fromStack(headStart , value0, value1, value2, value3, value4, value5, value6) -> tail {
                tail := add(headStart, 192)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

                abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))

                abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))

                abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))

                abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))

                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value5, value6,  tail)

            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function convert_t_address_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function convert_t_uint32_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
            }

            function abi_encode_t_uint32_to_t_uint256_fromStack(value, pos) {
                mstore(pos, convert_t_uint32_to_t_uint256(value))
            }

            function abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256_t_uint32__to_t_address_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack(headStart , value0, value1, value2, value3, value4) -> tail {
                tail := add(headStart, 128)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

                mstore(add(headStart, 32), sub(tail, headStart))
                tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value1, value2,  tail)

                abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 64))

                abi_encode_t_uint32_to_t_uint256_fromStack(value4,  add(headStart, 96))

            }

            function shift_right_0_unsigned(value) -> newValue {
                newValue :=

                shr(0, value)

            }

            function cleanup_from_storage_t_uint240(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_0t_uint240(slot_value) -> value {
                value := cleanup_from_storage_t_uint240(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint240(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint240(sload(slot))

            }

            function cleanup_t_uint240(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }

            function increment_wrapping_t_uint240(value) -> ret {
                ret := cleanup_t_uint240(add(value, 1))
            }

            function shift_left_0(value) -> newValue {
                newValue :=

                shl(0, value)

            }

            function update_byte_slice_30_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint240_to_t_uint240(value) -> converted {
                converted := cleanup_t_uint240(identity(cleanup_t_uint240(value)))
            }

            function prepare_store_t_uint240(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint240_to_t_uint240(slot, value_0) {
                let convertedValue_0 := convert_t_uint240_to_t_uint240(value_0)
                sstore(slot, update_byte_slice_30_shift_0(sload(slot), prepare_store_t_uint240(convertedValue_0)))
            }

            /// @ast-id 1063
            /// @src 28:8785:9865  "function sendMessage(..."
            function fun_sendMessage_1063(var__target_1009, var__message_1011_offset, var__message_1011_length, var__minGasLimit_1013) {

                /// @src 28:9301:9316  "OTHER_MESSENGER"
                let _16 := loadimmutable("939")
                let expr_1017 := _16
                /// @src 28:9338:9346  "_message"
                let _17_offset := var__message_1011_offset
                let _17_length := var__message_1011_length
                let expr_1019_offset := _17_offset
                let expr_1019_length := _17_length
                /// @src 28:9348:9360  "_minGasLimit"
                let _18 := var__minGasLimit_1013
                let expr_1020 := _18
                /// @src 28:9330:9361  "baseGas(_message, _minGasLimit)"
                let expr_1021 := fun_baseGas_1320(expr_1019_offset, expr_1019_length, expr_1020)
                /// @src 28:9375:9384  "msg.value"
                let expr_1023 := callvalue()
                /// @src 28:9438:9442  "this"
                let expr_1026_address := address()
                /// @src 28:9438:9455  "this.relayMessage"
                let expr_1027_address := convert_t_contract$_CrossDomainMessenger_$1359_to_t_address(expr_1026_address)
                let expr_1027_functionSelector := 0xd764ad0b
                /// @src 28:9438:9464  "this.relayMessage.selector"
                let expr_1028 := convert_t_uint32_to_t_bytes4(expr_1027_functionSelector)
                /// @src 28:9482:9496  "messageNonce()"
                let expr_1030 := fun_messageNonce_1287()
                /// @src 28:9514:9524  "msg.sender"
                let expr_1032 := caller()
                /// @src 28:9542:9549  "_target"
                let _19 := var__target_1009
                let expr_1033 := _19
                /// @src 28:9567:9576  "msg.value"
                let expr_1035 := callvalue()
                /// @src 28:9594:9606  "_minGasLimit"
                let _20 := var__minGasLimit_1013
                let expr_1036 := _20
                /// @src 28:9624:9632  "_message"
                let _21_offset := var__message_1011_offset
                let _21_length := var__message_1011_length
                let expr_1037_offset := _21_offset
                let expr_1037_length := _21_length
                /// @src 28:9398:9646  "abi.encodeWithSelector(..."

                let expr_1038_mpos := allocate_unbounded()
                let _22 := add(expr_1038_mpos, 0x20)

                mstore(_22, expr_1028)
                _22 := add(_22, 4)

                let _23 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_calldata_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint32_t_bytes_memory_ptr__fromStack(_22, expr_1030, expr_1032, expr_1033, expr_1035, expr_1036, expr_1037_offset, expr_1037_length)
                mstore(expr_1038_mpos, sub(_23, add(expr_1038_mpos, 0x20)))
                finalize_allocation(expr_1038_mpos, sub(_23, expr_1038_mpos))
                fun__sendMessage_78(expr_1017, expr_1021, expr_1023, expr_1038_mpos)
                /// @src 28:9684:9691  "_target"
                let _24 := var__target_1009
                let expr_1042 := _24
                /// @src 28:9693:9703  "msg.sender"
                let expr_1044 := caller()
                /// @src 28:9705:9713  "_message"
                let _25_offset := var__message_1011_offset
                let _25_length := var__message_1011_length
                let expr_1045_offset := _25_offset
                let expr_1045_length := _25_length
                /// @src 28:9715:9729  "messageNonce()"
                let expr_1047 := fun_messageNonce_1287()
                /// @src 28:9731:9743  "_minGasLimit"
                let _26 := var__minGasLimit_1013
                let expr_1048 := _26
                /// @src 28:9672:9744  "SentMessage(_target, msg.sender, _message, messageNonce(), _minGasLimit)"
                let _27 := 0xcb0f7ffd78f9aee47a248fae8db181db6eee833039123e026dcbff529522e52a
                let _28 := convert_t_address_to_t_address(expr_1042)
                {
                    let _29 := allocate_unbounded()
                    let _30 := abi_encode_tuple_t_address_t_bytes_calldata_ptr_t_uint256_t_uint32__to_t_address_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack(_29 , expr_1044, expr_1045_offset, expr_1045_length, expr_1047, expr_1048)
                    log2(_29, sub(_30, _29) , _27, _28)
                }/// @src 28:9781:9791  "msg.sender"
                let expr_1053 := caller()
                /// @src 28:9793:9802  "msg.value"
                let expr_1055 := callvalue()
                /// @src 28:9759:9803  "SentMessageExtension1(msg.sender, msg.value)"
                let _31 := 0x8ebb2ec2465bdb2a06a66fc37a0963af8a2a6a1479d81d56fdb8cbb98096d546
                let _32 := convert_t_address_to_t_address(expr_1053)
                {
                    let _33 := allocate_unbounded()
                    let _34 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_33 , expr_1055)
                    log2(_33, sub(_34, _33) , _31, _32)
                }/// @src 28:9838:9848  "++msgNonce"
                let _36 := read_from_storage_split_offset_0_t_uint240(0xcd)
                let _35 := increment_wrapping_t_uint240(_36)
                update_storage_value_offset_0t_uint240_to_t_uint240(0xcd, _35)
                let expr_1059 := _35

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function convert_t_contract$_OptimismPortal_$775_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20() {
                revert(0, 0)
            }

            function abi_decode_tuple__fromMemory(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function array_length_t_bytes_memory_ptr(value) -> length {

                length := mload(value)

            }

            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__fromStack(headStart , value0, value1, value2, value3, value4) -> tail {
                tail := add(headStart, 160)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

                abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))

                abi_encode_t_uint64_to_t_uint64_fromStack(value2,  add(headStart, 64))

                abi_encode_t_bool_to_t_bool_fromStack(value3,  add(headStart, 96))

                mstore(add(headStart, 128), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)

            }

            function revert_forward_1() {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }

            /// @ast-id 78
            /// @src 10:1321:1563  "function _sendMessage(..."
            function fun__sendMessage_78(var__to_55, var__gasLimit_57, var__value_59, var__data_61_mpos) {

                /// @src 10:1476:1482  "PORTAL"
                let _37_address := loadimmutable("18")
                let expr_65_address := _37_address
                /// @src 10:1476:1501  "PORTAL.depositTransaction"
                let expr_67_address := convert_t_contract$_OptimismPortal_$775_to_t_address(expr_65_address)
                let expr_67_functionSelector := 0xe9e05c42
                /// @src 10:1510:1516  "_value"
                let _38 := var__value_59
                let expr_68 := _38
                /// @src 10:1476:1518  "PORTAL.depositTransaction{ value: _value }"
                let expr_69_address := expr_67_address
                let expr_69_functionSelector := expr_67_functionSelector
                let expr_69_value := expr_68
                /// @src 10:1519:1522  "_to"
                let _39 := var__to_55
                let expr_70 := _39
                /// @src 10:1524:1530  "_value"
                let _40 := var__value_59
                let expr_71 := _40
                /// @src 10:1532:1541  "_gasLimit"
                let _41 := var__gasLimit_57
                let expr_72 := _41
                /// @src 10:1543:1548  "false"
                let expr_73 := 0x00
                /// @src 10:1550:1555  "_data"
                let _42_mpos := var__data_61_mpos
                let expr_74_mpos := _42_mpos
                /// @src 10:1476:1556  "PORTAL.depositTransaction{ value: _value }(_to, _value, _gasLimit, false, _data)"

                if iszero(extcodesize(expr_69_address)) { revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20() }

                // storage for arguments and returned data
                let _43 := allocate_unbounded()
                mstore(_43, shift_left_224(expr_69_functionSelector))
                let _44 := abi_encode_tuple_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_address_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__fromStack(add(_43, 4) , expr_70, expr_71, expr_72, expr_73, expr_74_mpos)

                let _45 := call(gas(), expr_69_address,  expr_69_value,  _43, sub(_44, _43), _43, 0)

                if iszero(_45) { revert_forward_1() }

                if _45 {

                    let _46 := 0

                    if gt(_46, returndatasize()) {
                        _46 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_43, _46)

                    // decode return parameters from external try-call into retVars
                    abi_decode_tuple__fromMemory(_43, add(_43, _46))
                }

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function cleanup_t_rational_2_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_2_by_1_to_t_uint16(value) -> converted {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_2_by_1(value)))
            }

            function store_literal_in_memory_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: only versi")

                mstore(add(memPtr, 32), "on 0 or 1 messages are supported")

                mstore(add(memPtr, 64), " at this time")

            }

            function abi_encode_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_0_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_0_by_1_to_t_uint16(value) -> converted {
                converted := cleanup_t_uint16(identity(cleanup_t_rational_0_by_1(value)))
            }

            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {
                revert(0, 0)
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function array_allocation_size_t_bytes_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {
                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))
                mstore(array, length)
                let dst := add(array, 0x20)
                if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }
                copy_calldata_to_memory(src, dst, length)
            }

            function convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(value, length) -> converted  {

                // Copy the array to a free position in memory
                converted :=

                abi_decode_available_length_t_bytes_memory_ptr(value, length, calldatasize())

            }

            function extract_from_storage_value_offset_0t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_0t_bool(sload(slot))

            }

            function store_literal_in_memory_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: legacy wit")

                mstore(add(memPtr, 32), "hdrawal already relayed")

            }

            function abi_encode_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {

                mstore(add(memPtr, 0), "ReentrancyGuard: reentrant call")

            }

            function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)
                store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)

            }

            function update_byte_slice_1_shift_0(value, toInsert) -> result {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }

            function store_literal_in_memory_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: value must")

                mstore(add(memPtr, 32), " be zero unless message is from ")

                mstore(add(memPtr, 64), "a system address")

            }

            function abi_encode_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 80)
                store_literal_in_memory_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: message ca")

                mstore(add(memPtr, 32), "nnot be replayed")

            }

            function abi_encode_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 48)
                store_literal_in_memory_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function panic_error_0x01() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x01)
                revert(0, 0x24)
            }

            function assert_helper(condition) {
                if iszero(condition) { panic_error_0x01() }
            }

            function store_literal_in_memory_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: cannot sen")

                mstore(add(memPtr, 32), "d message to blocked system addr")

                mstore(add(memPtr, 64), "ess")

            }

            function abi_encode_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: message ha")

                mstore(add(memPtr, 32), "s already been relayed")

            }

            function abi_encode_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)
                store_literal_in_memory_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function update_byte_slice_20_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function prepare_store_t_address(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }

            /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
            function constant_DEFAULT_L2_SENDER_2813() -> ret {
                /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
                let expr_2812 := 0xdead
                let _95 := expr_2812

                ret := _95
            }

            function convert_t_rational_1_by_1_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_rational_1_by_1_to_t_address(value) -> converted {
                converted := convert_t_rational_1_by_1_to_t_uint160(value)
            }

            /// @src 18:974:1031  "address internal constant ESTIMATION_ADDRESS = address(1)"
            function constant_ESTIMATION_ADDRESS_2809() -> ret {
                /// @src 18:1029:1030  "1"
                let expr_2807 := 0x01
                /// @src 18:1021:1031  "address(1)"
                let expr_2808 := convert_t_rational_1_by_1_to_t_address(expr_2807)
                let _105 := expr_2808

                ret := _105
            }

            function store_literal_in_memory_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: failed to ")

                mstore(add(memPtr, 32), "relay message")

            }

            function abi_encode_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)
                store_literal_in_memory_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288_to_t_string_memory_ptr_fromStack( tail)

            }

            /// @ast-id 1257
            /// @src 28:10567:14223  "function relayMessage(..."
            function fun_relayMessage_1257(var__nonce_1066, var__sender_1068, var__target_1070, var__value_1072, var__minGasLimit_1074, var__message_1076_offset, var__message_1076_length) {

                /// @src 28:10804:10812  "Encoding"
                let expr_1081_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 28:10834:10840  "_nonce"
                let _47 := var__nonce_1066
                let expr_1083 := _47
                /// @src 28:10804:10841  "Encoding.decodeVersionedNonce(_nonce)"
                let expr_1084_component_1, expr_1084_component_2 := fun_decodeVersionedNonce_3738(expr_1083)
                /// @src 28:10783:10841  "(, uint16 version) = Encoding.decodeVersionedNonce(_nonce)"
                let var_version_1080 := expr_1084_component_2
                /// @src 28:10872:10879  "version"
                let _48 := var_version_1080
                let expr_1087 := _48
                /// @src 28:10882:10883  "2"
                let expr_1088 := 0x02
                /// @src 28:10872:10883  "version < 2"
                let expr_1089 := lt(cleanup_t_uint16(expr_1087), convert_t_rational_2_by_1_to_t_uint16(expr_1088))
                /// @src 28:10851:10986  "require(..."
                require_helper_t_stringliteral_613c3f25ff5f199e4ef46f528b3fdb1db106536665e79fc5664217d5ace5b032(expr_1089)
                /// @src 28:11188:11195  "version"
                let _49 := var_version_1080
                let expr_1093 := _49
                /// @src 28:11199:11200  "0"
                let expr_1094 := 0x00
                /// @src 28:11188:11200  "version == 0"
                let expr_1095 := eq(cleanup_t_uint16(expr_1093), convert_t_rational_0_by_1_to_t_uint16(expr_1094))
                /// @src 28:11184:11477  "if (version == 0) {..."
                if expr_1095 {
                    /// @src 28:11234:11241  "Hashing"
                    let expr_1098_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                    /// @src 28:11267:11274  "_target"
                    let _50 := var__target_1070
                    let expr_1100 := _50
                    /// @src 28:11276:11283  "_sender"
                    let _51 := var__sender_1068
                    let expr_1101 := _51
                    /// @src 28:11285:11293  "_message"
                    let _52_offset := var__message_1076_offset
                    let _52_length := var__message_1076_length
                    let expr_1102_offset := _52_offset
                    let expr_1102_length := _52_length
                    /// @src 28:11295:11301  "_nonce"
                    let _53 := var__nonce_1066
                    let expr_1103 := _53
                    /// @src 28:11234:11302  "Hashing.hashCrossDomainMessageV0(_target, _sender, _message, _nonce)"
                    let _54_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1102_offset, expr_1102_length)
                    let expr_1104 := fun_hashCrossDomainMessageV0_2981(expr_1100, expr_1101, _54_mpos, expr_1103)
                    /// @src 28:11216:11302  "bytes32 oldHash = Hashing.hashCrossDomainMessageV0(_target, _sender, _message, _nonce)"
                    let var_oldHash_1097 := expr_1104
                    /// @src 28:11341:11359  "successfulMessages"
                    let _55 := 0xcb
                    let expr_1107 := _55
                    /// @src 28:11360:11367  "oldHash"
                    let _56 := var_oldHash_1097
                    let expr_1108 := _56
                    /// @src 28:11341:11368  "successfulMessages[oldHash]"
                    let _57 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1107,expr_1108)
                    let _58 := read_from_storage_split_offset_0_t_bool(_57)
                    let expr_1109 := _58
                    /// @src 28:11372:11377  "false"
                    let expr_1110 := 0x00
                    /// @src 28:11341:11377  "successfulMessages[oldHash] == false"
                    let expr_1111 := eq(cleanup_t_bool(expr_1109), cleanup_t_bool(expr_1110))
                    /// @src 28:11316:11466  "require(..."
                    require_helper_t_stringliteral_6165e2ee174e7d1b46e40c12e0e6c5db7f29bb3c3a0e89cfb28416bcac9452e1(expr_1111)
                    /// @src 28:11184:11477  "if (version == 0) {..."
                }
                /// @src 28:11671:11678  "Hashing"
                let expr_1119_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 28:11717:11723  "_nonce"
                let _59 := var__nonce_1066
                let expr_1121 := _59
                /// @src 28:11737:11744  "_sender"
                let _60 := var__sender_1068
                let expr_1122 := _60
                /// @src 28:11758:11765  "_target"
                let _61 := var__target_1070
                let expr_1123 := _61
                /// @src 28:11779:11785  "_value"
                let _62 := var__value_1072
                let expr_1124 := _62
                /// @src 28:11799:11811  "_minGasLimit"
                let _63 := var__minGasLimit_1074
                let expr_1125 := _63
                /// @src 28:11825:11833  "_message"
                let _64_offset := var__message_1076_offset
                let _64_length := var__message_1076_length
                let expr_1126_offset := _64_offset
                let expr_1126_length := _64_length
                /// @src 28:11671:11843  "Hashing.hashCrossDomainMessageV1(..."
                let _65_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1126_offset, expr_1126_length)
                let expr_1127 := fun_hashCrossDomainMessageV1_3012(expr_1121, expr_1122, expr_1123, expr_1124, expr_1125, _65_mpos)
                /// @src 28:11647:11843  "bytes32 versionedHash = Hashing.hashCrossDomainMessageV1(..."
                let var_versionedHash_1118 := expr_1127
                /// @src 28:11938:11953  "reentrancyLocks"
                let _66 := 0xcf
                let expr_1129 := _66
                /// @src 28:11954:11967  "versionedHash"
                let _67 := var_versionedHash_1118
                let expr_1130 := _67
                /// @src 28:11938:11968  "reentrancyLocks[versionedHash]"
                let _68 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1129,expr_1130)
                let _69 := read_from_storage_split_offset_0_t_bool(_68)
                let expr_1131 := _69
                /// @src 28:11934:12036  "if (reentrancyLocks[versionedHash]) {..."
                if expr_1131 {
                    /// @src 28:11984:12025  "revert(\"ReentrancyGuard: reentrant call\")"
                    {
                        let _70 := allocate_unbounded()
                        mstore(_70, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                        let _71 := abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack(add(_70, 4) )
                        revert(_70, sub(_71, _70))
                    }/// @src 28:11934:12036  "if (reentrancyLocks[versionedHash]) {..."
                }
                /// @src 28:12137:12141  "true"
                let expr_1141 := 0x01
                /// @src 28:12104:12119  "reentrancyLocks"
                let _72 := 0xcf
                let expr_1138 := _72
                /// @src 28:12120:12133  "versionedHash"
                let _73 := var_versionedHash_1118
                let expr_1139 := _73
                /// @src 28:12104:12134  "reentrancyLocks[versionedHash]"
                let _74 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1138,expr_1139)
                /// @src 28:12104:12141  "reentrancyLocks[versionedHash] = true"
                update_storage_value_offset_0t_bool_to_t_bool(_74, expr_1141)
                let expr_1142 := expr_1141
                /// @src 28:12156:12175  "_isOtherMessenger()"
                let expr_1145 := fun__isOtherMessenger_100()
                /// @src 28:12152:12750  "if (_isOtherMessenger()) {..."
                switch expr_1145
                case 0 {
                    /// @src 28:12460:12469  "msg.value"
                    let expr_1163 := callvalue()
                    /// @src 28:12473:12474  "0"
                    let expr_1164 := 0x00
                    /// @src 28:12460:12474  "msg.value == 0"
                    let expr_1165 := eq(cleanup_t_uint256(expr_1163), convert_t_rational_0_by_1_to_t_uint256(expr_1164))
                    /// @src 28:12435:12588  "require(..."
                    require_helper_t_stringliteral_a674ba4f64545bbbef0e37bff5aab8291d8acaeac34534351c851dafbf6705a5(expr_1165)
                    /// @src 28:12628:12642  "failedMessages"
                    let _75 := 0xce
                    let expr_1170 := _75
                    /// @src 28:12643:12656  "versionedHash"
                    let _76 := var_versionedHash_1118
                    let expr_1171 := _76
                    /// @src 28:12628:12657  "failedMessages[versionedHash]"
                    let _77 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1170,expr_1171)
                    let _78 := read_from_storage_split_offset_0_t_bool(_77)
                    let expr_1172 := _78
                    /// @src 28:12603:12739  "require(..."
                    require_helper_t_stringliteral_bb745f097737872dff3bf4ce31c0d843f5adae9f5f676df9824da91fd83c421d(expr_1172)
                    /// @src 28:12152:12750  "if (_isOtherMessenger()) {..."
                }
                default {
                    /// @src 28:12332:12341  "msg.value"
                    let expr_1148 := callvalue()
                    /// @src 28:12345:12351  "_value"
                    let _79 := var__value_1072
                    let expr_1149 := _79
                    /// @src 28:12332:12351  "msg.value == _value"
                    let expr_1150 := eq(cleanup_t_uint256(expr_1148), cleanup_t_uint256(expr_1149))
                    /// @src 28:12325:12352  "assert(msg.value == _value)"
                    assert_helper(expr_1150)
                    /// @src 28:12374:12388  "failedMessages"
                    let _80 := 0xce
                    let expr_1154 := _80
                    /// @src 28:12389:12402  "versionedHash"
                    let _81 := var_versionedHash_1118
                    let expr_1155 := _81
                    /// @src 28:12374:12403  "failedMessages[versionedHash]"
                    let _82 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1154,expr_1155)
                    let _83 := read_from_storage_split_offset_0_t_bool(_82)
                    let expr_1156 := _83
                    /// @src 28:12373:12403  "!failedMessages[versionedHash]"
                    let expr_1157 := cleanup_t_bool(iszero(expr_1156))
                    /// @src 28:12366:12404  "assert(!failedMessages[versionedHash])"
                    assert_helper(expr_1157)
                    /// @src 28:12152:12750  "if (_isOtherMessenger()) {..."
                }
                /// @src 28:12797:12804  "_target"
                let _84 := var__target_1070
                let expr_1180 := _84
                /// @src 28:12781:12805  "_isUnsafeTarget(_target)"
                let expr_1181 := fun__isUnsafeTarget_124(expr_1180)
                /// @src 28:12809:12814  "false"
                let expr_1182 := 0x00
                /// @src 28:12781:12814  "_isUnsafeTarget(_target) == false"
                let expr_1183 := eq(cleanup_t_bool(expr_1181), cleanup_t_bool(expr_1182))
                /// @src 28:12760:12907  "require(..."
                require_helper_t_stringliteral_9a217cd91d5c986f3948516e02c31b8cd18c7bbfae68d3da54d71a8829a66cb5(expr_1183)
                /// @src 28:12939:12957  "successfulMessages"
                let _85 := 0xcb
                let expr_1188 := _85
                /// @src 28:12958:12971  "versionedHash"
                let _86 := var_versionedHash_1118
                let expr_1189 := _86
                /// @src 28:12939:12972  "successfulMessages[versionedHash]"
                let _87 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1188,expr_1189)
                let _88 := read_from_storage_split_offset_0_t_bool(_87)
                let expr_1190 := _88
                /// @src 28:12976:12981  "false"
                let expr_1191 := 0x00
                /// @src 28:12939:12981  "successfulMessages[versionedHash] == false"
                let expr_1192 := eq(cleanup_t_bool(expr_1190), cleanup_t_bool(expr_1191))
                /// @src 28:12918:13061  "require(..."
                require_helper_t_stringliteral_b63bfd5e0ee046bfdc0487044ba9676f2ee5e11cc19a24dacb9c46682e5c7150(expr_1192)
                /// @src 28:13091:13098  "_sender"
                let _89 := var__sender_1068
                let expr_1197 := _89
                /// @src 28:13072:13098  "xDomainMsgSender = _sender"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1197)
                let expr_1198 := expr_1197
                /// @src 28:13123:13131  "SafeCall"
                let expr_1202_address := linkersymbol("contracts/libraries/SafeCall.sol:SafeCall")
                /// @src 28:13147:13154  "_target"
                let _90 := var__target_1070
                let expr_1204 := _90
                /// @src 28:13156:13168  "_minGasLimit"
                let _91 := var__minGasLimit_1074
                let expr_1205 := _91
                /// @src 28:13170:13176  "_value"
                let _92 := var__value_1072
                let expr_1206 := _92
                /// @src 28:13178:13186  "_message"
                let _93_offset := var__message_1076_offset
                let _93_length := var__message_1076_length
                let expr_1207_offset := _93_offset
                let expr_1207_length := _93_length
                /// @src 28:13123:13187  "SafeCall.callWithMinGas(_target, _minGasLimit, _value, _message)"
                let _94_mpos := convert_array_t_bytes_calldata_ptr_to_t_bytes_memory_ptr(expr_1207_offset, expr_1207_length)
                let expr_1208 := fun_callWithMinGas_3110(expr_1204, expr_1205, expr_1206, _94_mpos)
                /// @src 28:13108:13187  "bool success = SafeCall.callWithMinGas(_target, _minGasLimit, _value, _message)"
                let var_success_1201 := expr_1208
                /// @src 28:13216:13225  "Constants"
                let expr_1211_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:13216:13243  "Constants.DEFAULT_L2_SENDER"
                let expr_1212 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 28:13197:13243  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1212)
                let expr_1213 := expr_1212
                /// @src 28:13258:13265  "success"
                let _96 := var_success_1201
                let expr_1215 := _96
                /// @src 28:13254:14111  "if (success) {..."
                switch expr_1215
                case 0 {
                    /// @src 28:13432:13436  "true"
                    let expr_1230 := 0x01
                    /// @src 28:13400:13414  "failedMessages"
                    let _97 := 0xce
                    let expr_1227 := _97
                    /// @src 28:13415:13428  "versionedHash"
                    let _98 := var_versionedHash_1118
                    let expr_1228 := _98
                    /// @src 28:13400:13429  "failedMessages[versionedHash]"
                    let _99 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1227,expr_1228)
                    /// @src 28:13400:13436  "failedMessages[versionedHash] = true"
                    update_storage_value_offset_0t_bool_to_t_bool(_99, expr_1230)
                    let expr_1231 := expr_1230
                    /// @src 28:13476:13489  "versionedHash"
                    let _100 := var_versionedHash_1118
                    let expr_1234 := _100
                    /// @src 28:13455:13490  "FailedRelayedMessage(versionedHash)"
                    let _101 := 0x99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f
                    let _102 := convert_t_bytes32_to_t_bytes32(expr_1234)
                    {
                        let _103 := allocate_unbounded()
                        let _104 := abi_encode_tuple__to__fromStack(_103 )
                        log2(_103, sub(_104, _103) , _101, _102)
                    }/// @src 28:13970:13979  "tx.origin"
                    let expr_1238 := origin()
                    /// @src 28:13983:13992  "Constants"
                    let expr_1239_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 28:13983:14011  "Constants.ESTIMATION_ADDRESS"
                    let expr_1240 := constant_ESTIMATION_ADDRESS_2809()
                    /// @src 28:13970:14011  "tx.origin == Constants.ESTIMATION_ADDRESS"
                    let expr_1241 := eq(cleanup_t_address(expr_1238), cleanup_t_address(expr_1240))
                    /// @src 28:13966:14101  "if (tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                    if expr_1241 {
                        /// @src 28:14031:14086  "revert(\"CrossDomainMessenger: failed to relay message\")"
                        {
                            let _106 := allocate_unbounded()
                            mstore(_106, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                            let _107 := abi_encode_tuple_t_stringliteral_c31d7113cd2cbba5d595fec2c0ea3cff3ab3bbe5f2eb02ef2bc82397a0578288__to_t_string_memory_ptr__fromStack(add(_106, 4) )
                            revert(_106, sub(_107, _106))
                        }/// @src 28:13966:14101  "if (tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                    }
                    /// @src 28:13254:14111  "if (success) {..."
                }
                default {
                    /// @src 28:13317:13321  "true"
                    let expr_1219 := 0x01
                    /// @src 28:13281:13299  "successfulMessages"
                    let _108 := 0xcb
                    let expr_1216 := _108
                    /// @src 28:13300:13313  "versionedHash"
                    let _109 := var_versionedHash_1118
                    let expr_1217 := _109
                    /// @src 28:13281:13314  "successfulMessages[versionedHash]"
                    let _110 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1216,expr_1217)
                    /// @src 28:13281:13321  "successfulMessages[versionedHash] = true"
                    update_storage_value_offset_0t_bool_to_t_bool(_110, expr_1219)
                    let expr_1220 := expr_1219
                    /// @src 28:13355:13368  "versionedHash"
                    let _111 := var_versionedHash_1118
                    let expr_1223 := _111
                    /// @src 28:13340:13369  "RelayedMessage(versionedHash)"
                    let _112 := 0x4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c
                    let _113 := convert_t_bytes32_to_t_bytes32(expr_1223)
                    {
                        let _114 := allocate_unbounded()
                        let _115 := abi_encode_tuple__to__fromStack(_114 )
                        log2(_114, sub(_115, _114) , _112, _113)
                    }/// @src 28:13254:14111  "if (success) {..."
                }
                /// @src 28:14211:14216  "false"
                let expr_1253 := 0x00
                /// @src 28:14178:14193  "reentrancyLocks"
                let _116 := 0xcf
                let expr_1250 := _116
                /// @src 28:14194:14207  "versionedHash"
                let _117 := var_versionedHash_1118
                let expr_1251 := _117
                /// @src 28:14178:14208  "reentrancyLocks[versionedHash]"
                let _118 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_1250,expr_1251)
                /// @src 28:14178:14216  "reentrancyLocks[versionedHash] = false"
                update_storage_value_offset_0t_bool_to_t_bool(_118, expr_1253)
                let expr_1254 := expr_1253

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_bool() -> ret {
                ret := 0
            }

            function abi_decode_t_address_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_address(value)
            }

            function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
                }

            }

            /// @ast-id 100
            /// @src 10:1625:1785  "function _isOtherMessenger() internal view override returns (bool) {..."
            function fun__isOtherMessenger_100() -> var__83 {
                /// @src 10:1686:1690  "bool"
                let zero_t_bool_119 := zero_value_for_split_t_bool()
                var__83 := zero_t_bool_119

                /// @src 10:1709:1719  "msg.sender"
                let expr_86 := caller()
                /// @src 10:1731:1737  "PORTAL"
                let _120_address := loadimmutable("18")
                let expr_89_address := _120_address
                /// @src 10:1723:1738  "address(PORTAL)"
                let expr_90 := convert_t_contract$_OptimismPortal_$775_to_t_address(expr_89_address)
                /// @src 10:1709:1738  "msg.sender == address(PORTAL)"
                let expr_91 := eq(cleanup_t_address(expr_86), cleanup_t_address(expr_90))
                /// @src 10:1709:1778  "msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                let expr_97 := expr_91
                if expr_97 {
                    /// @src 10:1742:1748  "PORTAL"
                    let _121_address := loadimmutable("18")
                    let expr_92_address := _121_address
                    /// @src 10:1742:1757  "PORTAL.l2Sender"
                    let expr_93_address := convert_t_contract$_OptimismPortal_$775_to_t_address(expr_92_address)
                    let expr_93_functionSelector := 0x9bf62d82
                    /// @src 10:1742:1759  "PORTAL.l2Sender()"

                    // storage for arguments and returned data
                    let _122 := allocate_unbounded()
                    mstore(_122, shift_left_224(expr_93_functionSelector))
                    let _123 := abi_encode_tuple__to__fromStack(add(_122, 4) )

                    let _124 := staticcall(gas(), expr_93_address,  _122, sub(_123, _122), _122, 32)

                    if iszero(_124) { revert_forward_1() }

                    let expr_94
                    if _124 {

                        let _125 := 32

                        if gt(_125, returndatasize()) {
                            _125 := returndatasize()
                        }

                        // update freeMemoryPointer according to dynamic return size
                        finalize_allocation(_122, _125)

                        // decode return parameters from external try-call into retVars
                        expr_94 :=  abi_decode_tuple_t_address_fromMemory(_122, add(_122, _125))
                    }
                    /// @src 10:1763:1778  "OTHER_MESSENGER"
                    let _126 := loadimmutable("939")
                    let expr_95 := _126
                    /// @src 10:1742:1778  "PORTAL.l2Sender() == OTHER_MESSENGER"
                    let expr_96 := eq(cleanup_t_address(expr_94), cleanup_t_address(expr_95))
                    /// @src 10:1709:1778  "msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                    expr_97 := expr_96
                }
                /// @src 10:1702:1778  "return msg.sender == address(PORTAL) && PORTAL.l2Sender() == OTHER_MESSENGER"
                var__83 := expr_97
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function convert_t_contract$_L1CrossDomainMessenger_$125_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            /// @ast-id 124
            /// @src 10:1847:2005  "function _isUnsafeTarget(address _target) internal view override returns (bool) {..."
            function fun__isUnsafeTarget_124(var__target_103) -> var__107 {
                /// @src 10:1921:1925  "bool"
                let zero_t_bool_127 := zero_value_for_split_t_bool()
                var__107 := zero_t_bool_127

                /// @src 10:1944:1951  "_target"
                let _128 := var__target_103
                let expr_109 := _128
                /// @src 10:1963:1967  "this"
                let expr_112_address := address()
                /// @src 10:1955:1968  "address(this)"
                let expr_113 := convert_t_contract$_L1CrossDomainMessenger_$125_to_t_address(expr_112_address)
                /// @src 10:1944:1968  "_target == address(this)"
                let expr_114 := eq(cleanup_t_address(expr_109), cleanup_t_address(expr_113))
                /// @src 10:1944:1998  "_target == address(this) || _target == address(PORTAL)"
                let expr_121 := expr_114
                if iszero(expr_121) {
                    /// @src 10:1972:1979  "_target"
                    let _129 := var__target_103
                    let expr_115 := _129
                    /// @src 10:1991:1997  "PORTAL"
                    let _130_address := loadimmutable("18")
                    let expr_118_address := _130_address
                    /// @src 10:1983:1998  "address(PORTAL)"
                    let expr_119 := convert_t_contract$_OptimismPortal_$775_to_t_address(expr_118_address)
                    /// @src 10:1972:1998  "_target == address(PORTAL)"
                    let expr_120 := eq(cleanup_t_address(expr_115), cleanup_t_address(expr_119))
                    /// @src 10:1944:1998  "_target == address(this) || _target == address(PORTAL)"
                    expr_121 := expr_120
                }
                /// @src 10:1937:1998  "return _target == address(this) || _target == address(PORTAL)"
                var__107 := expr_121
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_address() -> ret {
                ret := 0
            }

            function cleanup_from_storage_t_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_0t_address(slot_value) -> value {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_address(slot) -> value {
                value := extract_from_storage_value_offset_0t_address(sload(slot))

            }

            function store_literal_in_memory_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(memPtr) {

                mstore(add(memPtr, 0), "CrossDomainMessenger: xDomainMes")

                mstore(add(memPtr, 32), "sageSender is not set")

            }

            function abi_encode_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 1274
            /// @src 28:14629:14891  "function xDomainMessageSender() external view returns (address) {..."
            function fun_xDomainMessageSender_1274() -> var__1261 {
                /// @src 28:14684:14691  "address"
                let zero_t_address_131 := zero_value_for_split_t_address()
                var__1261 := zero_t_address_131

                /// @src 28:14724:14740  "xDomainMsgSender"
                let _132 := read_from_storage_split_offset_0_t_address(0xcc)
                let expr_1264 := _132
                /// @src 28:14744:14753  "Constants"
                let expr_1265_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:14744:14771  "Constants.DEFAULT_L2_SENDER"
                let expr_1266 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 28:14724:14771  "xDomainMsgSender != Constants.DEFAULT_L2_SENDER"
                let expr_1267 := iszero(eq(cleanup_t_address(expr_1264), cleanup_t_address(expr_1266)))
                /// @src 28:14703:14850  "require(..."
                require_helper_t_stringliteral_768d531e1f3a80f728b84893add7c857f15fef8ea757c4d86de650c12b79f398(expr_1267)
                /// @src 28:14868:14884  "xDomainMsgSender"
                let _133 := read_from_storage_split_offset_0_t_address(0xcc)
                let expr_1271 := _133
                /// @src 28:14861:14884  "return xDomainMsgSender"
                var__1261 := expr_1271
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_uint256() -> ret {
                ret := 0
            }

            /// @ast-id 1287
            /// @src 28:15231:15365  "function messageNonce() public view returns (uint256) {..."
            function fun_messageNonce_1287() -> var__1278 {
                /// @src 28:15276:15283  "uint256"
                let zero_t_uint256_134 := zero_value_for_split_t_uint256()
                var__1278 := zero_t_uint256_134

                /// @src 28:15302:15310  "Encoding"
                let expr_1280_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 28:15332:15340  "msgNonce"
                let _135 := read_from_storage_split_offset_0_t_uint240(0xcd)
                let expr_1282 := _135
                /// @src 28:15342:15357  "MESSAGE_VERSION"
                let expr_1283 := constant_MESSAGE_VERSION_920()
                /// @src 28:15302:15358  "Encoding.encodeVersionedNonce(msgNonce, MESSAGE_VERSION)"
                let expr_1284 := fun_encodeVersionedNonce_3716(expr_1282, expr_1283)
                /// @src 28:15295:15358  "return Encoding.encodeVersionedNonce(msgNonce, MESSAGE_VERSION)"
                var__1278 := expr_1284
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_uint64() -> ret {
                ret := 0
            }

            function convert_t_uint32_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
            }

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function checked_mul_t_uint64(x, y) -> product {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)

                // overflow, if x != 0 and y > (maxValue / x)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffff, x))) { panic_error_0x11() }

                product := mul(x, y)
            }

            function panic_error_0x12() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }

            function checked_div_t_uint64(x, y) -> r {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function array_length_t_bytes_calldata_ptr(value, len) -> length {

                length := len

            }

            function convert_t_uint256_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
            }

            function checked_add_t_uint64(x, y) -> sum {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            /// @ast-id 1320
            /// @src 28:16001:16709  "function baseGas(bytes calldata _message, uint32 _minGasLimit) public pure returns (uint64) {..."
            function fun_baseGas_1320(var__message_1290_offset, var__message_1290_length, var__minGasLimit_1292) -> var__1295 {
                /// @src 28:16085:16091  "uint64"
                let zero_t_uint64_136 := zero_value_for_split_t_uint64()
                var__1295 := zero_t_uint64_136

                /// @src 28:16421:16433  "_minGasLimit"
                let _137 := var__minGasLimit_1292
                let expr_1299 := _137
                /// @src 28:16414:16434  "uint64(_minGasLimit)"
                let expr_1300 := convert_t_uint32_to_t_uint64(expr_1299)
                /// @src 28:16437:16471  "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
                let expr_1301 := constant_MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR_928()
                /// @src 28:16414:16471  "uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
                let expr_1302 := checked_mul_t_uint64(expr_1300, expr_1301)

                /// @src 28:16413:16472  "(uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR)"
                let expr_1303 := expr_1302
                /// @src 28:16491:16527  "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR"
                let expr_1304 := constant_MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR_932()
                /// @src 28:16413:16527  "(uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1305 := checked_div_t_uint64(expr_1303, expr_1304)

                /// @src 28:16412:16528  "((uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1306 := expr_1305
                /// @src 28:16584:16592  "_message"
                let _138_offset := var__message_1290_offset
                let _138_length := var__message_1290_length
                let expr_1309_offset := _138_offset
                let expr_1309_length := _138_length
                /// @src 28:16584:16599  "_message.length"
                let expr_1310 := array_length_t_bytes_calldata_ptr(expr_1309_offset, expr_1309_length)
                /// @src 28:16577:16600  "uint64(_message.length)"
                let expr_1311 := convert_t_uint256_to_t_uint64(expr_1310)
                /// @src 28:16603:16628  "MIN_GAS_CALLDATA_OVERHEAD"
                let expr_1312 := constant_MIN_GAS_CALLDATA_OVERHEAD_936()
                /// @src 28:16577:16628  "uint64(_message.length) * MIN_GAS_CALLDATA_OVERHEAD"
                let expr_1313 := checked_mul_t_uint64(expr_1311, expr_1312)

                /// @src 28:16576:16629  "(uint64(_message.length) * MIN_GAS_CALLDATA_OVERHEAD)"
                let expr_1314 := expr_1313
                /// @src 28:16412:16629  "((uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1315 := checked_add_t_uint64(expr_1306, expr_1314)

                /// @src 28:16677:16702  "MIN_GAS_CONSTANT_OVERHEAD"
                let expr_1316 := constant_MIN_GAS_CONSTANT_OVERHEAD_924()
                /// @src 28:16412:16702  "((uint64(_minGasLimit) * MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR) /..."
                let expr_1317 := checked_add_t_uint64(expr_1315, expr_1316)

                /// @src 28:16361:16702  "return..."
                var__1295 := expr_1317
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is not i")

                mstore(add(memPtr, 32), "nitializing")

            }

            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 3409
            /// @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_1324() {

                /// @src 1:4910:4923  "_initializing"
                let _139 := read_from_storage_split_offset_21_t_bool(0x00)
                let expr_3403 := _139
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
                /// @src 1:4981:4982  "_"
                fun___CrossDomainMessenger_init_1332_inner()

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @src 28:16811:16939  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
            function fun___CrossDomainMessenger_init_1332_inner() {

                /// @src 28:16905:16914  "Constants"
                let expr_1327_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 28:16905:16932  "Constants.DEFAULT_L2_SENDER"
                let expr_1328 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 28:16886:16932  "xDomainMsgSender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0xcc, expr_1328)
                let expr_1329 := expr_1328

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 1332
            /// @src 28:16811:16939  "function __CrossDomainMessenger_init() internal onlyInitializing {..."
            function fun___CrossDomainMessenger_init_1332() {

                modifier_onlyInitializing_1324()
            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {

                mstore(add(memPtr, 0), ".")

            }

            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }

            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2) -> end {

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)

                end := pos
            }

            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted  {
                converted := value

            }

            /// @ast-id 1424
            /// @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1424() -> var__1400_mpos {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_140_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1400_mpos := zero_t_string_memory_ptr_140_mpos

                /// @src 29:1203:1210  "Strings"
                let expr_1406_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _141 := loadimmutable("1367")
                let expr_1408 := _141
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1409_mpos := fun_toString_3827(expr_1408)
                /// @src 29:1281:1288  "Strings"
                let expr_1411_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _142 := loadimmutable("1370")
                let expr_1413 := _142
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1414_mpos := fun_toString_3827(expr_1413)
                /// @src 29:1359:1366  "Strings"
                let expr_1416_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _143 := loadimmutable("1373")
                let expr_1418 := _143
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1419_mpos := fun_toString_3827(expr_1418)
                /// @src 29:1165:1408  "abi.encodePacked(..."

                let expr_1420_mpos := allocate_unbounded()
                let _144 := add(expr_1420_mpos, 0x20)

                let _145 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_144, expr_1409_mpos, expr_1414_mpos, expr_1419_mpos)
                mstore(expr_1420_mpos, sub(_145, add(expr_1420_mpos, 0x20)))
                finalize_allocation(expr_1420_mpos, sub(_145, expr_1420_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1421_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1420_mpos)
                /// @src 29:1122:1422  "return..."
                var__1400_mpos := expr_1421_mpos
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_bytes32() -> ret {
                ret := 0
            }

            function array_dataslot_t_bytes_memory_ptr(ptr) -> data {
                data := ptr

                data := add(ptr, 0x20)

            }

            /// @ast-id 2981
            /// @src 20:3204:3481  "function hashCrossDomainMessageV0(..."
            function fun_hashCrossDomainMessageV0_2981(var__target_2959, var__sender_2961, var__data_2963_mpos, var__nonce_2965) -> var__2968 {
                /// @src 20:3369:3376  "bytes32"
                let zero_t_bytes32_146 := zero_value_for_split_t_bytes32()
                var__2968 := zero_t_bytes32_146

                /// @src 20:3405:3413  "Encoding"
                let expr_2971_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 20:3441:3448  "_target"
                let _147 := var__target_2959
                let expr_2973 := _147
                /// @src 20:3450:3457  "_sender"
                let _148 := var__sender_2961
                let expr_2974 := _148
                /// @src 20:3459:3464  "_data"
                let _149_mpos := var__data_2963_mpos
                let expr_2975_mpos := _149_mpos
                /// @src 20:3466:3472  "_nonce"
                let _150 := var__nonce_2965
                let expr_2976 := _150
                /// @src 20:3405:3473  "Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce)"
                let expr_2977_mpos := fun_encodeCrossDomainMessageV0_3669(expr_2973, expr_2974, expr_2975_mpos, expr_2976)
                /// @src 20:3395:3474  "keccak256(Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce))"
                let expr_2978 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_2977_mpos), array_length_t_bytes_memory_ptr(expr_2977_mpos))
                /// @src 20:3388:3474  "return keccak256(Encoding.encodeCrossDomainMessageV0(_target, _sender, _data, _nonce))"
                var__2968 := expr_2978
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 3012
            /// @src 20:3975:4502  "function hashCrossDomainMessageV1(..."
            function fun_hashCrossDomainMessageV1_3012(var__nonce_2984, var__sender_2986, var__target_2988, var__value_2990, var__gasLimit_2992, var__data_2994_mpos) -> var__2997 {
                /// @src 20:4191:4198  "bytes32"
                let zero_t_bytes32_151 := zero_value_for_split_t_bytes32()
                var__2997 := zero_t_bytes32_151

                /// @src 20:4256:4264  "Encoding"
                let expr_3000_address := linkersymbol("contracts/libraries/Encoding.sol:Encoding")
                /// @src 20:4313:4319  "_nonce"
                let _152 := var__nonce_2984
                let expr_3002 := _152
                /// @src 20:4341:4348  "_sender"
                let _153 := var__sender_2986
                let expr_3003 := _153
                /// @src 20:4370:4377  "_target"
                let _154 := var__target_2988
                let expr_3004 := _154
                /// @src 20:4399:4405  "_value"
                let _155 := var__value_2990
                let expr_3005 := _155
                /// @src 20:4427:4436  "_gasLimit"
                let _156 := var__gasLimit_2992
                let expr_3006 := _156
                /// @src 20:4458:4463  "_data"
                let _157_mpos := var__data_2994_mpos
                let expr_3007_mpos := _157_mpos
                /// @src 20:4256:4481  "Encoding.encodeCrossDomainMessageV1(..."
                let expr_3008_mpos := fun_encodeCrossDomainMessageV1_3699(expr_3002, expr_3003, expr_3004, expr_3005, expr_3006, expr_3007_mpos)
                /// @src 20:4229:4495  "keccak256(..."
                let expr_3009 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3008_mpos), array_length_t_bytes_memory_ptr(expr_3008_mpos))
                /// @src 20:4210:4495  "return..."
                var__2997 := expr_3009
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 3110
            /// @src 22:1433:4346  "function callWithMinGas(..."
            function fun_callWithMinGas_3110(var__target_3092, var__minGas_3094, var__value_3096, var__calldata_3098_mpos) -> var__3101 {
                /// @src 22:1587:1591  "bool"
                let zero_t_bool_158 := zero_value_for_split_t_bool()
                var__3101 := zero_t_bool_158

                /// @src 22:1603:1616  "bool _success"
                let var__success_3104
                let zero_t_bool_159 := zero_value_for_split_t_bool()
                var__success_3104 := zero_t_bool_159
                /// @src 22:1626:4315  "assembly {..."
                {
                    if lt(gas(), div(mul(64, add(var__minGas_3094, 200)), 63))
                    {
                        mstore(0, 0x08c379a0)
                        mstore(32, 32)
                        mstore(88, 0x0000185361666543616c6c3a204e6f7420656e6f75676820676173)
                        revert(28, 100)
                    }
                    var__success_3104 := call(gas(), var__target_3092, var__value_3096, add(var__calldata_3098_mpos, 32), mload(var__calldata_3098_mpos), 0x00, 0x00)
                }
                /// @src 22:4331:4339  "_success"
                let _160 := var__success_3104
                let expr_3107 := _160
                /// @src 22:4324:4339  "return _success"
                var__3101 := expr_3107
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_bytes_memory_ptr() -> ret {
                ret := 96
            }

            function abi_encode_tuple_t_address_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_address_t_bytes_memory_ptr_t_uint256__fromStack(headStart , value0, value1, value2, value3) -> tail {
                tail := add(headStart, 128)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

                abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))

                mstore(add(headStart, 64), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value2,  tail)

                abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))

            }

            /// @ast-id 3669
            /// @src 19:3113:3527  "function encodeCrossDomainMessageV0(..."
            function fun_encodeCrossDomainMessageV0_3669(var__target_3648, var__sender_3650, var__data_3652_mpos, var__nonce_3654) -> var__3657_mpos {
                /// @src 19:3280:3292  "bytes memory"
                let zero_t_bytes_memory_ptr_161_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3657_mpos := zero_t_bytes_memory_ptr_161_mpos

                /// @src 19:3427:3434  "_target"
                let _162 := var__target_3648
                let expr_3662 := _162
                /// @src 19:3452:3459  "_sender"
                let _163 := var__sender_3650
                let expr_3663 := _163
                /// @src 19:3477:3482  "_data"
                let _164_mpos := var__data_3652_mpos
                let expr_3664_mpos := _164_mpos
                /// @src 19:3500:3506  "_nonce"
                let _165 := var__nonce_3654
                let expr_3665 := _165
                /// @src 19:3323:3520  "abi.encodeWithSignature(..."

                let expr_3666_mpos := allocate_unbounded()
                let _166 := add(expr_3666_mpos, 0x20)

                mstore(_166, 0xcbd4ece900000000000000000000000000000000000000000000000000000000)
                _166 := add(_166, 4)

                let _167 := abi_encode_tuple_t_address_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_address_t_bytes_memory_ptr_t_uint256__fromStack(_166, expr_3662, expr_3663, expr_3664_mpos, expr_3665)
                mstore(expr_3666_mpos, sub(_167, add(expr_3666_mpos, 0x20)))
                finalize_allocation(expr_3666_mpos, sub(_167, expr_3666_mpos))
                /// @src 19:3304:3520  "return..."
                var__3657_mpos := expr_3666_mpos
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart , value0, value1, value2, value3, value4, value5) -> tail {
                tail := add(headStart, 192)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

                abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))

                abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))

                abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))

                abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))

                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value5,  tail)

            }

            /// @ast-id 3699
            /// @src 19:4023:4555  "function encodeCrossDomainMessageV1(..."
            function fun_encodeCrossDomainMessageV1_3699(var__nonce_3672, var__sender_3674, var__target_3676, var__value_3678, var__gasLimit_3680, var__data_3682_mpos) -> var__3685_mpos {
                /// @src 19:4241:4253  "bytes memory"
                let zero_t_bytes_memory_ptr_168_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3685_mpos := zero_t_bytes_memory_ptr_168_mpos

                /// @src 19:4404:4410  "_nonce"
                let _169 := var__nonce_3672
                let expr_3690 := _169
                /// @src 19:4428:4435  "_sender"
                let _170 := var__sender_3674
                let expr_3691 := _170
                /// @src 19:4453:4460  "_target"
                let _171 := var__target_3676
                let expr_3692 := _171
                /// @src 19:4478:4484  "_value"
                let _172 := var__value_3678
                let expr_3693 := _172
                /// @src 19:4502:4511  "_gasLimit"
                let _173 := var__gasLimit_3680
                let expr_3694 := _173
                /// @src 19:4529:4534  "_data"
                let _174_mpos := var__data_3682_mpos
                let expr_3695_mpos := _174_mpos
                /// @src 19:4284:4548  "abi.encodeWithSignature(..."

                let expr_3696_mpos := allocate_unbounded()
                let _175 := add(expr_3696_mpos, 0x20)

                mstore(_175, 0xd764ad0b00000000000000000000000000000000000000000000000000000000)
                _175 := add(_175, 4)

                let _176 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(_175, expr_3690, expr_3691, expr_3692, expr_3693, expr_3694, expr_3695_mpos)
                mstore(expr_3696_mpos, sub(_176, add(expr_3696_mpos, 0x20)))
                finalize_allocation(expr_3696_mpos, sub(_176, expr_3696_mpos))
                /// @src 19:4265:4548  "return..."
                var__3685_mpos := expr_3696_mpos
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 3716
            /// @src 19:4874:5102  "function encodeVersionedNonce(uint240 _nonce, uint16 _version) internal pure returns (uint256) {..."
            function fun_encodeVersionedNonce_3716(var__nonce_3702, var__version_3704) -> var__3707 {
                /// @src 19:4960:4967  "uint256"
                let zero_t_uint256_177 := zero_value_for_split_t_uint256()
                var__3707 := zero_t_uint256_177

                /// @src 19:4979:4992  "uint256 nonce"
                let var_nonce_3710
                let zero_t_uint256_178 := zero_value_for_split_t_uint256()
                var_nonce_3710 := zero_t_uint256_178
                /// @src 19:5002:5074  "assembly {..."
                {
                    var_nonce_3710 := or(shl(240, var__version_3704), var__nonce_3702)
                }
                /// @src 19:5090:5095  "nonce"
                let _179 := var_nonce_3710
                let expr_3713 := _179
                /// @src 19:5083:5095  "return nonce"
                var__3707 := expr_3713
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function zero_value_for_split_t_uint240() -> ret {
                ret := 0
            }

            function zero_value_for_split_t_uint16() -> ret {
                ret := 0
            }

            /// @ast-id 3738
            /// @src 19:5370:5713  "function decodeVersionedNonce(uint256 _nonce) internal pure returns (uint240, uint16) {..."
            function fun_decodeVersionedNonce_3738(var__nonce_3719) -> var__3722, var__3724 {
                /// @src 19:5439:5446  "uint240"
                let zero_t_uint240_180 := zero_value_for_split_t_uint240()
                var__3722 := zero_t_uint240_180
                /// @src 19:5448:5454  "uint16"
                let zero_t_uint16_181 := zero_value_for_split_t_uint16()
                var__3724 := zero_t_uint16_181

                /// @src 19:5466:5479  "uint240 nonce"
                let var_nonce_3727
                let zero_t_uint240_182 := zero_value_for_split_t_uint240()
                var_nonce_3727 := zero_t_uint240_182
                /// @src 19:5489:5503  "uint16 version"
                let var_version_3730
                let zero_t_uint16_183 := zero_value_for_split_t_uint16()
                var_version_3730 := zero_t_uint16_183
                /// @src 19:5513:5674  "assembly {..."
                {
                    var_nonce_3727 := and(var__nonce_3719, 0x0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
                    var_version_3730 := shr(240, var__nonce_3719)
                }
                /// @src 19:5691:5696  "nonce"
                let _184 := var_nonce_3727
                let expr_3733 := _184
                /// @src 19:5690:5706  "(nonce, version)"
                let expr_3735_component_1 := expr_3733
                /// @src 19:5698:5705  "version"
                let _185 := var_version_3730
                let expr_3734 := _185
                /// @src 19:5690:5706  "(nonce, version)"
                let expr_3735_component_2 := expr_3734
                /// @src 19:5683:5706  "return (nonce, version)"
                var__3722 := expr_3735_component_1
                var__3724 := expr_3735_component_2
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr) {

                mstore(add(memPtr, 0), "0")

            }

            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }

            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }

            function increment_t_uint256(value) -> ret {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }

            function cleanup_t_rational_10_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }

            function checked_div_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes) {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }

            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }

            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }

            function checked_sub_t_uint256(x, y) -> diff {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function mod_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function cleanup_t_rational_48_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function convert_t_uint256_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }

            function cleanup_t_bytes1(value) -> cleaned {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }

            function shift_left_248(value) -> newValue {
                newValue :=

                shl(248, value)

            }

            function convert_t_uint8_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }

            function panic_error_0x32() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }

            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 1)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            /// @ast-id 3827
            /// @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3827(var_value_3751) -> var__3754_mpos {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_186_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3754_mpos := zero_t_string_memory_ptr_186_mpos

                /// @src 6:665:670  "value"
                let _187 := var_value_3751
                let expr_3756 := _187
                /// @src 6:674:675  "0"
                let expr_3757 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3758 := eq(cleanup_t_uint256(expr_3756), convert_t_rational_0_by_1_to_t_uint256(expr_3757))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3758 {
                    /// @src 6:691:701  "return \"0\""
                    var__3754_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                    /// @src 6:661:712  "if (value == 0) {..."
                }
                /// @src 6:736:741  "value"
                let _188 := var_value_3751
                let expr_3765 := _188
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3764 := expr_3765
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3768
                let zero_t_uint256_189 := zero_value_for_split_t_uint256()
                var_digits_3768 := zero_t_uint256_189
                /// @src 6:775:850  "while (temp != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:782:786  "temp"
                    let _190 := var_temp_3764
                    let expr_3770 := _190
                    /// @src 6:790:791  "0"
                    let expr_3771 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3772 := iszero(eq(cleanup_t_uint256(expr_3770), convert_t_rational_0_by_1_to_t_uint256(expr_3771)))
                    if iszero(expr_3772) { break }
                    /// @src 6:807:815  "digits++"
                    let _192 := var_digits_3768
                    let _191 := increment_t_uint256(_192)
                    var_digits_3768 := _191
                    let expr_3774 := _192
                    /// @src 6:837:839  "10"
                    let expr_3777 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _193 := convert_t_rational_10_by_1_to_t_uint256(expr_3777)
                    let _194 := var_temp_3764
                    let expr_3778 := checked_div_t_uint256(_194, _193)

                    var_temp_3764 := expr_3778
                }
                /// @src 6:891:897  "digits"
                let _195 := var_digits_3768
                let expr_3786 := _195
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3787_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3786)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3783_mpos := expr_3787_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:915:920  "value"
                    let _196 := var_value_3751
                    let expr_3789 := _196
                    /// @src 6:924:925  "0"
                    let expr_3790 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3791 := iszero(eq(cleanup_t_uint256(expr_3789), convert_t_rational_0_by_1_to_t_uint256(expr_3790)))
                    if iszero(expr_3791) { break }
                    /// @src 6:951:952  "1"
                    let expr_3793 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _197 := convert_t_rational_1_by_1_to_t_uint256(expr_3793)
                    let _198 := var_digits_3768
                    let expr_3794 := checked_sub_t_uint256(_198, _197)

                    var_digits_3768 := expr_3794
                    /// @src 6:996:998  "48"
                    let expr_3803 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _199 := var_value_3751
                    let expr_3806 := _199
                    /// @src 6:1017:1019  "10"
                    let expr_3807 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3808 := mod_t_uint256(expr_3806, convert_t_rational_10_by_1_to_t_uint256(expr_3807))

                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3809 := expr_3808
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3810 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3803), expr_3809)

                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3811 := convert_t_uint256_to_t_uint8(expr_3810)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3812 := convert_t_uint8_to_t_bytes1(expr_3811)
                    /// @src 6:966:972  "buffer"
                    let _200_mpos := var_buffer_3783_mpos
                    let expr_3796_mpos := _200_mpos
                    /// @src 6:973:979  "digits"
                    let _201 := var_digits_3768
                    let expr_3797 := _201
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _202 := expr_3812
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3796_mpos, expr_3797), byte(0, _202))
                    let expr_3813 := expr_3812
                    /// @src 6:1045:1047  "10"
                    let expr_3816 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _203 := convert_t_rational_10_by_1_to_t_uint256(expr_3816)
                    let _204 := var_value_3751
                    let expr_3817 := checked_div_t_uint256(_204, _203)

                    var_value_3751 := expr_3817
                }
                /// @src 6:1081:1087  "buffer"
                let _205_mpos := var_buffer_3783_mpos
                let expr_3823_mpos := _205_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3824_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3823_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3754_mpos := expr_3824_mpos
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

            /// @ast-id 5609
            /// @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_5609(var_account_5597) -> var__5600 {
                /// @src 2:1246:1250  "bool"
                let zero_t_bool_206 := zero_value_for_split_t_bool()
                var__5600 := zero_t_bool_206

                /// @src 2:1476:1483  "account"
                let _207 := var_account_5597
                let expr_5602 := _207
                /// @src 2:1476:1495  "account.code.length"
                let expr_5604 := extcodesize(expr_5602)
                /// @src 2:1498:1499  "0"
                let expr_5605 := 0x00
                /// @src 2:1476:1499  "account.code.length > 0"
                let expr_5606 := gt(cleanup_t_uint256(expr_5604), convert_t_rational_0_by_1_to_t_uint256(expr_5605))
                /// @src 2:1469:1499  "return account.code.length > 0"
                var__5600 := expr_5606
                leave

            }
            /// @src 10:630:2007  "contract L1CrossDomainMessenger is CrossDomainMessenger, Semver {..."

        }

        data ".metadata" hex"a26469706673582212209b5054772f398a1e151b9a2fb1bf62d4e0f0f6264a69b13d3246031d0e1ada0164736f6c634300080f0033"
    }

}


IR:

/// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 11:"contracts/L1/L2OutputOracle.sol", 29:"contracts/universal/Semver.sol"
object "L2OutputOracle_2037" {
    code {
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."
        mstore(64, memoryguard(384))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_1696_object_L2OutputOracle_2037()
        constructor_L2OutputOracle_2037(_1, _2, _3, _4, _5, _6, _7)

        let _8 := allocate_unbounded()
        codecopy(_8, dataoffset("L2OutputOracle_2037_deployed"), datasize("L2OutputOracle_2037_deployed"))

        setimmutable(_8, "1367", mload(128))

        setimmutable(_8, "1370", mload(160))

        setimmutable(_8, "1373", mload(192))

        setimmutable(_8, "1592", mload(224))

        setimmutable(_8, "1595", mload(256))

        setimmutable(_8, "1598", mload(288))

        setimmutable(_8, "1601", mload(320))

        setimmutable(_8, "1604", mload(352))

        return(_8, datasize("L2OutputOracle_2037_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        function round_up_to_mul_of_32(value) -> result {
            result := and(add(value, 31), not(31))
        }

        function panic_error_0x41() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }

        function finalize_allocation(memPtr, size) {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            // protect against overflow
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }

        function allocate_memory(size) -> memPtr {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }

        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
            revert(0, 0)
        }

        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
            revert(0, 0)
        }

        function cleanup_t_uint256(value) -> cleaned {
            cleaned := value
        }

        function validator_revert_t_uint256(value) {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint256_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }

        function cleanup_t_uint160(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function cleanup_t_address(value) -> cleaned {
            cleaned := cleanup_t_uint160(value)
        }

        function validator_revert_t_address(value) {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }

        function abi_decode_t_address_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_address(value)
        }

        function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {
            if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            {

                let offset := 0

                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 32

                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 64

                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 96

                value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 128

                value4 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 160

                value5 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 192

                value6 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

        }

        function copy_arguments_for_constructor_1696_object_L2OutputOracle_2037() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 {
            let programSize := datasize("L2OutputOracle_2037")
            let argSize := sub(codesize(), programSize)

            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)

            ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_addresst_addresst_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }

        function cleanup_t_rational_1_by_1(value) -> cleaned {
            cleaned := value
        }

        function identity(value) -> ret {
            ret := value
        }

        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }

        function cleanup_t_rational_2_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
        }

        function cleanup_t_rational_0_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }

        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }

        function store_literal_in_memory_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(memPtr) {

            mstore(add(memPtr, 0), "L2OutputOracle: L2 block time mu")

            mstore(add(memPtr, 32), "st be greater than 0")

        }

        function abi_encode_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)
            store_literal_in_memory_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function store_literal_in_memory_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e(memPtr) {

            mstore(add(memPtr, 0), "L2OutputOracle: submission inter")

            mstore(add(memPtr, 32), "val must be greater than L2 bloc")

            mstore(add(memPtr, 64), "k time")

        }

        function abi_encode_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
            store_literal_in_memory_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e(pos)
            end := add(pos, 96)
        }

        function abi_encode_tuple_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @ast-id 1696
        /// @src 11:3138:3955  "constructor(..."
        function constructor_L2OutputOracle_2037(var__submissionInterval_1636, var__l2BlockTime_1638, var__startingBlockNumber_1640, var__startingTimestamp_1642, var__proposer_1644, var__challenger_1646, var__finalizationPeriodSeconds_1648) {
            /// @src 11:3404:3405  "1"
            let expr_1651 := 0x01
            let _9 := convert_t_rational_1_by_1_to_t_uint256(expr_1651)
            /// @src 11:3407:3408  "2"
            let expr_1652 := 0x02
            let _10 := convert_t_rational_2_by_1_to_t_uint256(expr_1652)
            /// @src 11:3410:3411  "0"
            let expr_1653 := 0x00
            let _11 := convert_t_rational_0_by_1_to_t_uint256(expr_1653)

            /// @src 11:3138:3955  "constructor(..."
            constructor_Semver_1425(_9, _10, _11)

            /// @src 11:3431:3443  "_l2BlockTime"
            let _12 := var__l2BlockTime_1638
            let expr_1657 := _12
            /// @src 11:3446:3447  "0"
            let expr_1658 := 0x00
            /// @src 11:3431:3447  "_l2BlockTime > 0"
            let expr_1659 := gt(cleanup_t_uint256(expr_1657), convert_t_rational_0_by_1_to_t_uint256(expr_1658))
            /// @src 11:3423:3504  "require(_l2BlockTime > 0, \"L2OutputOracle: L2 block time must be greater than 0\")"
            require_helper_t_stringliteral_ac9ff37c1a6529ab3b67321d57550ba5021740edf6aa58a5708726b9aa5179b7(expr_1659)
            /// @src 11:3535:3554  "_submissionInterval"
            let _13 := var__submissionInterval_1636
            let expr_1664 := _13
            /// @src 11:3557:3569  "_l2BlockTime"
            let _14 := var__l2BlockTime_1638
            let expr_1665 := _14
            /// @src 11:3535:3569  "_submissionInterval > _l2BlockTime"
            let expr_1666 := gt(cleanup_t_uint256(expr_1664), cleanup_t_uint256(expr_1665))
            /// @src 11:3514:3665  "require(..."
            require_helper_t_stringliteral_eb5f91bfd26e8d3f8144e06a578f3e15e8fed1c71cf8d18eb898df4ff893f57e(expr_1666)
            /// @src 11:3698:3717  "_submissionInterval"
            let _15 := var__submissionInterval_1636
            let expr_1671 := _15
            /// @src 11:3676:3717  "SUBMISSION_INTERVAL = _submissionInterval"
            let _16 := expr_1671
            mstore(224, _16)
            let expr_1672 := expr_1671
            /// @src 11:3743:3755  "_l2BlockTime"
            let _17 := var__l2BlockTime_1638
            let expr_1675 := _17
            /// @src 11:3727:3755  "L2_BLOCK_TIME = _l2BlockTime"
            let _18 := expr_1675
            mstore(256, _18)
            let expr_1676 := expr_1675
            /// @src 11:3776:3785  "_proposer"
            let _19 := var__proposer_1644
            let expr_1679 := _19
            /// @src 11:3765:3785  "PROPOSER = _proposer"
            let _20 := expr_1679
            mstore(320, _20)
            let expr_1680 := expr_1679
            /// @src 11:3808:3819  "_challenger"
            let _21 := var__challenger_1646
            let expr_1683 := _21
            /// @src 11:3795:3819  "CHALLENGER = _challenger"
            let _22 := expr_1683
            mstore(288, _22)
            let expr_1684 := expr_1683
            /// @src 11:3859:3885  "_finalizationPeriodSeconds"
            let _23 := var__finalizationPeriodSeconds_1648
            let expr_1687 := _23
            /// @src 11:3829:3885  "FINALIZATION_PERIOD_SECONDS = _finalizationPeriodSeconds"
            let _24 := expr_1687
            mstore(352, _24)
            let expr_1688 := expr_1687
            /// @src 11:3907:3927  "_startingBlockNumber"
            let _25 := var__startingBlockNumber_1640
            let expr_1691 := _25
            /// @src 11:3929:3947  "_startingTimestamp"
            let _26 := var__startingTimestamp_1642
            let expr_1692 := _26
            fun_initialize_1723(expr_1691, expr_1692)

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        /// @ast-id 1396
        /// @src 29:726:919  "constructor(..."
        function constructor_Semver_1425(var__major_1376, var__minor_1378, var__patch_1380) {

            /// @src 29:726:919  "constructor(..."
            constructor_Initializable_1576()

            /// @src 29:842:848  "_major"
            let _27 := var__major_1376
            let expr_1384 := _27
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _28 := expr_1384
            mstore(128, _28)
            let expr_1385 := expr_1384
            /// @src 29:874:880  "_minor"
            let _29 := var__minor_1378
            let expr_1388 := _29
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _30 := expr_1388
            mstore(160, _30)
            let expr_1389 := expr_1388
            /// @src 29:906:912  "_patch"
            let _31 := var__patch_1380
            let expr_1392 := _31
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _32 := expr_1392
            mstore(192, _32)
            let expr_1393 := expr_1392

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        /// @src 4:2372:5647  "abstract contract Initializable {..."
        function constructor_Initializable_1576() {

            /// @src 4:2372:5647  "abstract contract Initializable {..."

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        function shift_right_8_unsigned(value) -> newValue {
            newValue :=

            shr(8, value)

        }

        function cleanup_from_storage_t_bool(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }

        function read_from_storage_split_offset_1_t_bool(slot) -> value {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))

        }

        function cleanup_t_bool(value) -> cleaned {
            cleaned := iszero(iszero(value))
        }

        function shift_right_0_unsigned(value) -> newValue {
            newValue :=

            shr(0, value)

        }

        function cleanup_from_storage_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_uint8(slot) -> value {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))

        }

        function cleanup_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }

        function convert_t_uint160_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }

        function convert_t_uint160_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_contract$_Initializable_$1576_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is alrea")

            mstore(add(memPtr, 32), "dy initialized")

        }

        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function shift_left_0(value) -> newValue {
            newValue :=

            shl(0, value)

        }

        function update_byte_slice_1_shift_0(value, toInsert) -> result {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint8_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }

        function prepare_store_t_uint8(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_8(value) -> newValue {
            newValue :=

            shl(8, value)

        }

        function update_byte_slice_1_shift_1(value, toInsert) -> result {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_bool_to_t_bool(value) -> converted {
            converted := cleanup_t_bool(value)
        }

        function prepare_store_t_bool(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }

        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }

        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
            tail := add(headStart, 32)

            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

        }

        /// @ast-id 1496
        /// @src 4:3067:3562  "modifier initializer() {..."
        function modifier_initializer_1704(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

            /// @src 4:3123:3136  "_initializing"
            let _33 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1445 := _33
            /// @src 4:3122:3136  "!_initializing"
            let expr_1446 := cleanup_t_bool(iszero(expr_1445))
            /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_1444 := expr_1446
            /// @src 4:3168:3182  "isTopLevelCall"
            let _34 := var_isTopLevelCall_1444
            let expr_1449 := _34
            /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
            let expr_1453 := expr_1449
            if expr_1453 {
                /// @src 4:3186:3198  "_initialized"
                let _35 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_1450 := _35
                /// @src 4:3201:3202  "1"
                let expr_1451 := 0x01
                /// @src 4:3186:3202  "_initialized < 1"
                let expr_1452 := lt(cleanup_t_uint8(expr_1450), convert_t_rational_1_by_1_to_t_uint8(expr_1451))
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                expr_1453 := expr_1452
            }
            /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
            let expr_1454 := expr_1453
            /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
            let expr_1468 := expr_1454
            if iszero(expr_1468) {
                /// @src 4:3209:3216  "Address"
                let expr_1455_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                /// @src 4:3236:3240  "this"
                let expr_1459_address := address()
                /// @src 4:3228:3241  "address(this)"
                let expr_1460 := convert_t_contract$_Initializable_$1576_to_t_address(expr_1459_address)
                /// @src 4:3209:3242  "Address.isContract(address(this))"
                let expr_1461 := fun_isContract_3983(expr_1460)
                /// @src 4:3208:3242  "!Address.isContract(address(this))"
                let expr_1462 := cleanup_t_bool(iszero(expr_1461))
                /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                let expr_1466 := expr_1462
                if expr_1466 {
                    /// @src 4:3246:3258  "_initialized"
                    let _36 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1463 := _36
                    /// @src 4:3262:3263  "1"
                    let expr_1464 := 0x01
                    /// @src 4:3246:3263  "_initialized == 1"
                    let expr_1465 := eq(cleanup_t_uint8(expr_1463), convert_t_rational_1_by_1_to_t_uint8(expr_1464))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    expr_1466 := expr_1465
                }
                /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1467 := expr_1466
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                expr_1468 := expr_1467
            }
            /// @src 4:3146:3336  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1468)
            /// @src 4:3361:3362  "1"
            let expr_1473 := 0x01
            /// @src 4:3346:3362  "_initialized = 1"
            let _37 := convert_t_rational_1_by_1_to_t_uint8(expr_1473)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _37)
            let expr_1474 := _37
            /// @src 4:3376:3390  "isTopLevelCall"
            let _38 := var_isTopLevelCall_1444
            let expr_1476 := _38
            /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            if expr_1476 {
                /// @src 4:3422:3426  "true"
                let expr_1478 := 0x01
                /// @src 4:3406:3426  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1478)
                let expr_1479 := expr_1478
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            }
            /// @src 4:3446:3447  "_"
            fun_initialize_1723_inner(var__startingBlockNumber_1699, var__startingTimestamp_1701)
            /// @src 4:3461:3475  "isTopLevelCall"
            let _39 := var_isTopLevelCall_1444
            let expr_1484 := _39
            /// @src 4:3457:3556  "if (isTopLevelCall) {..."
            if expr_1484 {
                /// @src 4:3507:3512  "false"
                let expr_1486 := 0x00
                /// @src 4:3491:3512  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1486)
                let expr_1487 := expr_1486
                /// @src 4:3543:3544  "1"
                let expr_1490 := 0x01
                /// @src 4:3531:3545  "Initialized(1)"
                let _40 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _41 := allocate_unbounded()
                    let _42 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_41 , expr_1490)
                    log1(_41, sub(_42, _41) , _40)
                }/// @src 4:3457:3556  "if (isTopLevelCall) {..."
            }

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        function store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(memPtr) {

            mstore(add(memPtr, 0), "L2OutputOracle: starting L2 time")

            mstore(add(memPtr, 32), "stamp must be less than current ")

            mstore(add(memPtr, 64), "time")

        }

        function abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 68)
            store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(pos)
            end := add(pos, 96)
        }

        function abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function update_byte_slice_32_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint256_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
        }

        function prepare_store_t_uint256(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0) {
            let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
        }

        /// @src 11:4169:4556  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
        function fun_initialize_1723_inner(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

            /// @src 11:4317:4335  "_startingTimestamp"
            let _43 := var__startingTimestamp_1701
            let expr_1707 := _43
            /// @src 11:4339:4354  "block.timestamp"
            let expr_1709 := timestamp()
            /// @src 11:4317:4354  "_startingTimestamp <= block.timestamp"
            let expr_1710 := iszero(gt(cleanup_t_uint256(expr_1707), cleanup_t_uint256(expr_1709)))
            /// @src 11:4296:4448  "require(..."
            require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(expr_1710)
            /// @src 11:4479:4497  "_startingTimestamp"
            let _44 := var__startingTimestamp_1701
            let expr_1715 := _44
            /// @src 11:4459:4497  "startingTimestamp = _startingTimestamp"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x02, expr_1715)
            let expr_1716 := expr_1715
            /// @src 11:4529:4549  "_startingBlockNumber"
            let _45 := var__startingBlockNumber_1699
            let expr_1719 := _45
            /// @src 11:4507:4549  "startingBlockNumber = _startingBlockNumber"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x01, expr_1719)
            let expr_1720 := expr_1719

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        /// @ast-id 1723
        /// @src 11:4169:4556  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
        function fun_initialize_1723(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

            modifier_initializer_1704(var__startingBlockNumber_1699, var__startingTimestamp_1701)
        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        function zero_value_for_split_t_bool() -> ret {
            ret := 0
        }

        /// @ast-id 3983
        /// @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_3983(var_account_3971) -> var__3974 {
            /// @src 5:1235:1239  "bool"
            let zero_t_bool_46 := zero_value_for_split_t_bool()
            var__3974 := zero_t_bool_46

            /// @src 5:1465:1472  "account"
            let _47 := var_account_3971
            let expr_3976 := _47
            /// @src 5:1465:1484  "account.code.length"
            let expr_3978 := extcodesize(expr_3976)
            /// @src 5:1487:1488  "0"
            let expr_3979 := 0x00
            /// @src 5:1465:1488  "account.code.length > 0"
            let expr_3980 := gt(cleanup_t_uint256(expr_3978), convert_t_rational_0_by_1_to_t_uint256(expr_3979))
            /// @src 5:1458:1488  "return account.code.length > 0"
            var__3974 := expr_3980
            leave

        }
        /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

    }
    /// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 11:"contracts/L1/L2OutputOracle.sol", 29:"contracts/universal/Semver.sol"
    object "L2OutputOracle_2037_deployed" {
        code {
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."
            mstore(64, memoryguard(128))

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x002134cc
                {
                    // L2_BLOCK_TIME()

                    external_fun_L2_BLOCK_TIME_1595()
                }

                case 0x4599c788
                {
                    // latestBlockNumber()

                    external_fun_latestBlockNumber_2005()
                }

                case 0x529933df
                {
                    // SUBMISSION_INTERVAL()

                    external_fun_SUBMISSION_INTERVAL_1592()
                }

                case 0x54fd4d50
                {
                    // version()

                    external_fun_version_1424()
                }

                case 0x69f16eec
                {
                    // latestOutputIndex()

                    external_fun_latestOutputIndex_1974()
                }

                case 0x6abcf563
                {
                    // nextOutputIndex()

                    external_fun_nextOutputIndex_1984()
                }

                case 0x6b4d98dd
                {
                    // CHALLENGER()

                    external_fun_CHALLENGER_1598()
                }

                case 0x70872aa5
                {
                    // startingBlockNumber()

                    external_fun_startingBlockNumber_1607()
                }

                case 0x7f006420
                {
                    // getL2OutputIndexAfter(uint256)

                    external_fun_getL2OutputIndexAfter_1946()
                }

                case 0x88786272
                {
                    // startingTimestamp()

                    external_fun_startingTimestamp_1610()
                }

                case 0x89c44cbb
                {
                    // deleteL2Outputs(uint256)

                    external_fun_deleteL2Outputs_1770()
                }

                case 0x9aaab648
                {
                    // proposeL2Output(bytes32,uint256,bytes32,uint256)

                    external_fun_proposeL2Output_1863()
                }

                case 0xa25ae557
                {
                    // getL2Output(uint256)

                    external_fun_getL2Output_1877()
                }

                case 0xbffa7f0f
                {
                    // PROPOSER()

                    external_fun_PROPOSER_1601()
                }

                case 0xcf8e5cf0
                {
                    // getL2OutputAfter(uint256)

                    external_fun_getL2OutputAfter_1962()
                }

                case 0xd1de856c
                {
                    // computeL2Timestamp(uint256)

                    external_fun_computeL2Timestamp_2036()
                }

                case 0xdcec3348
                {
                    // nextBlockNumber()

                    external_fun_nextBlockNumber_2017()
                }

                case 0xe4a30116
                {
                    // initialize(uint256,uint256)

                    external_fun_initialize_1723()
                }

                case 0xf4daa291
                {
                    // FINALIZATION_PERIOD_SECONDS()

                    external_fun_FINALIZATION_PERIOD_SECONDS_1604()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            /// @ast-id 1595
            /// @src 11:980:1018  "uint256 public immutable L2_BLOCK_TIME"
            function getter_fun_L2_BLOCK_TIME_1595() -> rval {
                rval := loadimmutable("1595")
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint256(value))
            }

            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_L2_BLOCK_TIME_1595() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_L2_BLOCK_TIME_1595()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_latestBlockNumber_2005() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_latestBlockNumber_2005()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 1592
            /// @src 11:816:860  "uint256 public immutable SUBMISSION_INTERVAL"
            function getter_fun_SUBMISSION_INTERVAL_1592() -> rval {
                rval := loadimmutable("1592")
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function external_fun_SUBMISSION_INTERVAL_1592() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_SUBMISSION_INTERVAL_1592()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length)
                {
                    // clear end
                    mstore(add(dst, length), 0)
                }
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_version_1424() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_version_1424()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_latestOutputIndex_1974() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_latestOutputIndex_1974()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_nextOutputIndex_1984() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_nextOutputIndex_1984()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 1598
            /// @src 11:1115:1150  "address public immutable CHALLENGER"
            function getter_fun_CHALLENGER_1598() -> rval {
                rval := loadimmutable("1598")
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function cleanup_t_uint160(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function cleanup_t_address(value) -> cleaned {
                cleaned := cleanup_t_uint160(value)
            }

            function abi_encode_t_address_to_t_address_fromStack(value, pos) {
                mstore(pos, cleanup_t_address(value))
            }

            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_CHALLENGER_1598() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_CHALLENGER_1598()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function shift_right_unsigned_dynamic(bits, value) -> newValue {
                newValue :=

                shr(bits, value)

            }

            function cleanup_from_storage_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)

            }

            /// @ast-id 1607
            /// @src 11:1547:1581  "uint256 public startingBlockNumber"
            function getter_fun_startingBlockNumber_1607() -> ret {

                let slot := 1
                let offset := 0

                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function external_fun_startingBlockNumber_1607() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_startingBlockNumber_1607()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
                revert(0, 0)
            }

            function validator_revert_t_uint256(value) {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }

            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_getL2OutputIndexAfter_1946() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 :=  fun_getL2OutputIndexAfter_1946(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 1610
            /// @src 11:1682:1714  "uint256 public startingTimestamp"
            function getter_fun_startingTimestamp_1610() -> ret {

                let slot := 2
                let offset := 0

                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function external_fun_startingTimestamp_1610() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_startingTimestamp_1610()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function external_fun_deleteL2Outputs_1770() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                fun_deleteL2Outputs_1770(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function validator_revert_t_bytes32(value) {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }

            function abi_decode_t_bytes32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }

            function abi_decode_tuple_t_bytes32t_uint256t_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {
                if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 96

                    value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_proposeL2Output_1863() {

                let param_0, param_1, param_2, param_3 :=  abi_decode_tuple_t_bytes32t_uint256t_bytes32t_uint256(4, calldatasize())
                fun_proposeL2Output_1863(param_0, param_1, param_2, param_3)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_t_bytes32_to_t_bytes32(value, pos) {
                mstore(pos, cleanup_t_bytes32(value))
            }

            function cleanup_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function abi_encode_t_uint128_to_t_uint128(value, pos) {
                mstore(pos, cleanup_t_uint128(value))
            }

            // struct Types.OutputProposal -> struct Types.OutputProposal
            function abi_encode_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_memory_ptr_fromStack(value, pos)  {
                let tail := add(pos, 0x60)

                {
                    // outputRoot

                    let memberValue0 := mload(add(value, 0x00))
                    abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))
                }

                {
                    // timestamp

                    let memberValue0 := mload(add(value, 0x20))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x20))
                }

                {
                    // l2BlockNumber

                    let memberValue0 := mload(add(value, 0x40))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0x40))
                }

            }

            function abi_encode_tuple_t_struct$_OutputProposal_$3121_memory_ptr__to_t_struct$_OutputProposal_$3121_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 96)

                abi_encode_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_memory_ptr_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_getL2Output_1877() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 :=  fun_getL2Output_1877(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_OutputProposal_$3121_memory_ptr__to_t_struct$_OutputProposal_$3121_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 1601
            /// @src 11:1245:1278  "address public immutable PROPOSER"
            function getter_fun_PROPOSER_1601() -> rval {
                rval := loadimmutable("1601")
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function external_fun_PROPOSER_1601() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_PROPOSER_1601()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_getL2OutputAfter_1962() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 :=  fun_getL2OutputAfter_1962(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_OutputProposal_$3121_memory_ptr__to_t_struct$_OutputProposal_$3121_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_computeL2Timestamp_2036() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 :=  fun_computeL2Timestamp_2036(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_nextBlockNumber_2017() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_nextBlockNumber_2017()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {
                if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_initialize_1723() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0, param_1 :=  abi_decode_tuple_t_uint256t_uint256(4, calldatasize())
                fun_initialize_1723(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 1604
            /// @src 11:1397:1449  "uint256 public immutable FINALIZATION_PERIOD_SECONDS"
            function getter_fun_FINALIZATION_PERIOD_SECONDS_1604() -> rval {
                rval := loadimmutable("1604")
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function external_fun_FINALIZATION_PERIOD_SECONDS_1604() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_FINALIZATION_PERIOD_SECONDS_1604()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {

                mstore(add(memPtr, 0), ".")

            }

            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }

            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2) -> end {

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)

                end := pos
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted  {
                converted := value

            }

            /// @ast-id 1424
            /// @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1424() -> var__1400_mpos {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_1_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1400_mpos := zero_t_string_memory_ptr_1_mpos

                /// @src 29:1203:1210  "Strings"
                let expr_1406_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _2 := loadimmutable("1367")
                let expr_1408 := _2
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1409_mpos := fun_toString_3827(expr_1408)
                /// @src 29:1281:1288  "Strings"
                let expr_1411_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _3 := loadimmutable("1370")
                let expr_1413 := _3
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1414_mpos := fun_toString_3827(expr_1413)
                /// @src 29:1359:1366  "Strings"
                let expr_1416_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _4 := loadimmutable("1373")
                let expr_1418 := _4
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1419_mpos := fun_toString_3827(expr_1418)
                /// @src 29:1165:1408  "abi.encodePacked(..."

                let expr_1420_mpos := allocate_unbounded()
                let _5 := add(expr_1420_mpos, 0x20)

                let _6 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_5, expr_1409_mpos, expr_1414_mpos, expr_1419_mpos)
                mstore(expr_1420_mpos, sub(_6, add(expr_1420_mpos, 0x20)))
                finalize_allocation(expr_1420_mpos, sub(_6, expr_1420_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1421_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1420_mpos)
                /// @src 29:1122:1422  "return..."
                var__1400_mpos := expr_1421_mpos
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function shift_right_8_unsigned(value) -> newValue {
                newValue :=

                shr(8, value)

            }

            function cleanup_from_storage_t_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }

            function read_from_storage_split_offset_1_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))

            }

            function cleanup_t_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }

            function shift_right_0_unsigned(value) -> newValue {
                newValue :=

                shr(0, value)

            }

            function cleanup_from_storage_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))

            }

            function cleanup_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function cleanup_t_rational_1_by_1(value) -> cleaned {
                cleaned := value
            }

            function identity(value) -> ret {
                ret := value
            }

            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_uint160_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }

            function convert_t_uint160_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            function convert_t_contract$_Initializable_$1576_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is alrea")

                mstore(add(memPtr, 32), "dy initialized")

            }

            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function shift_left_0(value) -> newValue {
                newValue :=

                shl(0, value)

            }

            function update_byte_slice_1_shift_0(value, toInsert) -> result {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint8_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }

            function prepare_store_t_uint8(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_8(value) -> newValue {
                newValue :=

                shl(8, value)

            }

            function update_byte_slice_1_shift_1(value, toInsert) -> result {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_bool_to_t_bool(value) -> converted {
                converted := cleanup_t_bool(value)
            }

            function prepare_store_t_bool(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }

            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

            }

            /// @ast-id 1496
            /// @src 4:3067:3562  "modifier initializer() {..."
            function modifier_initializer_1704(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

                /// @src 4:3123:3136  "_initializing"
                let _7 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1445 := _7
                /// @src 4:3122:3136  "!_initializing"
                let expr_1446 := cleanup_t_bool(iszero(expr_1445))
                /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_1444 := expr_1446
                /// @src 4:3168:3182  "isTopLevelCall"
                let _8 := var_isTopLevelCall_1444
                let expr_1449 := _8
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                let expr_1453 := expr_1449
                if expr_1453 {
                    /// @src 4:3186:3198  "_initialized"
                    let _9 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1450 := _9
                    /// @src 4:3201:3202  "1"
                    let expr_1451 := 0x01
                    /// @src 4:3186:3202  "_initialized < 1"
                    let expr_1452 := lt(cleanup_t_uint8(expr_1450), convert_t_rational_1_by_1_to_t_uint8(expr_1451))
                    /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                    expr_1453 := expr_1452
                }
                /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
                let expr_1454 := expr_1453
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1468 := expr_1454
                if iszero(expr_1468) {
                    /// @src 4:3209:3216  "Address"
                    let expr_1455_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                    /// @src 4:3236:3240  "this"
                    let expr_1459_address := address()
                    /// @src 4:3228:3241  "address(this)"
                    let expr_1460 := convert_t_contract$_Initializable_$1576_to_t_address(expr_1459_address)
                    /// @src 4:3209:3242  "Address.isContract(address(this))"
                    let expr_1461 := fun_isContract_3983(expr_1460)
                    /// @src 4:3208:3242  "!Address.isContract(address(this))"
                    let expr_1462 := cleanup_t_bool(iszero(expr_1461))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    let expr_1466 := expr_1462
                    if expr_1466 {
                        /// @src 4:3246:3258  "_initialized"
                        let _10 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_1463 := _10
                        /// @src 4:3262:3263  "1"
                        let expr_1464 := 0x01
                        /// @src 4:3246:3263  "_initialized == 1"
                        let expr_1465 := eq(cleanup_t_uint8(expr_1463), convert_t_rational_1_by_1_to_t_uint8(expr_1464))
                        /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                        expr_1466 := expr_1465
                    }
                    /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                    let expr_1467 := expr_1466
                    /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                    expr_1468 := expr_1467
                }
                /// @src 4:3146:3336  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1468)
                /// @src 4:3361:3362  "1"
                let expr_1473 := 0x01
                /// @src 4:3346:3362  "_initialized = 1"
                let _11 := convert_t_rational_1_by_1_to_t_uint8(expr_1473)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _11)
                let expr_1474 := _11
                /// @src 4:3376:3390  "isTopLevelCall"
                let _12 := var_isTopLevelCall_1444
                let expr_1476 := _12
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                if expr_1476 {
                    /// @src 4:3422:3426  "true"
                    let expr_1478 := 0x01
                    /// @src 4:3406:3426  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1478)
                    let expr_1479 := expr_1478
                    /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                }
                /// @src 4:3446:3447  "_"
                fun_initialize_1723_inner(var__startingBlockNumber_1699, var__startingTimestamp_1701)
                /// @src 4:3461:3475  "isTopLevelCall"
                let _13 := var_isTopLevelCall_1444
                let expr_1484 := _13
                /// @src 4:3457:3556  "if (isTopLevelCall) {..."
                if expr_1484 {
                    /// @src 4:3507:3512  "false"
                    let expr_1486 := 0x00
                    /// @src 4:3491:3512  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1486)
                    let expr_1487 := expr_1486
                    /// @src 4:3543:3544  "1"
                    let expr_1490 := 0x01
                    /// @src 4:3531:3545  "Initialized(1)"
                    let _14 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _15 := allocate_unbounded()
                        let _16 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_15 , expr_1490)
                        log1(_15, sub(_16, _15) , _14)
                    }/// @src 4:3457:3556  "if (isTopLevelCall) {..."
                }

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: starting L2 time")

                mstore(add(memPtr, 32), "stamp must be less than current ")

                mstore(add(memPtr, 64), "time")

            }

            function abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 68)
                store_literal_in_memory_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function update_byte_slice_32_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint256_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }

            function prepare_store_t_uint256(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0) {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }

            /// @src 11:4169:4556  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
            function fun_initialize_1723_inner(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

                /// @src 11:4317:4335  "_startingTimestamp"
                let _17 := var__startingTimestamp_1701
                let expr_1707 := _17
                /// @src 11:4339:4354  "block.timestamp"
                let expr_1709 := timestamp()
                /// @src 11:4317:4354  "_startingTimestamp <= block.timestamp"
                let expr_1710 := iszero(gt(cleanup_t_uint256(expr_1707), cleanup_t_uint256(expr_1709)))
                /// @src 11:4296:4448  "require(..."
                require_helper_t_stringliteral_898fd7ed8708de35483db60bd4b962ea9e8aa9058ba6455714580e35a9e067a7(expr_1710)
                /// @src 11:4479:4497  "_startingTimestamp"
                let _18 := var__startingTimestamp_1701
                let expr_1715 := _18
                /// @src 11:4459:4497  "startingTimestamp = _startingTimestamp"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x02, expr_1715)
                let expr_1716 := expr_1715
                /// @src 11:4529:4549  "_startingBlockNumber"
                let _19 := var__startingBlockNumber_1699
                let expr_1719 := _19
                /// @src 11:4507:4549  "startingBlockNumber = _startingBlockNumber"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x01, expr_1719)
                let expr_1720 := expr_1719

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            /// @ast-id 1723
            /// @src 11:4169:4556  "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)..."
            function fun_initialize_1723(var__startingBlockNumber_1699, var__startingTimestamp_1701) {

                modifier_initializer_1704(var__startingBlockNumber_1699, var__startingTimestamp_1701)
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function store_literal_in_memory_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: only the challen")

                mstore(add(memPtr, 32), "ger address can delete outputs")

            }

            function abi_encode_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)
                store_literal_in_memory_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(value) -> length {

                length := sload(value)

            }

            function store_literal_in_memory_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: cannot delete ou")

                mstore(add(memPtr, 32), "tputs after the latest output in")

                mstore(add(memPtr, 64), "dex")

            }

            function abi_encode_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function panic_error_0x32() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }

            function array_dataslot_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(ptr) -> data {
                data := ptr

                mstore(0, ptr)
                data := keccak256(0, 0x20)

            }

            function array_dataslot_t_bytes_storage_ptr(ptr) -> data {
                data := ptr

                mstore(0, ptr)
                data := keccak256(0, 0x20)

            }

            function long_byte_array_index_access_no_checks(array, index) -> slot, offset {

                offset := sub(31, mod(index, 0x20))
                let dataArea := array_dataslot_t_bytes_storage_ptr(array)
                slot := add(dataArea, div(index, 0x20))

            }

            function storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(array, index) -> slot, offset {
                let arrayLength := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }

                let dataArea := array_dataslot_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(array)
                slot := add(dataArea, mul(index, 2))
                offset := 0

            }

            function cleanup_from_storage_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_0t_uint128(slot_value) -> value {
                value := cleanup_from_storage_t_uint128(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint128(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint128(sload(slot))

            }

            function convert_t_uint128_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint128(value)))
            }

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function checked_sub_t_uint256(x, y) -> diff {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function store_literal_in_memory_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: cannot delete ou")

                mstore(add(memPtr, 32), "tputs that have already been fin")

                mstore(add(memPtr, 64), "alized")

            }

            function abi_encode_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 1770
            /// @src 11:4965:5988  "function deleteL2Outputs(uint256 _l2OutputIndex) external {..."
            function fun_deleteL2Outputs_1770(var__l2OutputIndex_1726) {

                /// @src 11:5054:5064  "msg.sender"
                let expr_1731 := caller()
                /// @src 11:5068:5078  "CHALLENGER"
                let _20 := loadimmutable("1598")
                let expr_1732 := _20
                /// @src 11:5054:5078  "msg.sender == CHALLENGER"
                let expr_1733 := eq(cleanup_t_address(expr_1731), cleanup_t_address(expr_1732))
                /// @src 11:5033:5166  "require(..."
                require_helper_t_stringliteral_73ca084205f86e7b7b010a7bf147aa19f097b7f0a2c7768452f50d69ddf1c8a6(expr_1733)
                /// @src 11:5267:5281  "_l2OutputIndex"
                let _21 := var__l2OutputIndex_1726
                let expr_1738 := _21
                /// @src 11:5284:5293  "l2Outputs"
                let _22_slot := 0x03
                let expr_1739_slot := _22_slot
                /// @src 11:5284:5300  "l2Outputs.length"
                let expr_1740 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1739_slot)
                /// @src 11:5267:5300  "_l2OutputIndex < l2Outputs.length"
                let expr_1741 := lt(cleanup_t_uint256(expr_1738), cleanup_t_uint256(expr_1740))
                /// @src 11:5246:5393  "require(..."
                require_helper_t_stringliteral_8fade7eaadcf8920b61cd280bfaf9215de3229fd9b8bc0c114506f50c3323d08(expr_1741)
                /// @src 11:5504:5519  "block.timestamp"
                let expr_1747 := timestamp()
                /// @src 11:5522:5531  "l2Outputs"
                let _23_slot := 0x03
                let expr_1748_slot := _23_slot
                /// @src 11:5532:5546  "_l2OutputIndex"
                let _24 := var__l2OutputIndex_1726
                let expr_1749 := _24
                /// @src 11:5522:5547  "l2Outputs[_l2OutputIndex]"

                let _25, _26 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1748_slot, expr_1749)
                let _27_slot := _25
                let expr_1750_slot := _27_slot
                /// @src 11:5522:5557  "l2Outputs[_l2OutputIndex].timestamp"
                let _28 := add(expr_1750_slot, 1)
                let _29 := read_from_storage_split_offset_0_t_uint128(_28)
                let expr_1751 := _29
                /// @src 11:5504:5557  "block.timestamp - l2Outputs[_l2OutputIndex].timestamp"
                let expr_1752 := checked_sub_t_uint256(expr_1747, convert_t_uint128_to_t_uint256(expr_1751))

                /// @src 11:5560:5587  "FINALIZATION_PERIOD_SECONDS"
                let _30 := loadimmutable("1604")
                let expr_1753 := _30
                /// @src 11:5504:5587  "block.timestamp - l2Outputs[_l2OutputIndex].timestamp < FINALIZATION_PERIOD_SECONDS"
                let expr_1754 := lt(cleanup_t_uint256(expr_1752), cleanup_t_uint256(expr_1753))
                /// @src 11:5483:5683  "require(..."
                require_helper_t_stringliteral_d750945a6d3cdf9f7770d0a5d95aa9b56f37a0ad47759ca246a1b772fdac6c07(expr_1754)
                /// @src 11:5726:5743  "nextOutputIndex()"
                let expr_1761 := fun_nextOutputIndex_1984()
                /// @src 11:5694:5743  "uint256 prevNextL2OutputIndex = nextOutputIndex()"
                let var_prevNextL2OutputIndex_1759 := expr_1761
                /// @src 11:5842:5913  "assembly {..."
                {
                    sstore(3, var__l2OutputIndex_1726)
                }
                /// @src 11:5943:5964  "prevNextL2OutputIndex"
                let _31 := var_prevNextL2OutputIndex_1759
                let expr_1765 := _31
                /// @src 11:5966:5980  "_l2OutputIndex"
                let _32 := var__l2OutputIndex_1726
                let expr_1766 := _32
                /// @src 11:5928:5981  "OutputsDeleted(prevNextL2OutputIndex, _l2OutputIndex)"
                let _33 := 0x4ee37ac2c786ec85e87592d3c5c8a1dd66f8496dda3f125d9ea8ca5f657629b6
                let _34 := convert_t_uint256_to_t_uint256(expr_1765)
                let _35 := convert_t_uint256_to_t_uint256(expr_1766)
                {
                    let _36 := allocate_unbounded()
                    let _37 := abi_encode_tuple__to__fromStack(_36 )
                    log3(_36, sub(_37, _36) , _33, _34, _35)
                }
            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function store_literal_in_memory_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: only the propose")

                mstore(add(memPtr, 32), "r address can propose new output")

                mstore(add(memPtr, 64), "s")

            }

            function abi_encode_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 65)
                store_literal_in_memory_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: block number mus")

                mstore(add(memPtr, 32), "t be equal to next expected bloc")

                mstore(add(memPtr, 64), "k number")

            }

            function abi_encode_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: cannot propose L")

                mstore(add(memPtr, 32), "2 output in the future")

            }

            function abi_encode_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)
                store_literal_in_memory_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_0_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_0_by_1_to_t_bytes32(value) -> converted {
                converted := cleanup_t_bytes32(shift_left_0(cleanup_t_rational_0_by_1(value)))
            }

            function store_literal_in_memory_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: L2 output propos")

                mstore(add(memPtr, 32), "al cannot be the zero hash")

            }

            function abi_encode_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: block hash does ")

                mstore(add(memPtr, 32), "not match the hash at the expect")

                mstore(add(memPtr, 64), "ed height")

            }

            function abi_encode_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 73)
                store_literal_in_memory_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_bytes32_to_t_bytes32(value) -> converted {
                converted := cleanup_t_bytes32(value)
            }

            function convert_array_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_to_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(value) -> converted  {
                converted := value

            }

            function convert_t_uint256_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint256(value)))
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function allocate_memory_struct_t_struct$_OutputProposal_$3121_storage_ptr() -> memPtr {
                memPtr := allocate_memory(96)
            }

            function write_to_memory_t_bytes32(memPtr, value) {
                mstore(memPtr, cleanup_t_bytes32(value))
            }

            function write_to_memory_t_uint128(memPtr, value) {
                mstore(memPtr, cleanup_t_uint128(value))
            }

            function array_dataslot_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(ptr) -> data {
                data := ptr

                mstore(0, ptr)
                data := keccak256(0, 0x20)

            }

            function array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(value) -> length {

                length := sload(value)

            }

            function storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(array, index) -> slot, offset {
                let arrayLength := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(array)
                if iszero(lt(index, arrayLength)) { panic_error_0x32() }

                let dataArea := array_dataslot_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(array)
                slot := add(dataArea, mul(index, 2))
                offset := 0

            }

            function panic_error_0x00() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }

            function read_from_memoryt_bytes32(ptr) -> returnValue {

                let value := cleanup_t_bytes32(mload(ptr))

                returnValue :=

                value

            }

            function prepare_store_t_bytes32(value) -> ret {
                ret := shift_right_0_unsigned(value)
            }

            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0) {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }

            function read_from_memoryt_uint128(ptr) -> returnValue {

                let value := cleanup_t_uint128(mload(ptr))

                returnValue :=

                value

            }

            function update_byte_slice_16_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint128_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }

            function prepare_store_t_uint128(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0) {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }

            function shift_left_128(value) -> newValue {
                newValue :=

                shl(128, value)

            }

            function update_byte_slice_16_shift_16(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_16t_uint128_to_t_uint128(slot, value_0) {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_16(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }

            function copy_struct_to_storage_from_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_storage(slot, value) {

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)

                    let memberValue_0 := read_from_memoryt_bytes32(memberSrcPtr)

                    update_storage_value_offset_0t_bytes32_to_t_bytes32(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 32)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 64)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_16t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

            }

            function update_storage_value_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_storage(slot, offset, value_0) {
                if offset { panic_error_0x00() }
                copy_struct_to_storage_from_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_storage(slot, value_0)
            }

            function shift_left_dynamic(bits, value) -> newValue {
                newValue :=

                shl(bits, value)

            }

            function array_push_from_t_struct$_OutputProposal_$3121_memory_ptr_to_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(array , value0) {

                let oldLen := sload(array)
                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }
                sstore(array, add(oldLen, 1))
                let slot, offset := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(array, oldLen)
                update_storage_value_t_struct$_OutputProposal_$3121_memory_ptr_to_t_struct$_OutputProposal_$3121_storage(slot, offset , value0)

            }
            /// @ast-id 1863
            /// @src 11:6598:8627  "function proposeL2Output(..."
            function fun_proposeL2Output_1863(var__outputRoot_1773, var__l2BlockNumber_1775, var__l1BlockHash_1777, var__l1BlockNumber_1779) {

                /// @src 11:6800:6810  "msg.sender"
                let expr_1784 := caller()
                /// @src 11:6814:6822  "PROPOSER"
                let _38 := loadimmutable("1601")
                let expr_1785 := _38
                /// @src 11:6800:6822  "msg.sender == PROPOSER"
                let expr_1786 := eq(cleanup_t_address(expr_1784), cleanup_t_address(expr_1785))
                /// @src 11:6779:6913  "require(..."
                require_helper_t_stringliteral_9f1c67e2dc62ce3502755d353f72e304832f39c730ef77e02614e374f1fb53d3(expr_1786)
                /// @src 11:6945:6959  "_l2BlockNumber"
                let _39 := var__l2BlockNumber_1775
                let expr_1791 := _39
                /// @src 11:6963:6980  "nextBlockNumber()"
                let expr_1793 := fun_nextBlockNumber_2017()
                /// @src 11:6945:6980  "_l2BlockNumber == nextBlockNumber()"
                let expr_1794 := eq(cleanup_t_uint256(expr_1791), cleanup_t_uint256(expr_1793))
                /// @src 11:6924:7078  "require(..."
                require_helper_t_stringliteral_06e1bf88480451e9a05edd933fbefd888745eeb4cd60fea580144d9699d6c8c6(expr_1794)
                /// @src 11:7129:7143  "_l2BlockNumber"
                let _40 := var__l2BlockNumber_1775
                let expr_1800 := _40
                /// @src 11:7110:7144  "computeL2Timestamp(_l2BlockNumber)"
                let expr_1801 := fun_computeL2Timestamp_2036(expr_1800)
                /// @src 11:7147:7162  "block.timestamp"
                let expr_1803 := timestamp()
                /// @src 11:7110:7162  "computeL2Timestamp(_l2BlockNumber) < block.timestamp"
                let expr_1804 := lt(cleanup_t_uint256(expr_1801), cleanup_t_uint256(expr_1803))
                /// @src 11:7089:7242  "require(..."
                require_helper_t_stringliteral_398aa710210a226bac70935aec326d363ca55bd0968a10f188845909ad22cbc6(expr_1804)
                /// @src 11:7274:7285  "_outputRoot"
                let _41 := var__outputRoot_1773
                let expr_1809 := _41
                /// @src 11:7297:7298  "0"
                let expr_1812 := 0x00
                /// @src 11:7289:7299  "bytes32(0)"
                let expr_1813 := convert_t_rational_0_by_1_to_t_bytes32(expr_1812)
                /// @src 11:7274:7299  "_outputRoot != bytes32(0)"
                let expr_1814 := iszero(eq(cleanup_t_bytes32(expr_1809), cleanup_t_bytes32(expr_1813)))
                /// @src 11:7253:7383  "require(..."
                require_helper_t_stringliteral_bd49586dceb93dcaff5457c4b7f965cdcdd796092fef31828e5d2ee522ee1ffa(expr_1814)
                /// @src 11:7398:7410  "_l1BlockHash"
                let _42 := var__l1BlockHash_1777
                let expr_1818 := _42
                /// @src 11:7422:7423  "0"
                let expr_1821 := 0x00
                /// @src 11:7414:7424  "bytes32(0)"
                let expr_1822 := convert_t_rational_0_by_1_to_t_bytes32(expr_1821)
                /// @src 11:7398:7424  "_l1BlockHash != bytes32(0)"
                let expr_1823 := iszero(eq(cleanup_t_bytes32(expr_1818), cleanup_t_bytes32(expr_1822)))
                /// @src 11:7394:8291  "if (_l1BlockHash != bytes32(0)) {..."
                if expr_1823 {
                    /// @src 11:8142:8156  "_l1BlockNumber"
                    let _43 := var__l1BlockNumber_1779
                    let expr_1826 := _43
                    /// @src 11:8132:8157  "blockhash(_l1BlockNumber)"
                    let expr_1827 := blockhash(expr_1826)
                    /// @src 11:8161:8173  "_l1BlockHash"
                    let _44 := var__l1BlockHash_1777
                    let expr_1828 := _44
                    /// @src 11:8132:8173  "blockhash(_l1BlockNumber) == _l1BlockHash"
                    let expr_1829 := eq(cleanup_t_bytes32(expr_1827), cleanup_t_bytes32(expr_1828))
                    /// @src 11:8107:8280  "require(..."
                    require_helper_t_stringliteral_126a709d462b085b243904a4250a7244b58590dd3a6ba08b7c943ca19e9fb452(expr_1829)
                    /// @src 11:7394:8291  "if (_l1BlockHash != bytes32(0)) {..."
                }
                /// @src 11:8321:8332  "_outputRoot"
                let _45 := var__outputRoot_1773
                let expr_1836 := _45
                /// @src 11:8334:8351  "nextOutputIndex()"
                let expr_1838 := fun_nextOutputIndex_1984()
                /// @src 11:8353:8367  "_l2BlockNumber"
                let _46 := var__l2BlockNumber_1775
                let expr_1839 := _46
                /// @src 11:8369:8384  "block.timestamp"
                let expr_1841 := timestamp()
                /// @src 11:8306:8385  "OutputProposed(_outputRoot, nextOutputIndex(), _l2BlockNumber, block.timestamp)"
                let _47 := 0xa7aaf2512769da4e444e3de247be2564225c2e7a8f74cfe528e46e17d24868e2
                let _48 := convert_t_bytes32_to_t_bytes32(expr_1836)
                let _49 := convert_t_uint256_to_t_uint256(expr_1838)
                let _50 := convert_t_uint256_to_t_uint256(expr_1839)
                {
                    let _51 := allocate_unbounded()
                    let _52 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(_51 , expr_1841)
                    log4(_51, sub(_52, _51) , _47, _48, _49, _50)
                }/// @src 11:8396:8405  "l2Outputs"
                let _53_slot := 0x03
                let expr_1844_slot := _53_slot
                /// @src 11:8396:8410  "l2Outputs.push"
                let expr_1846_self_slot := convert_array_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_to_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(expr_1844_slot)
                /// @src 11:8424:8429  "Types"
                let expr_1847_address := linkersymbol("contracts/libraries/Types.sol:Types")
                /// @src 11:8475:8486  "_outputRoot"
                let _54 := var__outputRoot_1773
                let expr_1849 := _54
                /// @src 11:8523:8538  "block.timestamp"
                let expr_1853 := timestamp()
                /// @src 11:8515:8539  "uint128(block.timestamp)"
                let expr_1854 := convert_t_uint256_to_t_uint128(expr_1853)
                /// @src 11:8580:8594  "_l2BlockNumber"
                let _55 := var__l2BlockNumber_1775
                let expr_1857 := _55
                /// @src 11:8572:8595  "uint128(_l2BlockNumber)"
                let expr_1858 := convert_t_uint256_to_t_uint128(expr_1857)
                /// @src 11:8424:8610  "Types.OutputProposal({..."
                let expr_1859_mpos := allocate_memory_struct_t_struct$_OutputProposal_$3121_storage_ptr()
                write_to_memory_t_bytes32(add(expr_1859_mpos, 0), expr_1849)
                write_to_memory_t_uint128(add(expr_1859_mpos, 32), expr_1854)
                write_to_memory_t_uint128(add(expr_1859_mpos, 64), expr_1858)
                /// @src 11:8396:8620  "l2Outputs.push(..."
                array_push_from_t_struct$_OutputProposal_$3121_memory_ptr_to_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage_ptr(expr_1846_self_slot, expr_1859_mpos)

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function allocate_memory_struct_t_struct$_OutputProposal_$3121_memory_ptr() -> memPtr {
                memPtr := allocate_memory(96)
            }

            function zero_value_for_t_bytes32() -> ret {
                ret := 0
            }

            function zero_value_for_t_uint128() -> ret {
                ret := 0
            }

            function allocate_and_zero_memory_struct_t_struct$_OutputProposal_$3121_memory_ptr() -> memPtr {
                memPtr := allocate_memory_struct_t_struct$_OutputProposal_$3121_memory_ptr()
                let offset := memPtr

                mstore(offset, zero_value_for_t_bytes32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)

            }

            function zero_value_for_split_t_struct$_OutputProposal_$3121_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_OutputProposal_$3121_memory_ptr()
            }

            function cleanup_from_storage_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_bytes32(slot) -> value {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))

            }

            function shift_right_128_unsigned(value) -> newValue {
                newValue :=

                shr(128, value)

            }

            function extract_from_storage_value_offset_16t_uint128(slot_value) -> value {
                value := cleanup_from_storage_t_uint128(shift_right_128_unsigned(slot_value))
            }

            function read_from_storage_split_offset_16_t_uint128(slot) -> value {
                value := extract_from_storage_value_offset_16t_uint128(sload(slot))

            }

            function read_from_storage_reference_type_t_struct$_OutputProposal_$3121_memory_ptr(slot) -> value {
                value := allocate_memory_struct_t_struct$_OutputProposal_$3121_memory_ptr()

                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))
                    write_to_memory_t_bytes32(add(value, 0), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 32), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 64), memberValue_0)
                }

            }

            function convert_t_struct$_OutputProposal_$3121_storage_to_t_struct$_OutputProposal_$3121_memory_ptr(value) -> converted {

                converted := read_from_storage_reference_type_t_struct$_OutputProposal_$3121_memory_ptr(value)

            }

            /// @ast-id 1877
            /// @src 11:8907:9081  "function getL2Output(uint256 _l2OutputIndex)..."
            function fun_getL2Output_1877(var__l2OutputIndex_1866) -> var__1870_mpos {
                /// @src 11:8999:9026  "Types.OutputProposal memory"
                let zero_t_struct$_OutputProposal_$3121_memory_ptr_56_mpos := zero_value_for_split_t_struct$_OutputProposal_$3121_memory_ptr()
                var__1870_mpos := zero_t_struct$_OutputProposal_$3121_memory_ptr_56_mpos

                /// @src 11:9049:9058  "l2Outputs"
                let _57_slot := 0x03
                let expr_1872_slot := _57_slot
                /// @src 11:9059:9073  "_l2OutputIndex"
                let _58 := var__l2OutputIndex_1866
                let expr_1873 := _58
                /// @src 11:9049:9074  "l2Outputs[_l2OutputIndex]"

                let _59, _60 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1872_slot, expr_1873)
                let _61_slot := _59
                let expr_1874_slot := _61_slot
                /// @src 11:9042:9074  "return l2Outputs[_l2OutputIndex]"
                var__1870_mpos := convert_t_struct$_OutputProposal_$3121_storage_to_t_struct$_OutputProposal_$3121_memory_ptr(expr_1874_slot)
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function zero_value_for_split_t_uint256() -> ret {
                ret := 0
            }

            function store_literal_in_memory_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: cannot get outpu")

                mstore(add(memPtr, 32), "t for a block that has not been ")

                mstore(add(memPtr, 64), "proposed")

            }

            function abi_encode_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }

            function store_literal_in_memory_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(memPtr) {

                mstore(add(memPtr, 0), "L2OutputOracle: cannot get outpu")

                mstore(add(memPtr, 32), "t as no outputs have been propos")

                mstore(add(memPtr, 64), "ed yet")

            }

            function abi_encode_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function cleanup_t_rational_2_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
            }

            function panic_error_0x12() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }

            function checked_div_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }

            /// @ast-id 1946
            /// @src 11:9471:10401  "function getL2OutputIndexAfter(uint256 _l2BlockNumber) public view returns (uint256) {..."
            function fun_getL2OutputIndexAfter_1946(var__l2BlockNumber_1880) -> var__1883 {
                /// @src 11:9547:9554  "uint256"
                let zero_t_uint256_62 := zero_value_for_split_t_uint256()
                var__1883 := zero_t_uint256_62

                /// @src 11:9668:9682  "_l2BlockNumber"
                let _63 := var__l2BlockNumber_1880
                let expr_1886 := _63
                /// @src 11:9686:9705  "latestBlockNumber()"
                let expr_1888 := fun_latestBlockNumber_2005()
                /// @src 11:9668:9705  "_l2BlockNumber <= latestBlockNumber()"
                let expr_1889 := iszero(gt(cleanup_t_uint256(expr_1886), cleanup_t_uint256(expr_1888)))
                /// @src 11:9647:9803  "require(..."
                require_helper_t_stringliteral_e20eea09cda66a0de8aaee9225052cff8973e85b47dc903dda82ca1d2f5e4f1e(expr_1889)
                /// @src 11:9894:9903  "l2Outputs"
                let _64_slot := 0x03
                let expr_1894_slot := _64_slot
                /// @src 11:9894:9910  "l2Outputs.length"
                let expr_1895 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1894_slot)
                /// @src 11:9913:9914  "0"
                let expr_1896 := 0x00
                /// @src 11:9894:9914  "l2Outputs.length > 0"
                let expr_1897 := gt(cleanup_t_uint256(expr_1895), convert_t_rational_0_by_1_to_t_uint256(expr_1896))
                /// @src 11:9873:10010  "require(..."
                require_helper_t_stringliteral_80c3451a3ec9750ebb6fb31ae69a5869a904e947867f132ba63cfb294c03b73e(expr_1897)
                /// @src 11:10101:10102  "0"
                let expr_1903 := 0x00
                /// @src 11:10088:10102  "uint256 lo = 0"
                let var_lo_1902 := convert_t_rational_0_by_1_to_t_uint256(expr_1903)
                /// @src 11:10125:10134  "l2Outputs"
                let _65_slot := 0x03
                let expr_1907_slot := _65_slot
                /// @src 11:10125:10141  "l2Outputs.length"
                let expr_1908 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1907_slot)
                /// @src 11:10112:10141  "uint256 hi = l2Outputs.length"
                let var_hi_1906 := expr_1908
                /// @src 11:10151:10375  "while (lo < hi) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 11:10158:10160  "lo"
                    let _66 := var_lo_1902
                    let expr_1910 := _66
                    /// @src 11:10163:10165  "hi"
                    let _67 := var_hi_1906
                    let expr_1911 := _67
                    /// @src 11:10158:10165  "lo < hi"
                    let expr_1912 := lt(cleanup_t_uint256(expr_1910), cleanup_t_uint256(expr_1911))
                    if iszero(expr_1912) { break }
                    /// @src 11:10196:10198  "lo"
                    let _68 := var_lo_1902
                    let expr_1915 := _68
                    /// @src 11:10201:10203  "hi"
                    let _69 := var_hi_1906
                    let expr_1916 := _69
                    /// @src 11:10196:10203  "lo + hi"
                    let expr_1917 := checked_add_t_uint256(expr_1915, expr_1916)

                    /// @src 11:10195:10204  "(lo + hi)"
                    let expr_1918 := expr_1917
                    /// @src 11:10207:10208  "2"
                    let expr_1919 := 0x02
                    /// @src 11:10195:10208  "(lo + hi) / 2"
                    let expr_1920 := checked_div_t_uint256(expr_1918, convert_t_rational_2_by_1_to_t_uint256(expr_1919))

                    /// @src 11:10181:10208  "uint256 mid = (lo + hi) / 2"
                    let var_mid_1914 := expr_1920
                    /// @src 11:10226:10235  "l2Outputs"
                    let _70_slot := 0x03
                    let expr_1922_slot := _70_slot
                    /// @src 11:10236:10239  "mid"
                    let _71 := var_mid_1914
                    let expr_1923 := _71
                    /// @src 11:10226:10240  "l2Outputs[mid]"

                    let _72, _73 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1922_slot, expr_1923)
                    let _74_slot := _72
                    let expr_1924_slot := _74_slot
                    /// @src 11:10226:10254  "l2Outputs[mid].l2BlockNumber"
                    let _75 := add(expr_1924_slot, 1)
                    let _76 := read_from_storage_split_offset_16_t_uint128(_75)
                    let expr_1925 := _76
                    /// @src 11:10257:10271  "_l2BlockNumber"
                    let _77 := var__l2BlockNumber_1880
                    let expr_1926 := _77
                    /// @src 11:10226:10271  "l2Outputs[mid].l2BlockNumber < _l2BlockNumber"
                    let expr_1927 := lt(convert_t_uint128_to_t_uint256(expr_1925), cleanup_t_uint256(expr_1926))
                    /// @src 11:10222:10365  "if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {..."
                    switch expr_1927
                    case 0 {
                        /// @src 11:10347:10350  "mid"
                        let _78 := var_mid_1914
                        let expr_1936 := _78
                        /// @src 11:10342:10350  "hi = mid"
                        var_hi_1906 := expr_1936
                        let expr_1937 := expr_1936
                        /// @src 11:10222:10365  "if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {..."
                    }
                    default {
                        /// @src 11:10296:10299  "mid"
                        let _79 := var_mid_1914
                        let expr_1929 := _79
                        /// @src 11:10302:10303  "1"
                        let expr_1930 := 0x01
                        /// @src 11:10296:10303  "mid + 1"
                        let expr_1931 := checked_add_t_uint256(expr_1929, convert_t_rational_1_by_1_to_t_uint256(expr_1930))

                        /// @src 11:10291:10303  "lo = mid + 1"
                        var_lo_1902 := expr_1931
                        let expr_1932 := expr_1931
                        /// @src 11:10222:10365  "if (l2Outputs[mid].l2BlockNumber < _l2BlockNumber) {..."
                    }
                }
                /// @src 11:10392:10394  "lo"
                let _80 := var_lo_1902
                let expr_1943 := _80
                /// @src 11:10385:10394  "return lo"
                var__1883 := expr_1943
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            /// @ast-id 1962
            /// @src 11:10774:10976  "function getL2OutputAfter(uint256 _l2BlockNumber)..."
            function fun_getL2OutputAfter_1962(var__l2BlockNumber_1949) -> var__1953_mpos {
                /// @src 11:10871:10898  "Types.OutputProposal memory"
                let zero_t_struct$_OutputProposal_$3121_memory_ptr_81_mpos := zero_value_for_split_t_struct$_OutputProposal_$3121_memory_ptr()
                var__1953_mpos := zero_t_struct$_OutputProposal_$3121_memory_ptr_81_mpos

                /// @src 11:10921:10930  "l2Outputs"
                let _82_slot := 0x03
                let expr_1955_slot := _82_slot
                /// @src 11:10953:10967  "_l2BlockNumber"
                let _83 := var__l2BlockNumber_1949
                let expr_1957 := _83
                /// @src 11:10931:10968  "getL2OutputIndexAfter(_l2BlockNumber)"
                let expr_1958 := fun_getL2OutputIndexAfter_1946(expr_1957)
                /// @src 11:10921:10969  "l2Outputs[getL2OutputIndexAfter(_l2BlockNumber)]"

                let _84, _85 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1955_slot, expr_1958)
                let _86_slot := _84
                let expr_1959_slot := _86_slot
                /// @src 11:10914:10969  "return l2Outputs[getL2OutputIndexAfter(_l2BlockNumber)]"
                var__1953_mpos := convert_t_struct$_OutputProposal_$3121_storage_to_t_struct$_OutputProposal_$3121_memory_ptr(expr_1959_slot)
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            /// @ast-id 1974
            /// @src 11:11202:11307  "function latestOutputIndex() external view returns (uint256) {..."
            function fun_latestOutputIndex_1974() -> var__1966 {
                /// @src 11:11254:11261  "uint256"
                let zero_t_uint256_87 := zero_value_for_split_t_uint256()
                var__1966 := zero_t_uint256_87

                /// @src 11:11280:11289  "l2Outputs"
                let _88_slot := 0x03
                let expr_1968_slot := _88_slot
                /// @src 11:11280:11296  "l2Outputs.length"
                let expr_1969 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1968_slot)
                /// @src 11:11299:11300  "1"
                let expr_1970 := 0x01
                /// @src 11:11280:11300  "l2Outputs.length - 1"
                let expr_1971 := checked_sub_t_uint256(expr_1969, convert_t_rational_1_by_1_to_t_uint256(expr_1970))

                /// @src 11:11273:11300  "return l2Outputs.length - 1"
                var__1966 := expr_1971
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            /// @ast-id 1984
            /// @src 11:11464:11561  "function nextOutputIndex() public view returns (uint256) {..."
            function fun_nextOutputIndex_1984() -> var__1978 {
                /// @src 11:11512:11519  "uint256"
                let zero_t_uint256_89 := zero_value_for_split_t_uint256()
                var__1978 := zero_t_uint256_89

                /// @src 11:11538:11547  "l2Outputs"
                let _90_slot := 0x03
                let expr_1980_slot := _90_slot
                /// @src 11:11538:11554  "l2Outputs.length"
                let expr_1981 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1980_slot)
                /// @src 11:11531:11554  "return l2Outputs.length"
                var__1978 := expr_1981
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function extract_from_storage_value_offset_0t_uint256(slot_value) -> value {
                value := cleanup_from_storage_t_uint256(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint256(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint256(sload(slot))

            }

            /// @ast-id 2005
            /// @src 11:11831:12049  "function latestBlockNumber() public view returns (uint256) {..."
            function fun_latestBlockNumber_2005() -> var__1988 {
                /// @src 11:11881:11888  "uint256"
                let zero_t_uint256_91 := zero_value_for_split_t_uint256()
                var__1988 := zero_t_uint256_91

                /// @src 11:11919:11928  "l2Outputs"
                let _92_slot := 0x03
                let expr_1990_slot := _92_slot
                /// @src 11:11919:11935  "l2Outputs.length"
                let expr_1991 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1990_slot)
                /// @src 11:11939:11940  "0"
                let expr_1992 := 0x00
                /// @src 11:11919:11940  "l2Outputs.length == 0"
                let expr_1993 := eq(cleanup_t_uint256(expr_1991), convert_t_rational_0_by_1_to_t_uint256(expr_1992))
                /// @src 11:11919:12042  "l2Outputs.length == 0..."
                let expr_2002
                switch expr_1993
                case 0 {
                    /// @src 11:11997:12006  "l2Outputs"
                    let _93_slot := 0x03
                    let expr_1995_slot := _93_slot
                    /// @src 11:12007:12016  "l2Outputs"
                    let _94_slot := 0x03
                    let expr_1996_slot := _94_slot
                    /// @src 11:12007:12023  "l2Outputs.length"
                    let expr_1997 := array_length_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1996_slot)
                    /// @src 11:12026:12027  "1"
                    let expr_1998 := 0x01
                    /// @src 11:12007:12027  "l2Outputs.length - 1"
                    let expr_1999 := checked_sub_t_uint256(expr_1997, convert_t_rational_1_by_1_to_t_uint256(expr_1998))

                    /// @src 11:11997:12028  "l2Outputs[l2Outputs.length - 1]"

                    let _95, _96 := storage_array_index_access_t_array$_t_struct$_OutputProposal_$3121_storage_$dyn_storage(expr_1995_slot, expr_1999)
                    let _97_slot := _95
                    let expr_2000_slot := _97_slot
                    /// @src 11:11997:12042  "l2Outputs[l2Outputs.length - 1].l2BlockNumber"
                    let _98 := add(expr_2000_slot, 1)
                    let _99 := read_from_storage_split_offset_16_t_uint128(_98)
                    let expr_2001 := _99
                    /// @src 11:11919:12042  "l2Outputs.length == 0..."
                    expr_2002 := convert_t_uint128_to_t_uint256(expr_2001)
                }
                default {
                    /// @src 11:11959:11978  "startingBlockNumber"
                    let _100 := read_from_storage_split_offset_0_t_uint256(0x01)
                    let expr_1994 := _100
                    /// @src 11:11919:12042  "l2Outputs.length == 0..."
                    expr_2002 := expr_1994
                }
                /// @src 11:11900:12042  "return..."
                var__1988 := expr_2002
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            /// @ast-id 2017
            /// @src 11:12208:12330  "function nextBlockNumber() public view returns (uint256) {..."
            function fun_nextBlockNumber_2017() -> var__2009 {
                /// @src 11:12256:12263  "uint256"
                let zero_t_uint256_101 := zero_value_for_split_t_uint256()
                var__2009 := zero_t_uint256_101

                /// @src 11:12282:12301  "latestBlockNumber()"
                let expr_2012 := fun_latestBlockNumber_2005()
                /// @src 11:12304:12323  "SUBMISSION_INTERVAL"
                let _102 := loadimmutable("1592")
                let expr_2013 := _102
                /// @src 11:12282:12323  "latestBlockNumber() + SUBMISSION_INTERVAL"
                let expr_2014 := checked_add_t_uint256(expr_2012, expr_2013)

                /// @src 11:12275:12323  "return latestBlockNumber() + SUBMISSION_INTERVAL"
                var__2009 := expr_2014
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function checked_mul_t_uint256(x, y) -> product {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x != 0 and y > (maxValue / x)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }

                product := mul(x, y)
            }

            /// @ast-id 2036
            /// @src 11:12566:12748  "function computeL2Timestamp(uint256 _l2BlockNumber) public view returns (uint256) {..."
            function fun_computeL2Timestamp_2036(var__l2BlockNumber_2020) -> var__2023 {
                /// @src 11:12639:12646  "uint256"
                let zero_t_uint256_103 := zero_value_for_split_t_uint256()
                var__2023 := zero_t_uint256_103

                /// @src 11:12665:12682  "startingTimestamp"
                let _104 := read_from_storage_split_offset_0_t_uint256(0x02)
                let expr_2025 := _104
                /// @src 11:12687:12701  "_l2BlockNumber"
                let _105 := var__l2BlockNumber_2020
                let expr_2026 := _105
                /// @src 11:12704:12723  "startingBlockNumber"
                let _106 := read_from_storage_split_offset_0_t_uint256(0x01)
                let expr_2027 := _106
                /// @src 11:12687:12723  "_l2BlockNumber - startingBlockNumber"
                let expr_2028 := checked_sub_t_uint256(expr_2026, expr_2027)

                /// @src 11:12686:12724  "(_l2BlockNumber - startingBlockNumber)"
                let expr_2029 := expr_2028
                /// @src 11:12727:12740  "L2_BLOCK_TIME"
                let _107 := loadimmutable("1595")
                let expr_2030 := _107
                /// @src 11:12686:12740  "(_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME"
                let expr_2031 := checked_mul_t_uint256(expr_2029, expr_2030)

                /// @src 11:12685:12741  "((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                let expr_2032 := expr_2031
                /// @src 11:12665:12741  "startingTimestamp + ((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                let expr_2033 := checked_add_t_uint256(expr_2025, expr_2032)

                /// @src 11:12658:12741  "return startingTimestamp + ((_l2BlockNumber - startingBlockNumber) * L2_BLOCK_TIME)"
                var__2023 := expr_2033
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr) {

                mstore(add(memPtr, 0), "0")

            }

            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }

            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }

            function increment_t_uint256(value) -> ret {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }

            function cleanup_t_rational_10_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }

            function array_allocation_size_t_bytes_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes) {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }

            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }

            function mod_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function cleanup_t_rational_48_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }

            function convert_t_uint256_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }

            function cleanup_t_bytes1(value) -> cleaned {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }

            function shift_left_248(value) -> newValue {
                newValue :=

                shl(248, value)

            }

            function convert_t_uint8_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }

            function array_length_t_bytes_memory_ptr(value) -> length {

                length := mload(value)

            }

            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 1)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            /// @ast-id 3827
            /// @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3827(var_value_3751) -> var__3754_mpos {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_108_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3754_mpos := zero_t_string_memory_ptr_108_mpos

                /// @src 6:665:670  "value"
                let _109 := var_value_3751
                let expr_3756 := _109
                /// @src 6:674:675  "0"
                let expr_3757 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3758 := eq(cleanup_t_uint256(expr_3756), convert_t_rational_0_by_1_to_t_uint256(expr_3757))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3758 {
                    /// @src 6:691:701  "return \"0\""
                    var__3754_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                    /// @src 6:661:712  "if (value == 0) {..."
                }
                /// @src 6:736:741  "value"
                let _110 := var_value_3751
                let expr_3765 := _110
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3764 := expr_3765
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3768
                let zero_t_uint256_111 := zero_value_for_split_t_uint256()
                var_digits_3768 := zero_t_uint256_111
                /// @src 6:775:850  "while (temp != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:782:786  "temp"
                    let _112 := var_temp_3764
                    let expr_3770 := _112
                    /// @src 6:790:791  "0"
                    let expr_3771 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3772 := iszero(eq(cleanup_t_uint256(expr_3770), convert_t_rational_0_by_1_to_t_uint256(expr_3771)))
                    if iszero(expr_3772) { break }
                    /// @src 6:807:815  "digits++"
                    let _114 := var_digits_3768
                    let _113 := increment_t_uint256(_114)
                    var_digits_3768 := _113
                    let expr_3774 := _114
                    /// @src 6:837:839  "10"
                    let expr_3777 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _115 := convert_t_rational_10_by_1_to_t_uint256(expr_3777)
                    let _116 := var_temp_3764
                    let expr_3778 := checked_div_t_uint256(_116, _115)

                    var_temp_3764 := expr_3778
                }
                /// @src 6:891:897  "digits"
                let _117 := var_digits_3768
                let expr_3786 := _117
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3787_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3786)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3783_mpos := expr_3787_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:915:920  "value"
                    let _118 := var_value_3751
                    let expr_3789 := _118
                    /// @src 6:924:925  "0"
                    let expr_3790 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3791 := iszero(eq(cleanup_t_uint256(expr_3789), convert_t_rational_0_by_1_to_t_uint256(expr_3790)))
                    if iszero(expr_3791) { break }
                    /// @src 6:951:952  "1"
                    let expr_3793 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _119 := convert_t_rational_1_by_1_to_t_uint256(expr_3793)
                    let _120 := var_digits_3768
                    let expr_3794 := checked_sub_t_uint256(_120, _119)

                    var_digits_3768 := expr_3794
                    /// @src 6:996:998  "48"
                    let expr_3803 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _121 := var_value_3751
                    let expr_3806 := _121
                    /// @src 6:1017:1019  "10"
                    let expr_3807 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3808 := mod_t_uint256(expr_3806, convert_t_rational_10_by_1_to_t_uint256(expr_3807))

                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3809 := expr_3808
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3810 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3803), expr_3809)

                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3811 := convert_t_uint256_to_t_uint8(expr_3810)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3812 := convert_t_uint8_to_t_bytes1(expr_3811)
                    /// @src 6:966:972  "buffer"
                    let _122_mpos := var_buffer_3783_mpos
                    let expr_3796_mpos := _122_mpos
                    /// @src 6:973:979  "digits"
                    let _123 := var_digits_3768
                    let expr_3797 := _123
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _124 := expr_3812
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3796_mpos, expr_3797), byte(0, _124))
                    let expr_3813 := expr_3812
                    /// @src 6:1045:1047  "10"
                    let expr_3816 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _125 := convert_t_rational_10_by_1_to_t_uint256(expr_3816)
                    let _126 := var_value_3751
                    let expr_3817 := checked_div_t_uint256(_126, _125)

                    var_value_3751 := expr_3817
                }
                /// @src 6:1081:1087  "buffer"
                let _127_mpos := var_buffer_3783_mpos
                let expr_3823_mpos := _127_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3824_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3823_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3754_mpos := expr_3824_mpos
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

            function zero_value_for_split_t_bool() -> ret {
                ret := 0
            }

            /// @ast-id 3983
            /// @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_3983(var_account_3971) -> var__3974 {
                /// @src 5:1235:1239  "bool"
                let zero_t_bool_128 := zero_value_for_split_t_bool()
                var__3974 := zero_t_bool_128

                /// @src 5:1465:1472  "account"
                let _129 := var_account_3971
                let expr_3976 := _129
                /// @src 5:1465:1484  "account.code.length"
                let expr_3978 := extcodesize(expr_3976)
                /// @src 5:1487:1488  "0"
                let expr_3979 := 0x00
                /// @src 5:1465:1488  "account.code.length > 0"
                let expr_3980 := gt(cleanup_t_uint256(expr_3978), convert_t_rational_0_by_1_to_t_uint256(expr_3979))
                /// @src 5:1458:1488  "return account.code.length > 0"
                var__3974 := expr_3980
                leave

            }
            /// @src 11:553:12750  "contract L2OutputOracle is Initializable, Semver {..."

        }

        data ".metadata" hex"a2646970667358221220edcf3c12190bfab87e48bbe019797c691f1367d9e6c6b93d4c451147d8a75c5864736f6c634300080f0033"
    }

}


IR:

/// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 12:"contracts/L1/OptimismPortal.sol", 13:"contracts/L1/ResourceMetering.sol", 18:"contracts/libraries/Constants.sol", 29:"contracts/universal/Semver.sol"
object "OptimismPortal_775" {
    code {
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
        mstore(64, memoryguard(320))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1, _2, _3, _4 := copy_arguments_for_constructor_284_object_OptimismPortal_775()
        constructor_OptimismPortal_775(_1, _2, _3, _4)

        let _5 := allocate_unbounded()
        codecopy(_5, dataoffset("OptimismPortal_775_deployed"), datasize("OptimismPortal_775_deployed"))

        setimmutable(_5, "1367", mload(128))

        setimmutable(_5, "1370", mload(160))

        setimmutable(_5, "1373", mload(192))

        setimmutable(_5, "175", mload(224))

        setimmutable(_5, "179", mload(256))

        setimmutable(_5, "182", mload(288))

        return(_5, datasize("OptimismPortal_775_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        function round_up_to_mul_of_32(value) -> result {
            result := and(add(value, 31), not(31))
        }

        function panic_error_0x41() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }

        function finalize_allocation(memPtr, size) {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            // protect against overflow
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }

        function allocate_memory(size) -> memPtr {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }

        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
            revert(0, 0)
        }

        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
            revert(0, 0)
        }

        function cleanup_t_uint160(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function cleanup_t_address(value) -> cleaned {
            cleaned := cleanup_t_uint160(value)
        }

        function cleanup_t_contract$_L2OutputOracle_$2037(value) -> cleaned {
            cleaned := cleanup_t_address(value)
        }

        function validator_revert_t_contract$_L2OutputOracle_$2037(value) {
            if iszero(eq(value, cleanup_t_contract$_L2OutputOracle_$2037(value))) { revert(0, 0) }
        }

        function abi_decode_t_contract$_L2OutputOracle_$2037_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_contract$_L2OutputOracle_$2037(value)
        }

        function validator_revert_t_address(value) {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }

        function abi_decode_t_address_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_address(value)
        }

        function cleanup_t_bool(value) -> cleaned {
            cleaned := iszero(iszero(value))
        }

        function validator_revert_t_bool(value) {
            if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
        }

        function abi_decode_t_bool_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_bool(value)
        }

        function cleanup_t_contract$_SystemConfig_$2797(value) -> cleaned {
            cleaned := cleanup_t_address(value)
        }

        function validator_revert_t_contract$_SystemConfig_$2797(value) {
            if iszero(eq(value, cleanup_t_contract$_SystemConfig_$2797(value))) { revert(0, 0) }
        }

        function abi_decode_t_contract$_SystemConfig_$2797_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_contract$_SystemConfig_$2797(value)
        }

        function abi_decode_tuple_t_contract$_L2OutputOracle_$2037t_addresst_boolt_contract$_SystemConfig_$2797_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {
            if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            {

                let offset := 0

                value0 := abi_decode_t_contract$_L2OutputOracle_$2037_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 32

                value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 64

                value2 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 96

                value3 := abi_decode_t_contract$_SystemConfig_$2797_fromMemory(add(headStart, offset), dataEnd)
            }

        }

        function copy_arguments_for_constructor_284_object_OptimismPortal_775() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3 {
            let programSize := datasize("OptimismPortal_775")
            let argSize := sub(codesize(), programSize)

            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)

            ret_param_0, ret_param_1, ret_param_2, ret_param_3 := abi_decode_tuple_t_contract$_L2OutputOracle_$2037t_addresst_boolt_contract$_SystemConfig_$2797_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }

        function cleanup_t_rational_1_by_1(value) -> cleaned {
            cleaned := value
        }

        function cleanup_t_uint256(value) -> cleaned {
            cleaned := value
        }

        function identity(value) -> ret {
            ret := value
        }

        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }

        function cleanup_t_rational_3_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
        }

        /// @ast-id 284
        /// @src 12:5184:5461  "constructor(..."
        function constructor_OptimismPortal_775(var__l2Oracle_252_address, var__guardian_254, var__paused_256, var__config_259_address) {
            /// @src 12:5322:5323  "1"
            let expr_262 := 0x01
            let _6 := convert_t_rational_1_by_1_to_t_uint256(expr_262)
            /// @src 12:5325:5326  "3"
            let expr_263 := 0x03
            let _7 := convert_t_rational_3_by_1_to_t_uint256(expr_263)
            /// @src 12:5328:5329  "1"
            let expr_264 := 0x01
            let _8 := convert_t_rational_1_by_1_to_t_uint256(expr_264)

            /// @src 12:5184:5461  "constructor(..."
            constructor_Semver_1425(_6, _7, _8)

            /// @src 12:5353:5362  "_l2Oracle"
            let _9_address := var__l2Oracle_252_address
            let expr_268_address := _9_address
            /// @src 12:5341:5362  "L2_ORACLE = _l2Oracle"
            let _10_address := expr_268_address
            mstore(224, _10_address)
            let expr_269_address := expr_268_address
            /// @src 12:5383:5392  "_guardian"
            let _11 := var__guardian_254
            let expr_272 := _11
            /// @src 12:5372:5392  "GUARDIAN = _guardian"
            let _12 := expr_272
            mstore(288, _12)
            let expr_273 := expr_272
            /// @src 12:5418:5425  "_config"
            let _13_address := var__config_259_address
            let expr_276_address := _13_address
            /// @src 12:5402:5425  "SYSTEM_CONFIG = _config"
            let _14_address := expr_276_address
            mstore(256, _14_address)
            let expr_277_address := expr_276_address
            /// @src 12:5446:5453  "_paused"
            let _15 := var__paused_256
            let expr_280 := _15
            fun_initialize_305(expr_280)

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @ast-id 1396
        /// @src 29:726:919  "constructor(..."
        function constructor_Semver_1425(var__major_1376, var__minor_1378, var__patch_1380) {

            /// @src 29:726:919  "constructor(..."
            constructor_ResourceMetering_2386()

            /// @src 29:842:848  "_major"
            let _16 := var__major_1376
            let expr_1384 := _16
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _17 := expr_1384
            mstore(128, _17)
            let expr_1385 := expr_1384
            /// @src 29:874:880  "_minor"
            let _18 := var__minor_1378
            let expr_1388 := _18
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _19 := expr_1388
            mstore(160, _19)
            let expr_1389 := expr_1388
            /// @src 29:906:912  "_patch"
            let _20 := var__patch_1380
            let expr_1392 := _20
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _21 := expr_1392
            mstore(192, _21)
            let expr_1393 := expr_1392

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @src 13:529:8702  "abstract contract ResourceMetering is Initializable {..."
        function constructor_ResourceMetering_2386() {

            /// @src 13:529:8702  "abstract contract ResourceMetering is Initializable {..."
            constructor_Initializable_1576()

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @src 4:2372:5647  "abstract contract Initializable {..."
        function constructor_Initializable_1576() {

            /// @src 4:2372:5647  "abstract contract Initializable {..."

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        function shift_right_8_unsigned(value) -> newValue {
            newValue :=

            shr(8, value)

        }

        function cleanup_from_storage_t_bool(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }

        function read_from_storage_split_offset_1_t_bool(slot) -> value {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))

        }

        function shift_right_0_unsigned(value) -> newValue {
            newValue :=

            shr(0, value)

        }

        function cleanup_from_storage_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_uint8(slot) -> value {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))

        }

        function cleanup_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }

        function convert_t_uint160_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }

        function convert_t_uint160_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_contract$_Initializable_$1576_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }

        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is alrea")

            mstore(add(memPtr, 32), "dy initialized")

        }

        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function shift_left_0(value) -> newValue {
            newValue :=

            shl(0, value)

        }

        function update_byte_slice_1_shift_0(value, toInsert) -> result {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint8_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }

        function prepare_store_t_uint8(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_8(value) -> newValue {
            newValue :=

            shl(8, value)

        }

        function update_byte_slice_1_shift_1(value, toInsert) -> result {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_bool_to_t_bool(value) -> converted {
            converted := cleanup_t_bool(value)
        }

        function prepare_store_t_bool(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }

        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }

        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
            tail := add(headStart, 32)

            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

        }

        /// @ast-id 1496
        /// @src 4:3067:3562  "modifier initializer() {..."
        function modifier_initializer_290(var__paused_287) {

            /// @src 4:3123:3136  "_initializing"
            let _22 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1445 := _22
            /// @src 4:3122:3136  "!_initializing"
            let expr_1446 := cleanup_t_bool(iszero(expr_1445))
            /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_1444 := expr_1446
            /// @src 4:3168:3182  "isTopLevelCall"
            let _23 := var_isTopLevelCall_1444
            let expr_1449 := _23
            /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
            let expr_1453 := expr_1449
            if expr_1453 {
                /// @src 4:3186:3198  "_initialized"
                let _24 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_1450 := _24
                /// @src 4:3201:3202  "1"
                let expr_1451 := 0x01
                /// @src 4:3186:3202  "_initialized < 1"
                let expr_1452 := lt(cleanup_t_uint8(expr_1450), convert_t_rational_1_by_1_to_t_uint8(expr_1451))
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                expr_1453 := expr_1452
            }
            /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
            let expr_1454 := expr_1453
            /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
            let expr_1468 := expr_1454
            if iszero(expr_1468) {
                /// @src 4:3209:3216  "Address"
                let expr_1455_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                /// @src 4:3236:3240  "this"
                let expr_1459_address := address()
                /// @src 4:3228:3241  "address(this)"
                let expr_1460 := convert_t_contract$_Initializable_$1576_to_t_address(expr_1459_address)
                /// @src 4:3209:3242  "Address.isContract(address(this))"
                let expr_1461 := fun_isContract_3983(expr_1460)
                /// @src 4:3208:3242  "!Address.isContract(address(this))"
                let expr_1462 := cleanup_t_bool(iszero(expr_1461))
                /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                let expr_1466 := expr_1462
                if expr_1466 {
                    /// @src 4:3246:3258  "_initialized"
                    let _25 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1463 := _25
                    /// @src 4:3262:3263  "1"
                    let expr_1464 := 0x01
                    /// @src 4:3246:3263  "_initialized == 1"
                    let expr_1465 := eq(cleanup_t_uint8(expr_1463), convert_t_rational_1_by_1_to_t_uint8(expr_1464))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    expr_1466 := expr_1465
                }
                /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1467 := expr_1466
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                expr_1468 := expr_1467
            }
            /// @src 4:3146:3336  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1468)
            /// @src 4:3361:3362  "1"
            let expr_1473 := 0x01
            /// @src 4:3346:3362  "_initialized = 1"
            let _26 := convert_t_rational_1_by_1_to_t_uint8(expr_1473)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _26)
            let expr_1474 := _26
            /// @src 4:3376:3390  "isTopLevelCall"
            let _27 := var_isTopLevelCall_1444
            let expr_1476 := _27
            /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            if expr_1476 {
                /// @src 4:3422:3426  "true"
                let expr_1478 := 0x01
                /// @src 4:3406:3426  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1478)
                let expr_1479 := expr_1478
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
            }
            /// @src 4:3446:3447  "_"
            fun_initialize_305_inner(var__paused_287)
            /// @src 4:3461:3475  "isTopLevelCall"
            let _28 := var_isTopLevelCall_1444
            let expr_1484 := _28
            /// @src 4:3457:3556  "if (isTopLevelCall) {..."
            if expr_1484 {
                /// @src 4:3507:3512  "false"
                let expr_1486 := 0x00
                /// @src 4:3491:3512  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1486)
                let expr_1487 := expr_1486
                /// @src 4:3543:3544  "1"
                let expr_1490 := 0x01
                /// @src 4:3531:3545  "Initialized(1)"
                let _29 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _30 := allocate_unbounded()
                    let _31 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_30 , expr_1490)
                    log1(_30, sub(_31, _30) , _29)
                }/// @src 4:3457:3556  "if (isTopLevelCall) {..."
            }

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
        function constant_DEFAULT_L2_SENDER_2813() -> ret {
            /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
            let expr_2812 := 0xdead
            let _32 := expr_2812

            ret := _32
        }

        function update_byte_slice_20_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_address_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function prepare_store_t_address(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }

        function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0) {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }

        /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
        function fun_initialize_305_inner(var__paused_287) {

            /// @src 12:5585:5594  "Constants"
            let expr_293_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
            /// @src 12:5585:5612  "Constants.DEFAULT_L2_SENDER"
            let expr_294 := constant_DEFAULT_L2_SENDER_2813()
            /// @src 12:5574:5612  "l2Sender = Constants.DEFAULT_L2_SENDER"
            update_storage_value_offset_0t_address_to_t_address(0x32, expr_294)
            let expr_295 := expr_294
            /// @src 12:5631:5638  "_paused"
            let _33 := var__paused_287
            let expr_298 := _33
            /// @src 12:5622:5638  "paused = _paused"
            update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_298)
            let expr_299 := expr_298
            fun___ResourceMetering_init_2385()

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @ast-id 305
        /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
        function fun_initialize_305(var__paused_287) {

            modifier_initializer_290(var__paused_287)
        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is not i")

            mstore(add(memPtr, 32), "nitializing")

        }

        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @ast-id 1539
        /// @src 4:4842:4967  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_2370() {

            /// @src 4:4888:4901  "_initializing"
            let _34 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_1533 := _34
            /// @src 4:4880:4949  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_1533)
            /// @src 4:4959:4960  "_"
            fun___ResourceMetering_init_2385_inner()

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        function cleanup_t_uint64(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffff)
        }

        function convert_t_uint256_to_t_uint64(value) -> converted {
            converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
        }

        function allocate_memory_struct_t_struct$_ResourceParams_$2057_storage_ptr() -> memPtr {
            memPtr := allocate_memory(96)
        }

        function cleanup_t_rational_1000000000_by_1(value) -> cleaned {
            cleaned := value
        }

        function cleanup_t_uint128(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
        }

        function convert_t_rational_1000000000_by_1_to_t_uint128(value) -> converted {
            converted := cleanup_t_uint128(identity(cleanup_t_rational_1000000000_by_1(value)))
        }

        function write_to_memory_t_uint128(memPtr, value) {
            mstore(memPtr, cleanup_t_uint128(value))
        }

        function cleanup_t_rational_0_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_0_by_1_to_t_uint64(value) -> converted {
            converted := cleanup_t_uint64(identity(cleanup_t_rational_0_by_1(value)))
        }

        function write_to_memory_t_uint64(memPtr, value) {
            mstore(memPtr, cleanup_t_uint64(value))
        }

        function panic_error_0x00() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x00)
            revert(0, 0x24)
        }

        function read_from_memoryt_uint128(ptr) -> returnValue {

            let value := cleanup_t_uint128(mload(ptr))

            returnValue :=

            value

        }

        function update_byte_slice_16_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint128_to_t_uint128(value) -> converted {
            converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
        }

        function prepare_store_t_uint128(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0) {
            let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
            sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
        }

        function read_from_memoryt_uint64(ptr) -> returnValue {

            let value := cleanup_t_uint64(mload(ptr))

            returnValue :=

            value

        }

        function shift_left_128(value) -> newValue {
            newValue :=

            shl(128, value)

        }

        function update_byte_slice_8_shift_16(value, toInsert) -> result {
            let mask := 0xffffffffffffffff00000000000000000000000000000000
            toInsert := shift_left_128(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint64_to_t_uint64(value) -> converted {
            converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
        }

        function prepare_store_t_uint64(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_16t_uint64_to_t_uint64(slot, value_0) {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_16(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }

        function shift_left_192(value) -> newValue {
            newValue :=

            shl(192, value)

        }

        function update_byte_slice_8_shift_24(value, toInsert) -> result {
            let mask := 0xffffffffffffffff000000000000000000000000000000000000000000000000
            toInsert := shift_left_192(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function update_storage_value_offset_24t_uint64_to_t_uint64(slot, value_0) {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_24(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }

        function copy_struct_to_storage_from_t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value) {

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 0)

                let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 32)

                let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)

                update_storage_value_offset_16t_uint64_to_t_uint64(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 64)

                let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)

                update_storage_value_offset_24t_uint64_to_t_uint64(memberSlot, memberValue_0)

            }

        }

        function update_storage_value_offset_0t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value_0) {

            copy_struct_to_storage_from_t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value_0)
        }

        /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
        function fun___ResourceMetering_init_2385_inner() {

            /// @src 13:8598:8604  "1 gwei"
            let expr_2374 := 0x3b9aca00
            /// @src 13:8633:8634  "0"
            let expr_2375 := 0x00
            /// @src 13:8669:8681  "block.number"
            let expr_2379 := number()
            /// @src 13:8662:8682  "uint64(block.number)"
            let expr_2380 := convert_t_uint256_to_t_uint64(expr_2379)
            /// @src 13:8556:8693  "ResourceParams({..."
            let expr_2381_mpos := allocate_memory_struct_t_struct$_ResourceParams_$2057_storage_ptr()
            let _35 := convert_t_rational_1000000000_by_1_to_t_uint128(expr_2374)
            write_to_memory_t_uint128(add(expr_2381_mpos, 0), _35)
            let _36 := convert_t_rational_0_by_1_to_t_uint64(expr_2375)
            write_to_memory_t_uint64(add(expr_2381_mpos, 32), _36)
            write_to_memory_t_uint64(add(expr_2381_mpos, 64), expr_2380)
            /// @src 13:8547:8693  "params = ResourceParams({..."
            update_storage_value_offset_0t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(0x01, expr_2381_mpos)
            let _37_slot := 0x01
            let expr_2382_slot := _37_slot

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        /// @ast-id 2385
        /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
        function fun___ResourceMetering_init_2385() {

            modifier_onlyInitializing_2370()
        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        function zero_value_for_split_t_bool() -> ret {
            ret := 0
        }

        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }

        /// @ast-id 3983
        /// @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_3983(var_account_3971) -> var__3974 {
            /// @src 5:1235:1239  "bool"
            let zero_t_bool_38 := zero_value_for_split_t_bool()
            var__3974 := zero_t_bool_38

            /// @src 5:1465:1472  "account"
            let _39 := var_account_3971
            let expr_3976 := _39
            /// @src 5:1465:1484  "account.code.length"
            let expr_3978 := extcodesize(expr_3976)
            /// @src 5:1487:1488  "0"
            let expr_3979 := 0x00
            /// @src 5:1465:1488  "account.code.length > 0"
            let expr_3980 := gt(cleanup_t_uint256(expr_3978), convert_t_rational_0_by_1_to_t_uint256(expr_3979))
            /// @src 5:1458:1488  "return account.code.length > 0"
            var__3974 := expr_3980
            leave

        }
        /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

    }
    /// @use-src 4:"./node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol", 5:"./node_modules/@openzeppelin/contracts/utils/Address.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 7:"./node_modules/@openzeppelin/contracts/utils/math/Math.sol", 8:"./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol", 9:"./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol", 12:"contracts/L1/OptimismPortal.sol", 13:"contracts/L1/ResourceMetering.sol", 15:"contracts/libraries/Arithmetic.sol", 16:"contracts/libraries/Burn.sol", 17:"contracts/libraries/Bytes.sol", 18:"contracts/libraries/Constants.sol", 20:"contracts/libraries/Hashing.sol", 22:"contracts/libraries/SafeCall.sol", 24:"contracts/libraries/rlp/RLPReader.sol", 26:"contracts/libraries/trie/MerkleTrie.sol", 27:"contracts/libraries/trie/SecureMerkleTrie.sol", 29:"contracts/universal/Semver.sol", 30:"contracts/vendor/AddressAliasHelper.sol"
    object "OptimismPortal_775_deployed" {
        code {
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."
            mstore(64, 128)

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x001c2ff6
                {
                    // L2_ORACLE()

                    external_fun_L2_ORACLE_175()
                }

                case 0x3f4ba83a
                {
                    // unpause()

                    external_fun_unpause_349()
                }

                case 0x4870496f
                {
                    // proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])

                    external_fun_proveWithdrawalTransaction_517()
                }

                case 0x54fd4d50
                {
                    // version()

                    external_fun_version_1424()
                }

                case 0x5c975abb
                {
                    // paused()

                    external_fun_paused_199()
                }

                case 0x6dbffb78
                {
                    // isOutputFinalized(uint256)

                    external_fun_isOutputFinalized_756()
                }

                case 0x724c184c
                {
                    // GUARDIAN()

                    external_fun_GUARDIAN_182()
                }

                case 0x8456cb59
                {
                    // pause()

                    external_fun_pause_327()
                }

                case 0x8b4c40b0
                {
                    // donateETH()

                    external_fun_donateETH_372()
                }

                case 0x8c3152e9
                {
                    // finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))

                    external_fun_finalizeWithdrawalTransaction_662()
                }

                case 0x9bf62d82
                {
                    // l2Sender()

                    external_fun_l2Sender_185()
                }

                case 0xa14238e7
                {
                    // finalizedWithdrawals(bytes32)

                    external_fun_finalizedWithdrawals_190()
                }

                case 0xcff0ab96
                {
                    // params()

                    external_fun_params_2074()
                }

                case 0xd53a822f
                {
                    // initialize(bool)

                    external_fun_initialize_305()
                }

                case 0xe965084c
                {
                    // provenWithdrawals(bytes32)

                    external_fun_provenWithdrawals_196()
                }

                case 0xe9e05c42
                {
                    // depositTransaction(address,uint256,uint64,bool,bytes)

                    external_fun_depositTransaction_739()
                }

                case 0xf0498750
                {
                    // SYSTEM_CONFIG()

                    external_fun_SYSTEM_CONFIG_179()
                }

                default {}
            }
            if iszero(calldatasize()) { fun__367() stop() }
            revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            /// @ast-id 175
            /// @src 12:1921:1962  "L2OutputOracle public immutable L2_ORACLE"
            function getter_fun_L2_ORACLE_175() -> rval {
                rval := loadimmutable("175")
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_uint160(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function identity(value) -> ret {
                ret := value
            }

            function convert_t_uint160_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }

            function convert_t_uint160_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            function convert_t_contract$_L2OutputOracle_$2037_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function abi_encode_t_contract$_L2OutputOracle_$2037_to_t_address_fromStack(value, pos) {
                mstore(pos, convert_t_contract$_L2OutputOracle_$2037_to_t_address(value))
            }

            function abi_encode_tuple_t_contract$_L2OutputOracle_$2037__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_contract$_L2OutputOracle_$2037_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_L2_ORACLE_175() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_L2_ORACLE_175()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_L2OutputOracle_$2037__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function external_fun_unpause_349() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                fun_unpause_349()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
                revert(0, 0)
            }

            function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {
                revert(0, 0)
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {
                revert(0, 0)
            }

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function validator_revert_t_uint256(value) {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }

            function cleanup_t_address(value) -> cleaned {
                cleaned := cleanup_t_uint160(value)
            }

            function validator_revert_t_address(value) {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }

            function abi_decode_t_address(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }

            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {
                revert(0, 0)
            }

            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {
                revert(0, 0)
            }

            function array_allocation_size_t_bytes_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function copy_calldata_to_memory(src, dst, length) {
                calldatacopy(dst, src, length)
                // clear end
                mstore(add(dst, length), 0)
            }

            function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {
                array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))
                mstore(array, length)
                let dst := add(array, 0x20)
                if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }
                copy_calldata_to_memory(src, dst, length)
            }

            // bytes
            function abi_decode_t_bytes_memory_ptr(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }
                let length := calldataload(offset)
                array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)
            }

            // struct Types.WithdrawalTransaction
            function abi_decode_t_struct$_WithdrawalTransaction_$3162_memory_ptr(headStart, end) -> value {
                if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
                value := allocate_memory(0xc0)

                {
                    // nonce

                    let offset := 0

                    mstore(add(value, 0x00), abi_decode_t_uint256(add(headStart, offset), end))

                }

                {
                    // sender

                    let offset := 32

                    mstore(add(value, 0x20), abi_decode_t_address(add(headStart, offset), end))

                }

                {
                    // target

                    let offset := 64

                    mstore(add(value, 0x40), abi_decode_t_address(add(headStart, offset), end))

                }

                {
                    // value

                    let offset := 96

                    mstore(add(value, 0x60), abi_decode_t_uint256(add(headStart, offset), end))

                }

                {
                    // gasLimit

                    let offset := 128

                    mstore(add(value, 0x80), abi_decode_t_uint256(add(headStart, offset), end))

                }

                {
                    // data

                    let offset := calldataload(add(headStart, 160))
                    if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }

                    mstore(add(value, 0xa0), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))

                }

            }

            function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {
                revert(0, 0)
            }

            // struct Types.OutputRootProof
            function abi_decode_t_struct$_OutputRootProof_$3130_calldata_ptr(offset, end) -> value {
                if slt(sub(end, offset), 128) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }
                value := offset
            }

            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {
                revert(0, 0)
            }

            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {
                revert(0, 0)
            }

            // bytes[]
            function abi_decode_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(offset, end) -> arrayPos, length {
                if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }
                length := calldataload(offset)
                if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }
                arrayPos := add(offset, 0x20)
                if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }
            }

            function abi_decode_tuple_t_struct$_WithdrawalTransaction_$3162_memory_ptrt_uint256t_struct$_OutputRootProof_$3130_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {
                if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value0 := abi_decode_t_struct$_WithdrawalTransaction_$3162_memory_ptr(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value2 := abi_decode_t_struct$_OutputRootProof_$3130_calldata_ptr(add(headStart, offset), dataEnd)
                }

                {

                    let offset := calldataload(add(headStart, 192))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value3, value4 := abi_decode_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_proveWithdrawalTransaction_517() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0, param_1, param_2, param_3, param_4 :=  abi_decode_tuple_t_struct$_WithdrawalTransaction_$3162_memory_ptrt_uint256t_struct$_OutputRootProof_$3130_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(4, calldatasize())
                fun_proveWithdrawalTransaction_517(param_0, param_1, param_2, param_3, param_4)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length)
                {
                    // clear end
                    mstore(add(dst, length), 0)
                }
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_version_1424() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_version_1424()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function shift_right_unsigned_dynamic(bits, value) -> newValue {
                newValue :=

                shr(bits, value)

            }

            function cleanup_from_storage_t_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value {
                value := cleanup_from_storage_t_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_bool(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)

            }

            /// @ast-id 199
            /// @src 12:3001:3019  "bool public paused"
            function getter_fun_paused_199() -> ret {

                let slot := 53
                let offset := 0

                ret := read_from_storage_split_dynamic_t_bool(slot, offset)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }

            function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {
                mstore(pos, cleanup_t_bool(value))
            }

            function abi_encode_tuple_t_bool__to_t_bool__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_paused_199() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_paused_199()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_isOutputFinalized_756() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint256(4, calldatasize())
                let ret_0 :=  fun_isOutputFinalized_756(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 182
            /// @src 12:2182:2215  "address public immutable GUARDIAN"
            function getter_fun_GUARDIAN_182() -> rval {
                rval := loadimmutable("182")
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function abi_encode_t_address_to_t_address_fromStack(value, pos) {
                mstore(pos, cleanup_t_address(value))
            }

            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_GUARDIAN_182() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_GUARDIAN_182()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_pause_327() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                fun_pause_327()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_donateETH_372() {

                abi_decode_tuple_(4, calldatasize())
                fun_donateETH_372()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function abi_decode_tuple_t_struct$_WithdrawalTransaction_$3162_memory_ptr(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value0 := abi_decode_t_struct$_WithdrawalTransaction_$3162_memory_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_finalizeWithdrawalTransaction_662() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_struct$_WithdrawalTransaction_$3162_memory_ptr(4, calldatasize())
                fun_finalizeWithdrawalTransaction_662(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_from_storage_t_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value {
                value := cleanup_from_storage_t_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_address(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_address(sload(slot), offset)

            }

            /// @ast-id 185
            /// @src 12:2484:2507  "address public l2Sender"
            function getter_fun_l2Sender_185() -> ret {

                let slot := 50
                let offset := 0

                ret := read_from_storage_split_dynamic_t_address(slot, offset)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function external_fun_l2Sender_185() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_l2Sender_185()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function validator_revert_t_bytes32(value) {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }

            function abi_decode_t_bytes32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }

            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

            }

            function convert_t_bytes32_to_t_bytes32(value) -> converted {
                converted := cleanup_t_bytes32(value)
            }

            function mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot , key) -> dataSlot {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }

            /// @ast-id 190
            /// @src 12:2613:2665  "mapping(bytes32 => bool) public finalizedWithdrawals"
            function getter_fun_finalizedWithdrawals_190(key_0) -> ret {

                let slot := 51
                let offset := 0

                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(slot, key_0)

                ret := read_from_storage_split_dynamic_t_bool(slot, offset)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function external_fun_finalizedWithdrawals_190() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0 :=  getter_fun_finalizedWithdrawals_190(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bool__to_t_bool__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function shift_right_0_unsigned(value) -> newValue {
                newValue :=

                shr(0, value)

            }

            function cleanup_from_storage_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_0t_uint128(slot_value) -> value {
                value := cleanup_from_storage_t_uint128(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint128(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint128(sload(slot))

            }

            function shift_right_128_unsigned(value) -> newValue {
                newValue :=

                shr(128, value)

            }

            function cleanup_from_storage_t_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }

            function extract_from_storage_value_offset_16t_uint64(slot_value) -> value {
                value := cleanup_from_storage_t_uint64(shift_right_128_unsigned(slot_value))
            }

            function read_from_storage_split_offset_16_t_uint64(slot) -> value {
                value := extract_from_storage_value_offset_16t_uint64(sload(slot))

            }

            function shift_right_192_unsigned(value) -> newValue {
                newValue :=

                shr(192, value)

            }

            function extract_from_storage_value_offset_24t_uint64(slot_value) -> value {
                value := cleanup_from_storage_t_uint64(shift_right_192_unsigned(slot_value))
            }

            function read_from_storage_split_offset_24_t_uint64(slot) -> value {
                value := extract_from_storage_value_offset_24t_uint64(sload(slot))

            }

            /// @ast-id 2074
            /// @src 13:3039:3067  "ResourceParams public params"
            function getter_fun_params_2074() -> ret_0, ret_1, ret_2 {

                let slot := 1
                let offset := 0

                ret_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 0))

                ret_1 := read_from_storage_split_offset_16_t_uint64(add(slot, 0))

                ret_2 := read_from_storage_split_offset_24_t_uint64(add(slot, 0))

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function abi_encode_t_uint128_to_t_uint128_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint128(value))
            }

            function cleanup_t_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }

            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint64(value))
            }

            function abi_encode_tuple_t_uint128_t_uint64_t_uint64__to_t_uint128_t_uint64_t_uint64__fromStack(headStart , value0, value1, value2) -> tail {
                tail := add(headStart, 96)

                abi_encode_t_uint128_to_t_uint128_fromStack(value0,  add(headStart, 0))

                abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))

                abi_encode_t_uint64_to_t_uint64_fromStack(value2,  add(headStart, 64))

            }

            function external_fun_params_2074() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0, ret_1, ret_2 :=  getter_fun_params_2074()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint128_t_uint64_t_uint64__to_t_uint128_t_uint64_t_uint64__fromStack(memPos , ret_0, ret_1, ret_2)
                return(memPos, sub(memEnd, memPos))

            }

            function validator_revert_t_bool(value) {
                if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }
            }

            function abi_decode_t_bool(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_bool(value)
            }

            function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_initialize_305() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bool(4, calldatasize())
                fun_initialize_305(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(slot , key) -> dataSlot {
                mstore(0, convert_t_bytes32_to_t_bytes32(key))
                mstore(0x20, slot)
                dataSlot := keccak256(0, 0x40)
            }

            function cleanup_from_storage_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function extract_from_storage_value_offset_0t_bytes32(slot_value) -> value {
                value := cleanup_from_storage_t_bytes32(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_bytes32(slot) -> value {
                value := extract_from_storage_value_offset_0t_bytes32(sload(slot))

            }

            function extract_from_storage_value_offset_16t_uint128(slot_value) -> value {
                value := cleanup_from_storage_t_uint128(shift_right_128_unsigned(slot_value))
            }

            function read_from_storage_split_offset_16_t_uint128(slot) -> value {
                value := extract_from_storage_value_offset_16t_uint128(sload(slot))

            }

            /// @ast-id 196
            /// @src 12:2762:2823  "mapping(bytes32 => ProvenWithdrawal) public provenWithdrawals"
            function getter_fun_provenWithdrawals_196(key_0) -> ret_0, ret_1, ret_2 {

                let slot := 52
                let offset := 0

                slot := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(slot, key_0)

                ret_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))

                ret_1 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))

                ret_2 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {
                mstore(pos, cleanup_t_bytes32(value))
            }

            function abi_encode_tuple_t_bytes32_t_uint128_t_uint128__to_t_bytes32_t_uint128_t_uint128__fromStack(headStart , value0, value1, value2) -> tail {
                tail := add(headStart, 96)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

                abi_encode_t_uint128_to_t_uint128_fromStack(value1,  add(headStart, 32))

                abi_encode_t_uint128_to_t_uint128_fromStack(value2,  add(headStart, 64))

            }

            function external_fun_provenWithdrawals_196() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bytes32(4, calldatasize())
                let ret_0, ret_1, ret_2 :=  getter_fun_provenWithdrawals_196(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32_t_uint128_t_uint128__to_t_bytes32_t_uint128_t_uint128__fromStack(memPos , ret_0, ret_1, ret_2)
                return(memPos, sub(memEnd, memPos))

            }

            function validator_revert_t_uint64(value) {
                if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint64(value)
            }

            function abi_decode_tuple_t_addresst_uint256t_uint64t_boolt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {
                if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value2 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 96

                    value3 := abi_decode_t_bool(add(headStart, offset), dataEnd)
                }

                {

                    let offset := calldataload(add(headStart, 128))
                    if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }

                    value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_depositTransaction_739() {

                let param_0, param_1, param_2, param_3, param_4 :=  abi_decode_tuple_t_addresst_uint256t_uint64t_boolt_bytes_memory_ptr(4, calldatasize())
                fun_depositTransaction_739(param_0, param_1, param_2, param_3, param_4)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 179
            /// @src 12:2038:2081  "SystemConfig public immutable SYSTEM_CONFIG"
            function getter_fun_SYSTEM_CONFIG_179() -> rval {
                rval := loadimmutable("179")
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function convert_t_contract$_SystemConfig_$2797_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function abi_encode_t_contract$_SystemConfig_$2797_to_t_address_fromStack(value, pos) {
                mstore(pos, convert_t_contract$_SystemConfig_$2797_to_t_address(value))
            }

            function abi_encode_tuple_t_contract$_SystemConfig_$2797__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_contract$_SystemConfig_$2797_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_SYSTEM_CONFIG_179() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_SYSTEM_CONFIG_179()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_contract$_SystemConfig_$2797__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98() {
                revert(0, 0)
            }

            function shift_right_8_unsigned(value) -> newValue {
                newValue :=

                shr(8, value)

            }

            function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }

            function read_from_storage_split_offset_1_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))

            }

            function cleanup_from_storage_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))

            }

            function cleanup_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function cleanup_t_rational_1_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_contract$_Initializable_$1576_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is alrea")

                mstore(add(memPtr, 32), "dy initialized")

            }

            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function shift_left_0(value) -> newValue {
                newValue :=

                shl(0, value)

            }

            function update_byte_slice_1_shift_0(value, toInsert) -> result {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint8_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }

            function prepare_store_t_uint8(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_8(value) -> newValue {
                newValue :=

                shl(8, value)

            }

            function update_byte_slice_1_shift_1(value, toInsert) -> result {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_bool_to_t_bool(value) -> converted {
                converted := cleanup_t_bool(value)
            }

            function prepare_store_t_bool(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }

            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

            }

            /// @ast-id 1496
            /// @src 4:3067:3562  "modifier initializer() {..."
            function modifier_initializer_290(var__paused_287) {

                /// @src 4:3123:3136  "_initializing"
                let _1 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1445 := _1
                /// @src 4:3122:3136  "!_initializing"
                let expr_1446 := cleanup_t_bool(iszero(expr_1445))
                /// @src 4:3100:3136  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_1444 := expr_1446
                /// @src 4:3168:3182  "isTopLevelCall"
                let _2 := var_isTopLevelCall_1444
                let expr_1449 := _2
                /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                let expr_1453 := expr_1449
                if expr_1453 {
                    /// @src 4:3186:3198  "_initialized"
                    let _3 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_1450 := _3
                    /// @src 4:3201:3202  "1"
                    let expr_1451 := 0x01
                    /// @src 4:3186:3202  "_initialized < 1"
                    let expr_1452 := lt(cleanup_t_uint8(expr_1450), convert_t_rational_1_by_1_to_t_uint8(expr_1451))
                    /// @src 4:3168:3202  "isTopLevelCall && _initialized < 1"
                    expr_1453 := expr_1452
                }
                /// @src 4:3167:3203  "(isTopLevelCall && _initialized < 1)"
                let expr_1454 := expr_1453
                /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                let expr_1468 := expr_1454
                if iszero(expr_1468) {
                    /// @src 4:3209:3216  "Address"
                    let expr_1455_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Address.sol:Address")
                    /// @src 4:3236:3240  "this"
                    let expr_1459_address := address()
                    /// @src 4:3228:3241  "address(this)"
                    let expr_1460 := convert_t_contract$_Initializable_$1576_to_t_address(expr_1459_address)
                    /// @src 4:3209:3242  "Address.isContract(address(this))"
                    let expr_1461 := fun_isContract_3983(expr_1460)
                    /// @src 4:3208:3242  "!Address.isContract(address(this))"
                    let expr_1462 := cleanup_t_bool(iszero(expr_1461))
                    /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                    let expr_1466 := expr_1462
                    if expr_1466 {
                        /// @src 4:3246:3258  "_initialized"
                        let _4 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_1463 := _4
                        /// @src 4:3262:3263  "1"
                        let expr_1464 := 0x01
                        /// @src 4:3246:3263  "_initialized == 1"
                        let expr_1465 := eq(cleanup_t_uint8(expr_1463), convert_t_rational_1_by_1_to_t_uint8(expr_1464))
                        /// @src 4:3208:3263  "!Address.isContract(address(this)) && _initialized == 1"
                        expr_1466 := expr_1465
                    }
                    /// @src 4:3207:3264  "(!Address.isContract(address(this)) && _initialized == 1)"
                    let expr_1467 := expr_1466
                    /// @src 4:3167:3264  "(isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1)"
                    expr_1468 := expr_1467
                }
                /// @src 4:3146:3336  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_1468)
                /// @src 4:3361:3362  "1"
                let expr_1473 := 0x01
                /// @src 4:3346:3362  "_initialized = 1"
                let _5 := convert_t_rational_1_by_1_to_t_uint8(expr_1473)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _5)
                let expr_1474 := _5
                /// @src 4:3376:3390  "isTopLevelCall"
                let _6 := var_isTopLevelCall_1444
                let expr_1476 := _6
                /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                if expr_1476 {
                    /// @src 4:3422:3426  "true"
                    let expr_1478 := 0x01
                    /// @src 4:3406:3426  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1478)
                    let expr_1479 := expr_1478
                    /// @src 4:3372:3437  "if (isTopLevelCall) {..."
                }
                /// @src 4:3446:3447  "_"
                fun_initialize_305_inner(var__paused_287)
                /// @src 4:3461:3475  "isTopLevelCall"
                let _7 := var_isTopLevelCall_1444
                let expr_1484 := _7
                /// @src 4:3457:3556  "if (isTopLevelCall) {..."
                if expr_1484 {
                    /// @src 4:3507:3512  "false"
                    let expr_1486 := 0x00
                    /// @src 4:3491:3512  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_1486)
                    let expr_1487 := expr_1486
                    /// @src 4:3543:3544  "1"
                    let expr_1490 := 0x01
                    /// @src 4:3531:3545  "Initialized(1)"
                    let _8 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _9 := allocate_unbounded()
                        let _10 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_9 , expr_1490)
                        log1(_9, sub(_10, _9) , _8)
                    }/// @src 4:3457:3556  "if (isTopLevelCall) {..."
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @src 18:1318:1406  "address internal constant DEFAULT_L2_SENDER = 0x000000000000000000000000000000000000dEaD"
            function constant_DEFAULT_L2_SENDER_2813() -> ret {
                /// @src 18:1364:1406  "0x000000000000000000000000000000000000dEaD"
                let expr_2812 := 0xdead
                let _11 := expr_2812

                ret := _11
            }

            function update_byte_slice_20_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_address_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function prepare_store_t_address(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }

            function update_storage_value_offset_0t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
            function fun_initialize_305_inner(var__paused_287) {

                /// @src 12:5585:5594  "Constants"
                let expr_293_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:5585:5612  "Constants.DEFAULT_L2_SENDER"
                let expr_294 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 12:5574:5612  "l2Sender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_294)
                let expr_295 := expr_294
                /// @src 12:5631:5638  "_paused"
                let _12 := var__paused_287
                let expr_298 := _12
                /// @src 12:5622:5638  "paused = _paused"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_298)
                let expr_299 := expr_298
                fun___ResourceMetering_init_2385()

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 305
            /// @src 12:5511:5680  "function initialize(bool _paused) public initializer {..."
            function fun_initialize_305(var__paused_287) {

                modifier_initializer_290(var__paused_287)
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: only guardian ca")

                mstore(add(memPtr, 32), "n pause")

            }

            function abi_encode_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)
                store_literal_in_memory_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 327
            /// @src 12:5749:5922  "function pause() external {..."
            function fun_pause_327() {

                /// @src 12:5793:5803  "msg.sender"
                let expr_311 := caller()
                /// @src 12:5807:5815  "GUARDIAN"
                let _13 := loadimmutable("182")
                let expr_312 := _13
                /// @src 12:5793:5815  "msg.sender == GUARDIAN"
                let expr_313 := eq(cleanup_t_address(expr_311), cleanup_t_address(expr_312))
                /// @src 12:5785:5859  "require(msg.sender == GUARDIAN, \"OptimismPortal: only guardian can pause\")"
                require_helper_t_stringliteral_a662ad7462f0018e8b171ba19146984ad716c45a2c8d7c903bdd6e1628b95f08(expr_313)
                /// @src 12:5878:5882  "true"
                let expr_318 := 0x01
                /// @src 12:5869:5882  "paused = true"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_318)
                let expr_319 := expr_318
                /// @src 12:5904:5914  "msg.sender"
                let expr_323 := caller()
                /// @src 12:5897:5915  "Paused(msg.sender)"
                let _14 := 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258
                {
                    let _15 := allocate_unbounded()
                    let _16 := abi_encode_tuple_t_address__to_t_address__fromStack(_15 , expr_323)
                    log1(_15, sub(_16, _15) , _14)
                }
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: only guardian ca")

                mstore(add(memPtr, 32), "n unpause")

            }

            function abi_encode_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)
                store_literal_in_memory_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 349
            /// @src 12:5993:6173  "function unpause() external {..."
            function fun_unpause_349() {

                /// @src 12:6039:6049  "msg.sender"
                let expr_333 := caller()
                /// @src 12:6053:6061  "GUARDIAN"
                let _17 := loadimmutable("182")
                let expr_334 := _17
                /// @src 12:6039:6061  "msg.sender == GUARDIAN"
                let expr_335 := eq(cleanup_t_address(expr_333), cleanup_t_address(expr_334))
                /// @src 12:6031:6107  "require(msg.sender == GUARDIAN, \"OptimismPortal: only guardian can unpause\")"
                require_helper_t_stringliteral_9b69e94c34df6db33f20b596e1e1d19a7e5843e1b38ae4395fe1bbf64e89e262(expr_335)
                /// @src 12:6126:6131  "false"
                let expr_340 := 0x00
                /// @src 12:6117:6131  "paused = false"
                update_storage_value_offset_0t_bool_to_t_bool(0x35, expr_340)
                let expr_341 := expr_340
                /// @src 12:6155:6165  "msg.sender"
                let expr_345 := caller()
                /// @src 12:6146:6166  "Unpaused(msg.sender)"
                let _18 := 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa
                {
                    let _19 := allocate_unbounded()
                    let _20 := abi_encode_tuple_t_address__to_t_address__fromStack(_19 , expr_345)
                    log1(_19, sub(_20, _19) , _18)
                }
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_rational_100000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_100000_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_100000_by_1(value)))
            }

            /// @src 12:1783:1843  "uint64 internal constant RECEIVE_DEFAULT_GAS_LIMIT = 100_000"
            function constant_RECEIVE_DEFAULT_GAS_LIMIT_171() -> ret {
                /// @src 12:1836:1843  "100_000"
                let expr_170 := 0x0186a0
                let _21 := convert_t_rational_100000_by_1_to_t_uint64(expr_170)

                ret := _21
            }

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {

            }

            function copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(0)
                store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(add(memPtr, 32))
            }

            function convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr() -> converted {
                converted := copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470()
            }

            /// @ast-id 367
            /// @src 12:6606:6736  "receive() external payable {..."
            function fun__367() {

                /// @src 12:6662:6672  "msg.sender"
                let expr_355 := caller()
                /// @src 12:6674:6683  "msg.value"
                let expr_357 := callvalue()
                /// @src 12:6685:6710  "RECEIVE_DEFAULT_GAS_LIMIT"
                let expr_358 := constant_RECEIVE_DEFAULT_GAS_LIMIT_171()
                /// @src 12:6712:6717  "false"
                let expr_359 := 0x00
                /// @src 12:6719:6728  "bytes(\"\")"
                let expr_363_mpos := convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr()
                fun_depositTransaction_739(expr_355, expr_357, expr_358, expr_359, expr_363_mpos)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 372
            /// @src 12:6948:7025  "function donateETH() external payable {..."
            function fun_donateETH_372() {

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function extract_from_storage_value_offset_0t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_0t_bool(sload(slot))

            }

            function store_literal_in_memory_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: paused")

            }

            function abi_encode_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)
                store_literal_in_memory_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 248
            /// @src 12:4694:4797  "modifier whenNotPaused() {..."
            function modifier_whenNotPaused_400(var__tx_389_mpos, var__l2OutputIndex_391, var__outputRootProof_394_offset, var__withdrawalProof_397_offset, var__withdrawalProof_397_length) {

                /// @src 12:4737:4743  "paused"
                let _22 := read_from_storage_split_offset_0_t_bool(0x35)
                let expr_240 := _22
                /// @src 12:4747:4752  "false"
                let expr_241 := 0x00
                /// @src 12:4737:4752  "paused == false"
                let expr_242 := eq(cleanup_t_bool(expr_240), cleanup_t_bool(expr_241))
                /// @src 12:4729:4779  "require(paused == false, \"OptimismPortal: paused\")"
                require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(expr_242)
                /// @src 12:4789:4790  "_"
                fun_proveWithdrawalTransaction_517_inner(var__tx_389_mpos, var__l2OutputIndex_391, var__outputRootProof_394_offset, var__withdrawalProof_397_offset, var__withdrawalProof_397_length)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function read_from_memoryt_address(ptr) -> returnValue {

                let value := cleanup_t_address(mload(ptr))

                returnValue :=

                value

            }

            function convert_t_contract$_OptimismPortal_$775_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function store_literal_in_memory_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: you cannot send ")

                mstore(add(memPtr, 32), "messages to the portal contract")

            }

            function abi_encode_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 63)
                store_literal_in_memory_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20() {
                revert(0, 0)
            }

            function shift_left_224(value) -> newValue {
                newValue :=

                shl(224, value)

            }

            function abi_decode_t_bytes32_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_bytes32(value)
            }

            function validator_revert_t_uint128(value) {
                if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint128_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_uint128(value)
            }

            // struct Types.OutputProposal
            function abi_decode_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(headStart, end) -> value {
                if slt(sub(end, headStart), 0x60) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
                value := allocate_memory(0x60)

                {
                    // outputRoot

                    let offset := 0

                    mstore(add(value, 0x00), abi_decode_t_bytes32_fromMemory(add(headStart, offset), end))

                }

                {
                    // timestamp

                    let offset := 32

                    mstore(add(value, 0x20), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))

                }

                {
                    // l2BlockNumber

                    let offset := 64

                    mstore(add(value, 0x40), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))

                }

            }

            function abi_decode_tuple_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
                }

            }

            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint256(value))
            }

            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

            }

            function revert_forward_1() {
                let pos := allocate_unbounded()
                returndatacopy(pos, 0, returndatasize())
                revert(pos, returndatasize())
            }

            function read_from_memoryt_bytes32(ptr) -> returnValue {

                let value := cleanup_t_bytes32(mload(ptr))

                returnValue :=

                value

            }

            // struct Types.OutputRootProof
            function abi_decode_t_struct$_OutputRootProof_$3130_memory_ptr(headStart, end) -> value {
                if slt(sub(end, headStart), 0x80) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
                value := allocate_memory(0x80)

                {
                    // version

                    let offset := 0

                    mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))

                }

                {
                    // stateRoot

                    let offset := 32

                    mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))

                }

                {
                    // messagePasserStorageRoot

                    let offset := 64

                    mstore(add(value, 0x40), abi_decode_t_bytes32(add(headStart, offset), end))

                }

                {
                    // latestBlockhash

                    let offset := 96

                    mstore(add(value, 0x60), abi_decode_t_bytes32(add(headStart, offset), end))

                }

            }

            function convert_t_struct$_OutputRootProof_$3130_calldata_ptr_to_t_struct$_OutputRootProof_$3130_memory_ptr(value) -> converted {

                converted := abi_decode_t_struct$_OutputRootProof_$3130_memory_ptr(value, calldatasize())

            }

            function store_literal_in_memory_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: invalid output r")

                mstore(add(memPtr, 32), "oot proof")

            }

            function abi_encode_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)
                store_literal_in_memory_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function write_to_memory_t_bytes32(memPtr, value) {
                mstore(memPtr, cleanup_t_bytes32(value))
            }

            function write_to_memory_t_uint128(memPtr, value) {
                mstore(memPtr, cleanup_t_uint128(value))
            }

            function allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_memory_ptr() -> memPtr {
                memPtr := allocate_memory(96)
            }

            function read_from_storage_reference_type_t_struct$_ProvenWithdrawal_$163_memory_ptr(slot) -> value {
                value := allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_memory_ptr()

                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_bytes32(add(slot, 0))
                    write_to_memory_t_bytes32(add(value, 0), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 32), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_16_t_uint128(add(slot, 1))
                    write_to_memory_t_uint128(add(value, 64), memberValue_0)
                }

            }

            function convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(value) -> converted {

                converted := read_from_storage_reference_type_t_struct$_ProvenWithdrawal_$163_memory_ptr(value)

            }

            function read_from_memoryt_uint128(ptr) -> returnValue {

                let value := cleanup_t_uint128(mload(ptr))

                returnValue :=

                value

            }

            function cleanup_t_rational_0_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_0_by_1_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_rational_0_by_1(value)))
            }

            function convert_t_uint128_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint128(value)))
            }

            function abi_encode_t_uint128_to_t_uint256_fromStack(value, pos) {
                mstore(pos, convert_t_uint128_to_t_uint256(value))
            }

            function abi_encode_tuple_t_uint128__to_t_uint256__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint128_to_t_uint256_fromStack(value0,  add(headStart, 0))

            }

            function store_literal_in_memory_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: withdrawal hash ")

                mstore(add(memPtr, 32), "has already been proven")

            }

            function abi_encode_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }

            function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack(headStart , value0, value1) -> tail {
                tail := add(headStart, 64)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

                abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))

            }

            function array_dataslot_t_bytes_memory_ptr(ptr) -> data {
                data := ptr

                data := add(ptr, 0x20)

            }

            function array_length_t_bytes_memory_ptr(value) -> length {

                length := mload(value)

            }

            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

            }

            function read_from_calldatat_bytes32(ptr) -> returnValue {

                let value := calldataload(ptr)
                validator_revert_t_bytes32(value)

                returnValue :=

                value

            }

            function store_literal_in_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2(memPtr) {

                mstore(add(memPtr, 0), 0x0100000000000000000000000000000000000000000000000000000000000000)

            }

            function copy_literal_to_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2(add(memPtr, 32))
            }

            function convert_t_stringliteral_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2_to_t_bytes_memory_ptr() -> converted {
                converted := copy_literal_to_memory_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2()
            }

            function array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := mul(length, 0x20)

                // add length slot
                size := add(size, 0x20)

            }

            // bytes[]
            function abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {
                array := allocate_memory(array_allocation_size_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(length))
                let dst := array

                mstore(array, length)
                dst := add(array, 0x20)

                let srcEnd := add(offset, mul(length, 0x20))
                if gt(srcEnd, end) {
                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()
                }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }
                {

                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }
                    let elementPos := add(offset, innerOffset)

                    mstore(dst, abi_decode_t_bytes_memory_ptr(elementPos, end))
                    dst := add(dst, 0x20)
                }
            }

            function convert_array_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value, length) -> converted  {

                // Copy the array to a free position in memory
                converted :=

                abi_decode_available_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value, length, calldatasize())

            }

            function store_literal_in_memory_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: invalid withdraw")

                mstore(add(memPtr, 32), "al inclusion proof")

            }

            function abi_encode_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_uint256_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint256(value)))
            }

            function allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_storage_ptr() -> memPtr {
                memPtr := allocate_memory(96)
            }

            function panic_error_0x00() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }

            function update_byte_slice_32_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function prepare_store_t_bytes32(value) -> ret {
                ret := shift_right_0_unsigned(value)
            }

            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0) {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }

            function update_byte_slice_16_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint128_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }

            function prepare_store_t_uint128(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint128_to_t_uint128(slot, value_0) {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_0(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }

            function shift_left_128(value) -> newValue {
                newValue :=

                shl(128, value)

            }

            function update_byte_slice_16_shift_16(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_16t_uint128_to_t_uint128(slot, value_0) {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_16(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }

            function copy_struct_to_storage_from_t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value) {

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)

                    let memberValue_0 := read_from_memoryt_bytes32(memberSrcPtr)

                    update_storage_value_offset_0t_bytes32_to_t_bytes32(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 32)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 1)
                    let memberSrcPtr := add(value, 64)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_16t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

            }

            function update_storage_value_offset_0t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value_0) {

                copy_struct_to_storage_from_t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(slot, value_0)
            }

            /// @src 12:7873:11711  "function proveWithdrawalTransaction(..."
            function fun_proveWithdrawalTransaction_517_inner(var__tx_389_mpos, var__l2OutputIndex_391, var__outputRootProof_394_offset, var__withdrawalProof_397_offset, var__withdrawalProof_397_length) {

                /// @src 12:8376:8379  "_tx"
                let _23_mpos := var__tx_389_mpos
                let expr_403_mpos := _23_mpos
                /// @src 12:8376:8386  "_tx.target"
                let _24 := add(expr_403_mpos, 64)
                let _25 := read_from_memoryt_address(_24)
                let expr_404 := _25
                /// @src 12:8398:8402  "this"
                let expr_407_address := address()
                /// @src 12:8390:8403  "address(this)"
                let expr_408 := convert_t_contract$_OptimismPortal_$775_to_t_address(expr_407_address)
                /// @src 12:8376:8403  "_tx.target != address(this)"
                let expr_409 := iszero(eq(cleanup_t_address(expr_404), cleanup_t_address(expr_408)))
                /// @src 12:8355:8492  "require(..."
                require_helper_t_stringliteral_57e41062e2e7b97ddf730827f5249d28f602a3846dfe107ce36292fb1c029eb8(expr_409)
                /// @src 12:8690:8699  "L2_ORACLE"
                let _26_address := loadimmutable("175")
                let expr_415_address := _26_address
                /// @src 12:8690:8711  "L2_ORACLE.getL2Output"
                let expr_416_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_415_address)
                let expr_416_functionSelector := 0xa25ae557
                /// @src 12:8712:8726  "_l2OutputIndex"
                let _27 := var__l2OutputIndex_391
                let expr_417 := _27
                /// @src 12:8690:8727  "L2_ORACLE.getL2Output(_l2OutputIndex)"

                // storage for arguments and returned data
                let _28 := allocate_unbounded()
                mstore(_28, shift_left_224(expr_416_functionSelector))
                let _29 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(add(_28, 4) , expr_417)

                let _30 := staticcall(gas(), expr_416_address,  _28, sub(_29, _28), _28, 96)

                if iszero(_30) { revert_forward_1() }

                let expr_418_mpos
                if _30 {

                    let _31 := 96

                    if gt(_31, returndatasize()) {
                        _31 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_28, _31)

                    // decode return parameters from external try-call into retVars
                    expr_418_mpos :=  abi_decode_tuple_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(_28, add(_28, _31))
                }
                /// @src 12:8690:8738  "L2_ORACLE.getL2Output(_l2OutputIndex).outputRoot"
                let _32 := add(expr_418_mpos, 0)
                let _33 := read_from_memoryt_bytes32(_32)
                let expr_419 := _33
                /// @src 12:8669:8738  "bytes32 outputRoot = L2_ORACLE.getL2Output(_l2OutputIndex).outputRoot"
                let var_outputRoot_414 := expr_419
                /// @src 12:8858:8868  "outputRoot"
                let _34 := var_outputRoot_414
                let expr_422 := _34
                /// @src 12:8872:8879  "Hashing"
                let expr_423_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:8900:8916  "_outputRootProof"
                let _35_offset := var__outputRootProof_394_offset
                let expr_425_offset := _35_offset
                /// @src 12:8872:8917  "Hashing.hashOutputRootProof(_outputRootProof)"
                let _36_mpos := convert_t_struct$_OutputRootProof_$3130_calldata_ptr_to_t_struct$_OutputRootProof_$3130_memory_ptr(expr_425_offset)
                let expr_426 := fun_hashOutputRootProof_3064(_36_mpos)
                /// @src 12:8858:8917  "outputRoot == Hashing.hashOutputRootProof(_outputRootProof)"
                let expr_427 := eq(cleanup_t_bytes32(expr_422), cleanup_t_bytes32(expr_426))
                /// @src 12:8837:8984  "require(..."
                require_helper_t_stringliteral_490ec653897228799e7e4c4af8b1fd3b4a0688df98d026b46afa352ce9876996(expr_427)
                /// @src 12:9120:9127  "Hashing"
                let expr_433_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:9143:9146  "_tx"
                let _37_mpos := var__tx_389_mpos
                let expr_435_mpos := _37_mpos
                /// @src 12:9120:9147  "Hashing.hashWithdrawal(_tx)"
                let expr_436 := fun_hashWithdrawal_3040(expr_435_mpos)
                /// @src 12:9095:9147  "bytes32 withdrawalHash = Hashing.hashWithdrawal(_tx)"
                let var_withdrawalHash_432 := expr_436
                /// @src 12:9200:9217  "provenWithdrawals"
                let _38 := 0x34
                let expr_441 := _38
                /// @src 12:9218:9232  "withdrawalHash"
                let _39 := var_withdrawalHash_432
                let expr_442 := _39
                /// @src 12:9200:9233  "provenWithdrawals[withdrawalHash]"
                let _40 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_441,expr_442)
                let _41_slot := _40
                let expr_443_slot := _41_slot
                /// @src 12:9157:9233  "ProvenWithdrawal memory provenWithdrawal = provenWithdrawals[withdrawalHash]"
                let var_provenWithdrawal_440_mpos := convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(expr_443_slot)
                /// @src 12:9787:9803  "provenWithdrawal"
                let _42_mpos := var_provenWithdrawal_440_mpos
                let expr_446_mpos := _42_mpos
                /// @src 12:9787:9813  "provenWithdrawal.timestamp"
                let _43 := add(expr_446_mpos, 32)
                let _44 := read_from_memoryt_uint128(_43)
                let expr_447 := _44
                /// @src 12:9817:9818  "0"
                let expr_448 := 0x00
                /// @src 12:9787:9818  "provenWithdrawal.timestamp == 0"
                let expr_449 := eq(cleanup_t_uint128(expr_447), convert_t_rational_0_by_1_to_t_uint128(expr_448))
                /// @src 12:9787:9949  "provenWithdrawal.timestamp == 0 ||..."
                let expr_459 := expr_449
                if iszero(expr_459) {
                    /// @src 12:9838:9847  "L2_ORACLE"
                    let _45_address := loadimmutable("175")
                    let expr_450_address := _45_address
                    /// @src 12:9838:9859  "L2_ORACLE.getL2Output"
                    let expr_451_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_450_address)
                    let expr_451_functionSelector := 0xa25ae557
                    /// @src 12:9860:9876  "provenWithdrawal"
                    let _46_mpos := var_provenWithdrawal_440_mpos
                    let expr_452_mpos := _46_mpos
                    /// @src 12:9860:9890  "provenWithdrawal.l2OutputIndex"
                    let _47 := add(expr_452_mpos, 64)
                    let _48 := read_from_memoryt_uint128(_47)
                    let expr_453 := _48
                    /// @src 12:9838:9891  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex)"

                    // storage for arguments and returned data
                    let _49 := allocate_unbounded()
                    mstore(_49, shift_left_224(expr_451_functionSelector))
                    let _50 := abi_encode_tuple_t_uint128__to_t_uint256__fromStack(add(_49, 4) , expr_453)

                    let _51 := staticcall(gas(), expr_451_address,  _49, sub(_50, _49), _49, 96)

                    if iszero(_51) { revert_forward_1() }

                    let expr_454_mpos
                    if _51 {

                        let _52 := 96

                        if gt(_52, returndatasize()) {
                            _52 := returndatasize()
                        }

                        // update freeMemoryPointer according to dynamic return size
                        finalize_allocation(_49, _52)

                        // decode return parameters from external try-call into retVars
                        expr_454_mpos :=  abi_decode_tuple_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(_49, add(_49, _52))
                    }
                    /// @src 12:9838:9902  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex).outputRoot"
                    let _53 := add(expr_454_mpos, 0)
                    let _54 := read_from_memoryt_bytes32(_53)
                    let expr_455 := _54
                    /// @src 12:9922:9938  "provenWithdrawal"
                    let _55_mpos := var_provenWithdrawal_440_mpos
                    let expr_456_mpos := _55_mpos
                    /// @src 12:9922:9949  "provenWithdrawal.outputRoot"
                    let _56 := add(expr_456_mpos, 0)
                    let _57 := read_from_memoryt_bytes32(_56)
                    let expr_457 := _57
                    /// @src 12:9838:9949  "L2_ORACLE.getL2Output(provenWithdrawal.l2OutputIndex).outputRoot !=..."
                    let expr_458 := iszero(eq(cleanup_t_bytes32(expr_455), cleanup_t_bytes32(expr_457)))
                    /// @src 12:9787:9949  "provenWithdrawal.timestamp == 0 ||..."
                    expr_459 := expr_458
                }
                /// @src 12:9766:10030  "require(..."
                require_helper_t_stringliteral_5238e365e021f6fd781c2264a5a09100f0670031b56dacfc224b453789ac1dd0(expr_459)
                /// @src 12:10338:10352  "withdrawalHash"
                let _58 := var_withdrawalHash_432
                let expr_468 := _58
                /// @src 12:10378:10379  "0"
                let expr_471 := 0x00
                /// @src 12:10370:10380  "uint256(0)"
                let expr_472 := convert_t_rational_0_by_1_to_t_uint256(expr_471)
                /// @src 12:10310:10457  "abi.encode(..."

                let expr_473_mpos := allocate_unbounded()
                let _59 := add(expr_473_mpos, 0x20)

                let _60 := abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack(_59, expr_468, expr_472)
                mstore(expr_473_mpos, sub(_60, add(expr_473_mpos, 0x20)))
                finalize_allocation(expr_473_mpos, sub(_60, expr_473_mpos))
                /// @src 12:10287:10467  "keccak256(..."
                let expr_474 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_473_mpos), array_length_t_bytes_memory_ptr(expr_473_mpos))
                /// @src 12:10266:10467  "bytes32 storageKey = keccak256(..."
                let var_storageKey_464 := expr_474
                /// @src 12:10820:10836  "SecureMerkleTrie"
                let expr_477_address := linkersymbol("contracts/libraries/trie/SecureMerkleTrie.sol:SecureMerkleTrie")
                /// @src 12:10886:10896  "storageKey"
                let _61 := var_storageKey_464
                let expr_481 := _61
                /// @src 12:10875:10897  "abi.encode(storageKey)"

                let expr_482_mpos := allocate_unbounded()
                let _62 := add(expr_482_mpos, 0x20)

                let _63 := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(_62, expr_481)
                mstore(expr_482_mpos, sub(_63, add(expr_482_mpos, 0x20)))
                finalize_allocation(expr_482_mpos, sub(_63, expr_482_mpos))
                /// @src 12:10940:10956  "_withdrawalProof"
                let _64_offset := var__withdrawalProof_397_offset
                let _64_length := var__withdrawalProof_397_length
                let expr_484_offset := _64_offset
                let expr_484_length := _64_length
                /// @src 12:10974:10990  "_outputRootProof"
                let _65_offset := var__outputRootProof_394_offset
                let expr_485_offset := _65_offset
                /// @src 12:10974:11015  "_outputRootProof.messagePasserStorageRoot"
                let _66 := add(expr_485_offset, 64)
                let expr_486 := read_from_calldatat_bytes32(_66)
                /// @src 12:10820:11029  "SecureMerkleTrie.verifyInclusionProof(..."
                let _67_mpos := convert_t_stringliteral_5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2_to_t_bytes_memory_ptr()
                let _68_mpos := convert_array_t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_484_offset, expr_484_length)
                let expr_487 := fun_verifyInclusionProof_3198(expr_482_mpos, _67_mpos, _68_mpos, expr_486)
                /// @src 12:10799:11105  "require(..."
                require_helper_t_stringliteral_11b666636981dad70da1c1a9e87589eb7d9c042eacd4d25e887aac557f6cd6b9(expr_487)
                /// @src 12:11466:11476  "outputRoot"
                let _69 := var_outputRoot_414
                let expr_495 := _69
                /// @src 12:11509:11524  "block.timestamp"
                let expr_499 := timestamp()
                /// @src 12:11501:11525  "uint128(block.timestamp)"
                let expr_500 := convert_t_uint256_to_t_uint128(expr_499)
                /// @src 12:11562:11576  "_l2OutputIndex"
                let _70 := var__l2OutputIndex_391
                let expr_503 := _70
                /// @src 12:11554:11577  "uint128(_l2OutputIndex)"
                let expr_504 := convert_t_uint256_to_t_uint128(expr_503)
                /// @src 12:11423:11588  "ProvenWithdrawal({..."
                let expr_505_mpos := allocate_memory_struct_t_struct$_ProvenWithdrawal_$163_storage_ptr()
                write_to_memory_t_bytes32(add(expr_505_mpos, 0), expr_495)
                write_to_memory_t_uint128(add(expr_505_mpos, 32), expr_500)
                write_to_memory_t_uint128(add(expr_505_mpos, 64), expr_504)
                /// @src 12:11387:11404  "provenWithdrawals"
                let _71 := 0x34
                let expr_491 := _71
                /// @src 12:11405:11419  "withdrawalHash"
                let _72 := var_withdrawalHash_432
                let expr_492 := _72
                /// @src 12:11387:11420  "provenWithdrawals[withdrawalHash]"
                let _73 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_491,expr_492)
                /// @src 12:11387:11588  "provenWithdrawals[withdrawalHash] = ProvenWithdrawal({..."
                update_storage_value_offset_0t_struct$_ProvenWithdrawal_$163_memory_ptr_to_t_struct$_ProvenWithdrawal_$163_storage(_73, expr_505_mpos)
                let _74_slot := _73
                let expr_506_slot := _74_slot
                /// @src 12:11665:11679  "withdrawalHash"
                let _75 := var_withdrawalHash_432
                let expr_509 := _75
                /// @src 12:11681:11684  "_tx"
                let _76_mpos := var__tx_389_mpos
                let expr_510_mpos := _76_mpos
                /// @src 12:11681:11691  "_tx.sender"
                let _77 := add(expr_510_mpos, 32)
                let _78 := read_from_memoryt_address(_77)
                let expr_511 := _78
                /// @src 12:11693:11696  "_tx"
                let _79_mpos := var__tx_389_mpos
                let expr_512_mpos := _79_mpos
                /// @src 12:11693:11703  "_tx.target"
                let _80 := add(expr_512_mpos, 64)
                let _81 := read_from_memoryt_address(_80)
                let expr_513 := _81
                /// @src 12:11648:11704  "WithdrawalProven(withdrawalHash, _tx.sender, _tx.target)"
                let _82 := 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62
                let _83 := convert_t_bytes32_to_t_bytes32(expr_509)
                let _84 := convert_t_address_to_t_address(expr_511)
                let _85 := convert_t_address_to_t_address(expr_513)
                {
                    let _86 := allocate_unbounded()
                    let _87 := abi_encode_tuple__to__fromStack(_86 )
                    log4(_86, sub(_87, _86) , _82, _83, _84, _85)
                }
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 517
            /// @src 12:7873:11711  "function proveWithdrawalTransaction(..."
            function fun_proveWithdrawalTransaction_517(var__tx_389_mpos, var__l2OutputIndex_391, var__outputRootProof_394_offset, var__withdrawalProof_397_offset, var__withdrawalProof_397_length) {

                modifier_whenNotPaused_400(var__tx_389_mpos, var__l2OutputIndex_391, var__outputRootProof_394_offset, var__withdrawalProof_397_offset, var__withdrawalProof_397_length)
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 248
            /// @src 12:4694:4797  "modifier whenNotPaused() {..."
            function modifier_whenNotPaused_524(var__tx_521_mpos) {

                /// @src 12:4737:4743  "paused"
                let _88 := read_from_storage_split_offset_0_t_bool(0x35)
                let expr_240 := _88
                /// @src 12:4747:4752  "false"
                let expr_241 := 0x00
                /// @src 12:4737:4752  "paused == false"
                let expr_242 := eq(cleanup_t_bool(expr_240), cleanup_t_bool(expr_241))
                /// @src 12:4729:4779  "require(paused == false, \"OptimismPortal: paused\")"
                require_helper_t_stringliteral_b66caa771ead292be27065b6fdbf17fc2b4f01cda6f3a71dafb599bc9ced165d(expr_242)
                /// @src 12:4789:4790  "_"
                fun_finalizeWithdrawalTransaction_662_inner(var__tx_521_mpos)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function extract_from_storage_value_offset_0t_address(slot_value) -> value {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_address(slot) -> value {
                value := extract_from_storage_value_offset_0t_address(sload(slot))

            }

            function store_literal_in_memory_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: can only trigger")

                mstore(add(memPtr, 32), " one withdrawal per transaction")

            }

            function abi_encode_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 63)
                store_literal_in_memory_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: withdrawal has n")

                mstore(add(memPtr, 32), "ot been proven yet")

            }

            function abi_encode_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function abi_decode_t_uint256_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_uint256(value)
            }

            function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
                }

            }

            function store_literal_in_memory_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: withdrawal times")

                mstore(add(memPtr, 32), "tamp less than L2 Oracle startin")

                mstore(add(memPtr, 64), "g timestamp")

            }

            function abi_encode_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 75)
                store_literal_in_memory_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: proven withdrawa")

                mstore(add(memPtr, 32), "l finalization period has not el")

                mstore(add(memPtr, 64), "apsed")

            }

            function abi_encode_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 69)
                store_literal_in_memory_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: output root prov")

                mstore(add(memPtr, 32), "en is not the same as current ou")

                mstore(add(memPtr, 64), "tput root")

            }

            function abi_encode_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 73)
                store_literal_in_memory_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: output proposal ")

                mstore(add(memPtr, 32), "finalization period has not elap")

                mstore(add(memPtr, 64), "sed")

            }

            function abi_encode_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 67)
                store_literal_in_memory_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: withdrawal has a")

                mstore(add(memPtr, 32), "lready been finalized")

            }

            function abi_encode_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function read_from_memoryt_uint256(ptr) -> returnValue {

                let value := cleanup_t_uint256(mload(ptr))

                returnValue :=

                value

            }

            function convert_t_rational_1_by_1_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_rational_1_by_1_to_t_address(value) -> converted {
                converted := convert_t_rational_1_by_1_to_t_uint160(value)
            }

            /// @src 18:974:1031  "address internal constant ESTIMATION_ADDRESS = address(1)"
            function constant_ESTIMATION_ADDRESS_2809() -> ret {
                /// @src 18:1029:1030  "1"
                let expr_2807 := 0x01
                /// @src 18:1021:1031  "address(1)"
                let expr_2808 := convert_t_rational_1_by_1_to_t_address(expr_2807)
                let _157 := expr_2808

                ret := _157
            }

            function store_literal_in_memory_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: withdrawal faile")

                mstore(add(memPtr, 32), "d")

            }

            function abi_encode_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)
                store_literal_in_memory_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb_to_t_string_memory_ptr_fromStack( tail)

            }

            /// @src 12:11845:16948  "function finalizeWithdrawalTransaction(Types.WithdrawalTransaction memory _tx)..."
            function fun_finalizeWithdrawalTransaction_662_inner(var__tx_521_mpos) {

                /// @src 12:12233:12241  "l2Sender"
                let _89 := read_from_storage_split_offset_0_t_address(0x32)
                let expr_527 := _89
                /// @src 12:12245:12254  "Constants"
                let expr_528_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:12245:12272  "Constants.DEFAULT_L2_SENDER"
                let expr_529 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 12:12233:12272  "l2Sender == Constants.DEFAULT_L2_SENDER"
                let expr_530 := eq(cleanup_t_address(expr_527), cleanup_t_address(expr_529))
                /// @src 12:12212:12361  "require(..."
                require_helper_t_stringliteral_452e6500a4013b85635a7a9b231d68a5197c7f7579d0b96d0b2f2e5fe6b5995b(expr_530)
                /// @src 12:12469:12476  "Hashing"
                let expr_536_address := linkersymbol("contracts/libraries/Hashing.sol:Hashing")
                /// @src 12:12492:12495  "_tx"
                let _90_mpos := var__tx_521_mpos
                let expr_538_mpos := _90_mpos
                /// @src 12:12469:12496  "Hashing.hashWithdrawal(_tx)"
                let expr_539 := fun_hashWithdrawal_3040(expr_538_mpos)
                /// @src 12:12444:12496  "bytes32 withdrawalHash = Hashing.hashWithdrawal(_tx)"
                let var_withdrawalHash_535 := expr_539
                /// @src 12:12549:12566  "provenWithdrawals"
                let _91 := 0x34
                let expr_544 := _91
                /// @src 12:12567:12581  "withdrawalHash"
                let _92 := var_withdrawalHash_535
                let expr_545 := _92
                /// @src 12:12549:12582  "provenWithdrawals[withdrawalHash]"
                let _93 := mapping_index_access_t_mapping$_t_bytes32_$_t_struct$_ProvenWithdrawal_$163_storage_$_of_t_bytes32(expr_544,expr_545)
                let _94_slot := _93
                let expr_546_slot := _94_slot
                /// @src 12:12506:12582  "ProvenWithdrawal memory provenWithdrawal = provenWithdrawals[withdrawalHash]"
                let var_provenWithdrawal_543_mpos := convert_t_struct$_ProvenWithdrawal_$163_storage_to_t_struct$_ProvenWithdrawal_$163_memory_ptr(expr_546_slot)
                /// @src 12:12845:12861  "provenWithdrawal"
                let _95_mpos := var_provenWithdrawal_543_mpos
                let expr_549_mpos := _95_mpos
                /// @src 12:12845:12871  "provenWithdrawal.timestamp"
                let _96 := add(expr_549_mpos, 32)
                let _97 := read_from_memoryt_uint128(_96)
                let expr_550 := _97
                /// @src 12:12875:12876  "0"
                let expr_551 := 0x00
                /// @src 12:12845:12876  "provenWithdrawal.timestamp != 0"
                let expr_552 := iszero(eq(cleanup_t_uint128(expr_550), convert_t_rational_0_by_1_to_t_uint128(expr_551)))
                /// @src 12:12824:12952  "require(..."
                require_helper_t_stringliteral_bc94f9f4f2ecd47ddd807efca122bcc34325481f7fe9d60687e25c709aff1610(expr_552)
                /// @src 12:13239:13255  "provenWithdrawal"
                let _98_mpos := var_provenWithdrawal_543_mpos
                let expr_557_mpos := _98_mpos
                /// @src 12:13239:13265  "provenWithdrawal.timestamp"
                let _99 := add(expr_557_mpos, 32)
                let _100 := read_from_memoryt_uint128(_99)
                let expr_558 := _100
                /// @src 12:13269:13278  "L2_ORACLE"
                let _101_address := loadimmutable("175")
                let expr_559_address := _101_address
                /// @src 12:13269:13296  "L2_ORACLE.startingTimestamp"
                let expr_560_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_559_address)
                let expr_560_functionSelector := 0x88786272
                /// @src 12:13269:13298  "L2_ORACLE.startingTimestamp()"

                // storage for arguments and returned data
                let _102 := allocate_unbounded()
                mstore(_102, shift_left_224(expr_560_functionSelector))
                let _103 := abi_encode_tuple__to__fromStack(add(_102, 4) )

                let _104 := staticcall(gas(), expr_560_address,  _102, sub(_103, _102), _102, 32)

                if iszero(_104) { revert_forward_1() }

                let expr_561
                if _104 {

                    let _105 := 32

                    if gt(_105, returndatasize()) {
                        _105 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_102, _105)

                    // decode return parameters from external try-call into retVars
                    expr_561 :=  abi_decode_tuple_t_uint256_fromMemory(_102, add(_102, _105))
                }
                /// @src 12:13239:13298  "provenWithdrawal.timestamp >= L2_ORACLE.startingTimestamp()"
                let expr_562 := iszero(lt(convert_t_uint128_to_t_uint256(expr_558), cleanup_t_uint256(expr_561)))
                /// @src 12:13218:13399  "require(..."
                require_helper_t_stringliteral_5c7c78dd7f8d5d79f2ff5ac1a4442209661a78fffa24392f88331b760a60bedd(expr_562)
                /// @src 12:13818:13834  "provenWithdrawal"
                let _106_mpos := var_provenWithdrawal_543_mpos
                let expr_568_mpos := _106_mpos
                /// @src 12:13818:13844  "provenWithdrawal.timestamp"
                let _107 := add(expr_568_mpos, 32)
                let _108 := read_from_memoryt_uint128(_107)
                let expr_569 := _108
                /// @src 12:13789:13845  "_isFinalizationPeriodElapsed(provenWithdrawal.timestamp)"
                let _109 := convert_t_uint128_to_t_uint256(expr_569)
                let expr_570 := fun__isFinalizationPeriodElapsed_774(_109)
                /// @src 12:13768:13940  "require(..."
                require_helper_t_stringliteral_98a66ca0d4a8e5a839585f0aa5b4b8fc94a946382443fc5580ee1ed6e6237f70(expr_570)
                /// @src 12:14150:14159  "L2_ORACLE"
                let _110_address := loadimmutable("175")
                let expr_579_address := _110_address
                /// @src 12:14150:14171  "L2_ORACLE.getL2Output"
                let expr_580_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_579_address)
                let expr_580_functionSelector := 0xa25ae557
                /// @src 12:14185:14201  "provenWithdrawal"
                let _111_mpos := var_provenWithdrawal_543_mpos
                let expr_581_mpos := _111_mpos
                /// @src 12:14185:14215  "provenWithdrawal.l2OutputIndex"
                let _112 := add(expr_581_mpos, 64)
                let _113 := read_from_memoryt_uint128(_112)
                let expr_582 := _113
                /// @src 12:14150:14225  "L2_ORACLE.getL2Output(..."

                // storage for arguments and returned data
                let _114 := allocate_unbounded()
                mstore(_114, shift_left_224(expr_580_functionSelector))
                let _115 := abi_encode_tuple_t_uint128__to_t_uint256__fromStack(add(_114, 4) , expr_582)

                let _116 := staticcall(gas(), expr_580_address,  _114, sub(_115, _114), _114, 96)

                if iszero(_116) { revert_forward_1() }

                let expr_583_mpos
                if _116 {

                    let _117 := 96

                    if gt(_117, returndatasize()) {
                        _117 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_114, _117)

                    // decode return parameters from external try-call into retVars
                    expr_583_mpos :=  abi_decode_tuple_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(_114, add(_114, _117))
                }
                /// @src 12:14111:14225  "Types.OutputProposal memory proposal = L2_ORACLE.getL2Output(..."
                let var_proposal_578_mpos := expr_583_mpos
                /// @src 12:14513:14521  "proposal"
                let _118_mpos := var_proposal_578_mpos
                let expr_586_mpos := _118_mpos
                /// @src 12:14513:14532  "proposal.outputRoot"
                let _119 := add(expr_586_mpos, 0)
                let _120 := read_from_memoryt_bytes32(_119)
                let expr_587 := _120
                /// @src 12:14536:14552  "provenWithdrawal"
                let _121_mpos := var_provenWithdrawal_543_mpos
                let expr_588_mpos := _121_mpos
                /// @src 12:14536:14563  "provenWithdrawal.outputRoot"
                let _122 := add(expr_588_mpos, 0)
                let _123 := read_from_memoryt_bytes32(_122)
                let expr_589 := _123
                /// @src 12:14513:14563  "proposal.outputRoot == provenWithdrawal.outputRoot"
                let expr_590 := eq(cleanup_t_bytes32(expr_587), cleanup_t_bytes32(expr_589))
                /// @src 12:14492:14662  "require(..."
                require_helper_t_stringliteral_2bee9e90a055fc3fdea28727a1d039ffb281ae00c8962ca3262d0dabb187a280(expr_590)
                /// @src 12:14790:14798  "proposal"
                let _124_mpos := var_proposal_578_mpos
                let expr_596_mpos := _124_mpos
                /// @src 12:14790:14808  "proposal.timestamp"
                let _125 := add(expr_596_mpos, 32)
                let _126 := read_from_memoryt_uint128(_125)
                let expr_597 := _126
                /// @src 12:14761:14809  "_isFinalizationPeriodElapsed(proposal.timestamp)"
                let _127 := convert_t_uint128_to_t_uint256(expr_597)
                let expr_598 := fun__isFinalizationPeriodElapsed_774(_127)
                /// @src 12:14740:14902  "require(..."
                require_helper_t_stringliteral_e2e53e5f2e5c146290963511529e48aa3e1570a42475ccc1fb3eba5190175c74(expr_598)
                /// @src 12:15031:15051  "finalizedWithdrawals"
                let _128 := 0x33
                let expr_603 := _128
                /// @src 12:15052:15066  "withdrawalHash"
                let _129 := var_withdrawalHash_535
                let expr_604 := _129
                /// @src 12:15031:15067  "finalizedWithdrawals[withdrawalHash]"
                let _130 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_603,expr_604)
                let _131 := read_from_storage_split_offset_0_t_bool(_130)
                let expr_605 := _131
                /// @src 12:15071:15076  "false"
                let expr_606 := 0x00
                /// @src 12:15031:15076  "finalizedWithdrawals[withdrawalHash] == false"
                let expr_607 := eq(cleanup_t_bool(expr_605), cleanup_t_bool(expr_606))
                /// @src 12:15010:15155  "require(..."
                require_helper_t_stringliteral_2a1157cbf4171a399f26106a5211324151853c78d2faca1fb1d3acbf755aa485(expr_607)
                /// @src 12:15274:15278  "true"
                let expr_614 := 0x01
                /// @src 12:15235:15255  "finalizedWithdrawals"
                let _132 := 0x33
                let expr_611 := _132
                /// @src 12:15256:15270  "withdrawalHash"
                let _133 := var_withdrawalHash_535
                let expr_612 := _133
                /// @src 12:15235:15271  "finalizedWithdrawals[withdrawalHash]"
                let _134 := mapping_index_access_t_mapping$_t_bytes32_$_t_bool_$_of_t_bytes32(expr_611,expr_612)
                /// @src 12:15235:15278  "finalizedWithdrawals[withdrawalHash] = true"
                update_storage_value_offset_0t_bool_to_t_bool(_134, expr_614)
                let expr_615 := expr_614
                /// @src 12:15383:15386  "_tx"
                let _135_mpos := var__tx_521_mpos
                let expr_618_mpos := _135_mpos
                /// @src 12:15383:15393  "_tx.sender"
                let _136 := add(expr_618_mpos, 32)
                let _137 := read_from_memoryt_address(_136)
                let expr_619 := _137
                /// @src 12:15372:15393  "l2Sender = _tx.sender"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_619)
                let expr_620 := expr_619
                /// @src 12:16168:16176  "SafeCall"
                let expr_624_address := linkersymbol("contracts/libraries/SafeCall.sol:SafeCall")
                /// @src 12:16192:16195  "_tx"
                let _138_mpos := var__tx_521_mpos
                let expr_626_mpos := _138_mpos
                /// @src 12:16192:16202  "_tx.target"
                let _139 := add(expr_626_mpos, 64)
                let _140 := read_from_memoryt_address(_139)
                let expr_627 := _140
                /// @src 12:16204:16207  "_tx"
                let _141_mpos := var__tx_521_mpos
                let expr_628_mpos := _141_mpos
                /// @src 12:16204:16216  "_tx.gasLimit"
                let _142 := add(expr_628_mpos, 128)
                let _143 := read_from_memoryt_uint256(_142)
                let expr_629 := _143
                /// @src 12:16218:16221  "_tx"
                let _144_mpos := var__tx_521_mpos
                let expr_630_mpos := _144_mpos
                /// @src 12:16218:16227  "_tx.value"
                let _145 := add(expr_630_mpos, 96)
                let _146 := read_from_memoryt_uint256(_145)
                let expr_631 := _146
                /// @src 12:16229:16232  "_tx"
                let _147_mpos := var__tx_521_mpos
                let expr_632_mpos := _147_mpos
                /// @src 12:16229:16237  "_tx.data"
                let _148 := add(expr_632_mpos, 160)
                let _149_mpos := mload(_148)
                let expr_633_mpos := _149_mpos
                /// @src 12:16168:16238  "SafeCall.callWithMinGas(_tx.target, _tx.gasLimit, _tx.value, _tx.data)"
                let expr_634 := fun_callWithMinGas_3110(expr_627, expr_629, expr_631, expr_633_mpos)
                /// @src 12:16153:16238  "bool success = SafeCall.callWithMinGas(_tx.target, _tx.gasLimit, _tx.value, _tx.data)"
                let var_success_623 := expr_634
                /// @src 12:16317:16326  "Constants"
                let expr_637_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                /// @src 12:16317:16344  "Constants.DEFAULT_L2_SENDER"
                let expr_638 := constant_DEFAULT_L2_SENDER_2813()
                /// @src 12:16306:16344  "l2Sender = Constants.DEFAULT_L2_SENDER"
                update_storage_value_offset_0t_address_to_t_address(0x32, expr_638)
                let expr_639 := expr_638
                /// @src 12:16523:16537  "withdrawalHash"
                let _150 := var_withdrawalHash_535
                let expr_642 := _150
                /// @src 12:16539:16546  "success"
                let _151 := var_success_623
                let expr_643 := _151
                /// @src 12:16503:16547  "WithdrawalFinalized(withdrawalHash, success)"
                let _152 := 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b
                let _153 := convert_t_bytes32_to_t_bytes32(expr_642)
                {
                    let _154 := allocate_unbounded()
                    let _155 := abi_encode_tuple_t_bool__to_t_bool__fromStack(_154 , expr_643)
                    log2(_154, sub(_155, _154) , _152, _153)
                }/// @src 12:16811:16818  "success"
                let _156 := var_success_623
                let expr_646 := _156
                /// @src 12:16822:16827  "false"
                let expr_647 := 0x00
                /// @src 12:16811:16827  "success == false"
                let expr_648 := eq(cleanup_t_bool(expr_646), cleanup_t_bool(expr_647))
                /// @src 12:16811:16872  "success == false && tx.origin == Constants.ESTIMATION_ADDRESS"
                let expr_654 := expr_648
                if expr_654 {
                    /// @src 12:16831:16840  "tx.origin"
                    let expr_650 := origin()
                    /// @src 12:16844:16853  "Constants"
                    let expr_651_address := linkersymbol("contracts/libraries/Constants.sol:Constants")
                    /// @src 12:16844:16872  "Constants.ESTIMATION_ADDRESS"
                    let expr_652 := constant_ESTIMATION_ADDRESS_2809()
                    /// @src 12:16831:16872  "tx.origin == Constants.ESTIMATION_ADDRESS"
                    let expr_653 := eq(cleanup_t_address(expr_650), cleanup_t_address(expr_652))
                    /// @src 12:16811:16872  "success == false && tx.origin == Constants.ESTIMATION_ADDRESS"
                    expr_654 := expr_653
                }
                /// @src 12:16807:16942  "if (success == false && tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                if expr_654 {
                    /// @src 12:16888:16931  "revert(\"OptimismPortal: withdrawal failed\")"
                    {
                        let _158 := allocate_unbounded()
                        mstore(_158, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                        let _159 := abi_encode_tuple_t_stringliteral_a0543a16ebb14b11743ebd89913eeb3a89aab6ee2824b60e6e93ee3d5b6c55bb__to_t_string_memory_ptr__fromStack(add(_158, 4) )
                        revert(_158, sub(_159, _158))
                    }/// @src 12:16807:16942  "if (success == false && tx.origin == Constants.ESTIMATION_ADDRESS) {..."
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 662
            /// @src 12:11845:16948  "function finalizeWithdrawalTransaction(Types.WithdrawalTransaction memory _tx)..."
            function fun_finalizeWithdrawalTransaction_662(var__tx_521_mpos) {

                modifier_whenNotPaused_524(var__tx_521_mpos)
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 2096
            /// @src 13:3382:3660  "modifier metered(uint64 _amount) {..."
            function modifier_metered_677(var__to_665, var__value_667, var__gasLimit_669, var__isCreation_671, var__data_673_mpos) {

                /// @src 12:17890:17899  "_gasLimit"
                let _160 := var__gasLimit_669
                let expr_676 := _160
                let _161 := expr_676
                let var__amount_2082 := _161

                /// @src 13:3514:3523  "gasleft()"
                let expr_2087 := gas()
                /// @src 13:3493:3523  "uint256 initialGas = gasleft()"
                let var_initialGas_2085 := expr_2087
                /// @src 13:3574:3575  "_"
                fun_depositTransaction_739_inner(var__to_665, var__value_667, var__gasLimit_669, var__isCreation_671, var__data_673_mpos)
                /// @src 13:3633:3640  "_amount"
                let _162 := var__amount_2082
                let expr_2091 := _162
                /// @src 13:3642:3652  "initialGas"
                let _163 := var_initialGas_2085
                let expr_2092 := _163
                fun__metered_2359(expr_2091, expr_2092)

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }

            function convert_t_rational_0_by_1_to_t_address(value) -> converted {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }

            function store_literal_in_memory_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: must send to add")

                mstore(add(memPtr, 32), "ress(0) when creating a contract")

            }

            function abi_encode_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 64)
                store_literal_in_memory_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_21000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_21000_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_21000_by_1(value)))
            }

            function store_literal_in_memory_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54(memPtr) {

                mstore(add(memPtr, 0), "OptimismPortal: gas limit must c")

                mstore(add(memPtr, 32), "over instrinsic gas cost")

            }

            function abi_encode_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)
                store_literal_in_memory_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function leftAlign_t_uint256(value) -> aligned {
                aligned := value
            }

            function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos) {
                mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))
            }

            function shift_left_192(value) -> newValue {
                newValue :=

                shl(192, value)

            }

            function leftAlign_t_uint64(value) -> aligned {
                aligned := shift_left_192(value)
            }

            function abi_encode_t_uint64_to_t_uint64_nonPadded_inplace_fromStack(value, pos) {
                mstore(pos, leftAlign_t_uint64(cleanup_t_uint64(value)))
            }

            function shift_left_248(value) -> newValue {
                newValue :=

                shl(248, value)

            }

            function leftAlign_t_uint8(value) -> aligned {
                aligned := shift_left_248(value)
            }

            function leftAlign_t_bool(value) -> aligned {
                aligned := leftAlign_t_uint8(value)
            }

            function abi_encode_t_bool_to_t_bool_nonPadded_inplace_fromStack(value, pos) {
                mstore(pos, leftAlign_t_bool(cleanup_t_bool(value)))
            }

            function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function abi_encode_tuple_packed_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2, value3, value4) -> end {

                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value0,  pos)
                pos := add(pos, 32)

                abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1,  pos)
                pos := add(pos, 32)

                abi_encode_t_uint64_to_t_uint64_nonPadded_inplace_fromStack(value2,  pos)
                pos := add(pos, 8)

                abi_encode_t_bool_to_t_bool_nonPadded_inplace_fromStack(value3,  pos)
                pos := add(pos, 1)

                pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value4,  pos)

                end := pos
            }

            /// @src 12:1627:1672  "uint256 internal constant DEPOSIT_VERSION = 0"
            function constant_DEPOSIT_VERSION_167() -> ret {
                /// @src 12:1671:1672  "0"
                let expr_166 := 0x00
                let _175 := convert_t_rational_0_by_1_to_t_uint256(expr_166)

                ret := _175
            }

            function convert_t_uint256_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }

            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)

            }

            /// @src 12:17708:19262  "function depositTransaction(..."
            function fun_depositTransaction_739_inner(var__to_665, var__value_667, var__gasLimit_669, var__isCreation_671, var__data_673_mpos) {

                /// @src 12:18040:18051  "_isCreation"
                let _164 := var__isCreation_671
                let expr_679 := _164
                /// @src 12:18036:18218  "if (_isCreation) {..."
                if expr_679 {
                    /// @src 12:18092:18095  "_to"
                    let _165 := var__to_665
                    let expr_681 := _165
                    /// @src 12:18107:18108  "0"
                    let expr_684 := 0x00
                    /// @src 12:18099:18109  "address(0)"
                    let expr_685 := convert_t_rational_0_by_1_to_t_address(expr_684)
                    /// @src 12:18092:18109  "_to == address(0)"
                    let expr_686 := eq(cleanup_t_address(expr_681), cleanup_t_address(expr_685))
                    /// @src 12:18067:18207  "require(..."
                    require_helper_t_stringliteral_35a8c36d4f7649c8575025c089af07faab9c54040307e9d6ec8463fe4050a639(expr_686)
                    /// @src 12:18036:18218  "if (_isCreation) {..."
                }
                /// @src 12:18315:18324  "_gasLimit"
                let _166 := var__gasLimit_669
                let expr_693 := _166
                /// @src 12:18328:18334  "21_000"
                let expr_694 := 0x5208
                /// @src 12:18315:18334  "_gasLimit >= 21_000"
                let expr_695 := iszero(lt(cleanup_t_uint64(expr_693), convert_t_rational_21000_by_1_to_t_uint64(expr_694)))
                /// @src 12:18307:18395  "require(_gasLimit >= 21_000, \"OptimismPortal: gas limit must cover instrinsic gas cost\")"
                require_helper_t_stringliteral_b34933df091189eb848fe0da5ccdd7a82b3afdd04acae8e7d2701f9547610a54(expr_695)
                /// @src 12:18501:18511  "msg.sender"
                let expr_702 := caller()
                /// @src 12:18486:18511  "address from = msg.sender"
                let var_from_700 := expr_702
                /// @src 12:18525:18535  "msg.sender"
                let expr_705 := caller()
                /// @src 12:18539:18548  "tx.origin"
                let expr_707 := origin()
                /// @src 12:18525:18548  "msg.sender != tx.origin"
                let expr_708 := iszero(eq(cleanup_t_address(expr_705), cleanup_t_address(expr_707)))
                /// @src 12:18521:18629  "if (msg.sender != tx.origin) {..."
                if expr_708 {
                    /// @src 12:18571:18589  "AddressAliasHelper"
                    let expr_710_address := linkersymbol("contracts/vendor/AddressAliasHelper.sol:AddressAliasHelper")
                    /// @src 12:18607:18617  "msg.sender"
                    let expr_713 := caller()
                    /// @src 12:18571:18618  "AddressAliasHelper.applyL1ToL2Alias(msg.sender)"
                    let expr_714 := fun_applyL1ToL2Alias_3272(expr_713)
                    /// @src 12:18564:18618  "from = AddressAliasHelper.applyL1ToL2Alias(msg.sender)"
                    var_from_700 := expr_714
                    let expr_715 := expr_714
                    /// @src 12:18521:18629  "if (msg.sender != tx.origin) {..."
                }
                /// @src 12:18942:18951  "msg.value"
                let expr_724 := callvalue()
                /// @src 12:18965:18971  "_value"
                let _167 := var__value_667
                let expr_725 := _167
                /// @src 12:18985:18994  "_gasLimit"
                let _168 := var__gasLimit_669
                let expr_726 := _168
                /// @src 12:19008:19019  "_isCreation"
                let _169 := var__isCreation_671
                let expr_727 := _169
                /// @src 12:19033:19038  "_data"
                let _170_mpos := var__data_673_mpos
                let expr_728_mpos := _170_mpos
                /// @src 12:18912:19048  "abi.encodePacked(..."

                let expr_729_mpos := allocate_unbounded()
                let _171 := add(expr_729_mpos, 0x20)

                let _172 := abi_encode_tuple_packed_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_uint64_t_bool_t_bytes_memory_ptr__nonPadded_inplace_fromStack(_171, expr_724, expr_725, expr_726, expr_727, expr_728_mpos)
                mstore(expr_729_mpos, sub(_172, add(expr_729_mpos, 0x20)))
                finalize_allocation(expr_729_mpos, sub(_172, expr_729_mpos))
                /// @src 12:18886:19048  "bytes memory opaqueData = abi.encodePacked(..."
                let var_opaqueData_720_mpos := expr_729_mpos
                /// @src 12:19216:19220  "from"
                let _173 := var_from_700
                let expr_732 := _173
                /// @src 12:19222:19225  "_to"
                let _174 := var__to_665
                let expr_733 := _174
                /// @src 12:19227:19242  "DEPOSIT_VERSION"
                let expr_734 := constant_DEPOSIT_VERSION_167()
                /// @src 12:19244:19254  "opaqueData"
                let _176_mpos := var_opaqueData_720_mpos
                let expr_735_mpos := _176_mpos
                /// @src 12:19195:19255  "TransactionDeposited(from, _to, DEPOSIT_VERSION, opaqueData)"
                let _177 := 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32
                let _178 := convert_t_address_to_t_address(expr_732)
                let _179 := convert_t_address_to_t_address(expr_733)
                let _180 := convert_t_uint256_to_t_uint256(expr_734)
                {
                    let _181 := allocate_unbounded()
                    let _182 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_181 , expr_735_mpos)
                    log4(_181, sub(_182, _181) , _177, _178, _179, _180)
                }
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 739
            /// @src 12:17708:19262  "function depositTransaction(..."
            function fun_depositTransaction_739(var__to_665, var__value_667, var__gasLimit_669, var__isCreation_671, var__data_673_mpos) {

                modifier_metered_677(var__to_665, var__value_667, var__gasLimit_669, var__isCreation_671, var__data_673_mpos)
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_bool() -> ret {
                ret := 0
            }

            /// @ast-id 756
            /// @src 12:19570:19751  "function isOutputFinalized(uint256 _l2OutputIndex) external view returns (bool) {..."
            function fun_isOutputFinalized_756(var__l2OutputIndex_742) -> var__745 {
                /// @src 12:19644:19648  "bool"
                let zero_t_bool_183 := zero_value_for_split_t_bool()
                var__745 := zero_t_bool_183

                /// @src 12:19696:19705  "L2_ORACLE"
                let _184_address := loadimmutable("175")
                let expr_748_address := _184_address
                /// @src 12:19696:19717  "L2_ORACLE.getL2Output"
                let expr_749_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_748_address)
                let expr_749_functionSelector := 0xa25ae557
                /// @src 12:19718:19732  "_l2OutputIndex"
                let _185 := var__l2OutputIndex_742
                let expr_750 := _185
                /// @src 12:19696:19733  "L2_ORACLE.getL2Output(_l2OutputIndex)"

                // storage for arguments and returned data
                let _186 := allocate_unbounded()
                mstore(_186, shift_left_224(expr_749_functionSelector))
                let _187 := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(add(_186, 4) , expr_750)

                let _188 := staticcall(gas(), expr_749_address,  _186, sub(_187, _186), _186, 96)

                if iszero(_188) { revert_forward_1() }

                let expr_751_mpos
                if _188 {

                    let _189 := 96

                    if gt(_189, returndatasize()) {
                        _189 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_186, _189)

                    // decode return parameters from external try-call into retVars
                    expr_751_mpos :=  abi_decode_tuple_t_struct$_OutputProposal_$3121_memory_ptr_fromMemory(_186, add(_186, _189))
                }
                /// @src 12:19696:19743  "L2_ORACLE.getL2Output(_l2OutputIndex).timestamp"
                let _190 := add(expr_751_mpos, 32)
                let _191 := read_from_memoryt_uint128(_190)
                let expr_752 := _191
                /// @src 12:19667:19744  "_isFinalizationPeriodElapsed(L2_ORACLE.getL2Output(_l2OutputIndex).timestamp)"
                let _192 := convert_t_uint128_to_t_uint256(expr_752)
                let expr_753 := fun__isFinalizationPeriodElapsed_774(_192)
                /// @src 12:19660:19744  "return _isFinalizationPeriodElapsed(L2_ORACLE.getL2Output(_l2OutputIndex).timestamp)"
                var__745 := expr_753
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            /// @ast-id 774
            /// @src 12:19994:20175  "function _isFinalizationPeriodElapsed(uint256 _timestamp) internal view returns (bool) {..."
            function fun__isFinalizationPeriodElapsed_774(var__timestamp_759) -> var__762 {
                /// @src 12:20075:20079  "bool"
                let zero_t_bool_193 := zero_value_for_split_t_bool()
                var__762 := zero_t_bool_193

                /// @src 12:20098:20113  "block.timestamp"
                let expr_765 := timestamp()
                /// @src 12:20116:20126  "_timestamp"
                let _194 := var__timestamp_759
                let expr_766 := _194
                /// @src 12:20129:20138  "L2_ORACLE"
                let _195_address := loadimmutable("175")
                let expr_767_address := _195_address
                /// @src 12:20129:20166  "L2_ORACLE.FINALIZATION_PERIOD_SECONDS"
                let expr_768_address := convert_t_contract$_L2OutputOracle_$2037_to_t_address(expr_767_address)
                let expr_768_functionSelector := 0xf4daa291
                /// @src 12:20129:20168  "L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"

                // storage for arguments and returned data
                let _196 := allocate_unbounded()
                mstore(_196, shift_left_224(expr_768_functionSelector))
                let _197 := abi_encode_tuple__to__fromStack(add(_196, 4) )

                let _198 := staticcall(gas(), expr_768_address,  _196, sub(_197, _196), _196, 32)

                if iszero(_198) { revert_forward_1() }

                let expr_769
                if _198 {

                    let _199 := 32

                    if gt(_199, returndatasize()) {
                        _199 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_196, _199)

                    // decode return parameters from external try-call into retVars
                    expr_769 :=  abi_decode_tuple_t_uint256_fromMemory(_196, add(_196, _199))
                }
                /// @src 12:20116:20168  "_timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                let expr_770 := checked_add_t_uint256(expr_766, expr_769)

                /// @src 12:20098:20168  "block.timestamp > _timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                let expr_771 := gt(cleanup_t_uint256(expr_765), cleanup_t_uint256(expr_770))
                /// @src 12:20091:20168  "return block.timestamp > _timestamp + L2_ORACLE.FINALIZATION_PERIOD_SECONDS()"
                var__762 := expr_771
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {

                mstore(add(memPtr, 0), ".")

            }

            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }

            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2) -> end {

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)

                end := pos
            }

            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted  {
                converted := value

            }

            /// @ast-id 1424
            /// @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1424() -> var__1400_mpos {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_200_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1400_mpos := zero_t_string_memory_ptr_200_mpos

                /// @src 29:1203:1210  "Strings"
                let expr_1406_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _201 := loadimmutable("1367")
                let expr_1408 := _201
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1409_mpos := fun_toString_3827(expr_1408)
                /// @src 29:1281:1288  "Strings"
                let expr_1411_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _202 := loadimmutable("1370")
                let expr_1413 := _202
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1414_mpos := fun_toString_3827(expr_1413)
                /// @src 29:1359:1366  "Strings"
                let expr_1416_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _203 := loadimmutable("1373")
                let expr_1418 := _203
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1419_mpos := fun_toString_3827(expr_1418)
                /// @src 29:1165:1408  "abi.encodePacked(..."

                let expr_1420_mpos := allocate_unbounded()
                let _204 := add(expr_1420_mpos, 0x20)

                let _205 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_204, expr_1409_mpos, expr_1414_mpos, expr_1419_mpos)
                mstore(expr_1420_mpos, sub(_205, add(expr_1420_mpos, 0x20)))
                finalize_allocation(expr_1420_mpos, sub(_205, expr_1420_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1421_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1420_mpos)
                /// @src 29:1122:1422  "return..."
                var__1400_mpos := expr_1421_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function convert_t_uint64_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint64(value)))
            }

            function checked_sub_t_uint256(x, y) -> diff {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function cleanup_t_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }

            function read_from_memoryt_uint32(ptr) -> returnValue {

                let value := cleanup_t_uint32(mload(ptr))

                returnValue :=

                value

            }

            function convert_t_uint32_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint32(value)))
            }

            function cleanup_t_int256(value) -> cleaned {
                cleaned := value
            }

            function convert_t_uint256_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_uint256(value)))
            }

            function read_from_memoryt_uint8(ptr) -> returnValue {

                let value := cleanup_t_uint8(mload(ptr))

                returnValue :=

                value

            }

            function convert_t_uint8_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint8(value)))
            }

            function panic_error_0x12() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }

            function checked_div_t_int256(x, y) -> r {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if iszero(y) { panic_error_0x12() }

                // overflow for minVal / -1
                if and(
                    eq(x, 0x8000000000000000000000000000000000000000000000000000000000000000),
                    eq(y, sub(0, 1))
                ) { panic_error_0x11() }

                r := sdiv(x, y)
            }

            function checked_sub_t_int256(x, y) -> diff {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)

                // underflow, if y >= 0 and x < (minValue + y)
                if and(iszero(slt(y, 0)), slt(x, add(0x8000000000000000000000000000000000000000000000000000000000000000, y))) { panic_error_0x11() }
                // overflow, if y < 0 and x > (maxValue + y)
                if and(slt(y, 0), sgt(x, add(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function checked_mul_t_int256(x, y) -> product {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)

                // overflow, if x > 0, y > 0 and x > (maxValue / y)
                if and(and(sgt(x, 0), sgt(y, 0)), gt(x, div(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }
                // underflow, if x > 0, y < 0 and y < (minValue / x)
                if and(and(sgt(x, 0), slt(y, 0)), slt(y, sdiv(0x8000000000000000000000000000000000000000000000000000000000000000, x))) { panic_error_0x11() }
                // underflow, if x < 0, y > 0 and x < (minValue / y)
                if and(and(slt(x, 0), sgt(y, 0)), slt(x, sdiv(0x8000000000000000000000000000000000000000000000000000000000000000, y))) { panic_error_0x11() }
                // overflow, if x < 0, y < 0 and x < (maxValue / y)
                if and(and(slt(x, 0), slt(y, 0)), slt(x, sdiv(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y))) { panic_error_0x11() }

                product := mul(x, y)
            }

            function checked_add_t_int256(x, y) -> sum {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)

                // overflow, if x >= 0 and y > (maxValue - x)
                if and(iszero(slt(x, 0)), sgt(y, sub(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }
                // underflow, if x < 0 and y < (minValue - x)
                if and(slt(x, 0), slt(y, sub(0x8000000000000000000000000000000000000000000000000000000000000000, x))) { panic_error_0x11() }

                sum := add(x, y)
            }

            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_int256_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_int256(value)))
            }

            function convert_t_rational_0_by_1_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_rational_0_by_1(value)))
            }

            function update_byte_slice_8_shift_16(value, toInsert) -> result {
                let mask := 0xffffffffffffffff00000000000000000000000000000000
                toInsert := shift_left_128(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint64_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
            }

            function prepare_store_t_uint64(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_16t_uint64_to_t_uint64(slot, value_0) {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_16(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }

            function convert_t_uint256_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint256(value)))
            }

            function update_byte_slice_8_shift_24(value, toInsert) -> result {
                let mask := 0xffffffffffffffff000000000000000000000000000000000000000000000000
                toInsert := shift_left_192(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_24t_uint64_to_t_uint64(slot, value_0) {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_24(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }

            function checked_add_t_uint64(x, y) -> sum {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function store_literal_in_memory_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(memPtr) {

                mstore(add(memPtr, 0), "ResourceMetering: cannot buy mor")

                mstore(add(memPtr, 32), "e gas than available gas limit")

            }

            function abi_encode_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 62)
                store_literal_in_memory_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function checked_mul_t_uint256(x, y) -> product {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x != 0 and y > (maxValue / x)
                if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }

                product := mul(x, y)
            }

            function cleanup_t_rational_1000000000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1000000000_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000000_by_1(value)))
            }

            function checked_div_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            /// @ast-id 2359
            /// @src 13:3913:7950  "function _metered(uint64 _amount, uint256 _initialGas) internal {..."
            function fun__metered_2359(var__amount_2099, var__initialGas_2101) {

                /// @src 13:4065:4077  "block.number"
                let expr_2107 := number()
                /// @src 13:4080:4086  "params"
                let _206_slot := 0x01
                let expr_2108_slot := _206_slot
                /// @src 13:4080:4099  "params.prevBlockNum"
                let _207 := add(expr_2108_slot, 0)
                let _208 := read_from_storage_split_offset_24_t_uint64(_207)
                let expr_2109 := _208
                /// @src 13:4065:4099  "block.number - params.prevBlockNum"
                let expr_2110 := checked_sub_t_uint256(expr_2107, convert_t_uint64_to_t_uint256(expr_2109))

                /// @src 13:4045:4099  "uint256 blockDiff = block.number - params.prevBlockNum"
                let var_blockDiff_2105 := expr_2110
                /// @src 13:4141:4158  "_resourceConfig()"
                let expr_2116_mpos := fun__resourceConfig_385()
                /// @src 13:4110:4158  "ResourceConfig memory config = _resourceConfig()"
                let var_config_2114_mpos := expr_2116_mpos
                /// @src 13:4212:4218  "config"
                let _209_mpos := var_config_2114_mpos
                let expr_2124_mpos := _209_mpos
                /// @src 13:4212:4235  "config.maxResourceLimit"
                let _210 := add(expr_2124_mpos, 0)
                let _211 := read_from_memoryt_uint32(_210)
                let expr_2125 := _211
                /// @src 13:4204:4236  "uint256(config.maxResourceLimit)"
                let expr_2126 := convert_t_uint32_to_t_uint256(expr_2125)
                /// @src 13:4197:4237  "int256(uint256(config.maxResourceLimit))"
                let expr_2127 := convert_t_uint256_to_t_int256(expr_2126)
                /// @src 13:4267:4273  "config"
                let _212_mpos := var_config_2114_mpos
                let expr_2132_mpos := _212_mpos
                /// @src 13:4267:4294  "config.elasticityMultiplier"
                let _213 := add(expr_2132_mpos, 32)
                let _214 := read_from_memoryt_uint8(_213)
                let expr_2133 := _214
                /// @src 13:4259:4295  "uint256(config.elasticityMultiplier)"
                let expr_2134 := convert_t_uint8_to_t_uint256(expr_2133)
                /// @src 13:4252:4296  "int256(uint256(config.elasticityMultiplier))"
                let expr_2135 := convert_t_uint256_to_t_int256(expr_2134)
                /// @src 13:4197:4296  "int256(uint256(config.maxResourceLimit)) /..."
                let expr_2136 := checked_div_t_int256(expr_2127, expr_2135)

                /// @src 13:4168:4296  "int256 targetResourceLimit = int256(uint256(config.maxResourceLimit)) /..."
                let var_targetResourceLimit_2119 := expr_2136
                /// @src 13:4311:4320  "blockDiff"
                let _215 := var_blockDiff_2105
                let expr_2138 := _215
                /// @src 13:4323:4324  "0"
                let expr_2139 := 0x00
                /// @src 13:4311:4324  "blockDiff > 0"
                let expr_2140 := gt(cleanup_t_uint256(expr_2138), convert_t_rational_0_by_1_to_t_uint256(expr_2139))
                /// @src 13:4307:6536  "if (blockDiff > 0) {..."
                if expr_2140 {
                    /// @src 13:4668:4674  "params"
                    let _216_slot := 0x01
                    let expr_2147_slot := _216_slot
                    /// @src 13:4668:4688  "params.prevBoughtGas"
                    let _217 := add(expr_2147_slot, 0)
                    let _218 := read_from_storage_split_offset_16_t_uint64(_217)
                    let expr_2148 := _218
                    /// @src 13:4660:4689  "uint256(params.prevBoughtGas)"
                    let expr_2149 := convert_t_uint64_to_t_uint256(expr_2148)
                    /// @src 13:4653:4690  "int256(uint256(params.prevBoughtGas))"
                    let expr_2150 := convert_t_uint256_to_t_int256(expr_2149)
                    /// @src 13:4693:4712  "targetResourceLimit"
                    let _219 := var_targetResourceLimit_2119
                    let expr_2151 := _219
                    /// @src 13:4653:4712  "int256(uint256(params.prevBoughtGas)) - targetResourceLimit"
                    let expr_2152 := checked_sub_t_int256(expr_2150, expr_2151)

                    /// @src 13:4631:4712  "int256 gasUsedDelta = int256(uint256(params.prevBoughtGas)) - targetResourceLimit"
                    let var_gasUsedDelta_2142 := expr_2152
                    /// @src 13:4764:4770  "params"
                    let _220_slot := 0x01
                    let expr_2160_slot := _220_slot
                    /// @src 13:4764:4782  "params.prevBaseFee"
                    let _221 := add(expr_2160_slot, 0)
                    let _222 := read_from_storage_split_offset_0_t_uint128(_221)
                    let expr_2161 := _222
                    /// @src 13:4756:4783  "uint256(params.prevBaseFee)"
                    let expr_2162 := convert_t_uint128_to_t_uint256(expr_2161)
                    /// @src 13:4749:4784  "int256(uint256(params.prevBaseFee))"
                    let expr_2163 := convert_t_uint256_to_t_int256(expr_2162)
                    /// @src 13:4787:4799  "gasUsedDelta"
                    let _223 := var_gasUsedDelta_2142
                    let expr_2164 := _223
                    /// @src 13:4749:4799  "int256(uint256(params.prevBaseFee)) * gasUsedDelta"
                    let expr_2165 := checked_mul_t_int256(expr_2163, expr_2164)

                    /// @src 13:4748:4800  "(int256(uint256(params.prevBaseFee)) * gasUsedDelta)"
                    let expr_2166 := expr_2165
                    /// @src 13:4820:4839  "targetResourceLimit"
                    let _224 := var_targetResourceLimit_2119
                    let expr_2167 := _224
                    /// @src 13:4857:4863  "config"
                    let _225_mpos := var_config_2114_mpos
                    let expr_2172_mpos := _225_mpos
                    /// @src 13:4857:4891  "config.baseFeeMaxChangeDenominator"
                    let _226 := add(expr_2172_mpos, 64)
                    let _227 := read_from_memoryt_uint8(_226)
                    let expr_2173 := _227
                    /// @src 13:4849:4892  "uint256(config.baseFeeMaxChangeDenominator)"
                    let expr_2174 := convert_t_uint8_to_t_uint256(expr_2173)
                    /// @src 13:4842:4893  "int256(uint256(config.baseFeeMaxChangeDenominator))"
                    let expr_2175 := convert_t_uint256_to_t_int256(expr_2174)
                    /// @src 13:4820:4893  "targetResourceLimit * int256(uint256(config.baseFeeMaxChangeDenominator))"
                    let expr_2176 := checked_mul_t_int256(expr_2167, expr_2175)

                    /// @src 13:4819:4894  "(targetResourceLimit * int256(uint256(config.baseFeeMaxChangeDenominator)))"
                    let expr_2177 := expr_2176
                    /// @src 13:4748:4894  "(int256(uint256(params.prevBaseFee)) * gasUsedDelta) /..."
                    let expr_2178 := checked_div_t_int256(expr_2166, expr_2177)

                    /// @src 13:4726:4894  "int256 baseFeeDelta = (int256(uint256(params.prevBaseFee)) * gasUsedDelta) /..."
                    let var_baseFeeDelta_2155 := expr_2178
                    /// @src 13:5055:5065  "Arithmetic"
                    let expr_2182_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                    /// @src 13:5113:5119  "params"
                    let _228_slot := 0x01
                    let expr_2188_slot := _228_slot
                    /// @src 13:5113:5131  "params.prevBaseFee"
                    let _229 := add(expr_2188_slot, 0)
                    let _230 := read_from_storage_split_offset_0_t_uint128(_229)
                    let expr_2189 := _230
                    /// @src 13:5105:5132  "uint256(params.prevBaseFee)"
                    let expr_2190 := convert_t_uint128_to_t_uint256(expr_2189)
                    /// @src 13:5098:5133  "int256(uint256(params.prevBaseFee))"
                    let expr_2191 := convert_t_uint256_to_t_int256(expr_2190)
                    /// @src 13:5136:5148  "baseFeeDelta"
                    let _231 := var_baseFeeDelta_2155
                    let expr_2192 := _231
                    /// @src 13:5098:5148  "int256(uint256(params.prevBaseFee)) + baseFeeDelta"
                    let expr_2193 := checked_add_t_int256(expr_2191, expr_2192)

                    /// @src 13:5187:5193  "config"
                    let _232_mpos := var_config_2114_mpos
                    let expr_2198_mpos := _232_mpos
                    /// @src 13:5187:5208  "config.minimumBaseFee"
                    let _233 := add(expr_2198_mpos, 96)
                    let _234 := read_from_memoryt_uint32(_233)
                    let expr_2199 := _234
                    /// @src 13:5179:5209  "uint256(config.minimumBaseFee)"
                    let expr_2200 := convert_t_uint32_to_t_uint256(expr_2199)
                    /// @src 13:5172:5210  "int256(uint256(config.minimumBaseFee))"
                    let expr_2201 := convert_t_uint256_to_t_int256(expr_2200)
                    /// @src 13:5249:5255  "config"
                    let _235_mpos := var_config_2114_mpos
                    let expr_2206_mpos := _235_mpos
                    /// @src 13:5249:5270  "config.maximumBaseFee"
                    let _236 := add(expr_2206_mpos, 160)
                    let _237 := read_from_memoryt_uint128(_236)
                    let expr_2207 := _237
                    /// @src 13:5241:5271  "uint256(config.maximumBaseFee)"
                    let expr_2208 := convert_t_uint128_to_t_uint256(expr_2207)
                    /// @src 13:5234:5272  "int256(uint256(config.maximumBaseFee))"
                    let expr_2209 := convert_t_uint256_to_t_int256(expr_2208)
                    /// @src 13:5055:5287  "Arithmetic.clamp({..."
                    let expr_2210 := fun_clamp_4794(expr_2193, expr_2201, expr_2209)
                    /// @src 13:5035:5287  "int256 newBaseFee = Arithmetic.clamp({..."
                    let var_newBaseFee_2181 := expr_2210
                    /// @src 13:5552:5561  "blockDiff"
                    let _238 := var_blockDiff_2105
                    let expr_2212 := _238
                    /// @src 13:5564:5565  "1"
                    let expr_2213 := 0x01
                    /// @src 13:5552:5565  "blockDiff > 1"
                    let expr_2214 := gt(cleanup_t_uint256(expr_2212), convert_t_rational_1_by_1_to_t_uint256(expr_2213))
                    /// @src 13:5548:6289  "if (blockDiff > 1) {..."
                    if expr_2214 {
                        /// @src 13:5837:5847  "Arithmetic"
                        let expr_2216_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                        /// @src 13:5884:5894  "Arithmetic"
                        let expr_2218_address := linkersymbol("contracts/libraries/Arithmetic.sol:Arithmetic")
                        /// @src 13:5941:5951  "newBaseFee"
                        let _239 := var_newBaseFee_2181
                        let expr_2220 := _239
                        /// @src 13:6006:6012  "config"
                        let _240_mpos := var_config_2114_mpos
                        let expr_2225_mpos := _240_mpos
                        /// @src 13:6006:6040  "config.baseFeeMaxChangeDenominator"
                        let _241 := add(expr_2225_mpos, 64)
                        let _242 := read_from_memoryt_uint8(_241)
                        let expr_2226 := _242
                        /// @src 13:5998:6041  "uint256(config.baseFeeMaxChangeDenominator)"
                        let expr_2227 := convert_t_uint8_to_t_uint256(expr_2226)
                        /// @src 13:5991:6042  "int256(uint256(config.baseFeeMaxChangeDenominator))"
                        let expr_2228 := convert_t_uint256_to_t_int256(expr_2227)
                        /// @src 13:6086:6095  "blockDiff"
                        let _243 := var_blockDiff_2105
                        let expr_2231 := _243
                        /// @src 13:6098:6099  "1"
                        let expr_2232 := 0x01
                        /// @src 13:6086:6099  "blockDiff - 1"
                        let expr_2233 := checked_sub_t_uint256(expr_2231, convert_t_rational_1_by_1_to_t_uint256(expr_2232))

                        /// @src 13:6079:6100  "int256(blockDiff - 1)"
                        let expr_2234 := convert_t_uint256_to_t_int256(expr_2233)
                        /// @src 13:5884:6123  "Arithmetic.cdexp({..."
                        let expr_2235 := fun_cdexp_4826(expr_2220, expr_2228, expr_2234)
                        /// @src 13:6166:6172  "config"
                        let _244_mpos := var_config_2114_mpos
                        let expr_2240_mpos := _244_mpos
                        /// @src 13:6166:6187  "config.minimumBaseFee"
                        let _245 := add(expr_2240_mpos, 96)
                        let _246 := read_from_memoryt_uint32(_245)
                        let expr_2241 := _246
                        /// @src 13:6158:6188  "uint256(config.minimumBaseFee)"
                        let expr_2242 := convert_t_uint32_to_t_uint256(expr_2241)
                        /// @src 13:6151:6189  "int256(uint256(config.minimumBaseFee))"
                        let expr_2243 := convert_t_uint256_to_t_int256(expr_2242)
                        /// @src 13:6232:6238  "config"
                        let _247_mpos := var_config_2114_mpos
                        let expr_2248_mpos := _247_mpos
                        /// @src 13:6232:6253  "config.maximumBaseFee"
                        let _248 := add(expr_2248_mpos, 160)
                        let _249 := read_from_memoryt_uint128(_248)
                        let expr_2249 := _249
                        /// @src 13:6224:6254  "uint256(config.maximumBaseFee)"
                        let expr_2250 := convert_t_uint128_to_t_uint256(expr_2249)
                        /// @src 13:6217:6255  "int256(uint256(config.maximumBaseFee))"
                        let expr_2251 := convert_t_uint256_to_t_int256(expr_2250)
                        /// @src 13:5837:6274  "Arithmetic.clamp({..."
                        let expr_2252 := fun_clamp_4794(expr_2235, expr_2243, expr_2251)
                        /// @src 13:5824:6274  "newBaseFee = Arithmetic.clamp({..."
                        var_newBaseFee_2181 := expr_2252
                        let expr_2253 := expr_2252
                        /// @src 13:5548:6289  "if (blockDiff > 1) {..."
                    }
                    /// @src 13:6419:6429  "newBaseFee"
                    let _250 := var_newBaseFee_2181
                    let expr_2264 := _250
                    /// @src 13:6411:6430  "uint256(newBaseFee)"
                    let expr_2265 := convert_t_int256_to_t_uint256(expr_2264)
                    /// @src 13:6403:6431  "uint128(uint256(newBaseFee))"
                    let expr_2266 := convert_t_uint256_to_t_uint128(expr_2265)
                    /// @src 13:6382:6388  "params"
                    let _251_slot := 0x01
                    let expr_2257_slot := _251_slot
                    /// @src 13:6382:6400  "params.prevBaseFee"
                    let _252 := add(expr_2257_slot, 0)
                    /// @src 13:6382:6431  "params.prevBaseFee = uint128(uint256(newBaseFee))"
                    update_storage_value_offset_0t_uint128_to_t_uint128(_252, expr_2266)
                    let expr_2267 := expr_2266
                    /// @src 13:6468:6469  "0"
                    let expr_2272 := 0x00
                    /// @src 13:6445:6469  "params.prevBoughtGas = 0"
                    let _253 := convert_t_rational_0_by_1_to_t_uint64(expr_2272)
                    /// @src 13:6445:6451  "params"
                    let _254_slot := 0x01
                    let expr_2269_slot := _254_slot
                    /// @src 13:6445:6465  "params.prevBoughtGas"
                    let _255 := add(expr_2269_slot, 0)
                    /// @src 13:6445:6469  "params.prevBoughtGas = 0"
                    update_storage_value_offset_16t_uint64_to_t_uint64(_255, _253)
                    let expr_2273 := _253
                    /// @src 13:6512:6524  "block.number"
                    let expr_2281 := number()
                    /// @src 13:6505:6525  "uint64(block.number)"
                    let expr_2282 := convert_t_uint256_to_t_uint64(expr_2281)
                    /// @src 13:6483:6489  "params"
                    let _256_slot := 0x01
                    let expr_2275_slot := _256_slot
                    /// @src 13:6483:6502  "params.prevBlockNum"
                    let _257 := add(expr_2275_slot, 0)
                    /// @src 13:6483:6525  "params.prevBlockNum = uint64(block.number)"
                    update_storage_value_offset_24t_uint64_to_t_uint64(_257, expr_2282)
                    let expr_2283 := expr_2282
                    /// @src 13:4307:6536  "if (blockDiff > 0) {..."
                }
                /// @src 13:6654:6661  "_amount"
                let _258 := var__amount_2099
                let expr_2290 := _258
                /// @src 13:6630:6636  "params"
                let _259_slot := 0x01
                let expr_2287_slot := _259_slot
                /// @src 13:6630:6650  "params.prevBoughtGas"
                let _260 := add(expr_2287_slot, 0)
                /// @src 13:6630:6661  "params.prevBoughtGas += _amount"
                let _261 := read_from_storage_split_offset_16_t_uint64(_260)
                let expr_2291 := checked_add_t_uint64(_261, expr_2290)

                update_storage_value_offset_16t_uint64_to_t_uint64(_260, expr_2291)
                /// @src 13:6707:6713  "params"
                let _262_slot := 0x01
                let expr_2298_slot := _262_slot
                /// @src 13:6707:6727  "params.prevBoughtGas"
                let _263 := add(expr_2298_slot, 0)
                let _264 := read_from_storage_split_offset_16_t_uint64(_263)
                let expr_2299 := _264
                /// @src 13:6699:6728  "uint256(params.prevBoughtGas)"
                let expr_2300 := convert_t_uint64_to_t_uint256(expr_2299)
                /// @src 13:6692:6729  "int256(uint256(params.prevBoughtGas))"
                let expr_2301 := convert_t_uint256_to_t_int256(expr_2300)
                /// @src 13:6748:6754  "config"
                let _265_mpos := var_config_2114_mpos
                let expr_2306_mpos := _265_mpos
                /// @src 13:6748:6771  "config.maxResourceLimit"
                let _266 := add(expr_2306_mpos, 0)
                let _267 := read_from_memoryt_uint32(_266)
                let expr_2307 := _267
                /// @src 13:6740:6772  "uint256(config.maxResourceLimit)"
                let expr_2308 := convert_t_uint32_to_t_uint256(expr_2307)
                /// @src 13:6733:6773  "int256(uint256(config.maxResourceLimit))"
                let expr_2309 := convert_t_uint256_to_t_int256(expr_2308)
                /// @src 13:6692:6773  "int256(uint256(params.prevBoughtGas)) <= int256(uint256(config.maxResourceLimit))"
                let expr_2310 := iszero(sgt(cleanup_t_int256(expr_2301), cleanup_t_int256(expr_2309)))
                /// @src 13:6671:6861  "require(..."
                require_helper_t_stringliteral_0f4ab91394e0f4ff418dca162b1eae355504cb775c6778ff48927b4e41c65c44(expr_2310)
                /// @src 13:6954:6961  "_amount"
                let _268 := var__amount_2099
                let expr_2318 := _268
                /// @src 13:6946:6962  "uint256(_amount)"
                let expr_2319 := convert_t_uint64_to_t_uint256(expr_2318)
                /// @src 13:6973:6979  "params"
                let _269_slot := 0x01
                let expr_2322_slot := _269_slot
                /// @src 13:6973:6991  "params.prevBaseFee"
                let _270 := add(expr_2322_slot, 0)
                let _271 := read_from_storage_split_offset_0_t_uint128(_270)
                let expr_2323 := _271
                /// @src 13:6965:6992  "uint256(params.prevBaseFee)"
                let expr_2324 := convert_t_uint128_to_t_uint256(expr_2323)
                /// @src 13:6946:6992  "uint256(_amount) * uint256(params.prevBaseFee)"
                let expr_2325 := checked_mul_t_uint256(expr_2319, expr_2324)

                /// @src 13:6923:6992  "uint256 resourceCost = uint256(_amount) * uint256(params.prevBaseFee)"
                let var_resourceCost_2315 := expr_2325
                /// @src 13:7492:7504  "resourceCost"
                let _272 := var_resourceCost_2315
                let expr_2329 := _272
                /// @src 13:7507:7511  "Math"
                let expr_2330_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/Math.sol:Math")
                /// @src 13:7516:7529  "block.basefee"
                let expr_2333 := basefee()
                /// @src 13:7531:7537  "1 gwei"
                let expr_2334 := 0x3b9aca00
                /// @src 13:7507:7538  "Math.max(block.basefee, 1 gwei)"
                let _273 := convert_t_rational_1000000000_by_1_to_t_uint256(expr_2334)
                let expr_2335 := fun_max_4285(expr_2333, _273)
                /// @src 13:7492:7538  "resourceCost / Math.max(block.basefee, 1 gwei)"
                let expr_2336 := checked_div_t_uint256(expr_2329, expr_2335)

                /// @src 13:7474:7538  "uint256 gasCost = resourceCost / Math.max(block.basefee, 1 gwei)"
                let var_gasCost_2328 := expr_2336
                /// @src 13:7836:7847  "_initialGas"
                let _274 := var__initialGas_2101
                let expr_2340 := _274
                /// @src 13:7850:7859  "gasleft()"
                let expr_2342 := gas()
                /// @src 13:7836:7859  "_initialGas - gasleft()"
                let expr_2343 := checked_sub_t_uint256(expr_2340, expr_2342)

                /// @src 13:7818:7859  "uint256 usedGas = _initialGas - gasleft()"
                let var_usedGas_2339 := expr_2343
                /// @src 13:7873:7880  "gasCost"
                let _275 := var_gasCost_2328
                let expr_2345 := _275
                /// @src 13:7883:7890  "usedGas"
                let _276 := var_usedGas_2339
                let expr_2346 := _276
                /// @src 13:7873:7890  "gasCost > usedGas"
                let expr_2347 := gt(cleanup_t_uint256(expr_2345), cleanup_t_uint256(expr_2346))
                /// @src 13:7869:7944  "if (gasCost > usedGas) {..."
                if expr_2347 {
                    /// @src 13:7906:7910  "Burn"
                    let expr_2348_address := linkersymbol("contracts/libraries/Burn.sol:Burn")
                    /// @src 13:7915:7922  "gasCost"
                    let _277 := var_gasCost_2328
                    let expr_2351 := _277
                    /// @src 13:7925:7932  "usedGas"
                    let _278 := var_usedGas_2339
                    let expr_2352 := _278
                    /// @src 13:7915:7932  "gasCost - usedGas"
                    let expr_2353 := checked_sub_t_uint256(expr_2351, expr_2352)

                    fun_gas_4871(expr_2353)
                    /// @src 13:7869:7944  "if (gasCost > usedGas) {..."
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function allocate_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr() -> memPtr {
                memPtr := allocate_memory(192)
            }

            function zero_value_for_t_uint32() -> ret {
                ret := 0
            }

            function zero_value_for_t_uint8() -> ret {
                ret := 0
            }

            function zero_value_for_t_uint128() -> ret {
                ret := 0
            }

            function allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr() -> memPtr {
                memPtr := allocate_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr()
                let offset := memPtr

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)

            }

            function zero_value_for_split_t_struct$_ResourceConfig_$2070_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr()
            }

            function validator_revert_t_uint32(value) {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint32_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_uint32(value)
            }

            function validator_revert_t_uint8(value) {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint8_fromMemory(offset, end) -> value {
                value := mload(offset)
                validator_revert_t_uint8(value)
            }

            // struct ResourceMetering.ResourceConfig
            function abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(headStart, end) -> value {
                if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
                value := allocate_memory(0xc0)

                {
                    // maxResourceLimit

                    let offset := 0

                    mstore(add(value, 0x00), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

                }

                {
                    // elasticityMultiplier

                    let offset := 32

                    mstore(add(value, 0x20), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))

                }

                {
                    // baseFeeMaxChangeDenominator

                    let offset := 64

                    mstore(add(value, 0x40), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))

                }

                {
                    // minimumBaseFee

                    let offset := 96

                    mstore(add(value, 0x60), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

                }

                {
                    // systemTxMaxGas

                    let offset := 128

                    mstore(add(value, 0x80), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

                }

                {
                    // maximumBaseFee

                    let offset := 160

                    mstore(add(value, 0xa0), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))

                }

            }

            function abi_decode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
                }

            }

            /// @ast-id 385
            /// @src 12:7278:7467  "function _resourceConfig()..."
            function fun__resourceConfig_385() -> var__378_mpos {
                /// @src 12:7369:7407  "ResourceMetering.ResourceConfig memory"
                let zero_t_struct$_ResourceConfig_$2070_memory_ptr_279_mpos := zero_value_for_split_t_struct$_ResourceConfig_$2070_memory_ptr()
                var__378_mpos := zero_t_struct$_ResourceConfig_$2070_memory_ptr_279_mpos

                /// @src 12:7430:7443  "SYSTEM_CONFIG"
                let _280_address := loadimmutable("179")
                let expr_380_address := _280_address
                /// @src 12:7430:7458  "SYSTEM_CONFIG.resourceConfig"
                let expr_381_address := convert_t_contract$_SystemConfig_$2797_to_t_address(expr_380_address)
                let expr_381_functionSelector := 0xcc731b02
                /// @src 12:7430:7460  "SYSTEM_CONFIG.resourceConfig()"

                // storage for arguments and returned data
                let _281 := allocate_unbounded()
                mstore(_281, shift_left_224(expr_381_functionSelector))
                let _282 := abi_encode_tuple__to__fromStack(add(_281, 4) )

                let _283 := staticcall(gas(), expr_381_address,  _281, sub(_282, _281), _281, 192)

                if iszero(_283) { revert_forward_1() }

                let expr_382_mpos
                if _283 {

                    let _284 := 192

                    if gt(_284, returndatasize()) {
                        _284 := returndatasize()
                    }

                    // update freeMemoryPointer according to dynamic return size
                    finalize_allocation(_281, _284)

                    // decode return parameters from external try-call into retVars
                    expr_382_mpos :=  abi_decode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(_281, add(_281, _284))
                }
                /// @src 12:7423:7460  "return SYSTEM_CONFIG.resourceConfig()"
                var__378_mpos := expr_382_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is not i")

                mstore(add(memPtr, 32), "nitializing")

            }

            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 1539
            /// @src 4:4842:4967  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_2370() {

                /// @src 4:4888:4901  "_initializing"
                let _285 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_1533 := _285
                /// @src 4:4880:4949  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_1533)
                /// @src 4:4959:4960  "_"
                fun___ResourceMetering_init_2385_inner()

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function allocate_memory_struct_t_struct$_ResourceParams_$2057_storage_ptr() -> memPtr {
                memPtr := allocate_memory(96)
            }

            function convert_t_rational_1000000000_by_1_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_rational_1000000000_by_1(value)))
            }

            function write_to_memory_t_uint64(memPtr, value) {
                mstore(memPtr, cleanup_t_uint64(value))
            }

            function read_from_memoryt_uint64(ptr) -> returnValue {

                let value := cleanup_t_uint64(mload(ptr))

                returnValue :=

                value

            }

            function copy_struct_to_storage_from_t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value) {

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_0t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 32)

                    let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)

                    update_storage_value_offset_16t_uint64_to_t_uint64(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 64)

                    let memberValue_0 := read_from_memoryt_uint64(memberSrcPtr)

                    update_storage_value_offset_24t_uint64_to_t_uint64(memberSlot, memberValue_0)

                }

            }

            function update_storage_value_offset_0t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value_0) {

                copy_struct_to_storage_from_t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(slot, value_0)
            }

            /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
            function fun___ResourceMetering_init_2385_inner() {

                /// @src 13:8598:8604  "1 gwei"
                let expr_2374 := 0x3b9aca00
                /// @src 13:8633:8634  "0"
                let expr_2375 := 0x00
                /// @src 13:8669:8681  "block.number"
                let expr_2379 := number()
                /// @src 13:8662:8682  "uint64(block.number)"
                let expr_2380 := convert_t_uint256_to_t_uint64(expr_2379)
                /// @src 13:8556:8693  "ResourceParams({..."
                let expr_2381_mpos := allocate_memory_struct_t_struct$_ResourceParams_$2057_storage_ptr()
                let _286 := convert_t_rational_1000000000_by_1_to_t_uint128(expr_2374)
                write_to_memory_t_uint128(add(expr_2381_mpos, 0), _286)
                let _287 := convert_t_rational_0_by_1_to_t_uint64(expr_2375)
                write_to_memory_t_uint64(add(expr_2381_mpos, 32), _287)
                write_to_memory_t_uint64(add(expr_2381_mpos, 64), expr_2380)
                /// @src 13:8547:8693  "params = ResourceParams({..."
                update_storage_value_offset_0t_struct$_ResourceParams_$2057_memory_ptr_to_t_struct$_ResourceParams_$2057_storage(0x01, expr_2381_mpos)
                let _288_slot := 0x01
                let expr_2382_slot := _288_slot

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 2385
            /// @src 13:8476:8700  "function __ResourceMetering_init() internal onlyInitializing {..."
            function fun___ResourceMetering_init_2385() {

                modifier_onlyInitializing_2370()
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_bytes32() -> ret {
                ret := 0
            }

            function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(headStart , value0, value1, value2, value3, value4, value5) -> tail {
                tail := add(headStart, 192)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

                abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))

                abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))

                abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))

                abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))

                mstore(add(headStart, 160), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value5,  tail)

            }

            /// @ast-id 3040
            /// @src 20:4733:5014  "function hashWithdrawal(Types.WithdrawalTransaction memory _tx)..."
            function fun_hashWithdrawal_3040(var__tx_3016_mpos) -> var__3019 {
                /// @src 20:4844:4851  "bytes32"
                let zero_t_bytes32_289 := zero_value_for_split_t_bytes32()
                var__3019 := zero_t_bytes32_289

                /// @src 20:4924:4927  "_tx"
                let _290_mpos := var__tx_3016_mpos
                let expr_3024_mpos := _290_mpos
                /// @src 20:4924:4933  "_tx.nonce"
                let _291 := add(expr_3024_mpos, 0)
                let _292 := read_from_memoryt_uint256(_291)
                let expr_3025 := _292
                /// @src 20:4935:4938  "_tx"
                let _293_mpos := var__tx_3016_mpos
                let expr_3026_mpos := _293_mpos
                /// @src 20:4935:4945  "_tx.sender"
                let _294 := add(expr_3026_mpos, 32)
                let _295 := read_from_memoryt_address(_294)
                let expr_3027 := _295
                /// @src 20:4947:4950  "_tx"
                let _296_mpos := var__tx_3016_mpos
                let expr_3028_mpos := _296_mpos
                /// @src 20:4947:4957  "_tx.target"
                let _297 := add(expr_3028_mpos, 64)
                let _298 := read_from_memoryt_address(_297)
                let expr_3029 := _298
                /// @src 20:4959:4962  "_tx"
                let _299_mpos := var__tx_3016_mpos
                let expr_3030_mpos := _299_mpos
                /// @src 20:4959:4968  "_tx.value"
                let _300 := add(expr_3030_mpos, 96)
                let _301 := read_from_memoryt_uint256(_300)
                let expr_3031 := _301
                /// @src 20:4970:4973  "_tx"
                let _302_mpos := var__tx_3016_mpos
                let expr_3032_mpos := _302_mpos
                /// @src 20:4970:4982  "_tx.gasLimit"
                let _303 := add(expr_3032_mpos, 128)
                let _304 := read_from_memoryt_uint256(_303)
                let expr_3033 := _304
                /// @src 20:4984:4987  "_tx"
                let _305_mpos := var__tx_3016_mpos
                let expr_3034_mpos := _305_mpos
                /// @src 20:4984:4992  "_tx.data"
                let _306 := add(expr_3034_mpos, 160)
                let _307_mpos := mload(_306)
                let expr_3035_mpos := _307_mpos
                /// @src 20:4913:4993  "abi.encode(_tx.nonce, _tx.sender, _tx.target, _tx.value, _tx.gasLimit, _tx.data)"

                let expr_3036_mpos := allocate_unbounded()
                let _308 := add(expr_3036_mpos, 0x20)

                let _309 := abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack(_308, expr_3025, expr_3027, expr_3029, expr_3031, expr_3033, expr_3035_mpos)
                mstore(expr_3036_mpos, sub(_309, add(expr_3036_mpos, 0x20)))
                finalize_allocation(expr_3036_mpos, sub(_309, expr_3036_mpos))
                /// @src 20:4886:5007  "keccak256(..."
                let expr_3037 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3036_mpos), array_length_t_bytes_memory_ptr(expr_3036_mpos))
                /// @src 20:4867:5007  "return..."
                var__3019 := expr_3037
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32_t_bytes32__fromStack(headStart , value0, value1, value2, value3) -> tail {
                tail := add(headStart, 128)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))

            }

            /// @ast-id 3064
            /// @src 20:5334:5786  "function hashOutputRootProof(Types.OutputRootProof memory _outputRootProof)..."
            function fun_hashOutputRootProof_3064(var__outputRootProof_3044_mpos) -> var__3047 {
                /// @src 20:5457:5464  "bytes32"
                let zero_t_bytes32_310 := zero_value_for_split_t_bytes32()
                var__3047 := zero_t_bytes32_310

                /// @src 20:5558:5574  "_outputRootProof"
                let _311_mpos := var__outputRootProof_3044_mpos
                let expr_3052_mpos := _311_mpos
                /// @src 20:5558:5582  "_outputRootProof.version"
                let _312 := add(expr_3052_mpos, 0)
                let _313 := read_from_memoryt_bytes32(_312)
                let expr_3053 := _313
                /// @src 20:5604:5620  "_outputRootProof"
                let _314_mpos := var__outputRootProof_3044_mpos
                let expr_3054_mpos := _314_mpos
                /// @src 20:5604:5630  "_outputRootProof.stateRoot"
                let _315 := add(expr_3054_mpos, 32)
                let _316 := read_from_memoryt_bytes32(_315)
                let expr_3055 := _316
                /// @src 20:5652:5668  "_outputRootProof"
                let _317_mpos := var__outputRootProof_3044_mpos
                let expr_3056_mpos := _317_mpos
                /// @src 20:5652:5693  "_outputRootProof.messagePasserStorageRoot"
                let _318 := add(expr_3056_mpos, 64)
                let _319 := read_from_memoryt_bytes32(_318)
                let expr_3057 := _319
                /// @src 20:5715:5731  "_outputRootProof"
                let _320_mpos := var__outputRootProof_3044_mpos
                let expr_3058_mpos := _320_mpos
                /// @src 20:5715:5747  "_outputRootProof.latestBlockhash"
                let _321 := add(expr_3058_mpos, 96)
                let _322 := read_from_memoryt_bytes32(_321)
                let expr_3059 := _322
                /// @src 20:5526:5765  "abi.encode(..."

                let expr_3060_mpos := allocate_unbounded()
                let _323 := add(expr_3060_mpos, 0x20)

                let _324 := abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32_t_bytes32__fromStack(_323, expr_3053, expr_3055, expr_3057, expr_3059)
                mstore(expr_3060_mpos, sub(_324, add(expr_3060_mpos, 0x20)))
                finalize_allocation(expr_3060_mpos, sub(_324, expr_3060_mpos))
                /// @src 20:5499:5779  "keccak256(..."
                let expr_3061 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3060_mpos), array_length_t_bytes_memory_ptr(expr_3060_mpos))
                /// @src 20:5480:5779  "return..."
                var__3047 := expr_3061
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 3110
            /// @src 22:1433:4346  "function callWithMinGas(..."
            function fun_callWithMinGas_3110(var__target_3092, var__minGas_3094, var__value_3096, var__calldata_3098_mpos) -> var__3101 {
                /// @src 22:1587:1591  "bool"
                let zero_t_bool_325 := zero_value_for_split_t_bool()
                var__3101 := zero_t_bool_325

                /// @src 22:1603:1616  "bool _success"
                let var__success_3104
                let zero_t_bool_326 := zero_value_for_split_t_bool()
                var__success_3104 := zero_t_bool_326
                /// @src 22:1626:4315  "assembly {..."
                {
                    if lt(gas(), div(mul(64, add(var__minGas_3094, 200)), 63))
                    {
                        mstore(0, 0x08c379a0)
                        mstore(32, 32)
                        mstore(88, 0x0000185361666543616c6c3a204e6f7420656e6f75676820676173)
                        revert(28, 100)
                    }
                    var__success_3104 := call(gas(), var__target_3092, var__value_3096, add(var__calldata_3098_mpos, 32), mload(var__calldata_3098_mpos), 0x00, 0x00)
                }
                /// @src 22:4331:4339  "_success"
                let _327 := var__success_3104
                let expr_3107 := _327
                /// @src 22:4324:4339  "return _success"
                var__3101 := expr_3107
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 3198
            /// @src 27:1082:1388  "function verifyInclusionProof(..."
            function fun_verifyInclusionProof_3198(var__key_3171_mpos, var__value_3173_mpos, var__proof_3176_mpos, var__root_3178) -> var__3181 {
                /// @src 27:1251:1255  "bool"
                let zero_t_bool_328 := zero_value_for_split_t_bool()
                var__3181 := zero_t_bool_328

                /// @src 27:1300:1304  "_key"
                let _329_mpos := var__key_3171_mpos
                let expr_3186_mpos := _329_mpos
                /// @src 27:1286:1305  "_getSecureKey(_key)"
                let expr_3187_mpos := fun__getSecureKey_3241(expr_3186_mpos)
                /// @src 27:1267:1305  "bytes memory key = _getSecureKey(_key)"
                let var_key_3184_mpos := expr_3187_mpos
                /// @src 27:1322:1332  "MerkleTrie"
                let expr_3189_address := linkersymbol("contracts/libraries/trie/MerkleTrie.sol:MerkleTrie")
                /// @src 27:1354:1357  "key"
                let _330_mpos := var_key_3184_mpos
                let expr_3191_mpos := _330_mpos
                /// @src 27:1359:1365  "_value"
                let _331_mpos := var__value_3173_mpos
                let expr_3192_mpos := _331_mpos
                /// @src 27:1367:1373  "_proof"
                let _332_mpos := var__proof_3176_mpos
                let expr_3193_mpos := _332_mpos
                /// @src 27:1375:1380  "_root"
                let _333 := var__root_3178
                let expr_3194 := _333
                /// @src 27:1322:1381  "MerkleTrie.verifyInclusionProof(key, _value, _proof, _root)"
                let expr_3195 := fun_verifyInclusionProof_5090(expr_3191_mpos, expr_3192_mpos, expr_3193_mpos, expr_3194)
                /// @src 27:1315:1381  "return MerkleTrie.verifyInclusionProof(key, _value, _proof, _root)"
                var__3181 := expr_3195
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_bytes_memory_ptr() -> ret {
                ret := 96
            }

            function leftAlign_t_bytes32(value) -> aligned {
                aligned := value
            }

            function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {
                mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))
            }

            function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(pos , value0) -> end {

                abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)
                pos := add(pos, 32)

                end := pos
            }

            /// @ast-id 3241
            /// @src 27:2116:2251  "function _getSecureKey(bytes memory _key) private pure returns (bytes memory) {..."
            function fun__getSecureKey_3241(var__key_3228_mpos) -> var__3231_mpos {
                /// @src 27:2180:2192  "bytes memory"
                let zero_t_bytes_memory_ptr_334_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__3231_mpos := zero_t_bytes_memory_ptr_334_mpos

                /// @src 27:2238:2242  "_key"
                let _335_mpos := var__key_3228_mpos
                let expr_3236_mpos := _335_mpos
                /// @src 27:2228:2243  "keccak256(_key)"
                let expr_3237 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_3236_mpos), array_length_t_bytes_memory_ptr(expr_3236_mpos))
                /// @src 27:2211:2244  "abi.encodePacked(keccak256(_key))"

                let expr_3238_mpos := allocate_unbounded()
                let _336 := add(expr_3238_mpos, 0x20)

                let _337 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_336, expr_3237)
                mstore(expr_3238_mpos, sub(_337, add(expr_3238_mpos, 0x20)))
                finalize_allocation(expr_3238_mpos, sub(_337, expr_3238_mpos))
                /// @src 27:2204:2244  "return abi.encodePacked(keccak256(_key))"
                var__3231_mpos := expr_3238_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_address() -> ret {
                ret := 0
            }

            function convert_t_address_to_t_uint160(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            /// @src 30:707:784  "uint160 constant offset = uint160(0x1111000000000000000000000000000000001111)"
            function constant_offset_3250() -> ret {
                /// @src 30:741:783  "0x1111000000000000000000000000000000001111"
                let expr_3248 := 0x1111000000000000000000000000000000001111
                /// @src 30:733:784  "uint160(0x1111000000000000000000000000000000001111)"
                let expr_3249 := convert_t_address_to_t_uint160(expr_3248)
                let _340 := expr_3249

                ret := _340
            }

            function wrapping_add_t_uint160(x, y) -> sum {
                sum := cleanup_t_uint160(add(x, y))
            }

            /// @ast-id 3272
            /// @src 30:1072:1258  "function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {..."
            function fun_applyL1ToL2Alias_3272(var_l1Address_3253) -> var_l2Address_3256 {
                /// @src 30:1140:1157  "address l2Address"
                let zero_t_address_338 := zero_value_for_split_t_address()
                var_l2Address_3256 := zero_t_address_338

                /// @src 30:1221:1230  "l1Address"
                let _339 := var_l1Address_3253
                let expr_3263 := _339
                /// @src 30:1213:1231  "uint160(l1Address)"
                let expr_3264 := convert_t_address_to_t_uint160(expr_3263)
                /// @src 30:1234:1240  "offset"
                let expr_3265 := constant_offset_3250()
                /// @src 30:1213:1240  "uint160(l1Address) + offset"
                let expr_3266 := wrapping_add_t_uint160(expr_3264, expr_3265)

                /// @src 30:1205:1241  "address(uint160(l1Address) + offset)"
                let expr_3267 := convert_t_uint160_to_t_address(expr_3266)
                /// @src 30:1193:1241  "l2Address = address(uint160(l1Address) + offset)"
                var_l2Address_3256 := expr_3267
                let expr_3268 := expr_3267

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr) {

                mstore(add(memPtr, 0), "0")

            }

            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }

            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }

            function zero_value_for_split_t_uint256() -> ret {
                ret := 0
            }

            function increment_t_uint256(value) -> ret {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }

            function cleanup_t_rational_10_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }

            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes) {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }

            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }

            function mod_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function cleanup_t_rational_48_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }

            function convert_t_uint256_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }

            function cleanup_t_bytes1(value) -> cleaned {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }

            function convert_t_uint8_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }

            function panic_error_0x32() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }

            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 1)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            /// @ast-id 3827
            /// @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3827(var_value_3751) -> var__3754_mpos {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_341_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3754_mpos := zero_t_string_memory_ptr_341_mpos

                /// @src 6:665:670  "value"
                let _342 := var_value_3751
                let expr_3756 := _342
                /// @src 6:674:675  "0"
                let expr_3757 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3758 := eq(cleanup_t_uint256(expr_3756), convert_t_rational_0_by_1_to_t_uint256(expr_3757))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3758 {
                    /// @src 6:691:701  "return \"0\""
                    var__3754_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                    /// @src 6:661:712  "if (value == 0) {..."
                }
                /// @src 6:736:741  "value"
                let _343 := var_value_3751
                let expr_3765 := _343
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3764 := expr_3765
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3768
                let zero_t_uint256_344 := zero_value_for_split_t_uint256()
                var_digits_3768 := zero_t_uint256_344
                /// @src 6:775:850  "while (temp != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:782:786  "temp"
                    let _345 := var_temp_3764
                    let expr_3770 := _345
                    /// @src 6:790:791  "0"
                    let expr_3771 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3772 := iszero(eq(cleanup_t_uint256(expr_3770), convert_t_rational_0_by_1_to_t_uint256(expr_3771)))
                    if iszero(expr_3772) { break }
                    /// @src 6:807:815  "digits++"
                    let _347 := var_digits_3768
                    let _346 := increment_t_uint256(_347)
                    var_digits_3768 := _346
                    let expr_3774 := _347
                    /// @src 6:837:839  "10"
                    let expr_3777 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _348 := convert_t_rational_10_by_1_to_t_uint256(expr_3777)
                    let _349 := var_temp_3764
                    let expr_3778 := checked_div_t_uint256(_349, _348)

                    var_temp_3764 := expr_3778
                }
                /// @src 6:891:897  "digits"
                let _350 := var_digits_3768
                let expr_3786 := _350
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3787_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3786)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3783_mpos := expr_3787_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:915:920  "value"
                    let _351 := var_value_3751
                    let expr_3789 := _351
                    /// @src 6:924:925  "0"
                    let expr_3790 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3791 := iszero(eq(cleanup_t_uint256(expr_3789), convert_t_rational_0_by_1_to_t_uint256(expr_3790)))
                    if iszero(expr_3791) { break }
                    /// @src 6:951:952  "1"
                    let expr_3793 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _352 := convert_t_rational_1_by_1_to_t_uint256(expr_3793)
                    let _353 := var_digits_3768
                    let expr_3794 := checked_sub_t_uint256(_353, _352)

                    var_digits_3768 := expr_3794
                    /// @src 6:996:998  "48"
                    let expr_3803 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _354 := var_value_3751
                    let expr_3806 := _354
                    /// @src 6:1017:1019  "10"
                    let expr_3807 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3808 := mod_t_uint256(expr_3806, convert_t_rational_10_by_1_to_t_uint256(expr_3807))

                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3809 := expr_3808
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3810 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3803), expr_3809)

                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3811 := convert_t_uint256_to_t_uint8(expr_3810)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3812 := convert_t_uint8_to_t_bytes1(expr_3811)
                    /// @src 6:966:972  "buffer"
                    let _355_mpos := var_buffer_3783_mpos
                    let expr_3796_mpos := _355_mpos
                    /// @src 6:973:979  "digits"
                    let _356 := var_digits_3768
                    let expr_3797 := _356
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _357 := expr_3812
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3796_mpos, expr_3797), byte(0, _357))
                    let expr_3813 := expr_3812
                    /// @src 6:1045:1047  "10"
                    let expr_3816 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _358 := convert_t_rational_10_by_1_to_t_uint256(expr_3816)
                    let _359 := var_value_3751
                    let expr_3817 := checked_div_t_uint256(_359, _358)

                    var_value_3751 := expr_3817
                }
                /// @src 6:1081:1087  "buffer"
                let _360_mpos := var_buffer_3783_mpos
                let expr_3823_mpos := _360_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3824_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3823_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3754_mpos := expr_3824_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 3983
            /// @src 5:1175:1495  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_3983(var_account_3971) -> var__3974 {
                /// @src 5:1235:1239  "bool"
                let zero_t_bool_361 := zero_value_for_split_t_bool()
                var__3974 := zero_t_bool_361

                /// @src 5:1465:1472  "account"
                let _362 := var_account_3971
                let expr_3976 := _362
                /// @src 5:1465:1484  "account.code.length"
                let expr_3978 := extcodesize(expr_3976)
                /// @src 5:1487:1488  "0"
                let expr_3979 := 0x00
                /// @src 5:1465:1488  "account.code.length > 0"
                let expr_3980 := gt(cleanup_t_uint256(expr_3978), convert_t_rational_0_by_1_to_t_uint256(expr_3979))
                /// @src 5:1458:1488  "return account.code.length > 0"
                var__3974 := expr_3980
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 4285
            /// @src 7:413:518  "function max(uint256 a, uint256 b) internal pure returns (uint256) {..."
            function fun_max_4285(var_a_4270, var_b_4272) -> var__4275 {
                /// @src 7:471:478  "uint256"
                let zero_t_uint256_363 := zero_value_for_split_t_uint256()
                var__4275 := zero_t_uint256_363

                /// @src 7:497:498  "a"
                let _364 := var_a_4270
                let expr_4277 := _364
                /// @src 7:502:503  "b"
                let _365 := var_b_4272
                let expr_4278 := _365
                /// @src 7:497:503  "a >= b"
                let expr_4279 := iszero(lt(cleanup_t_uint256(expr_4277), cleanup_t_uint256(expr_4278)))
                /// @src 7:497:511  "a >= b ? a : b"
                let expr_4282
                switch expr_4279
                case 0 {
                    /// @src 7:510:511  "b"
                    let _366 := var_b_4272
                    let expr_4281 := _366
                    /// @src 7:497:511  "a >= b ? a : b"
                    expr_4282 := expr_4281
                }
                default {
                    /// @src 7:506:507  "a"
                    let _367 := var_a_4270
                    let expr_4280 := _367
                    /// @src 7:497:511  "a >= b ? a : b"
                    expr_4282 := expr_4280
                }
                /// @src 7:490:511  "return a >= b ? a : b"
                var__4275 := expr_4282
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_int256() -> ret {
                ret := 0
            }

            /// @ast-id 4794
            /// @src 15:568:759  "function clamp(..."
            function fun_clamp_4794(var__value_4774, var__min_4776, var__max_4778) -> var__4781 {
                /// @src 15:677:683  "int256"
                let zero_t_int256_368 := zero_value_for_split_t_int256()
                var__4781 := zero_t_int256_368

                /// @src 15:702:712  "SignedMath"
                let expr_4783_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath")
                /// @src 15:717:727  "SignedMath"
                let expr_4785_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath")
                /// @src 15:732:738  "_value"
                let _369 := var__value_4774
                let expr_4787 := _369
                /// @src 15:740:744  "_min"
                let _370 := var__min_4776
                let expr_4788 := _370
                /// @src 15:717:745  "SignedMath.max(_value, _min)"
                let expr_4789 := fun_max_6362(expr_4787, expr_4788)
                /// @src 15:747:751  "_max"
                let _371 := var__max_4778
                let expr_4790 := _371
                /// @src 15:702:752  "SignedMath.min(SignedMath.max(_value, _min), _max)"
                let expr_4791 := fun_min_6380(expr_4789, expr_4790)
                /// @src 15:695:752  "return SignedMath.min(SignedMath.max(_value, _min), _max)"
                var__4781 := expr_4791
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_rational_1000000000000000000_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1000000000000000000_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1000000000000000000_by_1(value)))
            }

            /// @ast-id 4826
            /// @src 15:1125:1411  "function cdexp(..."
            function fun_cdexp_4826(var__coefficient_4797, var__denominator_4799, var__exponent_4801) -> var__4804 {
                /// @src 15:1253:1259  "int256"
                let zero_t_int256_372 := zero_value_for_split_t_int256()
                var__4804 := zero_t_int256_372

                /// @src 15:1291:1303  "_coefficient"
                let _373 := var__coefficient_4797
                let expr_4806 := _373
                /// @src 15:1323:1340  "FixedPointMathLib"
                let expr_4807_address := linkersymbol("./node_modules/@rari-capital/solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib")
                /// @src 15:1348:1352  "1e18"
                let expr_4809 := 0x0de0b6b3a7640000
                /// @src 15:1356:1360  "1e18"
                let expr_4810 := 0x0de0b6b3a7640000
                /// @src 15:1363:1375  "_denominator"
                let _374 := var__denominator_4799
                let expr_4811 := _374
                /// @src 15:1356:1375  "1e18 / _denominator"
                let expr_4812 := checked_div_t_int256(convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4810), expr_4811)

                /// @src 15:1355:1376  "(1e18 / _denominator)"
                let expr_4813 := expr_4812
                /// @src 15:1348:1376  "1e18 - (1e18 / _denominator)"
                let expr_4814 := checked_sub_t_int256(convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4809), expr_4813)

                /// @src 15:1378:1387  "_exponent"
                let _375 := var__exponent_4801
                let expr_4815 := _375
                /// @src 15:1390:1394  "1e18"
                let expr_4816 := 0x0de0b6b3a7640000
                /// @src 15:1378:1394  "_exponent * 1e18"
                let expr_4817 := checked_mul_t_int256(expr_4815, convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4816))

                /// @src 15:1323:1395  "FixedPointMathLib.powWad(1e18 - (1e18 / _denominator), _exponent * 1e18)"
                let expr_4818 := fun_powWad_6540(expr_4814, expr_4817)
                /// @src 15:1322:1396  "(FixedPointMathLib.powWad(1e18 - (1e18 / _denominator), _exponent * 1e18))"
                let expr_4819 := expr_4818
                /// @src 15:1291:1396  "_coefficient *..."
                let expr_4820 := checked_mul_t_int256(expr_4806, expr_4819)

                /// @src 15:1290:1397  "(_coefficient *..."
                let expr_4821 := expr_4820
                /// @src 15:1400:1404  "1e18"
                let expr_4822 := 0x0de0b6b3a7640000
                /// @src 15:1290:1404  "(_coefficient *..."
                let expr_4823 := checked_div_t_int256(expr_4821, convert_t_rational_1000000000000000000_by_1_to_t_int256(expr_4822))

                /// @src 15:1271:1404  "return..."
                var__4804 := expr_4823
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 4871
            /// @src 16:439:631  "function gas(uint256 _amount) internal view {..."
            function fun_gas_4871(var__amount_4847) {

                /// @src 16:505:506  "0"
                let expr_4852 := 0x00
                /// @src 16:493:506  "uint256 i = 0"
                let var_i_4851 := convert_t_rational_0_by_1_to_t_uint256(expr_4852)
                /// @src 16:537:546  "gasleft()"
                let expr_4857 := gas()
                /// @src 16:516:546  "uint256 initialGas = gasleft()"
                let var_initialGas_4855 := expr_4857
                /// @src 16:556:625  "while (initialGas - gasleft() < _amount) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 16:563:573  "initialGas"
                    let _376 := var_initialGas_4855
                    let expr_4859 := _376
                    /// @src 16:576:585  "gasleft()"
                    let expr_4861 := gas()
                    /// @src 16:563:585  "initialGas - gasleft()"
                    let expr_4862 := checked_sub_t_uint256(expr_4859, expr_4861)

                    /// @src 16:588:595  "_amount"
                    let _377 := var__amount_4847
                    let expr_4863 := _377
                    /// @src 16:563:595  "initialGas - gasleft() < _amount"
                    let expr_4864 := lt(cleanup_t_uint256(expr_4862), cleanup_t_uint256(expr_4863))
                    if iszero(expr_4864) { break }
                    /// @src 16:611:614  "++i"
                    let _379 := var_i_4851
                    let _378 := increment_t_uint256(_379)
                    var_i_4851 := _378
                    let expr_4866 := _378
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 5090
            /// @src 26:2396:2640  "function verifyInclusionProof(..."
            function fun_verifyInclusionProof_5090(var__key_5067_mpos, var__value_5069_mpos, var__proof_5072_mpos, var__root_5074) -> var__5077 {
                /// @src 26:2565:2569  "bool"
                let zero_t_bool_380 := zero_value_for_split_t_bool()
                var__5077 := zero_t_bool_380

                /// @src 26:2588:2593  "Bytes"
                let expr_5079_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:2600:2606  "_value"
                let _381_mpos := var__value_5069_mpos
                let expr_5081_mpos := _381_mpos
                /// @src 26:2612:2616  "_key"
                let _382_mpos := var__key_5067_mpos
                let expr_5083_mpos := _382_mpos
                /// @src 26:2618:2624  "_proof"
                let _383_mpos := var__proof_5072_mpos
                let expr_5084_mpos := _383_mpos
                /// @src 26:2626:2631  "_root"
                let _384 := var__root_5074
                let expr_5085 := _384
                /// @src 26:2608:2632  "get(_key, _proof, _root)"
                let expr_5086_mpos := fun_get_5438(expr_5083_mpos, expr_5084_mpos, expr_5085)
                /// @src 26:2588:2633  "Bytes.equal(_value, get(_key, _proof, _root))"
                let expr_5087 := fun_equal_7237(expr_5081_mpos, expr_5086_mpos)
                /// @src 26:2581:2633  "return Bytes.equal(_value, get(_key, _proof, _root))"
                var__5077 := expr_5087
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: empty key")

            }

            function abi_encode_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)
                store_literal_in_memory_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function array_length_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(value) -> length {

                length := mload(value)

            }

            function memory_array_index_access_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 32)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            function store_literal_in_memory_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: key index exceeds to")

                mstore(add(memPtr, 32), "tal key length")

            }

            function abi_encode_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_32_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_32_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_32_by_1(value)))
            }

            function store_literal_in_memory_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: invalid internal nod")

                mstore(add(memPtr, 32), "e hash")

            }

            function abi_encode_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
                store_literal_in_memory_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: invalid large intern")

                mstore(add(memPtr, 32), "al hash")

            }

            function abi_encode_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)
                store_literal_in_memory_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: invalid root hash")

            }

            function abi_encode_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)
                store_literal_in_memory_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function array_length_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(value) -> length {

                length := mload(value)

            }

            function cleanup_t_rational_16_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_16_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_16_by_1(value)))
            }

            /// @src 26:803:844  "uint256 internal constant TREE_RADIX = 16"
            function constant_TREE_RADIX_5038() -> ret {
                /// @src 26:842:844  "16"
                let expr_5037 := 0x10
                let _424 := convert_t_rational_16_by_1_to_t_uint256(expr_5037)

                ret := _424
            }

            /// @src 26:943:1004  "uint256 internal constant BRANCH_NODE_LENGTH = TREE_RADIX + 1"
            function constant_BRANCH_NODE_LENGTH_5044() -> ret {
                /// @src 26:990:1000  "TREE_RADIX"
                let expr_5041 := constant_TREE_RADIX_5038()
                /// @src 26:1003:1004  "1"
                let expr_5042 := 0x01
                /// @src 26:990:1004  "TREE_RADIX + 1"
                let expr_5043 := checked_add_t_uint256(expr_5041, convert_t_rational_1_by_1_to_t_uint256(expr_5042))

                let _425 := expr_5043

                ret := _425
            }

            function cleanup_t_rational_2_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_2_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_2_by_1(value)))
            }

            /// @src 26:1116:1175  "uint256 internal constant LEAF_OR_EXTENSION_NODE_LENGTH = 2"
            function constant_LEAF_OR_EXTENSION_NODE_LENGTH_5048() -> ret {
                /// @src 26:1174:1175  "2"
                let expr_5047 := 0x02
                let _429 := convert_t_rational_2_by_1_to_t_uint256(expr_5047)

                ret := _429
            }

            function store_literal_in_memory_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: received an unparsea")

                mstore(add(memPtr, 32), "ble node")

            }

            function abi_encode_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)
                store_literal_in_memory_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3_to_t_string_memory_ptr_fromStack( tail)

            }

            function read_from_memoryt_bytes1(ptr) -> returnValue {

                let value := cleanup_t_bytes1(mload(ptr))

                returnValue :=

                value

            }

            function shift_right_248_unsigned(value) -> newValue {
                newValue :=

                shr(248, value)

            }

            function convert_t_bytes1_to_t_uint8(value) -> converted {
                converted := convert_t_uint8_to_t_uint8(shift_right_248_unsigned(value))
            }

            function convert_t_rational_2_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_2_by_1(value)))
            }

            function mod_t_uint8(x, y) -> r {
                x := cleanup_t_uint8(x)
                y := cleanup_t_uint8(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function checked_sub_t_uint8(x, y) -> diff {
                x := cleanup_t_uint8(x)
                y := cleanup_t_uint8(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function store_literal_in_memory_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: path remainder must ")

                mstore(add(memPtr, 32), "share all nibbles with key")

            }

            function abi_encode_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @src 26:1518:1562  "uint8 internal constant PREFIX_LEAF_EVEN = 2"
            function constant_PREFIX_LEAF_EVEN_5060() -> ret {
                /// @src 26:1561:1562  "2"
                let expr_5059 := 0x02
                let _446 := convert_t_rational_2_by_1_to_t_uint8(expr_5059)

                ret := _446
            }

            function cleanup_t_rational_3_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_3_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_3_by_1(value)))
            }

            /// @src 26:1640:1683  "uint8 internal constant PREFIX_LEAF_ODD = 3"
            function constant_PREFIX_LEAF_ODD_5064() -> ret {
                /// @src 26:1682:1683  "3"
                let expr_5063 := 0x03
                let _448 := convert_t_rational_3_by_1_to_t_uint8(expr_5063)

                ret := _448
            }

            function convert_t_rational_0_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
            }

            /// @src 26:1259:1308  "uint8 internal constant PREFIX_EXTENSION_EVEN = 0"
            function constant_PREFIX_EXTENSION_EVEN_5052() -> ret {
                /// @src 26:1307:1308  "0"
                let expr_5051 := 0x00
                let _450 := convert_t_rational_0_by_1_to_t_uint8(expr_5051)

                ret := _450
            }

            /// @src 26:1391:1439  "uint8 internal constant PREFIX_EXTENSION_ODD = 1"
            function constant_PREFIX_EXTENSION_ODD_5056() -> ret {
                /// @src 26:1438:1439  "1"
                let expr_5055 := 0x01
                let _452 := convert_t_rational_1_by_1_to_t_uint8(expr_5055)

                ret := _452
            }

            function store_literal_in_memory_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: received a node with")

                mstore(add(memPtr, 32), " an unknown prefix")

            }

            function abi_encode_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70_to_t_string_memory_ptr_fromStack( tail)

            }

            function memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 32)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            function store_literal_in_memory_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: key remainder must b")

                mstore(add(memPtr, 32), "e identical to path remainder")

            }

            function abi_encode_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)
                store_literal_in_memory_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: value length must be")

                mstore(add(memPtr, 32), " greater than zero (leaf)")

            }

            function abi_encode_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 57)
                store_literal_in_memory_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: value node must be l")

                mstore(add(memPtr, 32), "ast node in proof (leaf)")

            }

            function abi_encode_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)
                store_literal_in_memory_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: value length must be")

                mstore(add(memPtr, 32), " greater than zero (branch)")

            }

            function abi_encode_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 59)
                store_literal_in_memory_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: value node must be l")

                mstore(add(memPtr, 32), "ast node in proof (branch)")

            }

            function abi_encode_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 58)
                store_literal_in_memory_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076(memPtr) {

                mstore(add(memPtr, 0), "MerkleTrie: ran out of proof ele")

                mstore(add(memPtr, 32), "ments")

            }

            function abi_encode_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)
                store_literal_in_memory_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076_to_t_string_memory_ptr_fromStack( tail)

            }

            /// @ast-id 5438
            /// @src 26:2954:9695  "function get(..."
            function fun_get_5438(var__key_5093_mpos, var__proof_5096_mpos, var__root_5098) -> var__5101_mpos {
                /// @src 26:3077:3089  "bytes memory"
                let zero_t_bytes_memory_ptr_385_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5101_mpos := zero_t_bytes_memory_ptr_385_mpos

                /// @src 26:3109:3113  "_key"
                let _386_mpos := var__key_5093_mpos
                let expr_5104_mpos := _386_mpos
                /// @src 26:3109:3120  "_key.length"
                let expr_5105 := array_length_t_bytes_memory_ptr(expr_5104_mpos)
                /// @src 26:3123:3124  "0"
                let expr_5106 := 0x00
                /// @src 26:3109:3124  "_key.length > 0"
                let expr_5107 := gt(cleanup_t_uint256(expr_5105), convert_t_rational_0_by_1_to_t_uint256(expr_5106))
                /// @src 26:3101:3150  "require(_key.length > 0, \"MerkleTrie: empty key\")"
                require_helper_t_stringliteral_17dfd6f947bddf18931410859a5573cdf382cb5bb1f99c6210bebd3fead2fea7(expr_5107)
                /// @src 26:3199:3205  "_proof"
                let _387_mpos := var__proof_5096_mpos
                let expr_5117_mpos := _387_mpos
                /// @src 26:3187:3206  "_parseProof(_proof)"
                let expr_5118_mpos := fun__parseProof_5498(expr_5117_mpos)
                /// @src 26:3161:3206  "TrieNode[] memory proof = _parseProof(_proof)"
                let var_proof_5115_mpos := expr_5118_mpos
                /// @src 26:3235:3240  "Bytes"
                let expr_5122_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:3251:3255  "_key"
                let _388_mpos := var__key_5093_mpos
                let expr_5124_mpos := _388_mpos
                /// @src 26:3235:3256  "Bytes.toNibbles(_key)"
                let expr_5125_mpos := fun_toNibbles_7218(expr_5124_mpos)
                /// @src 26:3216:3256  "bytes memory key = Bytes.toNibbles(_key)"
                let var_key_5121_mpos := expr_5125_mpos
                /// @src 26:3312:3317  "_root"
                let _389 := var__root_5098
                let expr_5131 := _389
                /// @src 26:3295:3318  "abi.encodePacked(_root)"

                let expr_5132_mpos := allocate_unbounded()
                let _390 := add(expr_5132_mpos, 0x20)

                let _391 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_390, expr_5131)
                mstore(expr_5132_mpos, sub(_391, add(expr_5132_mpos, 0x20)))
                finalize_allocation(expr_5132_mpos, sub(_391, expr_5132_mpos))
                /// @src 26:3266:3318  "bytes memory currentNodeID = abi.encodePacked(_root)"
                let var_currentNodeID_5128_mpos := expr_5132_mpos
                /// @src 26:3354:3355  "0"
                let expr_5136 := 0x00
                /// @src 26:3328:3355  "uint256 currentKeyIndex = 0"
                let var_currentKeyIndex_5135 := convert_t_rational_0_by_1_to_t_uint256(expr_5136)
                /// @src 26:3437:9631  "for (uint256 i = 0; i < proof.length; i++) {..."
                for {
                    /// @src 26:3454:3455  "0"
                    let expr_5140 := 0x00
                    /// @src 26:3442:3455  "uint256 i = 0"
                    let var_i_5139 := convert_t_rational_0_by_1_to_t_uint256(expr_5140)
                    } 1 {
                    /// @src 26:3475:3478  "i++"
                    let _393 := var_i_5139
                    let _392 := increment_t_uint256(_393)
                    var_i_5139 := _392
                    let expr_5147 := _393
                }
                {
                    /// @src 26:3457:3458  "i"
                    let _394 := var_i_5139
                    let expr_5142 := _394
                    /// @src 26:3461:3466  "proof"
                    let _395_mpos := var_proof_5115_mpos
                    let expr_5143_mpos := _395_mpos
                    /// @src 26:3461:3473  "proof.length"
                    let expr_5144 := array_length_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5143_mpos)
                    /// @src 26:3457:3473  "i < proof.length"
                    let expr_5145 := lt(cleanup_t_uint256(expr_5142), cleanup_t_uint256(expr_5144))
                    if iszero(expr_5145) { break }
                    /// @src 26:3524:3529  "proof"
                    let _396_mpos := var_proof_5115_mpos
                    let expr_5152_mpos := _396_mpos
                    /// @src 26:3530:3531  "i"
                    let _397 := var_i_5139
                    let expr_5153 := _397
                    /// @src 26:3524:3532  "proof[i]"
                    let _398_mpos := mload(memory_array_index_access_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5152_mpos, expr_5153))
                    let expr_5154_mpos := _398_mpos
                    /// @src 26:3494:3532  "TrieNode memory currentNode = proof[i]"
                    let var_currentNode_5151_mpos := expr_5154_mpos
                    /// @src 26:3661:3676  "currentKeyIndex"
                    let _399 := var_currentKeyIndex_5135
                    let expr_5157 := _399
                    /// @src 26:3680:3683  "key"
                    let _400_mpos := var_key_5121_mpos
                    let expr_5158_mpos := _400_mpos
                    /// @src 26:3680:3690  "key.length"
                    let expr_5159 := array_length_t_bytes_memory_ptr(expr_5158_mpos)
                    /// @src 26:3661:3690  "currentKeyIndex <= key.length"
                    let expr_5160 := iszero(gt(cleanup_t_uint256(expr_5157), cleanup_t_uint256(expr_5159)))
                    /// @src 26:3636:3770  "require(..."
                    require_helper_t_stringliteral_747adb1b361ddc1e95511e1d31ac90bd911f632b29f709cf7e15610b5ec189c7(expr_5160)
                    /// @src 26:3789:3804  "currentKeyIndex"
                    let _401 := var_currentKeyIndex_5135
                    let expr_5164 := _401
                    /// @src 26:3808:3809  "0"
                    let expr_5165 := 0x00
                    /// @src 26:3789:3809  "currentKeyIndex == 0"
                    let expr_5166 := eq(cleanup_t_uint256(expr_5164), convert_t_rational_0_by_1_to_t_uint256(expr_5165))
                    /// @src 26:3785:4680  "if (currentKeyIndex == 0) {..."
                    switch expr_5166
                    case 0 {
                        /// @src 26:4094:4105  "currentNode"
                        let _402_mpos := var_currentNode_5151_mpos
                        let expr_5183_mpos := _402_mpos
                        /// @src 26:4094:4113  "currentNode.encoded"
                        let _403 := add(expr_5183_mpos, 0)
                        let _404_mpos := mload(_403)
                        let expr_5184_mpos := _404_mpos
                        /// @src 26:4094:4120  "currentNode.encoded.length"
                        let expr_5185 := array_length_t_bytes_memory_ptr(expr_5184_mpos)
                        /// @src 26:4124:4126  "32"
                        let expr_5186 := 0x20
                        /// @src 26:4094:4126  "currentNode.encoded.length >= 32"
                        let expr_5187 := iszero(lt(cleanup_t_uint256(expr_5185), convert_t_rational_32_by_1_to_t_uint256(expr_5186)))
                        /// @src 26:4090:4680  "if (currentNode.encoded.length >= 32) {..."
                        switch expr_5187
                        case 0 {
                            /// @src 26:4538:4543  "Bytes"
                            let expr_5205_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:4550:4561  "currentNode"
                            let _405_mpos := var_currentNode_5151_mpos
                            let expr_5207_mpos := _405_mpos
                            /// @src 26:4550:4569  "currentNode.encoded"
                            let _406 := add(expr_5207_mpos, 0)
                            let _407_mpos := mload(_406)
                            let expr_5208_mpos := _407_mpos
                            /// @src 26:4571:4584  "currentNodeID"
                            let _408_mpos := var_currentNodeID_5128_mpos
                            let expr_5209_mpos := _408_mpos
                            /// @src 26:4538:4585  "Bytes.equal(currentNode.encoded, currentNodeID)"
                            let expr_5210 := fun_equal_7237(expr_5208_mpos, expr_5209_mpos)
                            /// @src 26:4509:4665  "require(..."
                            require_helper_t_stringliteral_9af34cd7ef45676d2266bb59dda96165657e450eb56a41e0cea137633f1d86b6(expr_5210)
                            /// @src 26:4090:4680  "if (currentNode.encoded.length >= 32) {..."
                        }
                        default {
                            /// @src 26:4251:4256  "Bytes"
                            let expr_5189_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:4290:4301  "currentNode"
                            let _409_mpos := var_currentNode_5151_mpos
                            let expr_5194_mpos := _409_mpos
                            /// @src 26:4290:4309  "currentNode.encoded"
                            let _410 := add(expr_5194_mpos, 0)
                            let _411_mpos := mload(_410)
                            let expr_5195_mpos := _411_mpos
                            /// @src 26:4280:4310  "keccak256(currentNode.encoded)"
                            let expr_5196 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_5195_mpos), array_length_t_bytes_memory_ptr(expr_5195_mpos))
                            /// @src 26:4263:4311  "abi.encodePacked(keccak256(currentNode.encoded))"

                            let expr_5197_mpos := allocate_unbounded()
                            let _412 := add(expr_5197_mpos, 0x20)

                            let _413 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_412, expr_5196)
                            mstore(expr_5197_mpos, sub(_413, add(expr_5197_mpos, 0x20)))
                            finalize_allocation(expr_5197_mpos, sub(_413, expr_5197_mpos))
                            /// @src 26:4313:4326  "currentNodeID"
                            let _414_mpos := var_currentNodeID_5128_mpos
                            let expr_5198_mpos := _414_mpos
                            /// @src 26:4251:4327  "Bytes.equal(abi.encodePacked(keccak256(currentNode.encoded)), currentNodeID)"
                            let expr_5199 := fun_equal_7237(expr_5197_mpos, expr_5198_mpos)
                            /// @src 26:4222:4408  "require(..."
                            require_helper_t_stringliteral_aa0e110f9f12fcd6157fb1b1e47852a950305dfac96bb19bb44ea49ab709a4c5(expr_5199)
                            /// @src 26:4090:4680  "if (currentNode.encoded.length >= 32) {..."
                        }
                        /// @src 26:3785:4680  "if (currentKeyIndex == 0) {..."
                    }
                    default {
                        /// @src 26:3922:3927  "Bytes"
                        let expr_5168_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                        /// @src 26:3961:3972  "currentNode"
                        let _415_mpos := var_currentNode_5151_mpos
                        let expr_5173_mpos := _415_mpos
                        /// @src 26:3961:3980  "currentNode.encoded"
                        let _416 := add(expr_5173_mpos, 0)
                        let _417_mpos := mload(_416)
                        let expr_5174_mpos := _417_mpos
                        /// @src 26:3951:3981  "keccak256(currentNode.encoded)"
                        let expr_5175 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_5174_mpos), array_length_t_bytes_memory_ptr(expr_5174_mpos))
                        /// @src 26:3934:3982  "abi.encodePacked(keccak256(currentNode.encoded))"

                        let expr_5176_mpos := allocate_unbounded()
                        let _418 := add(expr_5176_mpos, 0x20)

                        let _419 := abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack(_418, expr_5175)
                        mstore(expr_5176_mpos, sub(_419, add(expr_5176_mpos, 0x20)))
                        finalize_allocation(expr_5176_mpos, sub(_419, expr_5176_mpos))
                        /// @src 26:3984:3997  "currentNodeID"
                        let _420_mpos := var_currentNodeID_5128_mpos
                        let expr_5177_mpos := _420_mpos
                        /// @src 26:3922:3998  "Bytes.equal(abi.encodePacked(keccak256(currentNode.encoded)), currentNodeID)"
                        let expr_5178 := fun_equal_7237(expr_5176_mpos, expr_5177_mpos)
                        /// @src 26:3893:4069  "require(..."
                        require_helper_t_stringliteral_342558ec2bcba5b6370917c9dde6b4444464f0bb10525814d761abf26512f307(expr_5178)
                        /// @src 26:3785:4680  "if (currentKeyIndex == 0) {..."
                    }
                    /// @src 26:4698:4709  "currentNode"
                    let _421_mpos := var_currentNode_5151_mpos
                    let expr_5217_mpos := _421_mpos
                    /// @src 26:4698:4717  "currentNode.decoded"
                    let _422 := add(expr_5217_mpos, 32)
                    let _423_mpos := mload(_422)
                    let expr_5218_mpos := _423_mpos
                    /// @src 26:4698:4724  "currentNode.decoded.length"
                    let expr_5219 := array_length_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5218_mpos)
                    /// @src 26:4728:4746  "BRANCH_NODE_LENGTH"
                    let expr_5220 := constant_BRANCH_NODE_LENGTH_5044()
                    /// @src 26:4698:4746  "currentNode.decoded.length == BRANCH_NODE_LENGTH"
                    let expr_5221 := eq(cleanup_t_uint256(expr_5219), cleanup_t_uint256(expr_5220))
                    /// @src 26:4694:9621  "if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {..."
                    switch expr_5221
                    case 0 {
                        /// @src 26:6286:6297  "currentNode"
                        let _426_mpos := var_currentNode_5151_mpos
                        let expr_5289_mpos := _426_mpos
                        /// @src 26:6286:6305  "currentNode.decoded"
                        let _427 := add(expr_5289_mpos, 32)
                        let _428_mpos := mload(_427)
                        let expr_5290_mpos := _428_mpos
                        /// @src 26:6286:6312  "currentNode.decoded.length"
                        let expr_5291 := array_length_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5290_mpos)
                        /// @src 26:6316:6345  "LEAF_OR_EXTENSION_NODE_LENGTH"
                        let expr_5292 := constant_LEAF_OR_EXTENSION_NODE_LENGTH_5048()
                        /// @src 26:6286:6345  "currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH"
                        let expr_5293 := eq(cleanup_t_uint256(expr_5291), cleanup_t_uint256(expr_5292))
                        /// @src 26:6282:9621  "if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {..."
                        switch expr_5293
                        case 0 {
                            /// @src 26:9556:9606  "revert(\"MerkleTrie: received an unparseable node\")"
                            {
                                let _430 := allocate_unbounded()
                                mstore(_430, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                                let _431 := abi_encode_tuple_t_stringliteral_95382f7a15c87c763345b363940580cf3535857c9d5691b55367dbf0fa2a14a3__to_t_string_memory_ptr__fromStack(add(_430, 4) )
                                revert(_430, sub(_431, _430))
                            }/// @src 26:6282:9621  "if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {..."
                        }
                        default {
                            /// @src 26:6398:6409  "currentNode"
                            let _432_mpos := var_currentNode_5151_mpos
                            let expr_5297_mpos := _432_mpos
                            /// @src 26:6385:6410  "_getNodePath(currentNode)"
                            let expr_5298_mpos := fun__getNodePath_5543(expr_5297_mpos)
                            /// @src 26:6365:6410  "bytes memory path = _getNodePath(currentNode)"
                            let var_path_5295_mpos := expr_5298_mpos
                            /// @src 26:6449:6453  "path"
                            let _433_mpos := var_path_5295_mpos
                            let expr_5304_mpos := _433_mpos
                            /// @src 26:6454:6455  "0"
                            let expr_5305 := 0x00
                            /// @src 26:6449:6456  "path[0]"
                            let _434 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5304_mpos, convert_t_rational_0_by_1_to_t_uint256(expr_5305)))
                            let expr_5306 := _434
                            /// @src 26:6443:6457  "uint8(path[0])"
                            let expr_5307 := convert_t_bytes1_to_t_uint8(expr_5306)
                            /// @src 26:6428:6457  "uint8 prefix = uint8(path[0])"
                            let var_prefix_5301 := expr_5307
                            /// @src 26:6490:6491  "2"
                            let expr_5311 := 0x02
                            /// @src 26:6495:6501  "prefix"
                            let _435 := var_prefix_5301
                            let expr_5312 := _435
                            /// @src 26:6504:6505  "2"
                            let expr_5313 := 0x02
                            /// @src 26:6495:6505  "prefix % 2"
                            let expr_5314 := mod_t_uint8(expr_5312, convert_t_rational_2_by_1_to_t_uint8(expr_5313))

                            /// @src 26:6494:6506  "(prefix % 2)"
                            let expr_5315 := expr_5314
                            /// @src 26:6490:6506  "2 - (prefix % 2)"
                            let expr_5316 := checked_sub_t_uint8(convert_t_rational_2_by_1_to_t_uint8(expr_5311), expr_5315)

                            /// @src 26:6475:6506  "uint8 offset = 2 - (prefix % 2)"
                            let var_offset_5310 := expr_5316
                            /// @src 26:6553:6558  "Bytes"
                            let expr_5320_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:6565:6569  "path"
                            let _436_mpos := var_path_5295_mpos
                            let expr_5322_mpos := _436_mpos
                            /// @src 26:6571:6577  "offset"
                            let _437 := var_offset_5310
                            let expr_5323 := _437
                            /// @src 26:6553:6578  "Bytes.slice(path, offset)"
                            let _438 := convert_t_uint8_to_t_uint256(expr_5323)
                            let expr_5324_mpos := fun_slice_7149(expr_5322_mpos, _438)
                            /// @src 26:6524:6578  "bytes memory pathRemainder = Bytes.slice(path, offset)"
                            let var_pathRemainder_5319_mpos := expr_5324_mpos
                            /// @src 26:6624:6629  "Bytes"
                            let expr_5328_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                            /// @src 26:6636:6639  "key"
                            let _439_mpos := var_key_5121_mpos
                            let expr_5330_mpos := _439_mpos
                            /// @src 26:6641:6656  "currentKeyIndex"
                            let _440 := var_currentKeyIndex_5135
                            let expr_5331 := _440
                            /// @src 26:6624:6657  "Bytes.slice(key, currentKeyIndex)"
                            let expr_5332_mpos := fun_slice_7149(expr_5330_mpos, expr_5331)
                            /// @src 26:6596:6657  "bytes memory keyRemainder = Bytes.slice(key, currentKeyIndex)"
                            let var_keyRemainder_5327_mpos := expr_5332_mpos
                            /// @src 26:6727:6740  "pathRemainder"
                            let _441_mpos := var_pathRemainder_5319_mpos
                            let expr_5337_mpos := _441_mpos
                            /// @src 26:6742:6754  "keyRemainder"
                            let _442_mpos := var_keyRemainder_5327_mpos
                            let expr_5338_mpos := _442_mpos
                            /// @src 26:6704:6755  "_getSharedNibbleLength(pathRemainder, keyRemainder)"
                            let expr_5339 := fun__getSharedNibbleLength_5590(expr_5337_mpos, expr_5338_mpos)
                            /// @src 26:6675:6755  "uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder)"
                            let var_sharedNibbleLength_5335 := expr_5339
                            /// @src 26:7038:7051  "pathRemainder"
                            let _443_mpos := var_pathRemainder_5319_mpos
                            let expr_5342_mpos := _443_mpos
                            /// @src 26:7038:7058  "pathRemainder.length"
                            let expr_5343 := array_length_t_bytes_memory_ptr(expr_5342_mpos)
                            /// @src 26:7062:7080  "sharedNibbleLength"
                            let _444 := var_sharedNibbleLength_5335
                            let expr_5344 := _444
                            /// @src 26:7038:7080  "pathRemainder.length == sharedNibbleLength"
                            let expr_5345 := eq(cleanup_t_uint256(expr_5343), cleanup_t_uint256(expr_5344))
                            /// @src 26:7009:7180  "require(..."
                            require_helper_t_stringliteral_e00c0a3c263c4cd41f6878063f5ed597e0c0df3427662467867d311719309132(expr_5345)
                            /// @src 26:7203:7209  "prefix"
                            let _445 := var_prefix_5301
                            let expr_5349 := _445
                            /// @src 26:7213:7229  "PREFIX_LEAF_EVEN"
                            let expr_5350 := constant_PREFIX_LEAF_EVEN_5060()
                            /// @src 26:7203:7229  "prefix == PREFIX_LEAF_EVEN"
                            let expr_5351 := eq(cleanup_t_uint8(expr_5349), cleanup_t_uint8(expr_5350))
                            /// @src 26:7203:7258  "prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD"
                            let expr_5355 := expr_5351
                            if iszero(expr_5355) {
                                /// @src 26:7233:7239  "prefix"
                                let _447 := var_prefix_5301
                                let expr_5352 := _447
                                /// @src 26:7243:7258  "PREFIX_LEAF_ODD"
                                let expr_5353 := constant_PREFIX_LEAF_ODD_5064()
                                /// @src 26:7233:7258  "prefix == PREFIX_LEAF_ODD"
                                let expr_5354 := eq(cleanup_t_uint8(expr_5352), cleanup_t_uint8(expr_5353))
                                /// @src 26:7203:7258  "prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD"
                                expr_5355 := expr_5354
                            }
                            /// @src 26:7199:9518  "if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {..."
                            switch expr_5355
                            case 0 {
                                /// @src 26:8927:8933  "prefix"
                                let _449 := var_prefix_5301
                                let expr_5395 := _449
                                /// @src 26:8937:8958  "PREFIX_EXTENSION_EVEN"
                                let expr_5396 := constant_PREFIX_EXTENSION_EVEN_5052()
                                /// @src 26:8927:8958  "prefix == PREFIX_EXTENSION_EVEN"
                                let expr_5397 := eq(cleanup_t_uint8(expr_5395), cleanup_t_uint8(expr_5396))
                                /// @src 26:8927:8992  "prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD"
                                let expr_5401 := expr_5397
                                if iszero(expr_5401) {
                                    /// @src 26:8962:8968  "prefix"
                                    let _451 := var_prefix_5301
                                    let expr_5398 := _451
                                    /// @src 26:8972:8992  "PREFIX_EXTENSION_ODD"
                                    let expr_5399 := constant_PREFIX_EXTENSION_ODD_5056()
                                    /// @src 26:8962:8992  "prefix == PREFIX_EXTENSION_ODD"
                                    let expr_5400 := eq(cleanup_t_uint8(expr_5398), cleanup_t_uint8(expr_5399))
                                    /// @src 26:8927:8992  "prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD"
                                    expr_5401 := expr_5400
                                }
                                /// @src 26:8923:9518  "if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {..."
                                switch expr_5401
                                case 0 {
                                    /// @src 26:9439:9499  "revert(\"MerkleTrie: received a node with an unknown prefix\")"
                                    {
                                        let _453 := allocate_unbounded()
                                        mstore(_453, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                                        let _454 := abi_encode_tuple_t_stringliteral_17ad93750016927b4cf4c8dd57757d90269d88ab22c31584f8c502a02cc50c70__to_t_string_memory_ptr__fromStack(add(_453, 4) )
                                        revert(_453, sub(_454, _453))
                                    }/// @src 26:8923:9518  "if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {..."
                                }
                                default {
                                    /// @src 26:9310:9321  "currentNode"
                                    let _455_mpos := var_currentNode_5151_mpos
                                    let expr_5404_mpos := _455_mpos
                                    /// @src 26:9310:9329  "currentNode.decoded"
                                    let _456 := add(expr_5404_mpos, 32)
                                    let _457_mpos := mload(_456)
                                    let expr_5405_mpos := _457_mpos
                                    /// @src 26:9330:9331  "1"
                                    let expr_5406 := 0x01
                                    /// @src 26:9310:9332  "currentNode.decoded[1]"
                                    let _458_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5405_mpos, convert_t_rational_1_by_1_to_t_uint256(expr_5406)))
                                    let expr_5407_mpos := _458_mpos
                                    /// @src 26:9299:9333  "_getNodeID(currentNode.decoded[1])"
                                    let expr_5408_mpos := fun__getNodeID_5522(expr_5407_mpos)
                                    /// @src 26:9283:9333  "currentNodeID = _getNodeID(currentNode.decoded[1])"
                                    var_currentNodeID_5128_mpos := expr_5408_mpos
                                    let _459_mpos := var_currentNodeID_5128_mpos
                                    let expr_5409_mpos := _459_mpos
                                    /// @src 26:9374:9392  "sharedNibbleLength"
                                    let _460 := var_sharedNibbleLength_5335
                                    let expr_5412 := _460
                                    /// @src 26:9355:9392  "currentKeyIndex += sharedNibbleLength"
                                    let _461 := var_currentKeyIndex_5135
                                    let expr_5413 := checked_add_t_uint256(_461, expr_5412)

                                    var_currentKeyIndex_5135 := expr_5413
                                    /// @src 26:8923:9518  "if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {..."
                                }
                                /// @src 26:7199:9518  "if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {..."
                            }
                            default {
                                /// @src 26:7876:7888  "keyRemainder"
                                let _462_mpos := var_keyRemainder_5327_mpos
                                let expr_5357_mpos := _462_mpos
                                /// @src 26:7876:7895  "keyRemainder.length"
                                let expr_5358 := array_length_t_bytes_memory_ptr(expr_5357_mpos)
                                /// @src 26:7899:7917  "sharedNibbleLength"
                                let _463 := var_sharedNibbleLength_5335
                                let expr_5359 := _463
                                /// @src 26:7876:7917  "keyRemainder.length == sharedNibbleLength"
                                let expr_5360 := eq(cleanup_t_uint256(expr_5358), cleanup_t_uint256(expr_5359))
                                /// @src 26:7843:8028  "require(..."
                                require_helper_t_stringliteral_67315a0e77a5536b39d0c39f888d5fdda6e387450ff0a5b97b04ce6f37156da2(expr_5360)
                                /// @src 26:8398:8407  "RLPReader"
                                let expr_5366_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                                /// @src 26:8418:8429  "currentNode"
                                let _464_mpos := var_currentNode_5151_mpos
                                let expr_5368_mpos := _464_mpos
                                /// @src 26:8418:8437  "currentNode.decoded"
                                let _465 := add(expr_5368_mpos, 32)
                                let _466_mpos := mload(_465)
                                let expr_5369_mpos := _466_mpos
                                /// @src 26:8438:8439  "1"
                                let expr_5370 := 0x01
                                /// @src 26:8418:8440  "currentNode.decoded[1]"
                                let _467_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5369_mpos, convert_t_rational_1_by_1_to_t_uint256(expr_5370)))
                                let expr_5371_mpos := _467_mpos
                                /// @src 26:8398:8441  "RLPReader.readBytes(currentNode.decoded[1])"
                                let expr_5372_mpos := fun_readBytes_7471(expr_5371_mpos)
                                /// @src 26:8377:8441  "bytes memory value = RLPReader.readBytes(currentNode.decoded[1])"
                                let var_value_5365_mpos := expr_5372_mpos
                                /// @src 26:8496:8501  "value"
                                let _468_mpos := var_value_5365_mpos
                                let expr_5375_mpos := _468_mpos
                                /// @src 26:8496:8508  "value.length"
                                let expr_5376 := array_length_t_bytes_memory_ptr(expr_5375_mpos)
                                /// @src 26:8511:8512  "0"
                                let expr_5377 := 0x00
                                /// @src 26:8496:8512  "value.length > 0"
                                let expr_5378 := gt(cleanup_t_uint256(expr_5376), convert_t_rational_0_by_1_to_t_uint256(expr_5377))
                                /// @src 26:8463:8619  "require(..."
                                require_helper_t_stringliteral_5071dda95a1eccba38d20abf92e4593bf594fe0eaab818c9628ffbdd69190c3a(expr_5378)
                                /// @src 26:8736:8737  "i"
                                let _469 := var_i_5139
                                let expr_5383 := _469
                                /// @src 26:8741:8746  "proof"
                                let _470_mpos := var_proof_5115_mpos
                                let expr_5384_mpos := _470_mpos
                                /// @src 26:8741:8753  "proof.length"
                                let expr_5385 := array_length_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5384_mpos)
                                /// @src 26:8756:8757  "1"
                                let expr_5386 := 0x01
                                /// @src 26:8741:8757  "proof.length - 1"
                                let expr_5387 := checked_sub_t_uint256(expr_5385, convert_t_rational_1_by_1_to_t_uint256(expr_5386))

                                /// @src 26:8736:8757  "i == proof.length - 1"
                                let expr_5388 := eq(cleanup_t_uint256(expr_5383), cleanup_t_uint256(expr_5387))
                                /// @src 26:8703:8863  "require(..."
                                require_helper_t_stringliteral_56830735fd39b228c902ab2ed7133b442a549106a2e2a841e399162f79a7b994(expr_5388)
                                /// @src 26:8893:8898  "value"
                                let _471_mpos := var_value_5365_mpos
                                let expr_5392_mpos := _471_mpos
                                /// @src 26:8886:8898  "return value"
                                var__5101_mpos := expr_5392_mpos
                                leave
                                /// @src 26:7199:9518  "if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {..."
                            }
                            /// @src 26:6282:9621  "if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {..."
                        }
                        /// @src 26:4694:9621  "if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {..."
                    }
                    default {
                        /// @src 26:4770:4785  "currentKeyIndex"
                        let _472 := var_currentKeyIndex_5135
                        let expr_5222 := _472
                        /// @src 26:4789:4792  "key"
                        let _473_mpos := var_key_5121_mpos
                        let expr_5223_mpos := _473_mpos
                        /// @src 26:4789:4799  "key.length"
                        let expr_5224 := array_length_t_bytes_memory_ptr(expr_5223_mpos)
                        /// @src 26:4770:4799  "currentKeyIndex == key.length"
                        let expr_5225 := eq(cleanup_t_uint256(expr_5222), cleanup_t_uint256(expr_5224))
                        /// @src 26:4766:6262  "if (currentKeyIndex == key.length) {..."
                        switch expr_5225
                        case 0 {
                            /// @src 26:6034:6037  "key"
                            let _474_mpos := var_key_5121_mpos
                            let expr_5261_mpos := _474_mpos
                            /// @src 26:6038:6053  "currentKeyIndex"
                            let _475 := var_currentKeyIndex_5135
                            let expr_5262 := _475
                            /// @src 26:6034:6054  "key[currentKeyIndex]"
                            let _476 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5261_mpos, expr_5262))
                            let expr_5263 := _476
                            /// @src 26:6028:6055  "uint8(key[currentKeyIndex])"
                            let expr_5264 := convert_t_bytes1_to_t_uint8(expr_5263)
                            /// @src 26:6010:6055  "uint8 branchKey = uint8(key[currentKeyIndex])"
                            let var_branchKey_5258 := expr_5264
                            /// @src 26:6113:6124  "currentNode"
                            let _477_mpos := var_currentNode_5151_mpos
                            let expr_5271_mpos := _477_mpos
                            /// @src 26:6113:6132  "currentNode.decoded"
                            let _478 := add(expr_5271_mpos, 32)
                            let _479_mpos := mload(_478)
                            let expr_5272_mpos := _479_mpos
                            /// @src 26:6133:6142  "branchKey"
                            let _480 := var_branchKey_5258
                            let expr_5273 := _480
                            /// @src 26:6113:6143  "currentNode.decoded[branchKey]"
                            let _481_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5272_mpos, convert_t_uint8_to_t_uint256(expr_5273)))
                            let expr_5274_mpos := _481_mpos
                            /// @src 26:6077:6143  "RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey]"
                            let var_nextNode_5270_mpos := expr_5274_mpos
                            /// @src 26:6192:6200  "nextNode"
                            let _482_mpos := var_nextNode_5270_mpos
                            let expr_5278_mpos := _482_mpos
                            /// @src 26:6181:6201  "_getNodeID(nextNode)"
                            let expr_5279_mpos := fun__getNodeID_5522(expr_5278_mpos)
                            /// @src 26:6165:6201  "currentNodeID = _getNodeID(nextNode)"
                            var_currentNodeID_5128_mpos := expr_5279_mpos
                            let _483_mpos := var_currentNodeID_5128_mpos
                            let expr_5280_mpos := _483_mpos
                            /// @src 26:6242:6243  "1"
                            let expr_5283 := 0x01
                            /// @src 26:6223:6243  "currentKeyIndex += 1"
                            let _484 := convert_t_rational_1_by_1_to_t_uint256(expr_5283)
                            let _485 := var_currentKeyIndex_5135
                            let expr_5284 := checked_add_t_uint256(_485, _484)

                            var_currentKeyIndex_5135 := expr_5284
                            /// @src 26:4766:6262  "if (currentKeyIndex == key.length) {..."
                        }
                        default {
                            /// @src 26:5310:5319  "RLPReader"
                            let expr_5228_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                            /// @src 26:5330:5341  "currentNode"
                            let _486_mpos := var_currentNode_5151_mpos
                            let expr_5230_mpos := _486_mpos
                            /// @src 26:5330:5349  "currentNode.decoded"
                            let _487 := add(expr_5230_mpos, 32)
                            let _488_mpos := mload(_487)
                            let expr_5231_mpos := _488_mpos
                            /// @src 26:5350:5360  "TREE_RADIX"
                            let expr_5232 := constant_TREE_RADIX_5038()
                            /// @src 26:5330:5361  "currentNode.decoded[TREE_RADIX]"
                            let _489_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5231_mpos, expr_5232))
                            let expr_5233_mpos := _489_mpos
                            /// @src 26:5310:5362  "RLPReader.readBytes(currentNode.decoded[TREE_RADIX])"
                            let expr_5234_mpos := fun_readBytes_7471(expr_5233_mpos)
                            /// @src 26:5289:5362  "bytes memory value = RLPReader.readBytes(currentNode.decoded[TREE_RADIX])"
                            let var_value_5227_mpos := expr_5234_mpos
                            /// @src 26:5417:5422  "value"
                            let _490_mpos := var_value_5227_mpos
                            let expr_5237_mpos := _490_mpos
                            /// @src 26:5417:5429  "value.length"
                            let expr_5238 := array_length_t_bytes_memory_ptr(expr_5237_mpos)
                            /// @src 26:5432:5433  "0"
                            let expr_5239 := 0x00
                            /// @src 26:5417:5433  "value.length > 0"
                            let expr_5240 := gt(cleanup_t_uint256(expr_5238), convert_t_rational_0_by_1_to_t_uint256(expr_5239))
                            /// @src 26:5384:5542  "require(..."
                            require_helper_t_stringliteral_8775b11e5be9767bdebc551fa79ad29ea4537352f4a48485de1a8db83bbe60c4(expr_5240)
                            /// @src 26:5659:5660  "i"
                            let _491 := var_i_5139
                            let expr_5245 := _491
                            /// @src 26:5664:5669  "proof"
                            let _492_mpos := var_proof_5115_mpos
                            let expr_5246_mpos := _492_mpos
                            /// @src 26:5664:5676  "proof.length"
                            let expr_5247 := array_length_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5246_mpos)
                            /// @src 26:5679:5680  "1"
                            let expr_5248 := 0x01
                            /// @src 26:5664:5680  "proof.length - 1"
                            let expr_5249 := checked_sub_t_uint256(expr_5247, convert_t_rational_1_by_1_to_t_uint256(expr_5248))

                            /// @src 26:5659:5680  "i == proof.length - 1"
                            let expr_5250 := eq(cleanup_t_uint256(expr_5245), cleanup_t_uint256(expr_5249))
                            /// @src 26:5626:5788  "require(..."
                            require_helper_t_stringliteral_28518a26784b4bfc3bd75a215bb0df5bf2cba18845fca6d5d9ed89fab561e0ed(expr_5250)
                            /// @src 26:5818:5823  "value"
                            let _493_mpos := var_value_5227_mpos
                            let expr_5254_mpos := _493_mpos
                            /// @src 26:5811:5823  "return value"
                            var__5101_mpos := expr_5254_mpos
                            leave
                            /// @src 26:4766:6262  "if (currentKeyIndex == key.length) {..."
                        }
                        /// @src 26:4694:9621  "if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {..."
                    }
                }
                /// @src 26:9641:9688  "revert(\"MerkleTrie: ran out of proof elements\")"
                {
                    let _494 := allocate_unbounded()
                    mstore(_494, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                    let _495 := abi_encode_tuple_t_stringliteral_3e37143e66f54939727845d07716cdc57b7efc6dc9f278b14a48ffe711866076__to_t_string_memory_ptr__fromStack(add(_494, 4) )
                    revert(_494, sub(_495, _494))
                }
            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr() -> ret {
                ret := 96
            }

            function array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_allocation_size_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := mul(length, 0x20)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function allocate_memory_struct_t_struct$_TrieNode_$5034_memory_ptr() -> memPtr {
                memPtr := allocate_memory(64)
            }

            function zero_value_for_t_bytes_memory_ptr() -> ret {
                ret := 96
            }

            function zero_value_for_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr() -> ret {
                ret := 96
            }

            function allocate_and_zero_memory_struct_t_struct$_TrieNode_$5034_memory_ptr() -> memPtr {
                memPtr := allocate_memory_struct_t_struct$_TrieNode_$5034_memory_ptr()
                let offset := memPtr

                mstore(offset, zero_value_for_t_bytes_memory_ptr())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr())
                offset := add(offset, 32)

            }

            function zero_value_for_t_struct$_TrieNode_$5034_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_TrieNode_$5034_memory_ptr()
            }

            function zero_complex_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes) {
                for {let i := 0} lt(i, dataSizeInBytes) { i := add(i, 32) } {
                    mstore(add(dataStart, i), zero_value_for_t_struct$_TrieNode_$5034_memory_ptr())
                }
            }

            function allocate_and_zero_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_complex_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)
            }

            function memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 32)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            function allocate_memory_struct_t_struct$_TrieNode_$5034_storage_ptr() -> memPtr {
                memPtr := allocate_memory(64)
            }

            function write_to_memory_t_bytes_memory_ptr(memPtr, value) {
                mstore(memPtr, value)
            }

            function write_to_memory_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(memPtr, value) {
                mstore(memPtr, value)
            }

            function increment_wrapping_t_uint256(value) -> ret {
                ret := cleanup_t_uint256(add(value, 1))
            }

            /// @ast-id 5498
            /// @src 26:10004:10426  "function _parseProof(bytes[] memory _proof) private pure returns (TrieNode[] memory) {..."
            function fun__parseProof_5498(var__proof_5442_mpos) -> var__5447_mpos {
                /// @src 26:10070:10087  "TrieNode[] memory"
                let zero_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr_496_mpos := zero_value_for_split_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr()
                var__5447_mpos := zero_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr_496_mpos

                /// @src 26:10116:10122  "_proof"
                let _497_mpos := var__proof_5442_mpos
                let expr_5451_mpos := _497_mpos
                /// @src 26:10116:10129  "_proof.length"
                let expr_5452 := array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5451_mpos)
                /// @src 26:10099:10129  "uint256 length = _proof.length"
                let var_length_5450 := expr_5452
                /// @src 26:10180:10186  "length"
                let _498 := var_length_5450
                let expr_5463 := _498
                /// @src 26:10165:10187  "new TrieNode[](length)"
                let expr_5464_mpos := allocate_and_zero_memory_array_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5463)
                /// @src 26:10139:10187  "TrieNode[] memory proof = new TrieNode[](length)"
                let var_proof_5458_mpos := expr_5464_mpos
                /// @src 26:10197:10398  "for (uint256 i = 0; i < length; ) {..."
                for {
                    /// @src 26:10214:10215  "0"
                    let expr_5468 := 0x00
                    /// @src 26:10202:10215  "uint256 i = 0"
                    let var_i_5467 := convert_t_rational_0_by_1_to_t_uint256(expr_5468)
                    } 1 {
                }
                {
                    /// @src 26:10217:10218  "i"
                    let _499 := var_i_5467
                    let expr_5470 := _499
                    /// @src 26:10221:10227  "length"
                    let _500 := var_length_5450
                    let expr_5471 := _500
                    /// @src 26:10217:10227  "i < length"
                    let expr_5472 := lt(cleanup_t_uint256(expr_5470), cleanup_t_uint256(expr_5471))
                    if iszero(expr_5472) { break }
                    /// @src 26:10276:10282  "_proof"
                    let _501_mpos := var__proof_5442_mpos
                    let expr_5477_mpos := _501_mpos
                    /// @src 26:10283:10284  "i"
                    let _502 := var_i_5467
                    let expr_5478 := _502
                    /// @src 26:10276:10285  "_proof[i]"
                    let _503_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5477_mpos, expr_5478))
                    let expr_5479_mpos := _503_mpos
                    /// @src 26:10296:10305  "RLPReader"
                    let expr_5480_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10315:10321  "_proof"
                    let _504_mpos := var__proof_5442_mpos
                    let expr_5482_mpos := _504_mpos
                    /// @src 26:10322:10323  "i"
                    let _505 := var_i_5467
                    let expr_5483 := _505
                    /// @src 26:10315:10324  "_proof[i]"
                    let _506_mpos := mload(memory_array_index_access_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(expr_5482_mpos, expr_5483))
                    let expr_5484_mpos := _506_mpos
                    /// @src 26:10296:10325  "RLPReader.readList(_proof[i])"
                    let expr_5485_mpos := fun_readList_7425(expr_5484_mpos)
                    /// @src 26:10256:10328  "TrieNode({ encoded: _proof[i], decoded: RLPReader.readList(_proof[i]) })"
                    let expr_5486_mpos := allocate_memory_struct_t_struct$_TrieNode_$5034_storage_ptr()
                    write_to_memory_t_bytes_memory_ptr(add(expr_5486_mpos, 0), expr_5479_mpos)
                    write_to_memory_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(add(expr_5486_mpos, 32), expr_5485_mpos)
                    /// @src 26:10245:10250  "proof"
                    let _507_mpos := var_proof_5458_mpos
                    let expr_5473_mpos := _507_mpos
                    /// @src 26:10251:10252  "i"
                    let _508 := var_i_5467
                    let expr_5474 := _508
                    /// @src 26:10245:10328  "proof[i] = TrieNode({ encoded: _proof[i], decoded: RLPReader.readList(_proof[i]) })"
                    mstore(memory_array_index_access_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5473_mpos, expr_5474), expr_5486_mpos)
                    let _509_mpos := mload(memory_array_index_access_t_array$_t_struct$_TrieNode_$5034_memory_ptr_$dyn_memory_ptr(expr_5473_mpos, expr_5474))
                    let expr_5487_mpos := _509_mpos
                    /// @src 26:10370:10373  "++i"
                    let _511 := var_i_5467
                    let _510 := increment_wrapping_t_uint256(_511)
                    var_i_5467 := _510
                    let expr_5490 := _510
                }
                /// @src 26:10414:10419  "proof"
                let _512_mpos := var_proof_5458_mpos
                let expr_5495_mpos := _512_mpos
                /// @src 26:10407:10419  "return proof"
                var__5447_mpos := expr_5495_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 5522
            /// @src 26:10745:10935  "function _getNodeID(RLPReader.RLPItem memory _node) private pure returns (bytes memory) {..."
            function fun__getNodeID_5522(var__node_5502_mpos) -> var__5505_mpos {
                /// @src 26:10819:10831  "bytes memory"
                let zero_t_bytes_memory_ptr_513_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5505_mpos := zero_t_bytes_memory_ptr_513_mpos

                /// @src 26:10850:10855  "_node"
                let _514_mpos := var__node_5502_mpos
                let expr_5507_mpos := _514_mpos
                /// @src 26:10850:10862  "_node.length"
                let _515 := add(expr_5507_mpos, 0)
                let _516 := read_from_memoryt_uint256(_515)
                let expr_5508 := _516
                /// @src 26:10865:10867  "32"
                let expr_5509 := 0x20
                /// @src 26:10850:10867  "_node.length < 32"
                let expr_5510 := lt(cleanup_t_uint256(expr_5508), convert_t_rational_32_by_1_to_t_uint256(expr_5509))
                /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                let expr_5519_mpos
                switch expr_5510
                case 0 {
                    /// @src 26:10902:10911  "RLPReader"
                    let expr_5515_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10922:10927  "_node"
                    let _517_mpos := var__node_5502_mpos
                    let expr_5517_mpos := _517_mpos
                    /// @src 26:10902:10928  "RLPReader.readBytes(_node)"
                    let expr_5518_mpos := fun_readBytes_7471(expr_5517_mpos)
                    /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                    expr_5519_mpos := expr_5518_mpos
                }
                default {
                    /// @src 26:10870:10879  "RLPReader"
                    let expr_5511_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                    /// @src 26:10893:10898  "_node"
                    let _518_mpos := var__node_5502_mpos
                    let expr_5513_mpos := _518_mpos
                    /// @src 26:10870:10899  "RLPReader.readRawBytes(_node)"
                    let expr_5514_mpos := fun_readRawBytes_7504(expr_5513_mpos)
                    /// @src 26:10850:10928  "_node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                    expr_5519_mpos := expr_5514_mpos
                }
                /// @src 26:10843:10928  "return _node.length < 32 ? RLPReader.readRawBytes(_node) : RLPReader.readBytes(_node)"
                var__5505_mpos := expr_5519_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 5543
            /// @src 26:11134:11293  "function _getNodePath(TrieNode memory _node) private pure returns (bytes memory) {..."
            function fun__getNodePath_5543(var__node_5526_mpos) -> var__5529_mpos {
                /// @src 26:11201:11213  "bytes memory"
                let zero_t_bytes_memory_ptr_519_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__5529_mpos := zero_t_bytes_memory_ptr_519_mpos

                /// @src 26:11232:11237  "Bytes"
                let expr_5531_address := linkersymbol("contracts/libraries/Bytes.sol:Bytes")
                /// @src 26:11248:11257  "RLPReader"
                let expr_5533_address := linkersymbol("contracts/libraries/rlp/RLPReader.sol:RLPReader")
                /// @src 26:11268:11273  "_node"
                let _520_mpos := var__node_5526_mpos
                let expr_5535_mpos := _520_mpos
                /// @src 26:11268:11281  "_node.decoded"
                let _521 := add(expr_5535_mpos, 32)
                let _522_mpos := mload(_521)
                let expr_5536_mpos := _522_mpos
                /// @src 26:11282:11283  "0"
                let expr_5537 := 0x00
                /// @src 26:11268:11284  "_node.decoded[0]"
                let _523_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_5536_mpos, convert_t_rational_0_by_1_to_t_uint256(expr_5537)))
                let expr_5538_mpos := _523_mpos
                /// @src 26:11248:11285  "RLPReader.readBytes(_node.decoded[0])"
                let expr_5539_mpos := fun_readBytes_7471(expr_5538_mpos)
                /// @src 26:11232:11286  "Bytes.toNibbles(RLPReader.readBytes(_node.decoded[0]))"
                let expr_5540_mpos := fun_toNibbles_7218(expr_5539_mpos)
                /// @src 26:11225:11286  "return Bytes.toNibbles(RLPReader.readBytes(_node.decoded[0]))"
                var__5529_mpos := expr_5540_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 5590
            /// @src 26:11536:11921  "function _getSharedNibbleLength(bytes memory _a, bytes memory _b)..."
            function fun__getSharedNibbleLength_5590(var__a_5546_mpos, var__b_5548_mpos) -> var__5551 {
                /// @src 26:11648:11655  "uint256"
                let zero_t_uint256_524 := zero_value_for_split_t_uint256()
                var__5551 := zero_t_uint256_524

                /// @src 26:11671:11685  "uint256 shared"
                let var_shared_5554
                let zero_t_uint256_525 := zero_value_for_split_t_uint256()
                var_shared_5554 := zero_t_uint256_525
                /// @src 26:11710:11712  "_a"
                let _526_mpos := var__a_5546_mpos
                let expr_5558_mpos := _526_mpos
                /// @src 26:11710:11719  "_a.length"
                let expr_5559 := array_length_t_bytes_memory_ptr(expr_5558_mpos)
                /// @src 26:11722:11724  "_b"
                let _527_mpos := var__b_5548_mpos
                let expr_5560_mpos := _527_mpos
                /// @src 26:11722:11731  "_b.length"
                let expr_5561 := array_length_t_bytes_memory_ptr(expr_5560_mpos)
                /// @src 26:11710:11731  "_a.length < _b.length"
                let expr_5562 := lt(cleanup_t_uint256(expr_5559), cleanup_t_uint256(expr_5561))
                /// @src 26:11709:11732  "(_a.length < _b.length)"
                let expr_5563 := expr_5562
                /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                let expr_5568
                switch expr_5563
                case 0 {
                    /// @src 26:11747:11749  "_b"
                    let _528_mpos := var__b_5548_mpos
                    let expr_5566_mpos := _528_mpos
                    /// @src 26:11747:11756  "_b.length"
                    let expr_5567 := array_length_t_bytes_memory_ptr(expr_5566_mpos)
                    /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                    expr_5568 := expr_5567
                }
                default {
                    /// @src 26:11735:11737  "_a"
                    let _529_mpos := var__a_5546_mpos
                    let expr_5564_mpos := _529_mpos
                    /// @src 26:11735:11744  "_a.length"
                    let expr_5565 := array_length_t_bytes_memory_ptr(expr_5564_mpos)
                    /// @src 26:11709:11756  "(_a.length < _b.length) ? _a.length : _b.length"
                    expr_5568 := expr_5565
                }
                /// @src 26:11695:11756  "uint256 max = (_a.length < _b.length) ? _a.length : _b.length"
                let var_max_5557 := expr_5568
                /// @src 26:11766:11892  "for (; shared < max && _a[shared] == _b[shared]; ) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 26:11773:11779  "shared"
                    let _530 := var_shared_5554
                    let expr_5570 := _530
                    /// @src 26:11782:11785  "max"
                    let _531 := var_max_5557
                    let expr_5571 := _531
                    /// @src 26:11773:11785  "shared < max"
                    let expr_5572 := lt(cleanup_t_uint256(expr_5570), cleanup_t_uint256(expr_5571))
                    /// @src 26:11773:11813  "shared < max && _a[shared] == _b[shared]"
                    let expr_5580 := expr_5572
                    if expr_5580 {
                        /// @src 26:11789:11791  "_a"
                        let _532_mpos := var__a_5546_mpos
                        let expr_5573_mpos := _532_mpos
                        /// @src 26:11792:11798  "shared"
                        let _533 := var_shared_5554
                        let expr_5574 := _533
                        /// @src 26:11789:11799  "_a[shared]"
                        let _534 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5573_mpos, expr_5574))
                        let expr_5575 := _534
                        /// @src 26:11803:11805  "_b"
                        let _535_mpos := var__b_5548_mpos
                        let expr_5576_mpos := _535_mpos
                        /// @src 26:11806:11812  "shared"
                        let _536 := var_shared_5554
                        let expr_5577 := _536
                        /// @src 26:11803:11813  "_b[shared]"
                        let _537 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_5576_mpos, expr_5577))
                        let expr_5578 := _537
                        /// @src 26:11789:11813  "_a[shared] == _b[shared]"
                        let expr_5579 := eq(cleanup_t_bytes1(expr_5575), cleanup_t_bytes1(expr_5578))
                        /// @src 26:11773:11813  "shared < max && _a[shared] == _b[shared]"
                        expr_5580 := expr_5579
                    }
                    if iszero(expr_5580) { break }
                    /// @src 26:11859:11867  "++shared"
                    let _539 := var_shared_5554
                    let _538 := increment_wrapping_t_uint256(_539)
                    var_shared_5554 := _538
                    let expr_5582 := _538
                }
                /// @src 26:11908:11914  "shared"
                let _540 := var_shared_5554
                let expr_5587 := _540
                /// @src 26:11901:11914  "return shared"
                var__5551 := expr_5587
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 6362
            /// @src 8:311:413  "function max(int256 a, int256 b) internal pure returns (int256) {..."
            function fun_max_6362(var_a_6347, var_b_6349) -> var__6352 {
                /// @src 8:367:373  "int256"
                let zero_t_int256_541 := zero_value_for_split_t_int256()
                var__6352 := zero_t_int256_541

                /// @src 8:392:393  "a"
                let _542 := var_a_6347
                let expr_6354 := _542
                /// @src 8:397:398  "b"
                let _543 := var_b_6349
                let expr_6355 := _543
                /// @src 8:392:398  "a >= b"
                let expr_6356 := iszero(slt(cleanup_t_int256(expr_6354), cleanup_t_int256(expr_6355)))
                /// @src 8:392:406  "a >= b ? a : b"
                let expr_6359
                switch expr_6356
                case 0 {
                    /// @src 8:405:406  "b"
                    let _544 := var_b_6349
                    let expr_6358 := _544
                    /// @src 8:392:406  "a >= b ? a : b"
                    expr_6359 := expr_6358
                }
                default {
                    /// @src 8:401:402  "a"
                    let _545 := var_a_6347
                    let expr_6357 := _545
                    /// @src 8:392:406  "a >= b ? a : b"
                    expr_6359 := expr_6357
                }
                /// @src 8:385:406  "return a >= b ? a : b"
                var__6352 := expr_6359
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 6380
            /// @src 8:491:592  "function min(int256 a, int256 b) internal pure returns (int256) {..."
            function fun_min_6380(var_a_6365, var_b_6367) -> var__6370 {
                /// @src 8:547:553  "int256"
                let zero_t_int256_546 := zero_value_for_split_t_int256()
                var__6370 := zero_t_int256_546

                /// @src 8:572:573  "a"
                let _547 := var_a_6365
                let expr_6372 := _547
                /// @src 8:576:577  "b"
                let _548 := var_b_6367
                let expr_6373 := _548
                /// @src 8:572:577  "a < b"
                let expr_6374 := slt(cleanup_t_int256(expr_6372), cleanup_t_int256(expr_6373))
                /// @src 8:572:585  "a < b ? a : b"
                let expr_6377
                switch expr_6374
                case 0 {
                    /// @src 8:584:585  "b"
                    let _549 := var_b_6367
                    let expr_6376 := _549
                    /// @src 8:572:585  "a < b ? a : b"
                    expr_6377 := expr_6376
                }
                default {
                    /// @src 8:580:581  "a"
                    let _550 := var_a_6365
                    let expr_6375 := _550
                    /// @src 8:572:585  "a < b ? a : b"
                    expr_6377 := expr_6375
                }
                /// @src 8:565:585  "return a < b ? a : b"
                var__6370 := expr_6377
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function convert_t_rational_1000000000000000000_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1000000000000000000_by_1(value)))
            }

            /// @src 9:459:495  "uint256 internal constant WAD = 1e18"
            function constant_WAD_6452() -> ret {
                /// @src 9:491:495  "1e18"
                let expr_6451 := 0x0de0b6b3a7640000
                let _554 := convert_t_rational_1000000000000000000_by_1_to_t_uint256(expr_6451)

                ret := _554
            }

            /// @ast-id 6540
            /// @src 9:1208:1481  "function powWad(int256 x, int256 y) internal pure returns (int256) {..."
            function fun_powWad_6540(var_x_6518, var_y_6520) -> var__6523 {
                /// @src 9:1267:1273  "int256"
                let zero_t_int256_551 := zero_value_for_split_t_int256()
                var__6523 := zero_t_int256_551

                /// @src 9:1405:1406  "x"
                let _552 := var_x_6518
                let expr_6527 := _552
                /// @src 9:1399:1407  "lnWad(x)"
                let expr_6528 := fun_lnWad_6960(expr_6527)
                /// @src 9:1410:1411  "y"
                let _553 := var_y_6520
                let expr_6529 := _553
                /// @src 9:1399:1411  "lnWad(x) * y"
                let expr_6530 := checked_mul_t_int256(expr_6528, expr_6529)

                /// @src 9:1398:1412  "(lnWad(x) * y)"
                let expr_6531 := expr_6530
                /// @src 9:1422:1425  "WAD"
                let expr_6534 := constant_WAD_6452()
                /// @src 9:1415:1426  "int256(WAD)"
                let expr_6535 := convert_t_uint256_to_t_int256(expr_6534)
                /// @src 9:1398:1426  "(lnWad(x) * y) / int256(WAD)"
                let expr_6536 := checked_div_t_int256(expr_6531, expr_6535)

                /// @src 9:1391:1427  "expWad((lnWad(x) * y) / int256(WAD))"
                let expr_6537 := fun_expWad_6735(expr_6536)
                /// @src 9:1384:1427  "return expWad((lnWad(x) * y) / int256(WAD))"
                var__6523 := expr_6537
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_rational_minus_42139678854452767551_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_minus_42139678854452767551_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_minus_42139678854452767551_by_1(value)))
            }

            function convert_t_rational_0_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_0_by_1(value)))
            }

            function cleanup_t_rational_135305999368893231589_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_135305999368893231589_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_135305999368893231589_by_1(value)))
            }

            function store_literal_in_memory_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7(memPtr) {

                mstore(add(memPtr, 0), "EXP_OVERFLOW")

            }

            function abi_encode_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)
                store_literal_in_memory_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7_to_t_string_memory_ptr_fromStack( tail)

            }

            function cleanup_t_rational_78_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_78_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_78_by_1(value)))
            }

            function shift_left_dynamic(bits, value) -> newValue {
                newValue :=

                shl(bits, value)

            }

            function shift_left_t_int256_t_uint8(value, bits) -> result {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_int256(shift_left_dynamic(bits, cleanup_t_int256(value)))
            }

            function cleanup_t_rational_3814697265625_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_3814697265625_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3814697265625_by_1(value)))
            }

            function wrapping_div_t_int256(x, y) -> r {
                x := cleanup_t_int256(x)
                y := cleanup_t_int256(y)
                if iszero(y) { panic_error_0x12() }
                r := sdiv(x, y)
            }

            function cleanup_t_rational_96_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_96_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_96_by_1(value)))
            }

            function cleanup_t_rational_54916777467707473351141471128_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_54916777467707473351141471128_by_1(value)))
            }

            function cleanup_t_rational_39614081257132168796771975168_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_39614081257132168796771975168_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_39614081257132168796771975168_by_1(value)))
            }

            function wrapping_add_t_int256(x, y) -> sum {
                sum := cleanup_t_int256(add(x, y))
            }

            function shift_right_signed_dynamic(bits, value) -> result {

                result := sar(bits, value)

            }

            function shift_right_t_int256_t_uint8(value, bits) -> result {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_int256(shift_right_signed_dynamic(bits, cleanup_t_int256(value)))
            }

            function wrapping_mul_t_int256(x, y) -> product {
                product := cleanup_t_int256(mul(x, y))
            }

            function wrapping_sub_t_int256(x, y) -> diff {
                diff := cleanup_t_int256(sub(x, y))
            }

            function cleanup_t_rational_1346386616545796478920950773328_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1346386616545796478920950773328_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1346386616545796478920950773328_by_1(value)))
            }

            function cleanup_t_rational_57155421227552351082224309758442_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_57155421227552351082224309758442_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_57155421227552351082224309758442_by_1(value)))
            }

            function cleanup_t_rational_94201549194550492254356042504812_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_94201549194550492254356042504812_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_94201549194550492254356042504812_by_1(value)))
            }

            function cleanup_t_rational_28719021644029726153956944680412240_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_28719021644029726153956944680412240_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_28719021644029726153956944680412240_by_1(value)))
            }

            function cleanup_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1(value)))
            }

            function cleanup_t_rational_2855989394907223263936484059900_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_2855989394907223263936484059900_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_2855989394907223263936484059900_by_1(value)))
            }

            function cleanup_t_rational_50020603652535783019961831881945_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_50020603652535783019961831881945_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_50020603652535783019961831881945_by_1(value)))
            }

            function cleanup_t_rational_533845033583426703283633433725380_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_533845033583426703283633433725380_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_533845033583426703283633433725380_by_1(value)))
            }

            function cleanup_t_rational_3604857256930695427073651918091429_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_3604857256930695427073651918091429_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3604857256930695427073651918091429_by_1(value)))
            }

            function cleanup_t_rational_14423608567350463180887372962807573_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_14423608567350463180887372962807573_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_14423608567350463180887372962807573_by_1(value)))
            }

            function cleanup_t_rational_26449188498355588339934803723976023_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_26449188498355588339934803723976023_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_26449188498355588339934803723976023_by_1(value)))
            }

            function cleanup_t_rational_3822833074963236453042738258902158003155416615667_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_3822833074963236453042738258902158003155416615667_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_3822833074963236453042738258902158003155416615667_by_1(value)))
            }

            function wrapping_mul_t_uint256(x, y) -> product {
                product := cleanup_t_uint256(mul(x, y))
            }

            function cleanup_t_rational_195_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_195_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_195_by_1(value)))
            }

            function shift_right_t_uint256_t_uint256(value, bits) -> result {
                bits := cleanup_t_uint256(bits)
                result := cleanup_t_uint256(shift_right_unsigned_dynamic(bits, cleanup_t_uint256(value)))
            }

            /// @ast-id 6735
            /// @src 9:1487:4590  "function expWad(int256 x) internal pure returns (int256 r) {..."
            function fun_expWad_6735(var_x_6542) -> var_r_6545 {
                /// @src 9:1536:1544  "int256 r"
                let zero_t_int256_555 := zero_value_for_split_t_int256()
                var_r_6545 := zero_t_int256_555

                /// @src 9:1713:1714  "x"
                let _556 := var_x_6542
                let expr_6547 := _556
                /// @src 9:1718:1739  "-42139678854452767551"
                let expr_6549 := 0xfffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c1
                /// @src 9:1713:1739  "x <= -42139678854452767551"
                let expr_6550 := iszero(sgt(cleanup_t_int256(expr_6547), convert_t_rational_minus_42139678854452767551_by_1_to_t_int256(expr_6549)))
                /// @src 9:1709:1749  "if (x <= -42139678854452767551) return 0"
                if expr_6550 {
                    /// @src 9:1748:1749  "0"
                    let expr_6551 := 0x00
                    /// @src 9:1741:1749  "return 0"
                    var_r_6545 := convert_t_rational_0_by_1_to_t_int256(expr_6551)
                    leave
                    /// @src 9:1709:1749  "if (x <= -42139678854452767551) return 0"
                }
                /// @src 9:1943:1944  "x"
                let _557 := var_x_6542
                let expr_6554 := _557
                /// @src 9:1948:1969  "135305999368893231589"
                let expr_6555 := 0x0755bf798b4a1bf1e5
                /// @src 9:1943:1969  "x >= 135305999368893231589"
                let expr_6556 := iszero(slt(cleanup_t_int256(expr_6554), convert_t_rational_135305999368893231589_by_1_to_t_int256(expr_6555)))
                /// @src 9:1939:1993  "if (x >= 135305999368893231589) revert(\"EXP_OVERFLOW\")"
                if expr_6556 {
                    /// @src 9:1971:1993  "revert(\"EXP_OVERFLOW\")"
                    {
                        let _558 := allocate_unbounded()
                        mstore(_558, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
                        let _559 := abi_encode_tuple_t_stringliteral_f364785e6e651288224d2623ec5f083c58c85325644496b3d02635790697d3c7__to_t_string_memory_ptr__fromStack(add(_558, 4) )
                        revert(_558, sub(_559, _558))
                    }/// @src 9:1939:1993  "if (x >= 135305999368893231589) revert(\"EXP_OVERFLOW\")"
                }
                /// @src 9:2255:2256  "x"
                let _560 := var_x_6542
                let expr_6563 := _560
                /// @src 9:2260:2262  "78"
                let expr_6564 := 0x4e
                /// @src 9:2255:2262  "x << 78"
                let _561 := convert_t_rational_78_by_1_to_t_uint8(expr_6564)
                let expr_6565 :=
                shift_left_t_int256_t_uint8(expr_6563, _561)

                /// @src 9:2254:2263  "(x << 78)"
                let expr_6566 := expr_6565
                /// @src 9:2266:2271  "5**18"
                let expr_6569 := 0x03782dace9d9
                /// @src 9:2254:2271  "(x << 78) / 5**18"
                let expr_6570 := wrapping_div_t_int256(expr_6566, convert_t_rational_3814697265625_by_1_to_t_int256(expr_6569))

                /// @src 9:2250:2271  "x = (x << 78) / 5**18"
                var_x_6542 := expr_6570
                let expr_6571 := expr_6570
                /// @src 9:2548:2549  "x"
                let _562 := var_x_6542
                let expr_6575 := _562
                /// @src 9:2553:2555  "96"
                let expr_6576 := 0x60
                /// @src 9:2548:2555  "x << 96"
                let _563 := convert_t_rational_96_by_1_to_t_uint8(expr_6576)
                let expr_6577 :=
                shift_left_t_int256_t_uint8(expr_6575, _563)

                /// @src 9:2547:2556  "(x << 96)"
                let expr_6578 := expr_6577
                /// @src 9:2559:2588  "54916777467707473351141471128"
                let expr_6579 := 0xb17217f7d1cf79abc9e3b398
                /// @src 9:2547:2588  "(x << 96) / 54916777467707473351141471128"
                let expr_6580 := wrapping_div_t_int256(expr_6578, convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(expr_6579))

                /// @src 9:2591:2596  "2**95"
                let expr_6583 := 0x800000000000000000000000
                /// @src 9:2547:2596  "(x << 96) / 54916777467707473351141471128 + 2**95"
                let expr_6584 := wrapping_add_t_int256(expr_6580, convert_t_rational_39614081257132168796771975168_by_1_to_t_int256(expr_6583))

                /// @src 9:2546:2597  "((x << 96) / 54916777467707473351141471128 + 2**95)"
                let expr_6585 := expr_6584
                /// @src 9:2601:2603  "96"
                let expr_6586 := 0x60
                /// @src 9:2546:2603  "((x << 96) / 54916777467707473351141471128 + 2**95) >> 96"
                let _564 := convert_t_rational_96_by_1_to_t_uint8(expr_6586)
                let expr_6587 :=
                shift_right_t_int256_t_uint8(expr_6585, _564)

                /// @src 9:2535:2603  "int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96"
                let var_k_6574 := expr_6587
                /// @src 9:2621:2622  "x"
                let _565 := var_x_6542
                let expr_6590 := _565
                /// @src 9:2625:2626  "k"
                let _566 := var_k_6574
                let expr_6591 := _566
                /// @src 9:2629:2658  "54916777467707473351141471128"
                let expr_6592 := 0xb17217f7d1cf79abc9e3b398
                /// @src 9:2625:2658  "k * 54916777467707473351141471128"
                let expr_6593 := wrapping_mul_t_int256(expr_6591, convert_t_rational_54916777467707473351141471128_by_1_to_t_int256(expr_6592))

                /// @src 9:2621:2658  "x - k * 54916777467707473351141471128"
                let expr_6594 := wrapping_sub_t_int256(expr_6590, expr_6593)

                /// @src 9:2617:2658  "x = x - k * 54916777467707473351141471128"
                var_x_6542 := expr_6594
                let expr_6595 := expr_6594
                /// @src 9:2870:2871  "x"
                let _567 := var_x_6542
                let expr_6599 := _567
                /// @src 9:2874:2905  "1346386616545796478920950773328"
                let expr_6600 := 0x10fe68e7fd37d0007b713f7650
                /// @src 9:2870:2905  "x + 1346386616545796478920950773328"
                let expr_6601 := wrapping_add_t_int256(expr_6599, convert_t_rational_1346386616545796478920950773328_by_1_to_t_int256(expr_6600))

                /// @src 9:2859:2905  "int256 y = x + 1346386616545796478920950773328"
                let var_y_6598 := expr_6601
                /// @src 9:2925:2926  "y"
                let _568 := var_y_6598
                let expr_6604 := _568
                /// @src 9:2929:2930  "x"
                let _569 := var_x_6542
                let expr_6605 := _569
                /// @src 9:2925:2930  "y * x"
                let expr_6606 := wrapping_mul_t_int256(expr_6604, expr_6605)

                /// @src 9:2924:2931  "(y * x)"
                let expr_6607 := expr_6606
                /// @src 9:2935:2937  "96"
                let expr_6608 := 0x60
                /// @src 9:2924:2937  "(y * x) >> 96"
                let _570 := convert_t_rational_96_by_1_to_t_uint8(expr_6608)
                let expr_6609 :=
                shift_right_t_int256_t_uint8(expr_6607, _570)

                /// @src 9:2923:2938  "((y * x) >> 96)"
                let expr_6610 := expr_6609
                /// @src 9:2941:2973  "57155421227552351082224309758442"
                let expr_6611 := 0x02d16720577bd19bf614176fe9ea
                /// @src 9:2923:2973  "((y * x) >> 96) + 57155421227552351082224309758442"
                let expr_6612 := wrapping_add_t_int256(expr_6610, convert_t_rational_57155421227552351082224309758442_by_1_to_t_int256(expr_6611))

                /// @src 9:2919:2973  "y = ((y * x) >> 96) + 57155421227552351082224309758442"
                var_y_6598 := expr_6612
                let expr_6613 := expr_6612
                /// @src 9:2998:2999  "y"
                let _571 := var_y_6598
                let expr_6617 := _571
                /// @src 9:3002:3003  "x"
                let _572 := var_x_6542
                let expr_6618 := _572
                /// @src 9:2998:3003  "y + x"
                let expr_6619 := wrapping_add_t_int256(expr_6617, expr_6618)

                /// @src 9:3006:3038  "94201549194550492254356042504812"
                let expr_6620 := 0x04a4fd9f2a8b96949216d2255a6c
                /// @src 9:2998:3038  "y + x - 94201549194550492254356042504812"
                let expr_6621 := wrapping_sub_t_int256(expr_6619, convert_t_rational_94201549194550492254356042504812_by_1_to_t_int256(expr_6620))

                /// @src 9:2987:3038  "int256 p = y + x - 94201549194550492254356042504812"
                let var_p_6616 := expr_6621
                /// @src 9:3058:3059  "p"
                let _573 := var_p_6616
                let expr_6624 := _573
                /// @src 9:3062:3063  "y"
                let _574 := var_y_6598
                let expr_6625 := _574
                /// @src 9:3058:3063  "p * y"
                let expr_6626 := wrapping_mul_t_int256(expr_6624, expr_6625)

                /// @src 9:3057:3064  "(p * y)"
                let expr_6627 := expr_6626
                /// @src 9:3068:3070  "96"
                let expr_6628 := 0x60
                /// @src 9:3057:3070  "(p * y) >> 96"
                let _575 := convert_t_rational_96_by_1_to_t_uint8(expr_6628)
                let expr_6629 :=
                shift_right_t_int256_t_uint8(expr_6627, _575)

                /// @src 9:3056:3071  "((p * y) >> 96)"
                let expr_6630 := expr_6629
                /// @src 9:3074:3109  "28719021644029726153956944680412240"
                let expr_6631 := 0x0587f503bb6ea29d25fcb740196450
                /// @src 9:3056:3109  "((p * y) >> 96) + 28719021644029726153956944680412240"
                let expr_6632 := wrapping_add_t_int256(expr_6630, convert_t_rational_28719021644029726153956944680412240_by_1_to_t_int256(expr_6631))

                /// @src 9:3052:3109  "p = ((p * y) >> 96) + 28719021644029726153956944680412240"
                var_p_6616 := expr_6632
                let expr_6633 := expr_6632
                /// @src 9:3127:3128  "p"
                let _576 := var_p_6616
                let expr_6636 := _576
                /// @src 9:3131:3132  "x"
                let _577 := var_x_6542
                let expr_6637 := _577
                /// @src 9:3127:3132  "p * x"
                let expr_6638 := wrapping_mul_t_int256(expr_6636, expr_6637)

                /// @src 9:3136:3176  "4385272521454847904659076985693276 << 96"
                let expr_6641 := 0xd835ebba824c98fb31b83b2ca45c000000000000000000000000
                /// @src 9:3135:3177  "(4385272521454847904659076985693276 << 96)"
                let expr_6642 := expr_6641
                /// @src 9:3127:3177  "p * x + (4385272521454847904659076985693276 << 96)"
                let expr_6643 := wrapping_add_t_int256(expr_6638, convert_t_rational_347437083999162433888837515002539729507623920905942392673140736_by_1_to_t_int256(expr_6642))

                /// @src 9:3123:3177  "p = p * x + (4385272521454847904659076985693276 << 96)"
                var_p_6616 := expr_6643
                let expr_6644 := expr_6643
                /// @src 9:3300:3301  "x"
                let _578 := var_x_6542
                let expr_6648 := _578
                /// @src 9:3304:3335  "2855989394907223263936484059900"
                let expr_6649 := 0x240c330e9fb2d9cbaf0fd5aafc
                /// @src 9:3300:3335  "x - 2855989394907223263936484059900"
                let expr_6650 := wrapping_sub_t_int256(expr_6648, convert_t_rational_2855989394907223263936484059900_by_1_to_t_int256(expr_6649))

                /// @src 9:3289:3335  "int256 q = x - 2855989394907223263936484059900"
                let var_q_6647 := expr_6650
                /// @src 9:3355:3356  "q"
                let _579 := var_q_6647
                let expr_6653 := _579
                /// @src 9:3359:3360  "x"
                let _580 := var_x_6542
                let expr_6654 := _580
                /// @src 9:3355:3360  "q * x"
                let expr_6655 := wrapping_mul_t_int256(expr_6653, expr_6654)

                /// @src 9:3354:3361  "(q * x)"
                let expr_6656 := expr_6655
                /// @src 9:3365:3367  "96"
                let expr_6657 := 0x60
                /// @src 9:3354:3367  "(q * x) >> 96"
                let _581 := convert_t_rational_96_by_1_to_t_uint8(expr_6657)
                let expr_6658 :=
                shift_right_t_int256_t_uint8(expr_6656, _581)

                /// @src 9:3353:3368  "((q * x) >> 96)"
                let expr_6659 := expr_6658
                /// @src 9:3371:3403  "50020603652535783019961831881945"
                let expr_6660 := 0x0277594991cfc85f6e2461837cd9
                /// @src 9:3353:3403  "((q * x) >> 96) + 50020603652535783019961831881945"
                let expr_6661 := wrapping_add_t_int256(expr_6659, convert_t_rational_50020603652535783019961831881945_by_1_to_t_int256(expr_6660))

                /// @src 9:3349:3403  "q = ((q * x) >> 96) + 50020603652535783019961831881945"
                var_q_6647 := expr_6661
                let expr_6662 := expr_6661
                /// @src 9:3423:3424  "q"
                let _582 := var_q_6647
                let expr_6665 := _582
                /// @src 9:3427:3428  "x"
                let _583 := var_x_6542
                let expr_6666 := _583
                /// @src 9:3423:3428  "q * x"
                let expr_6667 := wrapping_mul_t_int256(expr_6665, expr_6666)

                /// @src 9:3422:3429  "(q * x)"
                let expr_6668 := expr_6667
                /// @src 9:3433:3435  "96"
                let expr_6669 := 0x60
                /// @src 9:3422:3435  "(q * x) >> 96"
                let _584 := convert_t_rational_96_by_1_to_t_uint8(expr_6669)
                let expr_6670 :=
                shift_right_t_int256_t_uint8(expr_6668, _584)

                /// @src 9:3421:3436  "((q * x) >> 96)"
                let expr_6671 := expr_6670
                /// @src 9:3439:3472  "533845033583426703283633433725380"
                let expr_6672 := 0x1a521255e34f6a5061b25ef1c9c4
                /// @src 9:3421:3472  "((q * x) >> 96) - 533845033583426703283633433725380"
                let expr_6673 := wrapping_sub_t_int256(expr_6671, convert_t_rational_533845033583426703283633433725380_by_1_to_t_int256(expr_6672))

                /// @src 9:3417:3472  "q = ((q * x) >> 96) - 533845033583426703283633433725380"
                var_q_6647 := expr_6673
                let expr_6674 := expr_6673
                /// @src 9:3492:3493  "q"
                let _585 := var_q_6647
                let expr_6677 := _585
                /// @src 9:3496:3497  "x"
                let _586 := var_x_6542
                let expr_6678 := _586
                /// @src 9:3492:3497  "q * x"
                let expr_6679 := wrapping_mul_t_int256(expr_6677, expr_6678)

                /// @src 9:3491:3498  "(q * x)"
                let expr_6680 := expr_6679
                /// @src 9:3502:3504  "96"
                let expr_6681 := 0x60
                /// @src 9:3491:3504  "(q * x) >> 96"
                let _587 := convert_t_rational_96_by_1_to_t_uint8(expr_6681)
                let expr_6682 :=
                shift_right_t_int256_t_uint8(expr_6680, _587)

                /// @src 9:3490:3505  "((q * x) >> 96)"
                let expr_6683 := expr_6682
                /// @src 9:3508:3542  "3604857256930695427073651918091429"
                let expr_6684 := 0xb1bbb201f443cf962f1a1d3db4a5
                /// @src 9:3490:3542  "((q * x) >> 96) + 3604857256930695427073651918091429"
                let expr_6685 := wrapping_add_t_int256(expr_6683, convert_t_rational_3604857256930695427073651918091429_by_1_to_t_int256(expr_6684))

                /// @src 9:3486:3542  "q = ((q * x) >> 96) + 3604857256930695427073651918091429"
                var_q_6647 := expr_6685
                let expr_6686 := expr_6685
                /// @src 9:3562:3563  "q"
                let _588 := var_q_6647
                let expr_6689 := _588
                /// @src 9:3566:3567  "x"
                let _589 := var_x_6542
                let expr_6690 := _589
                /// @src 9:3562:3567  "q * x"
                let expr_6691 := wrapping_mul_t_int256(expr_6689, expr_6690)

                /// @src 9:3561:3568  "(q * x)"
                let expr_6692 := expr_6691
                /// @src 9:3572:3574  "96"
                let expr_6693 := 0x60
                /// @src 9:3561:3574  "(q * x) >> 96"
                let _590 := convert_t_rational_96_by_1_to_t_uint8(expr_6693)
                let expr_6694 :=
                shift_right_t_int256_t_uint8(expr_6692, _590)

                /// @src 9:3560:3575  "((q * x) >> 96)"
                let expr_6695 := expr_6694
                /// @src 9:3578:3613  "14423608567350463180887372962807573"
                let expr_6696 := 0x02c72388d9f74f51a9331fed693f15
                /// @src 9:3560:3613  "((q * x) >> 96) - 14423608567350463180887372962807573"
                let expr_6697 := wrapping_sub_t_int256(expr_6695, convert_t_rational_14423608567350463180887372962807573_by_1_to_t_int256(expr_6696))

                /// @src 9:3556:3613  "q = ((q * x) >> 96) - 14423608567350463180887372962807573"
                var_q_6647 := expr_6697
                let expr_6698 := expr_6697
                /// @src 9:3633:3634  "q"
                let _591 := var_q_6647
                let expr_6701 := _591
                /// @src 9:3637:3638  "x"
                let _592 := var_x_6542
                let expr_6702 := _592
                /// @src 9:3633:3638  "q * x"
                let expr_6703 := wrapping_mul_t_int256(expr_6701, expr_6702)

                /// @src 9:3632:3639  "(q * x)"
                let expr_6704 := expr_6703
                /// @src 9:3643:3645  "96"
                let expr_6705 := 0x60
                /// @src 9:3632:3645  "(q * x) >> 96"
                let _593 := convert_t_rational_96_by_1_to_t_uint8(expr_6705)
                let expr_6706 :=
                shift_right_t_int256_t_uint8(expr_6704, _593)

                /// @src 9:3631:3646  "((q * x) >> 96)"
                let expr_6707 := expr_6706
                /// @src 9:3649:3684  "26449188498355588339934803723976023"
                let expr_6708 := 0x05180bb14799ab47a8a8cb2a527d57
                /// @src 9:3631:3684  "((q * x) >> 96) + 26449188498355588339934803723976023"
                let expr_6709 := wrapping_add_t_int256(expr_6707, convert_t_rational_26449188498355588339934803723976023_by_1_to_t_int256(expr_6708))

                /// @src 9:3627:3684  "q = ((q * x) >> 96) + 26449188498355588339934803723976023"
                var_q_6647 := expr_6709
                let expr_6710 := expr_6709
                /// @src 9:3699:4026  "assembly {..."
                {
                    var_r_6545 := sdiv(var_p_6616, var_q_6647)
                }
                /// @src 9:4497:4498  "r"
                let _594 := var_r_6545
                let expr_6718 := _594
                /// @src 9:4489:4499  "uint256(r)"
                let expr_6719 := convert_t_int256_to_t_uint256(expr_6718)
                /// @src 9:4502:4551  "3822833074963236453042738258902158003155416615667"
                let expr_6720 := 0x029d9dc38563c32e5c2f6dc192ee70ef65f9978af3
                /// @src 9:4489:4551  "uint256(r) * 3822833074963236453042738258902158003155416615667"
                let expr_6721 := wrapping_mul_t_uint256(expr_6719, convert_t_rational_3822833074963236453042738258902158003155416615667_by_1_to_t_uint256(expr_6720))

                /// @src 9:4488:4552  "(uint256(r) * 3822833074963236453042738258902158003155416615667)"
                let expr_6722 := expr_6721
                /// @src 9:4564:4567  "195"
                let expr_6725 := 0xc3
                /// @src 9:4570:4571  "k"
                let _595 := var_k_6574
                let expr_6726 := _595
                /// @src 9:4564:4571  "195 - k"
                let expr_6727 := wrapping_sub_t_int256(convert_t_rational_195_by_1_to_t_int256(expr_6725), expr_6726)

                /// @src 9:4556:4572  "uint256(195 - k)"
                let expr_6728 := convert_t_int256_to_t_uint256(expr_6727)
                /// @src 9:4488:4572  "(uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)"
                let expr_6729 :=
                shift_right_t_uint256_t_uint256(expr_6722, expr_6728)

                /// @src 9:4481:4573  "int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k))"
                let expr_6730 := convert_t_uint256_to_t_int256(expr_6729)
                /// @src 9:4477:4573  "r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k))"
                var_r_6545 := expr_6730
                let expr_6731 := expr_6730

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(memPtr) {

                mstore(add(memPtr, 0), "UNDEFINED")

            }

            function abi_encode_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 9)
                store_literal_in_memory_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_rational_96_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_96_by_1(value)))
            }

            function cleanup_t_rational_159_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_159_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_159_by_1(value)))
            }

            function shift_left_t_int256_t_uint256(value, bits) -> result {
                bits := cleanup_t_uint256(bits)
                result := cleanup_t_int256(shift_left_dynamic(bits, cleanup_t_int256(value)))
            }

            function convert_t_rational_159_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_159_by_1(value)))
            }

            function shift_right_t_uint256_t_uint8(value, bits) -> result {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_uint256(shift_right_unsigned_dynamic(bits, cleanup_t_uint256(value)))
            }

            function cleanup_t_rational_3273285459638523848632254066296_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_3273285459638523848632254066296_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_3273285459638523848632254066296_by_1(value)))
            }

            function cleanup_t_rational_24828157081833163892658089445524_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_24828157081833163892658089445524_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_24828157081833163892658089445524_by_1(value)))
            }

            function cleanup_t_rational_43456485725739037958740375743393_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_43456485725739037958740375743393_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_43456485725739037958740375743393_by_1(value)))
            }

            function cleanup_t_rational_11111509109440967052023855526967_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_11111509109440967052023855526967_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_11111509109440967052023855526967_by_1(value)))
            }

            function cleanup_t_rational_45023709667254063763336534515857_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_45023709667254063763336534515857_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_45023709667254063763336534515857_by_1(value)))
            }

            function cleanup_t_rational_14706773417378608786704636184526_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_14706773417378608786704636184526_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_14706773417378608786704636184526_by_1(value)))
            }

            function cleanup_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1(value)))
            }

            function cleanup_t_rational_5573035233440673466300451813936_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_5573035233440673466300451813936_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_5573035233440673466300451813936_by_1(value)))
            }

            function cleanup_t_rational_71694874799317883764090561454958_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_71694874799317883764090561454958_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_71694874799317883764090561454958_by_1(value)))
            }

            function cleanup_t_rational_283447036172924575727196451306956_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_283447036172924575727196451306956_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_283447036172924575727196451306956_by_1(value)))
            }

            function cleanup_t_rational_401686690394027663651624208769553_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_401686690394027663651624208769553_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_401686690394027663651624208769553_by_1(value)))
            }

            function cleanup_t_rational_204048457590392012362485061816622_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_204048457590392012362485061816622_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_204048457590392012362485061816622_by_1(value)))
            }

            function cleanup_t_rational_31853899698501571402653359427138_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_31853899698501571402653359427138_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_31853899698501571402653359427138_by_1(value)))
            }

            function cleanup_t_rational_909429971244387300277376558375_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_909429971244387300277376558375_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_909429971244387300277376558375_by_1(value)))
            }

            function cleanup_t_rational_1677202110996718588342820967067443963516166_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1677202110996718588342820967067443963516166_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_1677202110996718588342820967067443963516166_by_1(value)))
            }

            function cleanup_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1(value)))
            }

            function cleanup_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1_to_t_int256(value) -> converted {
                converted := cleanup_t_int256(identity(cleanup_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1(value)))
            }

            function cleanup_t_rational_174_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_174_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_174_by_1(value)))
            }

            /// @ast-id 6960
            /// @src 9:4596:7543  "function lnWad(int256 x) internal pure returns (int256 r) {..."
            function fun_lnWad_6960(var_x_6737) -> var_r_6740 {
                /// @src 9:4644:4652  "int256 r"
                let zero_t_int256_596 := zero_value_for_split_t_int256()
                var_r_6740 := zero_t_int256_596

                /// @src 9:4696:4697  "x"
                let _597 := var_x_6737
                let expr_6743 := _597
                /// @src 9:4700:4701  "0"
                let expr_6744 := 0x00
                /// @src 9:4696:4701  "x > 0"
                let expr_6745 := sgt(cleanup_t_int256(expr_6743), convert_t_rational_0_by_1_to_t_int256(expr_6744))
                /// @src 9:4688:4715  "require(x > 0, \"UNDEFINED\")"
                require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(expr_6745)
                /// @src 9:5138:5139  "x"
                let _598 := var_x_6737
                let expr_6756 := _598
                /// @src 9:5130:5140  "uint256(x)"
                let expr_6757 := convert_t_int256_to_t_uint256(expr_6756)
                /// @src 9:5125:5141  "log2(uint256(x))"
                let expr_6758 := fun_log2_7024(expr_6757)
                /// @src 9:5118:5142  "int256(log2(uint256(x)))"
                let expr_6759 := convert_t_uint256_to_t_int256(expr_6758)
                /// @src 9:5145:5147  "96"
                let expr_6760 := 0x60
                /// @src 9:5118:5147  "int256(log2(uint256(x))) - 96"
                let expr_6761 := wrapping_sub_t_int256(expr_6759, convert_t_rational_96_by_1_to_t_int256(expr_6760))

                /// @src 9:5107:5147  "int256 k = int256(log2(uint256(x))) - 96"
                let var_k_6750 := expr_6761
                /// @src 9:5175:5178  "159"
                let expr_6766 := 0x9f
                /// @src 9:5181:5182  "k"
                let _599 := var_k_6750
                let expr_6767 := _599
                /// @src 9:5175:5182  "159 - k"
                let expr_6768 := wrapping_sub_t_int256(convert_t_rational_159_by_1_to_t_int256(expr_6766), expr_6767)

                /// @src 9:5167:5183  "uint256(159 - k)"
                let expr_6769 := convert_t_int256_to_t_uint256(expr_6768)
                /// @src 9:5161:5183  "x <<= uint256(159 - k)"
                let _600 := var_x_6737
                let expr_6770 :=
                shift_left_t_int256_t_uint256(_600, expr_6769)

                var_x_6737 := expr_6770
                /// @src 9:5216:5217  "x"
                let _601 := var_x_6737
                let expr_6777 := _601
                /// @src 9:5208:5218  "uint256(x)"
                let expr_6778 := convert_t_int256_to_t_uint256(expr_6777)
                /// @src 9:5222:5225  "159"
                let expr_6779 := 0x9f
                /// @src 9:5208:5225  "uint256(x) >> 159"
                let _602 := convert_t_rational_159_by_1_to_t_uint8(expr_6779)
                let expr_6780 :=
                shift_right_t_uint256_t_uint8(expr_6778, _602)

                /// @src 9:5201:5226  "int256(uint256(x) >> 159)"
                let expr_6781 := convert_t_uint256_to_t_int256(expr_6780)
                /// @src 9:5197:5226  "x = int256(uint256(x) >> 159)"
                var_x_6737 := expr_6781
                let expr_6782 := expr_6781
                /// @src 9:5394:5395  "x"
                let _603 := var_x_6737
                let expr_6786 := _603
                /// @src 9:5398:5429  "3273285459638523848632254066296"
                let expr_6787 := 0x29508e458543d8aa4df2abee78
                /// @src 9:5394:5429  "x + 3273285459638523848632254066296"
                let expr_6788 := wrapping_add_t_int256(expr_6786, convert_t_rational_3273285459638523848632254066296_by_1_to_t_int256(expr_6787))

                /// @src 9:5383:5429  "int256 p = x + 3273285459638523848632254066296"
                let var_p_6785 := expr_6788
                /// @src 9:5449:5450  "p"
                let _604 := var_p_6785
                let expr_6791 := _604
                /// @src 9:5453:5454  "x"
                let _605 := var_x_6737
                let expr_6792 := _605
                /// @src 9:5449:5454  "p * x"
                let expr_6793 := wrapping_mul_t_int256(expr_6791, expr_6792)

                /// @src 9:5448:5455  "(p * x)"
                let expr_6794 := expr_6793
                /// @src 9:5459:5461  "96"
                let expr_6795 := 0x60
                /// @src 9:5448:5461  "(p * x) >> 96"
                let _606 := convert_t_rational_96_by_1_to_t_uint8(expr_6795)
                let expr_6796 :=
                shift_right_t_int256_t_uint8(expr_6794, _606)

                /// @src 9:5447:5462  "((p * x) >> 96)"
                let expr_6797 := expr_6796
                /// @src 9:5465:5497  "24828157081833163892658089445524"
                let expr_6798 := 0x0139601a2efabe717e604cbb4894
                /// @src 9:5447:5497  "((p * x) >> 96) + 24828157081833163892658089445524"
                let expr_6799 := wrapping_add_t_int256(expr_6797, convert_t_rational_24828157081833163892658089445524_by_1_to_t_int256(expr_6798))

                /// @src 9:5443:5497  "p = ((p * x) >> 96) + 24828157081833163892658089445524"
                var_p_6785 := expr_6799
                let expr_6800 := expr_6799
                /// @src 9:5517:5518  "p"
                let _607 := var_p_6785
                let expr_6803 := _607
                /// @src 9:5521:5522  "x"
                let _608 := var_x_6737
                let expr_6804 := _608
                /// @src 9:5517:5522  "p * x"
                let expr_6805 := wrapping_mul_t_int256(expr_6803, expr_6804)

                /// @src 9:5516:5523  "(p * x)"
                let expr_6806 := expr_6805
                /// @src 9:5527:5529  "96"
                let expr_6807 := 0x60
                /// @src 9:5516:5529  "(p * x) >> 96"
                let _609 := convert_t_rational_96_by_1_to_t_uint8(expr_6807)
                let expr_6808 :=
                shift_right_t_int256_t_uint8(expr_6806, _609)

                /// @src 9:5515:5530  "((p * x) >> 96)"
                let expr_6809 := expr_6808
                /// @src 9:5533:5565  "43456485725739037958740375743393"
                let expr_6810 := 0x02247f7a7b6594320649aa03aba1
                /// @src 9:5515:5565  "((p * x) >> 96) + 43456485725739037958740375743393"
                let expr_6811 := wrapping_add_t_int256(expr_6809, convert_t_rational_43456485725739037958740375743393_by_1_to_t_int256(expr_6810))

                /// @src 9:5511:5565  "p = ((p * x) >> 96) + 43456485725739037958740375743393"
                var_p_6785 := expr_6811
                let expr_6812 := expr_6811
                /// @src 9:5585:5586  "p"
                let _610 := var_p_6785
                let expr_6815 := _610
                /// @src 9:5589:5590  "x"
                let _611 := var_x_6737
                let expr_6816 := _611
                /// @src 9:5585:5590  "p * x"
                let expr_6817 := wrapping_mul_t_int256(expr_6815, expr_6816)

                /// @src 9:5584:5591  "(p * x)"
                let expr_6818 := expr_6817
                /// @src 9:5595:5597  "96"
                let expr_6819 := 0x60
                /// @src 9:5584:5597  "(p * x) >> 96"
                let _612 := convert_t_rational_96_by_1_to_t_uint8(expr_6819)
                let expr_6820 :=
                shift_right_t_int256_t_uint8(expr_6818, _612)

                /// @src 9:5583:5598  "((p * x) >> 96)"
                let expr_6821 := expr_6820
                /// @src 9:5601:5633  "11111509109440967052023855526967"
                let expr_6822 := 0x8c3f38e95a6b1ff2ab1c3b3437
                /// @src 9:5583:5633  "((p * x) >> 96) - 11111509109440967052023855526967"
                let expr_6823 := wrapping_sub_t_int256(expr_6821, convert_t_rational_11111509109440967052023855526967_by_1_to_t_int256(expr_6822))

                /// @src 9:5579:5633  "p = ((p * x) >> 96) - 11111509109440967052023855526967"
                var_p_6785 := expr_6823
                let expr_6824 := expr_6823
                /// @src 9:5653:5654  "p"
                let _613 := var_p_6785
                let expr_6827 := _613
                /// @src 9:5657:5658  "x"
                let _614 := var_x_6737
                let expr_6828 := _614
                /// @src 9:5653:5658  "p * x"
                let expr_6829 := wrapping_mul_t_int256(expr_6827, expr_6828)

                /// @src 9:5652:5659  "(p * x)"
                let expr_6830 := expr_6829
                /// @src 9:5663:5665  "96"
                let expr_6831 := 0x60
                /// @src 9:5652:5665  "(p * x) >> 96"
                let _615 := convert_t_rational_96_by_1_to_t_uint8(expr_6831)
                let expr_6832 :=
                shift_right_t_int256_t_uint8(expr_6830, _615)

                /// @src 9:5651:5666  "((p * x) >> 96)"
                let expr_6833 := expr_6832
                /// @src 9:5669:5701  "45023709667254063763336534515857"
                let expr_6834 := 0x02384773bdf1ac5676facced6091
                /// @src 9:5651:5701  "((p * x) >> 96) - 45023709667254063763336534515857"
                let expr_6835 := wrapping_sub_t_int256(expr_6833, convert_t_rational_45023709667254063763336534515857_by_1_to_t_int256(expr_6834))

                /// @src 9:5647:5701  "p = ((p * x) >> 96) - 45023709667254063763336534515857"
                var_p_6785 := expr_6835
                let expr_6836 := expr_6835
                /// @src 9:5721:5722  "p"
                let _616 := var_p_6785
                let expr_6839 := _616
                /// @src 9:5725:5726  "x"
                let _617 := var_x_6737
                let expr_6840 := _617
                /// @src 9:5721:5726  "p * x"
                let expr_6841 := wrapping_mul_t_int256(expr_6839, expr_6840)

                /// @src 9:5720:5727  "(p * x)"
                let expr_6842 := expr_6841
                /// @src 9:5731:5733  "96"
                let expr_6843 := 0x60
                /// @src 9:5720:5733  "(p * x) >> 96"
                let _618 := convert_t_rational_96_by_1_to_t_uint8(expr_6843)
                let expr_6844 :=
                shift_right_t_int256_t_uint8(expr_6842, _618)

                /// @src 9:5719:5734  "((p * x) >> 96)"
                let expr_6845 := expr_6844
                /// @src 9:5737:5769  "14706773417378608786704636184526"
                let expr_6846 := 0xb9a025d814b29c212b8b1a07ce
                /// @src 9:5719:5769  "((p * x) >> 96) - 14706773417378608786704636184526"
                let expr_6847 := wrapping_sub_t_int256(expr_6845, convert_t_rational_14706773417378608786704636184526_by_1_to_t_int256(expr_6846))

                /// @src 9:5715:5769  "p = ((p * x) >> 96) - 14706773417378608786704636184526"
                var_p_6785 := expr_6847
                let expr_6848 := expr_6847
                /// @src 9:5787:5788  "p"
                let _619 := var_p_6785
                let expr_6851 := _619
                /// @src 9:5791:5792  "x"
                let _620 := var_x_6737
                let expr_6852 := _620
                /// @src 9:5787:5792  "p * x"
                let expr_6853 := wrapping_mul_t_int256(expr_6851, expr_6852)

                /// @src 9:5796:5832  "795164235651350426258249787498 << 96"
                let expr_6856 := 0x0a09507084cc699bb0e71ea86a000000000000000000000000
                /// @src 9:5795:5833  "(795164235651350426258249787498 << 96)"
                let expr_6857 := expr_6856
                /// @src 9:5787:5833  "p * x - (795164235651350426258249787498 << 96)"
                let expr_6858 := wrapping_sub_t_int256(expr_6853, convert_t_rational_62999401287715976015676079709131874438408901006995465699328_by_1_to_t_int256(expr_6857))

                /// @src 9:5783:5833  "p = p * x - (795164235651350426258249787498 << 96)"
                var_p_6785 := expr_6858
                let expr_6859 := expr_6858
                /// @src 9:5997:5998  "x"
                let _621 := var_x_6737
                let expr_6863 := _621
                /// @src 9:6001:6032  "5573035233440673466300451813936"
                let expr_6864 := 0x465772b2bbbb5f824b15207a30
                /// @src 9:5997:6032  "x + 5573035233440673466300451813936"
                let expr_6865 := wrapping_add_t_int256(expr_6863, convert_t_rational_5573035233440673466300451813936_by_1_to_t_int256(expr_6864))

                /// @src 9:5986:6032  "int256 q = x + 5573035233440673466300451813936"
                let var_q_6862 := expr_6865
                /// @src 9:6052:6053  "q"
                let _622 := var_q_6862
                let expr_6868 := _622
                /// @src 9:6056:6057  "x"
                let _623 := var_x_6737
                let expr_6869 := _623
                /// @src 9:6052:6057  "q * x"
                let expr_6870 := wrapping_mul_t_int256(expr_6868, expr_6869)

                /// @src 9:6051:6058  "(q * x)"
                let expr_6871 := expr_6870
                /// @src 9:6062:6064  "96"
                let expr_6872 := 0x60
                /// @src 9:6051:6064  "(q * x) >> 96"
                let _624 := convert_t_rational_96_by_1_to_t_uint8(expr_6872)
                let expr_6873 :=
                shift_right_t_int256_t_uint8(expr_6871, _624)

                /// @src 9:6050:6065  "((q * x) >> 96)"
                let expr_6874 := expr_6873
                /// @src 9:6068:6100  "71694874799317883764090561454958"
                let expr_6875 := 0x0388eaa27412d5aca026815d636e
                /// @src 9:6050:6100  "((q * x) >> 96) + 71694874799317883764090561454958"
                let expr_6876 := wrapping_add_t_int256(expr_6874, convert_t_rational_71694874799317883764090561454958_by_1_to_t_int256(expr_6875))

                /// @src 9:6046:6100  "q = ((q * x) >> 96) + 71694874799317883764090561454958"
                var_q_6862 := expr_6876
                let expr_6877 := expr_6876
                /// @src 9:6120:6121  "q"
                let _625 := var_q_6862
                let expr_6880 := _625
                /// @src 9:6124:6125  "x"
                let _626 := var_x_6737
                let expr_6881 := _626
                /// @src 9:6120:6125  "q * x"
                let expr_6882 := wrapping_mul_t_int256(expr_6880, expr_6881)

                /// @src 9:6119:6126  "(q * x)"
                let expr_6883 := expr_6882
                /// @src 9:6130:6132  "96"
                let expr_6884 := 0x60
                /// @src 9:6119:6132  "(q * x) >> 96"
                let _627 := convert_t_rational_96_by_1_to_t_uint8(expr_6884)
                let expr_6885 :=
                shift_right_t_int256_t_uint8(expr_6883, _627)

                /// @src 9:6118:6133  "((q * x) >> 96)"
                let expr_6886 := expr_6885
                /// @src 9:6136:6169  "283447036172924575727196451306956"
                let expr_6887 := 0x0df99ac502031bf953eff472fdcc
                /// @src 9:6118:6169  "((q * x) >> 96) + 283447036172924575727196451306956"
                let expr_6888 := wrapping_add_t_int256(expr_6886, convert_t_rational_283447036172924575727196451306956_by_1_to_t_int256(expr_6887))

                /// @src 9:6114:6169  "q = ((q * x) >> 96) + 283447036172924575727196451306956"
                var_q_6862 := expr_6888
                let expr_6889 := expr_6888
                /// @src 9:6189:6190  "q"
                let _628 := var_q_6862
                let expr_6892 := _628
                /// @src 9:6193:6194  "x"
                let _629 := var_x_6737
                let expr_6893 := _629
                /// @src 9:6189:6194  "q * x"
                let expr_6894 := wrapping_mul_t_int256(expr_6892, expr_6893)

                /// @src 9:6188:6195  "(q * x)"
                let expr_6895 := expr_6894
                /// @src 9:6199:6201  "96"
                let expr_6896 := 0x60
                /// @src 9:6188:6201  "(q * x) >> 96"
                let _630 := convert_t_rational_96_by_1_to_t_uint8(expr_6896)
                let expr_6897 :=
                shift_right_t_int256_t_uint8(expr_6895, _630)

                /// @src 9:6187:6202  "((q * x) >> 96)"
                let expr_6898 := expr_6897
                /// @src 9:6205:6238  "401686690394027663651624208769553"
                let expr_6899 := 0x13cdffb29d51d99322bdff5f2211
                /// @src 9:6187:6238  "((q * x) >> 96) + 401686690394027663651624208769553"
                let expr_6900 := wrapping_add_t_int256(expr_6898, convert_t_rational_401686690394027663651624208769553_by_1_to_t_int256(expr_6899))

                /// @src 9:6183:6238  "q = ((q * x) >> 96) + 401686690394027663651624208769553"
                var_q_6862 := expr_6900
                let expr_6901 := expr_6900
                /// @src 9:6258:6259  "q"
                let _631 := var_q_6862
                let expr_6904 := _631
                /// @src 9:6262:6263  "x"
                let _632 := var_x_6737
                let expr_6905 := _632
                /// @src 9:6258:6263  "q * x"
                let expr_6906 := wrapping_mul_t_int256(expr_6904, expr_6905)

                /// @src 9:6257:6264  "(q * x)"
                let expr_6907 := expr_6906
                /// @src 9:6268:6270  "96"
                let expr_6908 := 0x60
                /// @src 9:6257:6270  "(q * x) >> 96"
                let _633 := convert_t_rational_96_by_1_to_t_uint8(expr_6908)
                let expr_6909 :=
                shift_right_t_int256_t_uint8(expr_6907, _633)

                /// @src 9:6256:6271  "((q * x) >> 96)"
                let expr_6910 := expr_6909
                /// @src 9:6274:6307  "204048457590392012362485061816622"
                let expr_6911 := 0x0a0f742023def783a307a986912e
                /// @src 9:6256:6307  "((q * x) >> 96) + 204048457590392012362485061816622"
                let expr_6912 := wrapping_add_t_int256(expr_6910, convert_t_rational_204048457590392012362485061816622_by_1_to_t_int256(expr_6911))

                /// @src 9:6252:6307  "q = ((q * x) >> 96) + 204048457590392012362485061816622"
                var_q_6862 := expr_6912
                let expr_6913 := expr_6912
                /// @src 9:6327:6328  "q"
                let _634 := var_q_6862
                let expr_6916 := _634
                /// @src 9:6331:6332  "x"
                let _635 := var_x_6737
                let expr_6917 := _635
                /// @src 9:6327:6332  "q * x"
                let expr_6918 := wrapping_mul_t_int256(expr_6916, expr_6917)

                /// @src 9:6326:6333  "(q * x)"
                let expr_6919 := expr_6918
                /// @src 9:6337:6339  "96"
                let expr_6920 := 0x60
                /// @src 9:6326:6339  "(q * x) >> 96"
                let _636 := convert_t_rational_96_by_1_to_t_uint8(expr_6920)
                let expr_6921 :=
                shift_right_t_int256_t_uint8(expr_6919, _636)

                /// @src 9:6325:6340  "((q * x) >> 96)"
                let expr_6922 := expr_6921
                /// @src 9:6343:6375  "31853899698501571402653359427138"
                let expr_6923 := 0x01920d8043ca89b5239253284e42
                /// @src 9:6325:6375  "((q * x) >> 96) + 31853899698501571402653359427138"
                let expr_6924 := wrapping_add_t_int256(expr_6922, convert_t_rational_31853899698501571402653359427138_by_1_to_t_int256(expr_6923))

                /// @src 9:6321:6375  "q = ((q * x) >> 96) + 31853899698501571402653359427138"
                var_q_6862 := expr_6924
                let expr_6925 := expr_6924
                /// @src 9:6395:6396  "q"
                let _637 := var_q_6862
                let expr_6928 := _637
                /// @src 9:6399:6400  "x"
                let _638 := var_x_6737
                let expr_6929 := _638
                /// @src 9:6395:6400  "q * x"
                let expr_6930 := wrapping_mul_t_int256(expr_6928, expr_6929)

                /// @src 9:6394:6401  "(q * x)"
                let expr_6931 := expr_6930
                /// @src 9:6405:6407  "96"
                let expr_6932 := 0x60
                /// @src 9:6394:6407  "(q * x) >> 96"
                let _639 := convert_t_rational_96_by_1_to_t_uint8(expr_6932)
                let expr_6933 :=
                shift_right_t_int256_t_uint8(expr_6931, _639)

                /// @src 9:6393:6408  "((q * x) >> 96)"
                let expr_6934 := expr_6933
                /// @src 9:6411:6441  "909429971244387300277376558375"
                let expr_6935 := 0x0b7a86d7375468fac667a0a527
                /// @src 9:6393:6441  "((q * x) >> 96) + 909429971244387300277376558375"
                let expr_6936 := wrapping_add_t_int256(expr_6934, convert_t_rational_909429971244387300277376558375_by_1_to_t_int256(expr_6935))

                /// @src 9:6389:6441  "q = ((q * x) >> 96) + 909429971244387300277376558375"
                var_q_6862 := expr_6936
                let expr_6937 := expr_6936
                /// @src 9:6455:6759  "assembly {..."
                {
                    var_r_6740 := sdiv(var_p_6785, var_q_6862)
                }
                /// @src 9:7125:7168  "1677202110996718588342820967067443963516166"
                let expr_6941 := 0x1340daa0d5f769dba1915cef59f0815a5506
                /// @src 9:7120:7168  "r *= 1677202110996718588342820967067443963516166"
                let _640 := convert_t_rational_1677202110996718588342820967067443963516166_by_1_to_t_int256(expr_6941)
                let _641 := var_r_6740
                let expr_6942 := wrapping_mul_t_int256(_641, _640)

                var_r_6740 := expr_6942
                /// @src 9:7232:7303  "16597577552685614221487285958193947469193820559219878177908093499208371"
                let expr_6945 := 0x0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b3
                /// @src 9:7306:7307  "k"
                let _642 := var_k_6750
                let expr_6946 := _642
                /// @src 9:7232:7307  "16597577552685614221487285958193947469193820559219878177908093499208371 * k"
                let expr_6947 := wrapping_mul_t_int256(convert_t_rational_16597577552685614221487285958193947469193820559219878177908093499208371_by_1_to_t_int256(expr_6945), expr_6946)

                /// @src 9:7227:7307  "r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k"
                let _643 := var_r_6740
                let expr_6948 := wrapping_add_t_int256(_643, expr_6947)

                var_r_6740 := expr_6948
                /// @src 9:7380:7452  "600920179829731861736702779321621459595472258049074101567377883020018308"
                let expr_6951 := 0x57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b8864284
                /// @src 9:7375:7452  "r += 600920179829731861736702779321621459595472258049074101567377883020018308"
                let _644 := convert_t_rational_600920179829731861736702779321621459595472258049074101567377883020018308_by_1_to_t_int256(expr_6951)
                let _645 := var_r_6740
                let expr_6952 := wrapping_add_t_int256(_645, _644)

                var_r_6740 := expr_6952
                /// @src 9:7523:7526  "174"
                let expr_6955 := 0xae
                /// @src 9:7517:7526  "r >>= 174"
                let _646 := convert_t_rational_174_by_1_to_t_uint8(expr_6955)
                let _647 := var_r_6740
                let expr_6956 :=
                shift_right_t_int256_t_uint8(_647, _646)

                var_r_6740 := expr_6956

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 7024
            /// @src 9:15328:15903  "function log2(uint256 x) internal pure returns (uint256 r) {..."
            function fun_log2_7024(var_x_7010) -> var_r_7013 {
                /// @src 9:15376:15385  "uint256 r"
                let zero_t_uint256_648 := zero_value_for_split_t_uint256()
                var_r_7013 := zero_t_uint256_648

                /// @src 9:15405:15406  "x"
                let _649 := var_x_7010
                let expr_7016 := _649
                /// @src 9:15409:15410  "0"
                let expr_7017 := 0x00
                /// @src 9:15405:15410  "x > 0"
                let expr_7018 := gt(cleanup_t_uint256(expr_7016), convert_t_rational_0_by_1_to_t_uint256(expr_7017))
                /// @src 9:15397:15424  "require(x > 0, \"UNDEFINED\")"
                require_helper_t_stringliteral_b70f99725f613142a957aa77c3aedce39bd858a4e6387f20e61acd49274b091c(expr_7018)
                /// @src 9:15435:15897  "assembly {..."
                {
                    var_r_7013 := shl(7, lt(0xffffffffffffffffffffffffffffffff, var_x_7010))
                    var_r_7013 := or(var_r_7013, shl(6, lt(0xffffffffffffffff, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, shl(5, lt(0xffffffff, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, shl(4, lt(0xffff, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, shl(3, lt(0xff, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, shl(2, lt(0xf, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, shl(1, lt(0x3, shr(var_r_7013, var_x_7010))))
                    var_r_7013 := or(var_r_7013, lt(0x1, shr(var_r_7013, var_x_7010)))
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 7149
            /// @src 17:3924:4161  "function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {..."
            function fun_slice_7149(var__bytes_7121_mpos, var__start_7123) -> var__7126_mpos {
                /// @src 17:3999:4011  "bytes memory"
                let zero_t_bytes_memory_ptr_650_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7126_mpos := zero_t_bytes_memory_ptr_650_mpos

                /// @src 17:4027:4033  "_start"
                let _651 := var__start_7123
                let expr_7128 := _651
                /// @src 17:4037:4043  "_bytes"
                let _652_mpos := var__bytes_7121_mpos
                let expr_7129_mpos := _652_mpos
                /// @src 17:4037:4050  "_bytes.length"
                let expr_7130 := array_length_t_bytes_memory_ptr(expr_7129_mpos)
                /// @src 17:4027:4050  "_start >= _bytes.length"
                let expr_7131 := iszero(lt(cleanup_t_uint256(expr_7128), cleanup_t_uint256(expr_7130)))
                /// @src 17:4023:4093  "if (_start >= _bytes.length) {..."
                if expr_7131 {
                    /// @src 17:4073:4082  "bytes(\"\")"
                    let expr_7135_mpos := convert_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr()
                    /// @src 17:4066:4082  "return bytes(\"\")"
                    var__7126_mpos := expr_7135_mpos
                    leave
                    /// @src 17:4023:4093  "if (_start >= _bytes.length) {..."
                }
                /// @src 17:4115:4121  "_bytes"
                let _653_mpos := var__bytes_7121_mpos
                let expr_7140_mpos := _653_mpos
                /// @src 17:4123:4129  "_start"
                let _654 := var__start_7123
                let expr_7141 := _654
                /// @src 17:4131:4137  "_bytes"
                let _655_mpos := var__bytes_7121_mpos
                let expr_7142_mpos := _655_mpos
                /// @src 17:4131:4144  "_bytes.length"
                let expr_7143 := array_length_t_bytes_memory_ptr(expr_7142_mpos)
                /// @src 17:4147:4153  "_start"
                let _656 := var__start_7123
                let expr_7144 := _656
                /// @src 17:4131:4153  "_bytes.length - _start"
                let expr_7145 := checked_sub_t_uint256(expr_7143, expr_7144)

                /// @src 17:4109:4154  "slice(_bytes, _start, _bytes.length - _start)"
                let expr_7146_mpos := fun_slice_7118(expr_7140_mpos, expr_7141, expr_7145)
                /// @src 17:4102:4154  "return slice(_bytes, _start, _bytes.length - _start)"
                var__7126_mpos := expr_7146_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function cleanup_t_rational_31_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_31_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_31_by_1(value)))
            }

            function wrapping_add_t_uint256(x, y) -> sum {
                sum := cleanup_t_uint256(add(x, y))
            }

            function store_literal_in_memory_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(memPtr) {

                mstore(add(memPtr, 0), "slice_overflow")

            }

            function abi_encode_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)
                store_literal_in_memory_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(memPtr) {

                mstore(add(memPtr, 0), "slice_outOfBounds")

            }

            function abi_encode_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)
                store_literal_in_memory_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 7118
            /// @src 17:688:3570  "function slice(..."
            function fun_slice_7118(var__bytes_7073_mpos, var__start_7075, var__length_7077) -> var__7080_mpos {
                /// @src 17:810:822  "bytes memory"
                let zero_t_bytes_memory_ptr_657_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7080_mpos := zero_t_bytes_memory_ptr_657_mpos

                /// @src 17:866:873  "_length"
                let _658 := var__length_7077
                let expr_7083 := _658
                /// @src 17:876:878  "31"
                let expr_7084 := 0x1f
                /// @src 17:866:878  "_length + 31"
                let expr_7085 := wrapping_add_t_uint256(expr_7083, convert_t_rational_31_by_1_to_t_uint256(expr_7084))

                /// @src 17:882:889  "_length"
                let _659 := var__length_7077
                let expr_7086 := _659
                /// @src 17:866:889  "_length + 31 >= _length"
                let expr_7087 := iszero(lt(cleanup_t_uint256(expr_7085), cleanup_t_uint256(expr_7086)))
                /// @src 17:858:908  "require(_length + 31 >= _length, \"slice_overflow\")"
                require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(expr_7087)
                /// @src 17:930:936  "_start"
                let _660 := var__start_7075
                let expr_7092 := _660
                /// @src 17:939:946  "_length"
                let _661 := var__length_7077
                let expr_7093 := _661
                /// @src 17:930:946  "_start + _length"
                let expr_7094 := wrapping_add_t_uint256(expr_7092, expr_7093)

                /// @src 17:950:956  "_start"
                let _662 := var__start_7075
                let expr_7095 := _662
                /// @src 17:930:956  "_start + _length >= _start"
                let expr_7096 := iszero(lt(cleanup_t_uint256(expr_7094), cleanup_t_uint256(expr_7095)))
                /// @src 17:922:975  "require(_start + _length >= _start, \"slice_overflow\")"
                require_helper_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e(expr_7096)
                /// @src 17:997:1003  "_bytes"
                let _663_mpos := var__bytes_7073_mpos
                let expr_7101_mpos := _663_mpos
                /// @src 17:997:1010  "_bytes.length"
                let expr_7102 := array_length_t_bytes_memory_ptr(expr_7101_mpos)
                /// @src 17:1014:1020  "_start"
                let _664 := var__start_7075
                let expr_7103 := _664
                /// @src 17:1023:1030  "_length"
                let _665 := var__length_7077
                let expr_7104 := _665
                /// @src 17:1014:1030  "_start + _length"
                let expr_7105 := wrapping_add_t_uint256(expr_7103, expr_7104)

                /// @src 17:997:1030  "_bytes.length >= _start + _length"
                let expr_7106 := iszero(lt(cleanup_t_uint256(expr_7102), cleanup_t_uint256(expr_7105)))
                /// @src 17:989:1052  "require(_bytes.length >= _start + _length, \"slice_outOfBounds\")"
                require_helper_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0(expr_7106)
                /// @src 17:1073:1095  "bytes memory tempBytes"
                let var_tempBytes_7112_mpos
                let zero_t_bytes_memory_ptr_666_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var_tempBytes_7112_mpos := zero_t_bytes_memory_ptr_666_mpos
                /// @src 17:1106:3537  "assembly {..."
                {
                    switch iszero(var__length_7077)
                    case 0 {
                        var_tempBytes_7112_mpos := mload(0x40)
                        let usr$lengthmod := and(var__length_7077, 31)
                        let usr$mc := add(add(var_tempBytes_7112_mpos, usr$lengthmod), mul(0x20, iszero(usr$lengthmod)))
                        let usr$end := add(usr$mc, var__length_7077)
                        for {
                            let usr$cc := add(add(add(var__bytes_7073_mpos, usr$lengthmod), mul(0x20, iszero(usr$lengthmod))), var__start_7075)
                        }
                        lt(usr$mc, usr$end)
                        {
                            usr$mc := add(usr$mc, 0x20)
                            usr$cc := add(usr$cc, 0x20)
                        }
                        { mstore(usr$mc, mload(usr$cc)) }
                        mstore(var_tempBytes_7112_mpos, var__length_7077)
                        mstore(0x40, and(add(usr$mc, 31), not(31)))
                    }
                    default {
                        var_tempBytes_7112_mpos := mload(0x40)
                        mstore(var_tempBytes_7112_mpos, 0)
                        mstore(0x40, add(var_tempBytes_7112_mpos, 0x20))
                    }
                }
                /// @src 17:3554:3563  "tempBytes"
                let _667_mpos := var_tempBytes_7112_mpos
                let expr_7115_mpos := _667_mpos
                /// @src 17:3547:3563  "return tempBytes"
                var__7080_mpos := expr_7115_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_bytes1() -> ret {
                ret := 0
            }

            function cleanup_t_rational_4_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_4_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_4_by_1(value)))
            }

            function shift_right_t_bytes1_t_uint8(value, bits) -> result {
                bits := cleanup_t_uint8(bits)
                result := cleanup_t_bytes1(shift_right_unsigned_dynamic(bits, cleanup_t_bytes1(value)))
            }

            function cleanup_t_rational_15_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_15_by_1_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_15_by_1(value)))
            }

            /// @ast-id 7218
            /// @src 17:4477:4934  "function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {..."
            function fun_toNibbles_7218(var__bytes_7152_mpos) -> var__7155_mpos {
                /// @src 17:4540:4552  "bytes memory"
                let zero_t_bytes_memory_ptr_668_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7155_mpos := zero_t_bytes_memory_ptr_668_mpos

                /// @src 17:4586:4592  "_bytes"
                let _669_mpos := var__bytes_7152_mpos
                let expr_7159_mpos := _669_mpos
                /// @src 17:4586:4599  "_bytes.length"
                let expr_7160 := array_length_t_bytes_memory_ptr(expr_7159_mpos)
                /// @src 17:4564:4599  "uint256 bytesLength = _bytes.length"
                let var_bytesLength_7158 := expr_7160
                /// @src 17:4642:4653  "bytesLength"
                let _670 := var_bytesLength_7158
                let expr_7166 := _670
                /// @src 17:4656:4657  "2"
                let expr_7167 := 0x02
                /// @src 17:4642:4657  "bytesLength * 2"
                let expr_7168 := checked_mul_t_uint256(expr_7166, convert_t_rational_2_by_1_to_t_uint256(expr_7167))

                /// @src 17:4632:4658  "new bytes(bytesLength * 2)"
                let expr_7169_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_7168)
                /// @src 17:4609:4658  "bytes memory nibbles = new bytes(bytesLength * 2)"
                let var_nibbles_7163_mpos := expr_7169_mpos
                /// @src 17:4668:4676  "bytes1 b"
                let var_b_7172
                let zero_t_bytes1_671 := zero_value_for_split_t_bytes1()
                var_b_7172 := zero_t_bytes1_671
                /// @src 17:4687:4903  "for (uint256 i = 0; i < bytesLength; ) {..."
                for {
                    /// @src 17:4704:4705  "0"
                    let expr_7176 := 0x00
                    /// @src 17:4692:4705  "uint256 i = 0"
                    let var_i_7175 := convert_t_rational_0_by_1_to_t_uint256(expr_7176)
                    } 1 {
                }
                {
                    /// @src 17:4707:4708  "i"
                    let _672 := var_i_7175
                    let expr_7178 := _672
                    /// @src 17:4711:4722  "bytesLength"
                    let _673 := var_bytesLength_7158
                    let expr_7179 := _673
                    /// @src 17:4707:4722  "i < bytesLength"
                    let expr_7180 := lt(cleanup_t_uint256(expr_7178), cleanup_t_uint256(expr_7179))
                    if iszero(expr_7180) { break }
                    /// @src 17:4744:4750  "_bytes"
                    let _674_mpos := var__bytes_7152_mpos
                    let expr_7182_mpos := _674_mpos
                    /// @src 17:4751:4752  "i"
                    let _675 := var_i_7175
                    let expr_7183 := _675
                    /// @src 17:4744:4753  "_bytes[i]"
                    let _676 := read_from_memoryt_bytes1(memory_array_index_access_t_bytes_memory_ptr(expr_7182_mpos, expr_7183))
                    let expr_7184 := _676
                    /// @src 17:4740:4753  "b = _bytes[i]"
                    var_b_7172 := expr_7184
                    let expr_7185 := expr_7184
                    /// @src 17:4784:4785  "b"
                    let _677 := var_b_7172
                    let expr_7192 := _677
                    /// @src 17:4789:4790  "4"
                    let expr_7193 := 0x04
                    /// @src 17:4784:4790  "b >> 4"
                    let _678 := convert_t_rational_4_by_1_to_t_uint8(expr_7193)
                    let expr_7194 :=
                    shift_right_t_bytes1_t_uint8(expr_7192, _678)

                    /// @src 17:4767:4774  "nibbles"
                    let _679_mpos := var_nibbles_7163_mpos
                    let expr_7187_mpos := _679_mpos
                    /// @src 17:4775:4776  "i"
                    let _680 := var_i_7175
                    let expr_7188 := _680
                    /// @src 17:4779:4780  "2"
                    let expr_7189 := 0x02
                    /// @src 17:4775:4780  "i * 2"
                    let expr_7190 := checked_mul_t_uint256(expr_7188, convert_t_rational_2_by_1_to_t_uint256(expr_7189))

                    /// @src 17:4767:4790  "nibbles[i * 2] = b >> 4"
                    let _681 := expr_7194
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_7187_mpos, expr_7190), byte(0, _681))
                    let expr_7195 := expr_7194
                    /// @src 17:4825:4826  "b"
                    let _682 := var_b_7172
                    let expr_7204 := _682
                    /// @src 17:4829:4833  "0x0f"
                    let expr_7205 := 0x0f
                    /// @src 17:4825:4833  "b & 0x0f"
                    let expr_7206 := and(expr_7204, convert_t_rational_15_by_1_to_t_bytes1(expr_7205))

                    /// @src 17:4804:4811  "nibbles"
                    let _683_mpos := var_nibbles_7163_mpos
                    let expr_7197_mpos := _683_mpos
                    /// @src 17:4812:4813  "i"
                    let _684 := var_i_7175
                    let expr_7198 := _684
                    /// @src 17:4816:4817  "2"
                    let expr_7199 := 0x02
                    /// @src 17:4812:4817  "i * 2"
                    let expr_7200 := checked_mul_t_uint256(expr_7198, convert_t_rational_2_by_1_to_t_uint256(expr_7199))

                    /// @src 17:4820:4821  "1"
                    let expr_7201 := 0x01
                    /// @src 17:4812:4821  "i * 2 + 1"
                    let expr_7202 := checked_add_t_uint256(expr_7200, convert_t_rational_1_by_1_to_t_uint256(expr_7201))

                    /// @src 17:4804:4833  "nibbles[i * 2 + 1] = b & 0x0f"
                    let _685 := expr_7206
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_7197_mpos, expr_7202), byte(0, _685))
                    let expr_7207 := expr_7206
                    /// @src 17:4875:4878  "++i"
                    let _687 := var_i_7175
                    let _686 := increment_wrapping_t_uint256(_687)
                    var_i_7175 := _686
                    let expr_7210 := _686
                }
                /// @src 17:4920:4927  "nibbles"
                let _688_mpos := var_nibbles_7163_mpos
                let expr_7215_mpos := _688_mpos
                /// @src 17:4913:4927  "return nibbles"
                var__7155_mpos := expr_7215_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 7237
            /// @src 17:5219:5367  "function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {..."
            function fun_equal_7237(var__bytes_7221_mpos, var__other_7223_mpos) -> var__7226 {
                /// @src 17:5299:5303  "bool"
                let zero_t_bool_689 := zero_value_for_split_t_bool()
                var__7226 := zero_t_bool_689

                /// @src 17:5332:5338  "_bytes"
                let _690_mpos := var__bytes_7221_mpos
                let expr_7229_mpos := _690_mpos
                /// @src 17:5322:5339  "keccak256(_bytes)"
                let expr_7230 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_7229_mpos), array_length_t_bytes_memory_ptr(expr_7229_mpos))
                /// @src 17:5353:5359  "_other"
                let _691_mpos := var__other_7223_mpos
                let expr_7232_mpos := _691_mpos
                /// @src 17:5343:5360  "keccak256(_other)"
                let expr_7233 := keccak256(array_dataslot_t_bytes_memory_ptr(expr_7232_mpos), array_length_t_bytes_memory_ptr(expr_7232_mpos))
                /// @src 17:5322:5360  "keccak256(_bytes) == keccak256(_other)"
                let expr_7234 := eq(cleanup_t_bytes32(expr_7230), cleanup_t_bytes32(expr_7233))
                /// @src 17:5315:5360  "return keccak256(_bytes) == keccak256(_other)"
                var__7226 := expr_7234
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr() -> ret {
                ret := 96
            }

            /// @ast-id 7425
            /// @src 24:4047:4172  "function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {..."
            function fun_readList_7425(var__in_7411_mpos) -> var__7416_mpos {
                /// @src 24:4106:4122  "RLPItem[] memory"
                let zero_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr_692_mpos := zero_value_for_split_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr()
                var__7416_mpos := zero_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr_692_mpos

                /// @src 24:4160:4163  "_in"
                let _693_mpos := var__in_7411_mpos
                let expr_7420_mpos := _693_mpos
                /// @src 24:4150:4164  "toRLPItem(_in)"
                let expr_7421_mpos := fun_toRLPItem_7285(expr_7420_mpos)
                /// @src 24:4141:4165  "readList(toRLPItem(_in))"
                let expr_7422_mpos := fun_readList_7408(expr_7421_mpos)
                /// @src 24:4134:4165  "return readList(toRLPItem(_in))"
                var__7416_mpos := expr_7422_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function allocate_memory_struct_t_struct$_RLPItem_$7252_memory_ptr() -> memPtr {
                memPtr := allocate_memory(64)
            }

            function zero_value_for_t_uint256() -> ret {
                ret := 0
            }

            function zero_value_for_t_userDefinedValueType$_MemoryPointer_$7243() -> ret {
                ret := 0
            }

            function allocate_and_zero_memory_struct_t_struct$_RLPItem_$7252_memory_ptr() -> memPtr {
                memPtr := allocate_memory_struct_t_struct$_RLPItem_$7252_memory_ptr()
                let offset := memPtr

                mstore(offset, zero_value_for_t_uint256())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_userDefinedValueType$_MemoryPointer_$7243())
                offset := add(offset, 32)

            }

            function zero_value_for_split_t_struct$_RLPItem_$7252_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_RLPItem_$7252_memory_ptr()
            }

            function store_literal_in_memory_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of an RLP item")

                mstore(add(memPtr, 32), " must be greater than zero to be")

                mstore(add(memPtr, 64), " decodable")

            }

            function abi_encode_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function zero_value_for_split_t_userDefinedValueType$_MemoryPointer_$7243() -> ret {
                ret := 0
            }

            function allocate_memory_struct_t_struct$_RLPItem_$7252_storage_ptr() -> memPtr {
                memPtr := allocate_memory(64)
            }

            function write_to_memory_t_uint256(memPtr, value) {
                mstore(memPtr, cleanup_t_uint256(value))
            }

            function write_to_memory_t_userDefinedValueType$_MemoryPointer_$7243(memPtr, value) {
                mstore(memPtr, cleanup_t_uint256(value))
            }

            /// @ast-id 7285
            /// @src 24:1385:1804  "function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {..."
            function fun_toRLPItem_7285(var__in_7259_mpos) -> var__7263_mpos {
                /// @src 24:1445:1459  "RLPItem memory"
                let zero_t_struct$_RLPItem_$7252_memory_ptr_694_mpos := zero_value_for_split_t_struct$_RLPItem_$7252_memory_ptr()
                var__7263_mpos := zero_t_struct$_RLPItem_$7252_memory_ptr_694_mpos

                /// @src 24:1535:1538  "_in"
                let _695_mpos := var__in_7259_mpos
                let expr_7266_mpos := _695_mpos
                /// @src 24:1535:1545  "_in.length"
                let expr_7267 := array_length_t_bytes_memory_ptr(expr_7266_mpos)
                /// @src 24:1548:1549  "0"
                let expr_7268 := 0x00
                /// @src 24:1535:1549  "_in.length > 0"
                let expr_7269 := gt(cleanup_t_uint256(expr_7267), convert_t_rational_0_by_1_to_t_uint256(expr_7268))
                /// @src 24:1514:1649  "require(..."
                require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(expr_7269)
                /// @src 24:1660:1677  "MemoryPointer ptr"
                let var_ptr_7275
                let zero_t_userDefinedValueType$_MemoryPointer_$7243_696 := zero_value_for_split_t_userDefinedValueType$_MemoryPointer_$7243()
                var_ptr_7275 := zero_t_userDefinedValueType$_MemoryPointer_$7243_696
                /// @src 24:1687:1739  "assembly {..."
                {
                    var_ptr_7275 := add(var__in_7259_mpos, 32)
                }
                /// @src 24:1774:1777  "_in"
                let _697_mpos := var__in_7259_mpos
                let expr_7279_mpos := _697_mpos
                /// @src 24:1774:1784  "_in.length"
                let expr_7280 := array_length_t_bytes_memory_ptr(expr_7279_mpos)
                /// @src 24:1791:1794  "ptr"
                let _698 := var_ptr_7275
                let expr_7281 := _698
                /// @src 24:1756:1797  "RLPItem({ length: _in.length, ptr: ptr })"
                let expr_7282_mpos := allocate_memory_struct_t_struct$_RLPItem_$7252_storage_ptr()
                write_to_memory_t_uint256(add(expr_7282_mpos, 0), expr_7280)
                write_to_memory_t_userDefinedValueType$_MemoryPointer_$7243(add(expr_7282_mpos, 32), expr_7281)
                /// @src 24:1749:1797  "return RLPItem({ length: _in.length, ptr: ptr })"
                var__7263_mpos := expr_7282_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function panic_error_0x21() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x21)
                revert(0, 0x24)
            }

            function validator_assert_t_enum$_RLPItemType_$7246(value) {
                if iszero(lt(value, 2)) { panic_error_0x21() }
            }

            function cleanup_t_enum$_RLPItemType_$7246(value) -> cleaned {
                cleaned := value validator_assert_t_enum$_RLPItemType_$7246(value)
            }

            function store_literal_in_memory_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: decoded item type for")

                mstore(add(memPtr, 32), " list is not a list item")

            }

            function abi_encode_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)
                store_literal_in_memory_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: list item has an inva")

                mstore(add(memPtr, 32), "lid data remainder")

            }

            function abi_encode_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)
                store_literal_in_memory_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @src 24:1144:1190  "uint256 internal constant MAX_LIST_LENGTH = 32"
            function constant_MAX_LIST_LENGTH_7256() -> ret {
                /// @src 24:1188:1190  "32"
                let expr_7255 := 0x20
                let _707 := convert_t_rational_32_by_1_to_t_uint256(expr_7255)

                ret := _707
            }

            function array_allocation_size_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := mul(length, 0x20)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_value_for_t_struct$_RLPItem_$7252_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_RLPItem_$7252_memory_ptr()
            }

            function zero_complex_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(dataStart, dataSizeInBytes) {
                for {let i := 0} lt(i, dataSizeInBytes) { i := add(i, 32) } {
                    mstore(add(dataStart, i), zero_value_for_t_struct$_RLPItem_$7252_memory_ptr())
                }
            }

            function allocate_and_zero_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_complex_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(dataStart, dataSize)
            }

            function read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(ptr) -> returnValue {

                let value := cleanup_t_uint256(mload(ptr))

                returnValue :=

                value

            }

            /// @ast-id 7408
            /// @src 24:1978:3873  "function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {..."
            function fun_readList_7408(var__in_7289_mpos) -> var__7294_mpos {
                /// @src 24:2039:2055  "RLPItem[] memory"
                let zero_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr_699_mpos := zero_value_for_split_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr()
                var__7294_mpos := zero_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr_699_mpos

                /// @src 24:2146:2149  "_in"
                let _700_mpos := var__in_7289_mpos
                let expr_7304_mpos := _700_mpos
                /// @src 24:2132:2150  "_decodeLength(_in)"
                let expr_7305_component_1, expr_7305_component_2, expr_7305_component_3 := fun__decodeLength_7727(expr_7304_mpos)
                /// @src 24:2067:2150  "(uint256 listOffset, uint256 listLength, RLPItemType itemType) = _decodeLength(_in)"
                let var_listOffset_7297 := expr_7305_component_1
                let var_listLength_7299 := expr_7305_component_2
                let var_itemType_7302 := expr_7305_component_3
                /// @src 24:2182:2190  "itemType"
                let _701 := var_itemType_7302
                let expr_7308 := _701
                /// @src 24:2194:2215  "RLPItemType.LIST_ITEM"
                let expr_7310 := 1
                /// @src 24:2182:2215  "itemType == RLPItemType.LIST_ITEM"
                let expr_7311 := eq(cleanup_t_enum$_RLPItemType_$7246(expr_7308), cleanup_t_enum$_RLPItemType_$7246(expr_7310))
                /// @src 24:2161:2297  "require(..."
                require_helper_t_stringliteral_05702a2294db8117b6d5fd6d91434d0d26390f0bc355df38faea10e32cfd1331(expr_7311)
                /// @src 24:2329:2339  "listOffset"
                let _702 := var_listOffset_7297
                let expr_7316 := _702
                /// @src 24:2342:2352  "listLength"
                let _703 := var_listLength_7299
                let expr_7317 := _703
                /// @src 24:2329:2352  "listOffset + listLength"
                let expr_7318 := checked_add_t_uint256(expr_7316, expr_7317)

                /// @src 24:2356:2359  "_in"
                let _704_mpos := var__in_7289_mpos
                let expr_7319_mpos := _704_mpos
                /// @src 24:2356:2366  "_in.length"
                let _705 := add(expr_7319_mpos, 0)
                let _706 := read_from_memoryt_uint256(_705)
                let expr_7320 := _706
                /// @src 24:2329:2366  "listOffset + listLength == _in.length"
                let expr_7321 := eq(cleanup_t_uint256(expr_7318), cleanup_t_uint256(expr_7320))
                /// @src 24:2308:2442  "require(..."
                require_helper_t_stringliteral_742a226b8d0dc042ff9e48faf576aaf19aff128bff6693a9a23229bb1939729c(expr_7321)
                /// @src 24:2882:2897  "MAX_LIST_LENGTH"
                let expr_7334 := constant_MAX_LIST_LENGTH_7256()
                /// @src 24:2868:2898  "new RLPItem[](MAX_LIST_LENGTH)"
                let expr_7335_mpos := allocate_and_zero_memory_array_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_7334)
                /// @src 24:2845:2898  "RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH)"
                let var_out_7329_mpos := expr_7335_mpos
                /// @src 24:2929:2930  "0"
                let expr_7339 := 0x00
                /// @src 24:2909:2930  "uint256 itemCount = 0"
                let var_itemCount_7338 := convert_t_rational_0_by_1_to_t_uint256(expr_7339)
                /// @src 24:2957:2967  "listOffset"
                let _708 := var_listOffset_7297
                let expr_7343 := _708
                /// @src 24:2940:2967  "uint256 offset = listOffset"
                let var_offset_7342 := expr_7343
                /// @src 24:2977:3714  "while (offset < _in.length) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 24:2984:2990  "offset"
                    let _709 := var_offset_7342
                    let expr_7345 := _709
                    /// @src 24:2993:2996  "_in"
                    let _710_mpos := var__in_7289_mpos
                    let expr_7346_mpos := _710_mpos
                    /// @src 24:2993:3003  "_in.length"
                    let _711 := add(expr_7346_mpos, 0)
                    let _712 := read_from_memoryt_uint256(_711)
                    let expr_7347 := _712
                    /// @src 24:2984:3003  "offset < _in.length"
                    let expr_7348 := lt(cleanup_t_uint256(expr_7345), cleanup_t_uint256(expr_7347))
                    if iszero(expr_7348) { break }
                    /// @src 24:3133:3136  "_in"
                    let _713_mpos := var__in_7289_mpos
                    let expr_7355_mpos := _713_mpos
                    /// @src 24:3133:3143  "_in.length"
                    let _714 := add(expr_7355_mpos, 0)
                    let _715 := read_from_memoryt_uint256(_714)
                    let expr_7356 := _715
                    /// @src 24:3146:3152  "offset"
                    let _716 := var_offset_7342
                    let expr_7357 := _716
                    /// @src 24:3133:3152  "_in.length - offset"
                    let expr_7358 := checked_sub_t_uint256(expr_7356, expr_7357)

                    /// @src 24:3219:3222  "_in"
                    let _717_mpos := var__in_7289_mpos
                    let expr_7363_mpos := _717_mpos
                    /// @src 24:3219:3226  "_in.ptr"
                    let _718 := add(expr_7363_mpos, 32)
                    let _719 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(_718)
                    let expr_7364 := _719
                    /// @src 24:3198:3227  "MemoryPointer.unwrap(_in.ptr)"
                    let expr_7365 := convert_t_uint256_to_t_uint256(expr_7364)
                    /// @src 24:3230:3236  "offset"
                    let _720 := var_offset_7342
                    let expr_7366 := _720
                    /// @src 24:3198:3236  "MemoryPointer.unwrap(_in.ptr) + offset"
                    let expr_7367 := checked_add_t_uint256(expr_7365, expr_7366)

                    /// @src 24:3179:3237  "MemoryPointer.wrap(MemoryPointer.unwrap(_in.ptr) + offset)"
                    let expr_7368 := convert_t_uint256_to_t_uint256(expr_7367)
                    /// @src 24:3095:3256  "RLPItem({..."
                    let expr_7369_mpos := allocate_memory_struct_t_struct$_RLPItem_$7252_storage_ptr()
                    write_to_memory_t_uint256(add(expr_7369_mpos, 0), expr_7358)
                    write_to_memory_t_userDefinedValueType$_MemoryPointer_$7243(add(expr_7369_mpos, 32), expr_7368)
                    /// @src 24:3064:3270  "_decodeLength(..."
                    let expr_7370_component_1, expr_7370_component_2, expr_7370_component_3 := fun__decodeLength_7727(expr_7369_mpos)
                    /// @src 24:3019:3270  "(uint256 itemOffset, uint256 itemLength, ) = _decodeLength(..."
                    let var_itemOffset_7350 := expr_7370_component_1
                    let var_itemLength_7352 := expr_7370_component_2
                    /// @src 24:3508:3518  "itemLength"
                    let _721 := var_itemLength_7352
                    let expr_7376 := _721
                    /// @src 24:3521:3531  "itemOffset"
                    let _722 := var_itemOffset_7350
                    let expr_7377 := _722
                    /// @src 24:3508:3531  "itemLength + itemOffset"
                    let expr_7378 := checked_add_t_uint256(expr_7376, expr_7377)

                    /// @src 24:3594:3597  "_in"
                    let _723_mpos := var__in_7289_mpos
                    let expr_7383_mpos := _723_mpos
                    /// @src 24:3594:3601  "_in.ptr"
                    let _724 := add(expr_7383_mpos, 32)
                    let _725 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(_724)
                    let expr_7384 := _725
                    /// @src 24:3573:3602  "MemoryPointer.unwrap(_in.ptr)"
                    let expr_7385 := convert_t_uint256_to_t_uint256(expr_7384)
                    /// @src 24:3605:3611  "offset"
                    let _726 := var_offset_7342
                    let expr_7386 := _726
                    /// @src 24:3573:3611  "MemoryPointer.unwrap(_in.ptr) + offset"
                    let expr_7387 := checked_add_t_uint256(expr_7385, expr_7386)

                    /// @src 24:3554:3612  "MemoryPointer.wrap(MemoryPointer.unwrap(_in.ptr) + offset)"
                    let expr_7388 := convert_t_uint256_to_t_uint256(expr_7387)
                    /// @src 24:3474:3627  "RLPItem({..."
                    let expr_7389_mpos := allocate_memory_struct_t_struct$_RLPItem_$7252_storage_ptr()
                    write_to_memory_t_uint256(add(expr_7389_mpos, 0), expr_7378)
                    write_to_memory_t_userDefinedValueType$_MemoryPointer_$7243(add(expr_7389_mpos, 32), expr_7388)
                    /// @src 24:3457:3460  "out"
                    let _727_mpos := var_out_7329_mpos
                    let expr_7372_mpos := _727_mpos
                    /// @src 24:3461:3470  "itemCount"
                    let _728 := var_itemCount_7338
                    let expr_7373 := _728
                    /// @src 24:3457:3627  "out[itemCount] = RLPItem({..."
                    mstore(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_7372_mpos, expr_7373), expr_7389_mpos)
                    let _729_mpos := mload(memory_array_index_access_t_array$_t_struct$_RLPItem_$7252_memory_ptr_$dyn_memory_ptr(expr_7372_mpos, expr_7373))
                    let expr_7390_mpos := _729_mpos
                    /// @src 24:3655:3656  "1"
                    let expr_7393 := 0x01
                    /// @src 24:3642:3656  "itemCount += 1"
                    let _730 := convert_t_rational_1_by_1_to_t_uint256(expr_7393)
                    let _731 := var_itemCount_7338
                    let expr_7394 := checked_add_t_uint256(_731, _730)

                    var_itemCount_7338 := expr_7394
                    /// @src 24:3680:3690  "itemOffset"
                    let _732 := var_itemOffset_7350
                    let expr_7397 := _732
                    /// @src 24:3693:3703  "itemLength"
                    let _733 := var_itemLength_7352
                    let expr_7398 := _733
                    /// @src 24:3680:3703  "itemOffset + itemLength"
                    let expr_7399 := checked_add_t_uint256(expr_7397, expr_7398)

                    /// @src 24:3670:3703  "offset += itemOffset + itemLength"
                    let _734 := var_offset_7342
                    let expr_7400 := checked_add_t_uint256(_734, expr_7399)

                    var_offset_7342 := expr_7400
                }
                /// @src 24:3791:3846  "assembly {..."
                {
                    mstore(var_out_7329_mpos, var_itemCount_7338)
                }
                /// @src 24:3863:3866  "out"
                let _735_mpos := var_out_7329_mpos
                let expr_7405_mpos := _735_mpos
                /// @src 24:3856:3866  "return out"
                var__7294_mpos := expr_7405_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function store_literal_in_memory_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: decoded item type for")

                mstore(add(memPtr, 32), " bytes is not a data item")

            }

            function abi_encode_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 57)
                store_literal_in_memory_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: bytes value contains ")

                mstore(add(memPtr, 32), "an invalid remainder")

            }

            function abi_encode_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 52)
                store_literal_in_memory_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 7471
            /// @src 24:4325:4852  "function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {..."
            function fun_readBytes_7471(var__in_7429_mpos) -> var__7432_mpos {
                /// @src 24:4387:4399  "bytes memory"
                let zero_t_bytes_memory_ptr_736_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7432_mpos := zero_t_bytes_memory_ptr_736_mpos

                /// @src 24:4490:4493  "_in"
                let _737_mpos := var__in_7429_mpos
                let expr_7442_mpos := _737_mpos
                /// @src 24:4476:4494  "_decodeLength(_in)"
                let expr_7443_component_1, expr_7443_component_2, expr_7443_component_3 := fun__decodeLength_7727(expr_7442_mpos)
                /// @src 24:4411:4494  "(uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in)"
                let var_itemOffset_7435 := expr_7443_component_1
                let var_itemLength_7437 := expr_7443_component_2
                let var_itemType_7440 := expr_7443_component_3
                /// @src 24:4526:4534  "itemType"
                let _738 := var_itemType_7440
                let expr_7446 := _738
                /// @src 24:4538:4559  "RLPItemType.DATA_ITEM"
                let expr_7448 := 0
                /// @src 24:4526:4559  "itemType == RLPItemType.DATA_ITEM"
                let expr_7449 := eq(cleanup_t_enum$_RLPItemType_$7246(expr_7446), cleanup_t_enum$_RLPItemType_$7246(expr_7448))
                /// @src 24:4505:4642  "require(..."
                require_helper_t_stringliteral_a2e7c038180449c678004972c13ebe5172e2ecea76c65ffc7912a7e206c4643f(expr_7449)
                /// @src 24:4674:4677  "_in"
                let _739_mpos := var__in_7429_mpos
                let expr_7454_mpos := _739_mpos
                /// @src 24:4674:4684  "_in.length"
                let _740 := add(expr_7454_mpos, 0)
                let _741 := read_from_memoryt_uint256(_740)
                let expr_7455 := _741
                /// @src 24:4688:4698  "itemOffset"
                let _742 := var_itemOffset_7435
                let expr_7456 := _742
                /// @src 24:4701:4711  "itemLength"
                let _743 := var_itemLength_7437
                let expr_7457 := _743
                /// @src 24:4688:4711  "itemOffset + itemLength"
                let expr_7458 := checked_add_t_uint256(expr_7456, expr_7457)

                /// @src 24:4674:4711  "_in.length == itemOffset + itemLength"
                let expr_7459 := eq(cleanup_t_uint256(expr_7455), cleanup_t_uint256(expr_7458))
                /// @src 24:4653:4789  "require(..."
                require_helper_t_stringliteral_b536c7542c8a1c1130af5eccef99927afcc414d5f62dffc6021788b9be759f01(expr_7459)
                /// @src 24:4813:4816  "_in"
                let _744_mpos := var__in_7429_mpos
                let expr_7464_mpos := _744_mpos
                /// @src 24:4813:4820  "_in.ptr"
                let _745 := add(expr_7464_mpos, 32)
                let _746 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(_745)
                let expr_7465 := _746
                /// @src 24:4822:4832  "itemOffset"
                let _747 := var_itemOffset_7435
                let expr_7466 := _747
                /// @src 24:4834:4844  "itemLength"
                let _748 := var_itemLength_7437
                let expr_7467 := _748
                /// @src 24:4807:4845  "_copy(_in.ptr, itemOffset, itemLength)"
                let expr_7468_mpos := fun__copy_7767(expr_7465, expr_7466, expr_7467)
                /// @src 24:4800:4845  "return _copy(_in.ptr, itemOffset, itemLength)"
                var__7432_mpos := expr_7468_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 7504
            /// @src 24:5281:5413  "function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {..."
            function fun_readRawBytes_7504(var__in_7490_mpos) -> var__7493_mpos {
                /// @src 24:5346:5358  "bytes memory"
                let zero_t_bytes_memory_ptr_749_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7493_mpos := zero_t_bytes_memory_ptr_749_mpos

                /// @src 24:5383:5386  "_in"
                let _750_mpos := var__in_7490_mpos
                let expr_7496_mpos := _750_mpos
                /// @src 24:5383:5390  "_in.ptr"
                let _751 := add(expr_7496_mpos, 32)
                let _752 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(_751)
                let expr_7497 := _752
                /// @src 24:5392:5393  "0"
                let expr_7498 := 0x00
                /// @src 24:5395:5398  "_in"
                let _753_mpos := var__in_7490_mpos
                let expr_7499_mpos := _753_mpos
                /// @src 24:5395:5405  "_in.length"
                let _754 := add(expr_7499_mpos, 0)
                let _755 := read_from_memoryt_uint256(_754)
                let expr_7500 := _755
                /// @src 24:5377:5406  "_copy(_in.ptr, 0, _in.length)"
                let _756 := convert_t_rational_0_by_1_to_t_uint256(expr_7498)
                let expr_7501_mpos := fun__copy_7767(expr_7497, _756, expr_7500)
                /// @src 24:5370:5406  "return _copy(_in.ptr, 0, _in.length)"
                var__7493_mpos := expr_7501_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            function zero_value_for_split_t_enum$_RLPItemType_$7246() -> ret {
                ret := 0
            }

            function cleanup_t_rational_127_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_127_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_127_by_1(value)))
            }

            function cleanup_t_rational_183_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_183_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_183_by_1(value)))
            }

            function cleanup_t_rational_191_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_191_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_191_by_1(value)))
            }

            function cleanup_t_rational_247_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_247_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_247_by_1(value)))
            }

            function store_literal_in_memory_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be > than length of list lengt")

                mstore(add(memPtr, 64), "h (long list)")

            }

            function abi_encode_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_rational_0_by_1_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_0_by_1(value)))
            }

            function store_literal_in_memory_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t not have any leading zeros (lo")

                mstore(add(memPtr, 64), "ng list)")

            }

            function abi_encode_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_55_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_55_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_55_by_1(value)))
            }

            function store_literal_in_memory_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than 55 bytes (long")

                mstore(add(memPtr, 64), " list)")

            }

            function abi_encode_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 70)
                store_literal_in_memory_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than total length (")

                mstore(add(memPtr, 64), "long list)")

            }

            function abi_encode_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_192_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_192_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_192_by_1(value)))
            }

            function store_literal_in_memory_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than list length (s")

                mstore(add(memPtr, 64), "hort list)")

            }

            function abi_encode_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be > than length of string len")

                mstore(add(memPtr, 64), "gth (long string)")

            }

            function abi_encode_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 81)
                store_literal_in_memory_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t not have any leading zeros (lo")

                mstore(add(memPtr, 64), "ng string)")

            }

            function abi_encode_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 74)
                store_literal_in_memory_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than 55 bytes (long")

                mstore(add(memPtr, 64), " string)")

            }

            function abi_encode_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 72)
                store_literal_in_memory_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function store_literal_in_memory_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than total length (")

                mstore(add(memPtr, 64), "long string)")

            }

            function abi_encode_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 76)
                store_literal_in_memory_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function cleanup_t_rational_128_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_128_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_128_by_1(value)))
            }

            function store_literal_in_memory_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: length of content mus")

                mstore(add(memPtr, 32), "t be greater than string length ")

                mstore(add(memPtr, 64), "(short string)")

            }

            function abi_encode_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 78)
                store_literal_in_memory_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_rational_128_by_1_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_rational_128_by_1(value)))
            }

            function store_literal_in_memory_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(memPtr) {

                mstore(add(memPtr, 0), "RLPReader: invalid prefix, singl")

                mstore(add(memPtr, 32), "e byte < 0x80 are not prefixed (")

                mstore(add(memPtr, 64), "short string)")

            }

            function abi_encode_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 77)
                store_literal_in_memory_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(pos)
                end := add(pos, 96)
            }

            function abi_encode_tuple_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 7727
            /// @src 24:5678:10001  "function _decodeLength(RLPItem memory _in)..."
            function fun__decodeLength_7727(var__in_7508_mpos) -> var__7511, var__7513, var__7516 {
                /// @src 24:5780:5787  "uint256"
                let zero_t_uint256_757 := zero_value_for_split_t_uint256()
                var__7511 := zero_t_uint256_757
                /// @src 24:5801:5808  "uint256"
                let zero_t_uint256_758 := zero_value_for_split_t_uint256()
                var__7513 := zero_t_uint256_758
                /// @src 24:5822:5833  "RLPItemType"
                let zero_t_enum$_RLPItemType_$7246_759 := zero_value_for_split_t_enum$_RLPItemType_$7246()
                var__7516 := zero_t_enum$_RLPItemType_$7246_759

                /// @src 24:6161:6164  "_in"
                let _760_mpos := var__in_7508_mpos
                let expr_7519_mpos := _760_mpos
                /// @src 24:6161:6171  "_in.length"
                let _761 := add(expr_7519_mpos, 0)
                let _762 := read_from_memoryt_uint256(_761)
                let expr_7520 := _762
                /// @src 24:6174:6175  "0"
                let expr_7521 := 0x00
                /// @src 24:6161:6175  "_in.length > 0"
                let expr_7522 := gt(cleanup_t_uint256(expr_7520), convert_t_rational_0_by_1_to_t_uint256(expr_7521))
                /// @src 24:6140:6275  "require(..."
                require_helper_t_stringliteral_415931d05b1f1d73ad3193dec5dd39c60446b93be55930ff0bb775a9407aef90(expr_7522)
                /// @src 24:6306:6309  "_in"
                let _763_mpos := var__in_7508_mpos
                let expr_7529_mpos := _763_mpos
                /// @src 24:6306:6313  "_in.ptr"
                let _764 := add(expr_7529_mpos, 32)
                let _765 := read_from_memoryt_userDefinedValueType$_MemoryPointer_$7243(_764)
                let expr_7530 := _765
                /// @src 24:6286:6313  "MemoryPointer ptr = _in.ptr"
                let var_ptr_7528 := expr_7530
                /// @src 24:6323:6337  "uint256 prefix"
                let var_prefix_7533
                let zero_t_uint256_766 := zero_value_for_split_t_uint256()
                var_prefix_7533 := zero_t_uint256_766
                /// @src 24:6347:6409  "assembly {..."
                {
                    var_prefix_7533 := byte(0, mload(var_ptr_7528))
                }
                /// @src 24:6423:6429  "prefix"
                let _767 := var_prefix_7533
                let expr_7536 := _767
                /// @src 24:6433:6437  "0x7f"
                let expr_7537 := 0x7f
                /// @src 24:6423:6437  "prefix <= 0x7f"
                let expr_7538 := iszero(gt(cleanup_t_uint256(expr_7536), convert_t_rational_127_by_1_to_t_uint256(expr_7537)))
                /// @src 24:6419:9995  "if (prefix <= 0x7f) {..."
                switch expr_7538
                case 0 {
                    /// @src 24:6538:6544  "prefix"
                    let _768 := var_prefix_7533
                    let expr_7546 := _768
                    /// @src 24:6548:6552  "0xb7"
                    let expr_7547 := 0xb7
                    /// @src 24:6538:6552  "prefix <= 0xb7"
                    let expr_7548 := iszero(gt(cleanup_t_uint256(expr_7546), convert_t_rational_183_by_1_to_t_uint256(expr_7547)))
                    /// @src 24:6534:9995  "if (prefix <= 0xb7) {..."
                    switch expr_7548
                    case 0 {
                        /// @src 24:7279:7285  "prefix"
                        let _769 := var_prefix_7533
                        let expr_7585 := _769
                        /// @src 24:7289:7293  "0xbf"
                        let expr_7586 := 0xbf
                        /// @src 24:7279:7293  "prefix <= 0xbf"
                        let expr_7587 := iszero(gt(cleanup_t_uint256(expr_7585), convert_t_rational_191_by_1_to_t_uint256(expr_7586)))
                        /// @src 24:7275:9995  "if (prefix <= 0xbf) {..."
                        switch expr_7587
                        case 0 {
                            /// @src 24:8458:8464  "prefix"
                            let _770 := var_prefix_7533
                            let expr_7643 := _770
                            /// @src 24:8468:8472  "0xf7"
                            let expr_7644 := 0xf7
                            /// @src 24:8458:8472  "prefix <= 0xf7"
                            let expr_7645 := iszero(gt(cleanup_t_uint256(expr_7643), convert_t_rational_247_by_1_to_t_uint256(expr_7644)))
                            /// @src 24:8454:9995  "if (prefix <= 0xf7) {..."
                            switch expr_7645
                            case 0 {
                                /// @src 24:8907:8913  "prefix"
                                let _771 := var_prefix_7533
                                let expr_7669 := _771
                                /// @src 24:8916:8920  "0xf7"
                                let expr_7670 := 0xf7
                                /// @src 24:8907:8920  "prefix - 0xf7"
                                let expr_7671 := checked_sub_t_uint256(expr_7669, convert_t_rational_247_by_1_to_t_uint256(expr_7670))

                                /// @src 24:8884:8920  "uint256 lenOfListLen = prefix - 0xf7"
                                let var_lenOfListLen_7668 := expr_7671
                                /// @src 24:8960:8963  "_in"
                                let _772_mpos := var__in_7508_mpos
                                let expr_7674_mpos := _772_mpos
                                /// @src 24:8960:8970  "_in.length"
                                let _773 := add(expr_7674_mpos, 0)
                                let _774 := read_from_memoryt_uint256(_773)
                                let expr_7675 := _774
                                /// @src 24:8973:8985  "lenOfListLen"
                                let _775 := var_lenOfListLen_7668
                                let expr_7676 := _775
                                /// @src 24:8960:8985  "_in.length > lenOfListLen"
                                let expr_7677 := gt(cleanup_t_uint256(expr_7675), cleanup_t_uint256(expr_7676))
                                /// @src 24:8935:9096  "require(..."
                                require_helper_t_stringliteral_06ca5e4f11684a6ede4631b47ab4ace700095979691875ca7f97bf5474bdf5cb(expr_7677)
                                /// @src 24:9111:9136  "bytes1 firstByteOfContent"
                                let var_firstByteOfContent_7682
                                let zero_t_bytes1_776 := zero_value_for_split_t_bytes1()
                                var_firstByteOfContent_7682 := zero_t_bytes1_776
                                /// @src 24:9150:9252  "assembly {..."
                                {
                                    var_firstByteOfContent_7682 := and(mload(add(var_ptr_7528, 1)), shl(248, 0xff))
                                }
                                /// @src 24:9291:9309  "firstByteOfContent"
                                let _777 := var_firstByteOfContent_7682
                                let expr_7686 := _777
                                /// @src 24:9313:9317  "0x00"
                                let expr_7687 := 0x00
                                /// @src 24:9291:9317  "firstByteOfContent != 0x00"
                                let expr_7688 := iszero(eq(cleanup_t_bytes1(expr_7686), convert_t_rational_0_by_1_to_t_bytes1(expr_7687)))
                                /// @src 24:9266:9423  "require(..."
                                require_helper_t_stringliteral_7629fe895c934ec34c50a420f7052291547a92e929cf0e292b7cac87b5aeb03b(expr_7688)
                                /// @src 24:9438:9453  "uint256 listLen"
                                let var_listLen_7693
                                let zero_t_uint256_778 := zero_value_for_split_t_uint256()
                                var_listLen_7693 := zero_t_uint256_778
                                /// @src 24:9467:9574  "assembly {..."
                                {
                                    var_listLen_7693 := shr(sub(256, mul(8, var_lenOfListLen_7668)), mload(add(var_ptr_7528, 1)))
                                }
                                /// @src 24:9613:9620  "listLen"
                                let _779 := var_listLen_7693
                                let expr_7697 := _779
                                /// @src 24:9623:9625  "55"
                                let expr_7698 := 0x37
                                /// @src 24:9613:9625  "listLen > 55"
                                let expr_7699 := gt(cleanup_t_uint256(expr_7697), convert_t_rational_55_by_1_to_t_uint256(expr_7698))
                                /// @src 24:9588:9729  "require(..."
                                require_helper_t_stringliteral_9d920c6e865294791b75981a156f743d2fc7e71d67fc77cbf80d347a74c39c3d(expr_7699)
                                /// @src 24:9769:9772  "_in"
                                let _780_mpos := var__in_7508_mpos
                                let expr_7704_mpos := _780_mpos
                                /// @src 24:9769:9779  "_in.length"
                                let _781 := add(expr_7704_mpos, 0)
                                let _782 := read_from_memoryt_uint256(_781)
                                let expr_7705 := _782
                                /// @src 24:9782:9794  "lenOfListLen"
                                let _783 := var_lenOfListLen_7668
                                let expr_7706 := _783
                                /// @src 24:9797:9804  "listLen"
                                let _784 := var_listLen_7693
                                let expr_7707 := _784
                                /// @src 24:9782:9804  "lenOfListLen + listLen"
                                let expr_7708 := checked_add_t_uint256(expr_7706, expr_7707)

                                /// @src 24:9769:9804  "_in.length > lenOfListLen + listLen"
                                let expr_7709 := gt(cleanup_t_uint256(expr_7705), cleanup_t_uint256(expr_7708))
                                /// @src 24:9744:9912  "require(..."
                                require_helper_t_stringliteral_20dbcbe84b24552d3e9e63d0758aa6c86c6964675777bbad8603f35a93c4a6a0(expr_7709)
                                /// @src 24:9935:9936  "1"
                                let expr_7713 := 0x01
                                /// @src 24:9939:9951  "lenOfListLen"
                                let _785 := var_lenOfListLen_7668
                                let expr_7714 := _785
                                /// @src 24:9935:9951  "1 + lenOfListLen"
                                let expr_7715 := checked_add_t_uint256(convert_t_rational_1_by_1_to_t_uint256(expr_7713), expr_7714)

                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7719_component_1 := expr_7715
                                /// @src 24:9953:9960  "listLen"
                                let _786 := var_listLen_7693
                                let expr_7716 := _786
                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7719_component_2 := expr_7716
                                /// @src 24:9962:9983  "RLPItemType.LIST_ITEM"
                                let expr_7718 := 1
                                /// @src 24:9934:9984  "(1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7719_component_3 := expr_7718
                                /// @src 24:9927:9984  "return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM)"
                                var__7511 := expr_7719_component_1
                                var__7513 := expr_7719_component_2
                                var__7516 := expr_7719_component_3
                                leave
                                /// @src 24:8454:9995  "if (prefix <= 0xf7) {..."
                            }
                            default {
                                /// @src 24:8589:8595  "prefix"
                                let _787 := var_prefix_7533
                                let expr_7648 := _787
                                /// @src 24:8598:8602  "0xc0"
                                let expr_7649 := 0xc0
                                /// @src 24:8589:8602  "prefix - 0xc0"
                                let expr_7650 := checked_sub_t_uint256(expr_7648, convert_t_rational_192_by_1_to_t_uint256(expr_7649))

                                /// @src 24:8571:8602  "uint256 listLen = prefix - 0xc0"
                                let var_listLen_7647 := expr_7650
                                /// @src 24:8642:8645  "_in"
                                let _788_mpos := var__in_7508_mpos
                                let expr_7653_mpos := _788_mpos
                                /// @src 24:8642:8652  "_in.length"
                                let _789 := add(expr_7653_mpos, 0)
                                let _790 := read_from_memoryt_uint256(_789)
                                let expr_7654 := _790
                                /// @src 24:8655:8662  "listLen"
                                let _791 := var_listLen_7647
                                let expr_7655 := _791
                                /// @src 24:8642:8662  "_in.length > listLen"
                                let expr_7656 := gt(cleanup_t_uint256(expr_7654), cleanup_t_uint256(expr_7655))
                                /// @src 24:8617:8770  "require(..."
                                require_helper_t_stringliteral_6be6f10c0f9a397fc0f8793a1d10768917bdc98a9eb69d2bf2e8fede07fd4b52(expr_7656)
                                /// @src 24:8793:8794  "1"
                                let expr_7660 := 0x01
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7664_component_1 := expr_7660
                                /// @src 24:8796:8803  "listLen"
                                let _792 := var_listLen_7647
                                let expr_7661 := _792
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7664_component_2 := expr_7661
                                /// @src 24:8805:8826  "RLPItemType.LIST_ITEM"
                                let expr_7663 := 1
                                /// @src 24:8792:8827  "(1, listLen, RLPItemType.LIST_ITEM)"
                                let expr_7664_component_3 := expr_7663
                                /// @src 24:8785:8827  "return (1, listLen, RLPItemType.LIST_ITEM)"
                                var__7511 := convert_t_rational_1_by_1_to_t_uint256(expr_7664_component_1)
                                var__7513 := expr_7664_component_2
                                var__7516 := expr_7664_component_3
                                leave
                                /// @src 24:8454:9995  "if (prefix <= 0xf7) {..."
                            }
                            /// @src 24:7275:9995  "if (prefix <= 0xbf) {..."
                        }
                        default {
                            /// @src 24:7359:7365  "prefix"
                            let _793 := var_prefix_7533
                            let expr_7590 := _793
                            /// @src 24:7368:7372  "0xb7"
                            let expr_7591 := 0xb7
                            /// @src 24:7359:7372  "prefix - 0xb7"
                            let expr_7592 := checked_sub_t_uint256(expr_7590, convert_t_rational_183_by_1_to_t_uint256(expr_7591))

                            /// @src 24:7337:7372  "uint256 lenOfStrLen = prefix - 0xb7"
                            let var_lenOfStrLen_7589 := expr_7592
                            /// @src 24:7412:7415  "_in"
                            let _794_mpos := var__in_7508_mpos
                            let expr_7595_mpos := _794_mpos
                            /// @src 24:7412:7422  "_in.length"
                            let _795 := add(expr_7595_mpos, 0)
                            let _796 := read_from_memoryt_uint256(_795)
                            let expr_7596 := _796
                            /// @src 24:7425:7436  "lenOfStrLen"
                            let _797 := var_lenOfStrLen_7589
                            let expr_7597 := _797
                            /// @src 24:7412:7436  "_in.length > lenOfStrLen"
                            let expr_7598 := gt(cleanup_t_uint256(expr_7596), cleanup_t_uint256(expr_7597))
                            /// @src 24:7387:7551  "require(..."
                            require_helper_t_stringliteral_643fe4372f8841c55e98866e1f5d2645bbec519603a2fdcc40c300631345999a(expr_7598)
                            /// @src 24:7566:7591  "bytes1 firstByteOfContent"
                            let var_firstByteOfContent_7603
                            let zero_t_bytes1_798 := zero_value_for_split_t_bytes1()
                            var_firstByteOfContent_7603 := zero_t_bytes1_798
                            /// @src 24:7605:7707  "assembly {..."
                            {
                                var_firstByteOfContent_7603 := and(mload(add(var_ptr_7528, 1)), shl(248, 0xff))
                            }
                            /// @src 24:7746:7764  "firstByteOfContent"
                            let _799 := var_firstByteOfContent_7603
                            let expr_7607 := _799
                            /// @src 24:7768:7772  "0x00"
                            let expr_7608 := 0x00
                            /// @src 24:7746:7772  "firstByteOfContent != 0x00"
                            let expr_7609 := iszero(eq(cleanup_t_bytes1(expr_7607), convert_t_rational_0_by_1_to_t_bytes1(expr_7608)))
                            /// @src 24:7721:7880  "require(..."
                            require_helper_t_stringliteral_8644bad23aabf5e1fa6d534a998aa072497c3d603266b43871f402cf21164ead(expr_7609)
                            /// @src 24:7895:7909  "uint256 strLen"
                            let var_strLen_7614
                            let zero_t_uint256_800 := zero_value_for_split_t_uint256()
                            var_strLen_7614 := zero_t_uint256_800
                            /// @src 24:7923:8028  "assembly {..."
                            {
                                var_strLen_7614 := shr(sub(256, mul(8, var_lenOfStrLen_7589)), mload(add(var_ptr_7528, 1)))
                            }
                            /// @src 24:8067:8073  "strLen"
                            let _801 := var_strLen_7614
                            let expr_7618 := _801
                            /// @src 24:8076:8078  "55"
                            let expr_7619 := 0x37
                            /// @src 24:8067:8078  "strLen > 55"
                            let expr_7620 := gt(cleanup_t_uint256(expr_7618), convert_t_rational_55_by_1_to_t_uint256(expr_7619))
                            /// @src 24:8042:8184  "require(..."
                            require_helper_t_stringliteral_7a5429d9a9d15c3b2a3dc2094ed0ae78dee47b3b60f8038f1719e95350eeb45f(expr_7620)
                            /// @src 24:8224:8227  "_in"
                            let _802_mpos := var__in_7508_mpos
                            let expr_7625_mpos := _802_mpos
                            /// @src 24:8224:8234  "_in.length"
                            let _803 := add(expr_7625_mpos, 0)
                            let _804 := read_from_memoryt_uint256(_803)
                            let expr_7626 := _804
                            /// @src 24:8237:8248  "lenOfStrLen"
                            let _805 := var_lenOfStrLen_7589
                            let expr_7627 := _805
                            /// @src 24:8251:8257  "strLen"
                            let _806 := var_strLen_7614
                            let expr_7628 := _806
                            /// @src 24:8237:8257  "lenOfStrLen + strLen"
                            let expr_7629 := checked_add_t_uint256(expr_7627, expr_7628)

                            /// @src 24:8224:8257  "_in.length > lenOfStrLen + strLen"
                            let expr_7630 := gt(cleanup_t_uint256(expr_7626), cleanup_t_uint256(expr_7629))
                            /// @src 24:8199:8367  "require(..."
                            require_helper_t_stringliteral_7e69e48b309f8402dd90a76f663acf75a27a4a7008b7ab3071f37417980fa491(expr_7630)
                            /// @src 24:8390:8391  "1"
                            let expr_7634 := 0x01
                            /// @src 24:8394:8405  "lenOfStrLen"
                            let _807 := var_lenOfStrLen_7589
                            let expr_7635 := _807
                            /// @src 24:8390:8405  "1 + lenOfStrLen"
                            let expr_7636 := checked_add_t_uint256(convert_t_rational_1_by_1_to_t_uint256(expr_7634), expr_7635)

                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7640_component_1 := expr_7636
                            /// @src 24:8407:8413  "strLen"
                            let _808 := var_strLen_7614
                            let expr_7637 := _808
                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7640_component_2 := expr_7637
                            /// @src 24:8415:8436  "RLPItemType.DATA_ITEM"
                            let expr_7639 := 0
                            /// @src 24:8389:8437  "(1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            let expr_7640_component_3 := expr_7639
                            /// @src 24:8382:8437  "return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM)"
                            var__7511 := expr_7640_component_1
                            var__7513 := expr_7640_component_2
                            var__7516 := expr_7640_component_3
                            leave
                            /// @src 24:7275:9995  "if (prefix <= 0xbf) {..."
                        }
                        /// @src 24:6534:9995  "if (prefix <= 0xb7) {..."
                    }
                    default {
                        /// @src 24:6671:6677  "prefix"
                        let _809 := var_prefix_7533
                        let expr_7551 := _809
                        /// @src 24:6680:6684  "0x80"
                        let expr_7552 := 0x80
                        /// @src 24:6671:6684  "prefix - 0x80"
                        let expr_7553 := checked_sub_t_uint256(expr_7551, convert_t_rational_128_by_1_to_t_uint256(expr_7552))

                        /// @src 24:6654:6684  "uint256 strLen = prefix - 0x80"
                        let var_strLen_7550 := expr_7553
                        /// @src 24:6724:6727  "_in"
                        let _810_mpos := var__in_7508_mpos
                        let expr_7556_mpos := _810_mpos
                        /// @src 24:6724:6734  "_in.length"
                        let _811 := add(expr_7556_mpos, 0)
                        let _812 := read_from_memoryt_uint256(_811)
                        let expr_7557 := _812
                        /// @src 24:6737:6743  "strLen"
                        let _813 := var_strLen_7550
                        let expr_7558 := _813
                        /// @src 24:6724:6743  "_in.length > strLen"
                        let expr_7559 := gt(cleanup_t_uint256(expr_7557), cleanup_t_uint256(expr_7558))
                        /// @src 24:6699:6855  "require(..."
                        require_helper_t_stringliteral_d955fdbf60db11c370367628006d0d8a6eb6944c34e88fdf36d378f8ae0ff8b8(expr_7559)
                        /// @src 24:6870:6895  "bytes1 firstByteOfContent"
                        let var_firstByteOfContent_7564
                        let zero_t_bytes1_814 := zero_value_for_split_t_bytes1()
                        var_firstByteOfContent_7564 := zero_t_bytes1_814
                        /// @src 24:6909:7011  "assembly {..."
                        {
                            var_firstByteOfContent_7564 := and(mload(add(var_ptr_7528, 1)), shl(248, 0xff))
                        }
                        /// @src 24:7050:7056  "strLen"
                        let _815 := var_strLen_7550
                        let expr_7568 := _815
                        /// @src 24:7060:7061  "1"
                        let expr_7569 := 0x01
                        /// @src 24:7050:7061  "strLen != 1"
                        let expr_7570 := iszero(eq(cleanup_t_uint256(expr_7568), convert_t_rational_1_by_1_to_t_uint256(expr_7569)))
                        /// @src 24:7050:7091  "strLen != 1 || firstByteOfContent >= 0x80"
                        let expr_7574 := expr_7570
                        if iszero(expr_7574) {
                            /// @src 24:7065:7083  "firstByteOfContent"
                            let _816 := var_firstByteOfContent_7564
                            let expr_7571 := _816
                            /// @src 24:7087:7091  "0x80"
                            let expr_7572 := 0x80
                            /// @src 24:7065:7091  "firstByteOfContent >= 0x80"
                            let expr_7573 := iszero(lt(cleanup_t_bytes1(expr_7571), convert_t_rational_128_by_1_to_t_bytes1(expr_7572)))
                            /// @src 24:7050:7091  "strLen != 1 || firstByteOfContent >= 0x80"
                            expr_7574 := expr_7573
                        }
                        /// @src 24:7025:7202  "require(..."
                        require_helper_t_stringliteral_7cee39190d11b2aebd6f2acd27b4669794d9152bd3e8e4a97eed4d2362367699(expr_7574)
                        /// @src 24:7225:7226  "1"
                        let expr_7578 := 0x01
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7582_component_1 := expr_7578
                        /// @src 24:7228:7234  "strLen"
                        let _817 := var_strLen_7550
                        let expr_7579 := _817
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7582_component_2 := expr_7579
                        /// @src 24:7236:7257  "RLPItemType.DATA_ITEM"
                        let expr_7581 := 0
                        /// @src 24:7224:7258  "(1, strLen, RLPItemType.DATA_ITEM)"
                        let expr_7582_component_3 := expr_7581
                        /// @src 24:7217:7258  "return (1, strLen, RLPItemType.DATA_ITEM)"
                        var__7511 := convert_t_rational_1_by_1_to_t_uint256(expr_7582_component_1)
                        var__7513 := expr_7582_component_2
                        var__7516 := expr_7582_component_3
                        leave
                        /// @src 24:6534:9995  "if (prefix <= 0xb7) {..."
                    }
                    /// @src 24:6419:9995  "if (prefix <= 0x7f) {..."
                }
                default {
                    /// @src 24:6489:6490  "0"
                    let expr_7539 := 0x00
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7543_component_1 := expr_7539
                    /// @src 24:6492:6493  "1"
                    let expr_7540 := 0x01
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7543_component_2 := expr_7540
                    /// @src 24:6495:6516  "RLPItemType.DATA_ITEM"
                    let expr_7542 := 0
                    /// @src 24:6488:6517  "(0, 1, RLPItemType.DATA_ITEM)"
                    let expr_7543_component_3 := expr_7542
                    /// @src 24:6481:6517  "return (0, 1, RLPItemType.DATA_ITEM)"
                    var__7511 := convert_t_rational_0_by_1_to_t_uint256(expr_7543_component_1)
                    var__7513 := convert_t_rational_1_by_1_to_t_uint256(expr_7543_component_2)
                    var__7516 := expr_7543_component_3
                    leave
                    /// @src 24:6419:9995  "if (prefix <= 0x7f) {..."
                }

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

            /// @ast-id 7767
            /// @src 24:10281:11214  "function _copy(..."
            function fun__copy_7767(var__src_7731, var__offset_7733, var__length_7735) -> var__7738_mpos {
                /// @src 24:10402:10414  "bytes memory"
                let zero_t_bytes_memory_ptr_818_mpos := zero_value_for_split_t_bytes_memory_ptr()
                var__7738_mpos := zero_t_bytes_memory_ptr_818_mpos

                /// @src 24:10455:10462  "_length"
                let _819 := var__length_7735
                let expr_7744 := _819
                /// @src 24:10445:10463  "new bytes(_length)"
                let expr_7745_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_7744)
                /// @src 24:10426:10463  "bytes memory out = new bytes(_length)"
                let var_out_7741_mpos := expr_7745_mpos
                /// @src 24:10477:10484  "_length"
                let _820 := var__length_7735
                let expr_7747 := _820
                /// @src 24:10488:10489  "0"
                let expr_7748 := 0x00
                /// @src 24:10477:10489  "_length == 0"
                let expr_7749 := eq(cleanup_t_uint256(expr_7747), convert_t_rational_0_by_1_to_t_uint256(expr_7748))
                /// @src 24:10473:10526  "if (_length == 0) {..."
                if expr_7749 {
                    /// @src 24:10512:10515  "out"
                    let _821_mpos := var_out_7741_mpos
                    let expr_7750_mpos := _821_mpos
                    /// @src 24:10505:10515  "return out"
                    var__7738_mpos := expr_7750_mpos
                    leave
                    /// @src 24:10473:10526  "if (_length == 0) {..."
                }
                /// @src 24:10820:10824  "_src"
                let _822 := var__src_7731
                let expr_7758 := _822
                /// @src 24:10799:10825  "MemoryPointer.unwrap(_src)"
                let expr_7759 := convert_t_uint256_to_t_uint256(expr_7758)
                /// @src 24:10828:10835  "_offset"
                let _823 := var__offset_7733
                let expr_7760 := _823
                /// @src 24:10799:10835  "MemoryPointer.unwrap(_src) + _offset"
                let expr_7761 := checked_add_t_uint256(expr_7759, expr_7760)

                /// @src 24:10785:10835  "uint256 src = MemoryPointer.unwrap(_src) + _offset"
                let var_src_7755 := expr_7761
                /// @src 24:10845:11187  "assembly {..."
                {
                    let usr$dest := add(var_out_7741_mpos, 32)
                    let usr$i := 0
                    for { } lt(usr$i, var__length_7735) { usr$i := add(usr$i, 32) }
                    {
                        mstore(add(usr$dest, usr$i), mload(add(var_src_7755, usr$i)))
                    }
                    if gt(usr$i, var__length_7735)
                    {
                        mstore(add(usr$dest, var__length_7735), 0)
                    }
                }
                /// @src 24:11204:11207  "out"
                let _824_mpos := var_out_7741_mpos
                let expr_7764_mpos := _824_mpos
                /// @src 24:11197:11207  "return out"
                var__7738_mpos := expr_7764_mpos
                leave

            }
            /// @src 12:1057:20177  "contract OptimismPortal is Initializable, ResourceMetering, Semver {..."

        }

        data ".metadata" hex"a26469706673582212209938850d37c474855f5451df2b7fc416f542ca995f9f029f0893f8a93987fef764736f6c634300080f0033"
    }

}


IR:

IR:

/// @use-src 0:"./node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol", 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 3:"./node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol", 14:"contracts/L1/SystemConfig.sol", 29:"contracts/universal/Semver.sol"
object "SystemConfig_2797" {
    code {
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
        mstore(64, memoryguard(224))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_2475_object_SystemConfig_2797()
        constructor_SystemConfig_2797(_1, _2, _3, _4, _5, _6, _7)

        let _8 := allocate_unbounded()
        codecopy(_8, dataoffset("SystemConfig_2797_deployed"), datasize("SystemConfig_2797_deployed"))

        setimmutable(_8, "1367", mload(128))

        setimmutable(_8, "1370", mload(160))

        setimmutable(_8, "1373", mload(192))

        return(_8, datasize("SystemConfig_2797_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        function round_up_to_mul_of_32(value) -> result {
            result := and(add(value, 31), not(31))
        }

        function panic_error_0x41() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }

        function finalize_allocation(memPtr, size) {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            // protect against overflow
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }

        function allocate_memory(size) -> memPtr {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }

        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
            revert(0, 0)
        }

        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
            revert(0, 0)
        }

        function cleanup_t_uint160(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function cleanup_t_address(value) -> cleaned {
            cleaned := cleanup_t_uint160(value)
        }

        function validator_revert_t_address(value) {
            if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
        }

        function abi_decode_t_address_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_address(value)
        }

        function cleanup_t_uint256(value) -> cleaned {
            cleaned := value
        }

        function validator_revert_t_uint256(value) {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint256_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }

        function cleanup_t_bytes32(value) -> cleaned {
            cleaned := value
        }

        function validator_revert_t_bytes32(value) {
            if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
        }

        function abi_decode_t_bytes32_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_bytes32(value)
        }

        function cleanup_t_uint64(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffff)
        }

        function validator_revert_t_uint64(value) {
            if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint64_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint64(value)
        }

        function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {
            revert(0, 0)
        }

        function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {
            revert(0, 0)
        }

        function cleanup_t_uint32(value) -> cleaned {
            cleaned := and(value, 0xffffffff)
        }

        function validator_revert_t_uint32(value) {
            if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint32_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint32(value)
        }

        function cleanup_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function validator_revert_t_uint8(value) {
            if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint8_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint8(value)
        }

        function cleanup_t_uint128(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
        }

        function validator_revert_t_uint128(value) {
            if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint128_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint128(value)
        }

        // struct ResourceMetering.ResourceConfig
        function abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(headStart, end) -> value {
            if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
            value := allocate_memory(0xc0)

            {
                // maxResourceLimit

                let offset := 0

                mstore(add(value, 0x00), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

            }

            {
                // elasticityMultiplier

                let offset := 32

                mstore(add(value, 0x20), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))

            }

            {
                // baseFeeMaxChangeDenominator

                let offset := 64

                mstore(add(value, 0x40), abi_decode_t_uint8_fromMemory(add(headStart, offset), end))

            }

            {
                // minimumBaseFee

                let offset := 96

                mstore(add(value, 0x60), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

            }

            {
                // systemTxMaxGas

                let offset := 128

                mstore(add(value, 0x80), abi_decode_t_uint32_fromMemory(add(headStart, offset), end))

            }

            {
                // maximumBaseFee

                let offset := 160

                mstore(add(value, 0xa0), abi_decode_t_uint128_fromMemory(add(headStart, offset), end))

            }

        }

        function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {
            if slt(sub(dataEnd, headStart), 384) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            {

                let offset := 0

                value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 32

                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 64

                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 96

                value3 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 128

                value4 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 160

                value5 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 192

                value6 := abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(add(headStart, offset), dataEnd)
            }

        }

        function copy_arguments_for_constructor_2475_object_SystemConfig_2797() -> ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 {
            let programSize := datasize("SystemConfig_2797")
            let argSize := sub(codesize(), programSize)

            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)

            ret_param_0, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2070_memory_ptr_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }

        function cleanup_t_rational_1_by_1(value) -> cleaned {
            cleaned := value
        }

        function identity(value) -> ret {
            ret := value
        }

        function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
        }

        function cleanup_t_rational_3_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_3_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_3_by_1(value)))
        }

        function cleanup_t_rational_0_by_1(value) -> cleaned {
            cleaned := value
        }

        function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
        }

        /// @ast-id 2475
        /// @src 14:3337:3882  "constructor(..."
        function constructor_SystemConfig_2797(var__owner_2443, var__overhead_2445, var__scalar_2447, var__batcherHash_2449, var__gasLimit_2451, var__unsafeBlockSigner_2453, var__config_2456_mpos) {
            /// @src 14:3586:3587  "1"
            let expr_2459 := 0x01
            let _9 := convert_t_rational_1_by_1_to_t_uint256(expr_2459)
            /// @src 14:3589:3590  "3"
            let expr_2460 := 0x03
            let _10 := convert_t_rational_3_by_1_to_t_uint256(expr_2460)
            /// @src 14:3592:3593  "0"
            let expr_2461 := 0x00
            let _11 := convert_t_rational_0_by_1_to_t_uint256(expr_2461)

            /// @src 14:3337:3882  "constructor(..."
            constructor_Semver_1425(_9, _10, _11)

            /// @src 14:3638:3644  "_owner"
            let _12 := var__owner_2443
            let expr_2465 := _12
            /// @src 14:3669:3678  "_overhead"
            let _13 := var__overhead_2445
            let expr_2466 := _13
            /// @src 14:3701:3708  "_scalar"
            let _14 := var__scalar_2447
            let expr_2467 := _14
            /// @src 14:3736:3748  "_batcherHash"
            let _15 := var__batcherHash_2449
            let expr_2468 := _15
            /// @src 14:3773:3782  "_gasLimit"
            let _16 := var__gasLimit_2451
            let expr_2469 := _16
            /// @src 14:3816:3834  "_unsafeBlockSigner"
            let _17 := var__unsafeBlockSigner_2453
            let expr_2470 := _17
            /// @src 14:3857:3864  "_config"
            let _18_mpos := var__config_2456_mpos
            let expr_2471_mpos := _18_mpos
            fun_initialize_2536(expr_2465, expr_2466, expr_2467, expr_2468, expr_2469, expr_2470, expr_2471_mpos)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 1396
        /// @src 29:726:919  "constructor(..."
        function constructor_Semver_1425(var__major_1376, var__minor_1378, var__patch_1380) {

            /// @src 29:726:919  "constructor(..."
            constructor_OwnableUpgradeable_5020()

            /// @src 29:842:848  "_major"
            let _19 := var__major_1376
            let expr_1384 := _19
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _20 := expr_1384
            mstore(128, _20)
            let expr_1385 := expr_1384
            /// @src 29:874:880  "_minor"
            let _21 := var__minor_1378
            let expr_1388 := _21
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _22 := expr_1388
            mstore(160, _22)
            let expr_1389 := expr_1388
            /// @src 29:906:912  "_patch"
            let _23 := var__patch_1380
            let expr_1392 := _23
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _24 := expr_1392
            mstore(192, _24)
            let expr_1393 := expr_1392

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 0:708:3153  "abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {..."
        function constructor_OwnableUpgradeable_5020() {

            /// @src 0:708:3153  "abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {..."
            constructor_ContextUpgradeable_7067()

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 3:651:1344  "abstract contract ContextUpgradeable is Initializable {..."
        function constructor_ContextUpgradeable_7067() {

            /// @src 3:651:1344  "abstract contract ContextUpgradeable is Initializable {..."
            constructor_Initializable_3446()

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 1:2383:5669  "abstract contract Initializable {..."
        function constructor_Initializable_3446() {

            /// @src 1:2383:5669  "abstract contract Initializable {..."

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function shift_right_8_unsigned(value) -> newValue {
            newValue :=

            shr(8, value)

        }

        function cleanup_from_storage_t_bool(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
            value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
        }

        function read_from_storage_split_offset_1_t_bool(slot) -> value {
            value := extract_from_storage_value_offset_1t_bool(sload(slot))

        }

        function cleanup_t_bool(value) -> cleaned {
            cleaned := iszero(iszero(value))
        }

        function shift_right_0_unsigned(value) -> newValue {
            newValue :=

            shr(0, value)

        }

        function cleanup_from_storage_t_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }

        function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
            value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_uint8(slot) -> value {
            value := extract_from_storage_value_offset_0t_uint8(sload(slot))

        }

        function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
        }

        function convert_t_uint160_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }

        function convert_t_uint160_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_contract$_Initializable_$3446_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
            mstore(pos, length)
            updated_pos := add(pos, 0x20)
        }

        function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is alrea")

            mstore(add(memPtr, 32), "dy initialized")

        }

        function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
            store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function shift_left_0(value) -> newValue {
            newValue :=

            shl(0, value)

        }

        function update_byte_slice_1_shift_0(value, toInsert) -> result {
            let mask := 255
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint8_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
        }

        function prepare_store_t_uint8(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_8(value) -> newValue {
            newValue :=

            shl(8, value)

        }

        function update_byte_slice_1_shift_1(value, toInsert) -> result {
            let mask := 65280
            toInsert := shift_left_8(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_bool_to_t_bool(value) -> converted {
            converted := cleanup_t_bool(value)
        }

        function prepare_store_t_bool(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
            let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
            sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
        }

        function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
            mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
        }

        function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
            tail := add(headStart, 32)

            abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

        }

        /// @ast-id 3366
        /// @src 1:3078:3584  "modifier initializer() {..."
        function modifier_initializer_2494(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

            /// @src 1:3134:3147  "_initializing"
            let _25 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3315 := _25
            /// @src 1:3133:3147  "!_initializing"
            let expr_3316 := cleanup_t_bool(iszero(expr_3315))
            /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
            let var_isTopLevelCall_3314 := expr_3316
            /// @src 1:3179:3193  "isTopLevelCall"
            let _26 := var_isTopLevelCall_3314
            let expr_3319 := _26
            /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
            let expr_3323 := expr_3319
            if expr_3323 {
                /// @src 1:3197:3209  "_initialized"
                let _27 := read_from_storage_split_offset_0_t_uint8(0x00)
                let expr_3320 := _27
                /// @src 1:3212:3213  "1"
                let expr_3321 := 0x01
                /// @src 1:3197:3213  "_initialized < 1"
                let expr_3322 := lt(cleanup_t_uint8(expr_3320), convert_t_rational_1_by_1_to_t_uint8(expr_3321))
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                expr_3323 := expr_3322
            }
            /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
            let expr_3324 := expr_3323
            /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
            let expr_3338 := expr_3324
            if iszero(expr_3338) {
                /// @src 1:3220:3238  "AddressUpgradeable"
                let expr_3325_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                /// @src 1:3258:3262  "this"
                let expr_3329_address := address()
                /// @src 1:3250:3263  "address(this)"
                let expr_3330 := convert_t_contract$_Initializable_$3446_to_t_address(expr_3329_address)
                /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                let expr_3331 := fun_isContract_5609(expr_3330)
                /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                let expr_3332 := cleanup_t_bool(iszero(expr_3331))
                /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                let expr_3336 := expr_3332
                if expr_3336 {
                    /// @src 1:3268:3280  "_initialized"
                    let _28 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_3333 := _28
                    /// @src 1:3284:3285  "1"
                    let expr_3334 := 0x01
                    /// @src 1:3268:3285  "_initialized == 1"
                    let expr_3335 := eq(cleanup_t_uint8(expr_3333), convert_t_rational_1_by_1_to_t_uint8(expr_3334))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    expr_3336 := expr_3335
                }
                /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3337 := expr_3336
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                expr_3338 := expr_3337
            }
            /// @src 1:3157:3358  "require(..."
            require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3338)
            /// @src 1:3383:3384  "1"
            let expr_3343 := 0x01
            /// @src 1:3368:3384  "_initialized = 1"
            let _29 := convert_t_rational_1_by_1_to_t_uint8(expr_3343)
            update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _29)
            let expr_3344 := _29
            /// @src 1:3398:3412  "isTopLevelCall"
            let _30 := var_isTopLevelCall_3314
            let expr_3346 := _30
            /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            if expr_3346 {
                /// @src 1:3444:3448  "true"
                let expr_3348 := 0x01
                /// @src 1:3428:3448  "_initializing = true"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3348)
                let expr_3349 := expr_3348
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
            }
            /// @src 1:3468:3469  "_"
            fun_initialize_2536_inner(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos)
            /// @src 1:3483:3497  "isTopLevelCall"
            let _31 := var_isTopLevelCall_3314
            let expr_3354 := _31
            /// @src 1:3479:3578  "if (isTopLevelCall) {..."
            if expr_3354 {
                /// @src 1:3529:3534  "false"
                let expr_3356 := 0x00
                /// @src 1:3513:3534  "_initializing = false"
                update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3356)
                let expr_3357 := expr_3356
                /// @src 1:3565:3566  "1"
                let expr_3360 := 0x01
                /// @src 1:3553:3567  "Initialized(1)"
                let _32 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                {
                    let _33 := allocate_unbounded()
                    let _34 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_33 , expr_3360)
                    log1(_33, sub(_34, _33) , _32)
                }/// @src 1:3479:3578  "if (isTopLevelCall) {..."
            }

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function update_byte_slice_32_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint256_to_t_uint256(value) -> converted {
            converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
        }

        function prepare_store_t_uint256(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0) {
            let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
        }

        function convert_t_bytes32_to_t_bytes32(value) -> converted {
            converted := cleanup_t_bytes32(value)
        }

        function prepare_store_t_bytes32(value) -> ret {
            ret := shift_right_0_unsigned(value)
        }

        function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0) {
            let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
            sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
        }

        function update_byte_slice_8_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint64_to_t_uint64(value) -> converted {
            converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
        }

        function prepare_store_t_uint64(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint64_to_t_uint64(slot, value_0) {
            let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
            sstore(slot, update_byte_slice_8_shift_0(sload(slot), prepare_store_t_uint64(convertedValue_0)))
        }

        function store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(memPtr) {

            mstore(add(memPtr, 0), "SystemConfig: gas limit too low")

        }

        function abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)
            store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(pos)
            end := add(pos, 32)
        }

        function abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @src 14:4422:5053  "function initialize(..."
        function fun_initialize_2536_inner(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

            fun___Ownable_init_4915()
            /// @src 14:4745:4751  "_owner"
            let _35 := var__owner_2478
            let expr_2500 := _35
            fun_transferOwnership_4994(expr_2500)
            /// @src 14:4773:4782  "_overhead"
            let _36 := var__overhead_2480
            let expr_2504 := _36
            /// @src 14:4762:4782  "overhead = _overhead"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2504)
            let expr_2505 := expr_2504
            /// @src 14:4801:4808  "_scalar"
            let _37 := var__scalar_2482
            let expr_2508 := _37
            /// @src 14:4792:4808  "scalar = _scalar"
            update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2508)
            let expr_2509 := expr_2508
            /// @src 14:4832:4844  "_batcherHash"
            let _38 := var__batcherHash_2484
            let expr_2512 := _38
            /// @src 14:4818:4844  "batcherHash = _batcherHash"
            update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2512)
            let expr_2513 := expr_2512
            /// @src 14:4865:4874  "_gasLimit"
            let _39 := var__gasLimit_2486
            let expr_2516 := _39
            /// @src 14:4854:4874  "gasLimit = _gasLimit"
            update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2516)
            let expr_2517 := expr_2516
            /// @src 14:4906:4924  "_unsafeBlockSigner"
            let _40 := var__unsafeBlockSigner_2488
            let expr_2520 := _40
            fun__setUnsafeBlockSigner_2707(expr_2520)
            /// @src 14:4954:4961  "_config"
            let _41_mpos := var__config_2491_mpos
            let expr_2524_mpos := _41_mpos
            fun__setResourceConfig_2796(expr_2524_mpos)
            /// @src 14:4980:4989  "_gasLimit"
            let _42 := var__gasLimit_2486
            let expr_2528 := _42
            /// @src 14:4993:5010  "minimumGasLimit()"
            let expr_2530 := fun_minimumGasLimit_2555()
            /// @src 14:4980:5010  "_gasLimit >= minimumGasLimit()"
            let expr_2531 := iszero(lt(cleanup_t_uint64(expr_2528), cleanup_t_uint64(expr_2530)))
            /// @src 14:4972:5046  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
            require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2531)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 2536
        /// @src 14:4422:5053  "function initialize(..."
        function fun_initialize_2536(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

            modifier_initializer_2494(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function zero_value_for_split_t_uint64() -> ret {
            ret := 0
        }

        function cleanup_from_storage_t_uint32(value) -> cleaned {
            cleaned := and(value, 0xffffffff)
        }

        function extract_from_storage_value_offset_0t_uint32(slot_value) -> value {
            value := cleanup_from_storage_t_uint32(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_uint32(slot) -> value {
            value := extract_from_storage_value_offset_0t_uint32(sload(slot))

        }

        function convert_t_uint32_to_t_uint64(value) -> converted {
            converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
        }

        function shift_right_80_unsigned(value) -> newValue {
            newValue :=

            shr(80, value)

        }

        function extract_from_storage_value_offset_10t_uint32(slot_value) -> value {
            value := cleanup_from_storage_t_uint32(shift_right_80_unsigned(slot_value))
        }

        function read_from_storage_split_offset_10_t_uint32(slot) -> value {
            value := extract_from_storage_value_offset_10t_uint32(sload(slot))

        }

        function panic_error_0x11() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x11)
            revert(0, 0x24)
        }

        function checked_add_t_uint64(x, y) -> sum {
            x := cleanup_t_uint64(x)
            y := cleanup_t_uint64(y)

            // overflow, if x > (maxValue - y)
            if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }

            sum := add(x, y)
        }

        /// @ast-id 2555
        /// @src 14:5509:5670  "function minimumGasLimit() public view returns (uint64) {..."
        function fun_minimumGasLimit_2555() -> var__2540 {
            /// @src 14:5557:5563  "uint64"
            let zero_t_uint64_43 := zero_value_for_split_t_uint64()
            var__2540 := zero_t_uint64_43

            /// @src 14:5589:5604  "_resourceConfig"
            let _44_slot := 0x69
            let expr_2544_slot := _44_slot
            /// @src 14:5589:5621  "_resourceConfig.maxResourceLimit"
            let _45 := add(expr_2544_slot, 0)
            let _46 := read_from_storage_split_offset_0_t_uint32(_45)
            let expr_2545 := _46
            /// @src 14:5582:5622  "uint64(_resourceConfig.maxResourceLimit)"
            let expr_2546 := convert_t_uint32_to_t_uint64(expr_2545)
            /// @src 14:5632:5647  "_resourceConfig"
            let _47_slot := 0x69
            let expr_2549_slot := _47_slot
            /// @src 14:5632:5662  "_resourceConfig.systemTxMaxGas"
            let _48 := add(expr_2549_slot, 0)
            let _49 := read_from_storage_split_offset_10_t_uint32(_48)
            let expr_2550 := _49
            /// @src 14:5625:5663  "uint64(_resourceConfig.systemTxMaxGas)"
            let expr_2551 := convert_t_uint32_to_t_uint64(expr_2550)
            /// @src 14:5582:5663  "uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
            let expr_2552 := checked_add_t_uint64(expr_2546, expr_2551)

            /// @src 14:5575:5663  "return uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
            var__2540 := expr_2552
            leave

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
        function constant_UNSAFE_BLOCK_SIGNER_SLOT_2414() -> ret {
            /// @src 14:1648:1691  "keccak256(\"systemconfig.unsafeblocksigner\")"
            let expr_2413 := 0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08
            let _50 := expr_2413

            ret := _50
        }

        /// @ast-id 2707
        /// @src 14:8083:8281  "function _setUnsafeBlockSigner(address _unsafeBlockSigner) internal {..."
        function fun__setUnsafeBlockSigner_2707(var__unsafeBlockSigner_2698) {

            /// @src 14:8176:8200  "UNSAFE_BLOCK_SIGNER_SLOT"
            let expr_2703 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2414()
            /// @src 14:8161:8200  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
            let var_slot_2702 := expr_2703
            /// @src 14:8210:8275  "assembly {..."
            {
                sstore(var_slot_2702, var__unsafeBlockSigner_2698)
            }

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function read_from_memoryt_uint32(ptr) -> returnValue {

            let value := cleanup_t_uint32(mload(ptr))

            returnValue :=

            value

        }

        function read_from_memoryt_uint128(ptr) -> returnValue {

            let value := cleanup_t_uint128(mload(ptr))

            returnValue :=

            value

        }

        function convert_t_uint32_to_t_uint128(value) -> converted {
            converted := cleanup_t_uint128(identity(cleanup_t_uint32(value)))
        }

        function store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(memPtr) {

            mstore(add(memPtr, 0), "SystemConfig: min base fee must ")

            mstore(add(memPtr, 32), "be less than max base")

        }

        function abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
            store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function read_from_memoryt_uint8(ptr) -> returnValue {

            let value := cleanup_t_uint8(mload(ptr))

            returnValue :=

            value

        }

        function store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(memPtr) {

            mstore(add(memPtr, 0), "SystemConfig: denominator must b")

            mstore(add(memPtr, 32), "e larger than 1")

        }

        function abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
            store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function checked_add_t_uint32(x, y) -> sum {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)

            // overflow, if x > (maxValue - y)
            if gt(x, sub(0xffffffff, y)) { panic_error_0x11() }

            sum := add(x, y)
        }

        function cleanup_from_storage_t_uint64(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffff)
        }

        function extract_from_storage_value_offset_0t_uint64(slot_value) -> value {
            value := cleanup_from_storage_t_uint64(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_uint64(slot) -> value {
            value := extract_from_storage_value_offset_0t_uint64(sload(slot))

        }

        function convert_t_rational_0_by_1_to_t_uint8(value) -> converted {
            converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
        }

        function store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(memPtr) {

            mstore(add(memPtr, 0), "SystemConfig: elasticity multipl")

            mstore(add(memPtr, 32), "ier cannot be 0")

        }

        function abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
            store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function convert_t_uint8_to_t_uint32(value) -> converted {
            converted := cleanup_t_uint32(identity(cleanup_t_uint8(value)))
        }

        function panic_error_0x12() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x12)
            revert(0, 0x24)
        }

        function checked_div_t_uint32(x, y) -> r {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)
            if iszero(y) { panic_error_0x12() }

            r := div(x, y)
        }

        function checked_mul_t_uint32(x, y) -> product {
            x := cleanup_t_uint32(x)
            y := cleanup_t_uint32(y)

            // overflow, if x != 0 and y > (maxValue / x)
            if and(iszero(iszero(x)), gt(y, div(0xffffffff, x))) { panic_error_0x11() }

            product := mul(x, y)
        }

        function store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(memPtr) {

            mstore(add(memPtr, 0), "SystemConfig: precision loss wit")

            mstore(add(memPtr, 32), "h target resource limit")

        }

        function abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
            store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        function panic_error_0x00() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x00)
            revert(0, 0x24)
        }

        function update_byte_slice_4_shift_0(value, toInsert) -> result {
            let mask := 0xffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint32_to_t_uint32(value) -> converted {
            converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
        }

        function prepare_store_t_uint32(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_uint32_to_t_uint32(slot, value_0) {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_0(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }

        function shift_left_32(value) -> newValue {
            newValue :=

            shl(32, value)

        }

        function update_byte_slice_1_shift_4(value, toInsert) -> result {
            let mask := 0xff00000000
            toInsert := shift_left_32(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function update_storage_value_offset_4t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_4(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_40(value) -> newValue {
            newValue :=

            shl(40, value)

        }

        function update_byte_slice_1_shift_5(value, toInsert) -> result {
            let mask := 0xff0000000000
            toInsert := shift_left_40(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function update_storage_value_offset_5t_uint8_to_t_uint8(slot, value_0) {
            let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
            sstore(slot, update_byte_slice_1_shift_5(sload(slot), prepare_store_t_uint8(convertedValue_0)))
        }

        function shift_left_48(value) -> newValue {
            newValue :=

            shl(48, value)

        }

        function update_byte_slice_4_shift_6(value, toInsert) -> result {
            let mask := 0xffffffff000000000000
            toInsert := shift_left_48(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function update_storage_value_offset_6t_uint32_to_t_uint32(slot, value_0) {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_6(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }

        function shift_left_80(value) -> newValue {
            newValue :=

            shl(80, value)

        }

        function update_byte_slice_4_shift_10(value, toInsert) -> result {
            let mask := 0xffffffff00000000000000000000
            toInsert := shift_left_80(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function update_storage_value_offset_10t_uint32_to_t_uint32(slot, value_0) {
            let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
            sstore(slot, update_byte_slice_4_shift_10(sload(slot), prepare_store_t_uint32(convertedValue_0)))
        }

        function shift_left_112(value) -> newValue {
            newValue :=

            shl(112, value)

        }

        function update_byte_slice_16_shift_14(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffff0000000000000000000000000000
            toInsert := shift_left_112(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_uint128_to_t_uint128(value) -> converted {
            converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
        }

        function prepare_store_t_uint128(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_14t_uint128_to_t_uint128(slot, value_0) {
            let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
            sstore(slot, update_byte_slice_16_shift_14(sload(slot), prepare_store_t_uint128(convertedValue_0)))
        }

        function copy_struct_to_storage_from_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value) {

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 0)

                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                update_storage_value_offset_0t_uint32_to_t_uint32(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 32)

                let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)

                update_storage_value_offset_4t_uint8_to_t_uint8(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 64)

                let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)

                update_storage_value_offset_5t_uint8_to_t_uint8(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 96)

                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                update_storage_value_offset_6t_uint32_to_t_uint32(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 128)

                let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                update_storage_value_offset_10t_uint32_to_t_uint32(memberSlot, memberValue_0)

            }

            {

                let memberSlot := add(slot, 0)
                let memberSrcPtr := add(value, 160)

                let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                update_storage_value_offset_14t_uint128_to_t_uint128(memberSlot, memberValue_0)

            }

        }

        function update_storage_value_offset_0t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value_0) {

            copy_struct_to_storage_from_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value_0)
        }

        /// @ast-id 2796
        /// @src 14:9240:10633  "function _setResourceConfig(ResourceMetering.ResourceConfig memory _config) internal {..."
        function fun__setResourceConfig_2796(var__config_2735_mpos) {

            /// @src 14:9424:9431  "_config"
            let _51_mpos := var__config_2735_mpos
            let expr_2739_mpos := _51_mpos
            /// @src 14:9424:9446  "_config.minimumBaseFee"
            let _52 := add(expr_2739_mpos, 96)
            let _53 := read_from_memoryt_uint32(_52)
            let expr_2740 := _53
            /// @src 14:9450:9457  "_config"
            let _54_mpos := var__config_2735_mpos
            let expr_2741_mpos := _54_mpos
            /// @src 14:9450:9472  "_config.maximumBaseFee"
            let _55 := add(expr_2741_mpos, 160)
            let _56 := read_from_memoryt_uint128(_55)
            let expr_2742 := _56
            /// @src 14:9424:9472  "_config.minimumBaseFee <= _config.maximumBaseFee"
            let expr_2743 := iszero(gt(convert_t_uint32_to_t_uint128(expr_2740), cleanup_t_uint128(expr_2742)))
            /// @src 14:9403:9551  "require(..."
            require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(expr_2743)
            /// @src 14:9645:9652  "_config"
            let _57_mpos := var__config_2735_mpos
            let expr_2748_mpos := _57_mpos
            /// @src 14:9645:9680  "_config.baseFeeMaxChangeDenominator"
            let _58 := add(expr_2748_mpos, 64)
            let _59 := read_from_memoryt_uint8(_58)
            let expr_2749 := _59
            /// @src 14:9683:9684  "1"
            let expr_2750 := 0x01
            /// @src 14:9645:9684  "_config.baseFeeMaxChangeDenominator > 1"
            let expr_2751 := gt(cleanup_t_uint8(expr_2749), convert_t_rational_1_by_1_to_t_uint8(expr_2750))
            /// @src 14:9624:9757  "require(..."
            require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(expr_2751)
            /// @src 14:9966:9973  "_config"
            let _60_mpos := var__config_2735_mpos
            let expr_2756_mpos := _60_mpos
            /// @src 14:9966:9990  "_config.maxResourceLimit"
            let _61 := add(expr_2756_mpos, 0)
            let _62 := read_from_memoryt_uint32(_61)
            let expr_2757 := _62
            /// @src 14:9993:10000  "_config"
            let _63_mpos := var__config_2735_mpos
            let expr_2758_mpos := _63_mpos
            /// @src 14:9993:10015  "_config.systemTxMaxGas"
            let _64 := add(expr_2758_mpos, 128)
            let _65 := read_from_memoryt_uint32(_64)
            let expr_2759 := _65
            /// @src 14:9966:10015  "_config.maxResourceLimit + _config.systemTxMaxGas"
            let expr_2760 := checked_add_t_uint32(expr_2757, expr_2759)

            /// @src 14:10019:10027  "gasLimit"
            let _66 := read_from_storage_split_offset_0_t_uint64(0x68)
            let expr_2761 := _66
            /// @src 14:9966:10027  "_config.maxResourceLimit + _config.systemTxMaxGas <= gasLimit"
            let expr_2762 := iszero(gt(convert_t_uint32_to_t_uint64(expr_2760), cleanup_t_uint64(expr_2761)))
            /// @src 14:9945:10084  "require(..."
            require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2762)
            /// @src 14:10172:10179  "_config"
            let _67_mpos := var__config_2735_mpos
            let expr_2767_mpos := _67_mpos
            /// @src 14:10172:10200  "_config.elasticityMultiplier"
            let _68 := add(expr_2767_mpos, 32)
            let _69 := read_from_memoryt_uint8(_68)
            let expr_2768 := _69
            /// @src 14:10203:10204  "0"
            let expr_2769 := 0x00
            /// @src 14:10172:10204  "_config.elasticityMultiplier > 0"
            let expr_2770 := gt(cleanup_t_uint8(expr_2768), convert_t_rational_0_by_1_to_t_uint8(expr_2769))
            /// @src 14:10151:10277  "require(..."
            require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(expr_2770)
            /// @src 14:10377:10384  "_config"
            let _70_mpos := var__config_2735_mpos
            let expr_2775_mpos := _70_mpos
            /// @src 14:10377:10401  "_config.maxResourceLimit"
            let _71 := add(expr_2775_mpos, 0)
            let _72 := read_from_memoryt_uint32(_71)
            let expr_2776 := _72
            /// @src 14:10404:10411  "_config"
            let _73_mpos := var__config_2735_mpos
            let expr_2777_mpos := _73_mpos
            /// @src 14:10404:10432  "_config.elasticityMultiplier"
            let _74 := add(expr_2777_mpos, 32)
            let _75 := read_from_memoryt_uint8(_74)
            let expr_2778 := _75
            /// @src 14:10377:10432  "_config.maxResourceLimit / _config.elasticityMultiplier"
            let expr_2779 := checked_div_t_uint32(expr_2776, convert_t_uint8_to_t_uint32(expr_2778))

            /// @src 14:10376:10433  "(_config.maxResourceLimit / _config.elasticityMultiplier)"
            let expr_2780 := expr_2779
            /// @src 14:10452:10459  "_config"
            let _76_mpos := var__config_2735_mpos
            let expr_2781_mpos := _76_mpos
            /// @src 14:10452:10480  "_config.elasticityMultiplier"
            let _77 := add(expr_2781_mpos, 32)
            let _78 := read_from_memoryt_uint8(_77)
            let expr_2782 := _78
            /// @src 14:10376:10480  "(_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2783 := checked_mul_t_uint32(expr_2780, convert_t_uint8_to_t_uint32(expr_2782))

            /// @src 14:10375:10481  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2784 := expr_2783
            /// @src 14:10485:10492  "_config"
            let _79_mpos := var__config_2735_mpos
            let expr_2785_mpos := _79_mpos
            /// @src 14:10485:10509  "_config.maxResourceLimit"
            let _80 := add(expr_2785_mpos, 0)
            let _81 := read_from_memoryt_uint32(_80)
            let expr_2786 := _81
            /// @src 14:10375:10509  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
            let expr_2787 := eq(cleanup_t_uint32(expr_2784), cleanup_t_uint32(expr_2786))
            /// @src 14:10354:10590  "require(..."
            require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(expr_2787)
            /// @src 14:10619:10626  "_config"
            let _82_mpos := var__config_2735_mpos
            let expr_2792_mpos := _82_mpos
            /// @src 14:10601:10626  "_resourceConfig = _config"
            update_storage_value_offset_0t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(0x69, expr_2792_mpos)
            let _83_slot := 0x69
            let expr_2793_slot := _83_slot

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

            mstore(add(memPtr, 0), "Initializable: contract is not i")

            mstore(add(memPtr, 32), "nitializing")

        }

        function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
            store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @ast-id 3409
        /// @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_4909() {

            /// @src 1:4910:4923  "_initializing"
            let _84 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3403 := _84
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
            /// @src 1:4981:4982  "_"
            fun___Ownable_init_4915_inner()

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
        function fun___Ownable_init_4915_inner() {

            fun___Ownable_init_unchained_4926()

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 4915
        /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
        function fun___Ownable_init_4915() {

            modifier_onlyInitializing_4909()
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 3409
        /// @src 1:4864:4989  "modifier onlyInitializing() {..."
        function modifier_onlyInitializing_4918() {

            /// @src 1:4910:4923  "_initializing"
            let _85 := read_from_storage_split_offset_1_t_bool(0x00)
            let expr_3403 := _85
            /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
            require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
            /// @src 1:4981:4982  "_"
            fun___Ownable_init_unchained_4926_inner()

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
        function fun___Ownable_init_unchained_4926_inner() {

            /// @src 0:1195:1207  "_msgSender()"
            let expr_4922 := fun__msgSender_7052()
            fun__transferOwnership_5014(expr_4922)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 4926
        /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
        function fun___Ownable_init_unchained_4926() {

            modifier_onlyInitializing_4918()
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 4934
        /// @src 0:1303:1365  "modifier onlyOwner() {..."
        function modifier_onlyOwner_4977(var_newOwner_4974) {

            fun__checkOwner_4957()
            /// @src 0:1357:1358  "_"
            fun_transferOwnership_4994_inner(var_newOwner_4974)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function convert_t_rational_0_by_1_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
        }

        function convert_t_rational_0_by_1_to_t_address(value) -> converted {
            converted := convert_t_rational_0_by_1_to_t_uint160(value)
        }

        function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {

            mstore(add(memPtr, 0), "Ownable: new owner is the zero a")

            mstore(add(memPtr, 32), "ddress")

        }

        function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
            store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)
            end := add(pos, 64)
        }

        function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
        function fun_transferOwnership_4994_inner(var_newOwner_4974) {

            /// @src 0:2409:2417  "newOwner"
            let _86 := var_newOwner_4974
            let expr_4980 := _86
            /// @src 0:2429:2430  "0"
            let expr_4983 := 0x00
            /// @src 0:2421:2431  "address(0)"
            let expr_4984 := convert_t_rational_0_by_1_to_t_address(expr_4983)
            /// @src 0:2409:2431  "newOwner != address(0)"
            let expr_4985 := iszero(eq(cleanup_t_address(expr_4980), cleanup_t_address(expr_4984)))
            /// @src 0:2401:2474  "require(newOwner != address(0), \"Ownable: new owner is the zero address\")"
            require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(expr_4985)
            /// @src 0:2503:2511  "newOwner"
            let _87 := var_newOwner_4974
            let expr_4990 := _87
            fun__transferOwnership_5014(expr_4990)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 4994
        /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
        function fun_transferOwnership_4994(var_newOwner_4974) {

            modifier_onlyOwner_4977(var_newOwner_4974)
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {

            mstore(add(memPtr, 0), "Ownable: caller is not the owner")

        }

        function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {
            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)
            store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)
            end := add(pos, 32)
        }

        function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
            tail := add(headStart, 32)

            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)

        }

        function require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(condition ) {
            if iszero(condition) {
                let memPtr := allocate_unbounded()
                mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                let end := abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                revert(memPtr, sub(end, memPtr))
            }
        }

        /// @ast-id 4957
        /// @src 0:1599:1729  "function _checkOwner() internal view virtual {..."
        function fun__checkOwner_4957() {

            /// @src 0:1662:1669  "owner()"
            let expr_4949 := fun_owner_4943()
            /// @src 0:1673:1685  "_msgSender()"
            let expr_4951 := fun__msgSender_7052()
            /// @src 0:1662:1685  "owner() == _msgSender()"
            let expr_4952 := eq(cleanup_t_address(expr_4949), cleanup_t_address(expr_4951))
            /// @src 0:1654:1722  "require(owner() == _msgSender(), \"Ownable: caller is not the owner\")"
            require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(expr_4952)

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function zero_value_for_split_t_address() -> ret {
            ret := 0
        }

        function cleanup_from_storage_t_address(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function extract_from_storage_value_offset_0t_address(slot_value) -> value {
            value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
        }

        function read_from_storage_split_offset_0_t_address(slot) -> value {
            value := extract_from_storage_value_offset_0t_address(sload(slot))

        }

        /// @ast-id 4943
        /// @src 0:1441:1526  "function owner() public view virtual returns (address) {..."
        function fun_owner_4943() -> var__4938 {
            /// @src 0:1487:1494  "address"
            let zero_t_address_88 := zero_value_for_split_t_address()
            var__4938 := zero_t_address_88

            /// @src 0:1513:1519  "_owner"
            let _89 := read_from_storage_split_offset_0_t_address(0x33)
            let expr_4940 := _89
            /// @src 0:1506:1519  "return _owner"
            var__4938 := expr_4940
            leave

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function update_byte_slice_20_shift_0(value, toInsert) -> result {
            let mask := 0xffffffffffffffffffffffffffffffffffffffff
            toInsert := shift_left_0(toInsert)
            value := and(value, not(mask))
            result := or(value, and(toInsert, mask))
        }

        function convert_t_address_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function prepare_store_t_address(value) -> ret {
            ret := value
        }

        function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
            let convertedValue_0 := convert_t_address_to_t_address(value_0)
            sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
        }

        function abi_encode_tuple__to__fromStack(headStart ) -> tail {
            tail := add(headStart, 0)

        }

        /// @ast-id 5014
        /// @src 0:2673:2860  "function _transferOwnership(address newOwner) internal virtual {..."
        function fun__transferOwnership_5014(var_newOwner_4997) {

            /// @src 0:2765:2771  "_owner"
            let _90 := read_from_storage_split_offset_0_t_address(0x33)
            let expr_5002 := _90
            /// @src 0:2746:2771  "address oldOwner = _owner"
            let var_oldOwner_5001 := expr_5002
            /// @src 0:2790:2798  "newOwner"
            let _91 := var_newOwner_4997
            let expr_5005 := _91
            /// @src 0:2781:2798  "_owner = newOwner"
            update_storage_value_offset_0t_address_to_t_address(0x33, expr_5005)
            let expr_5006 := expr_5005
            /// @src 0:2834:2842  "oldOwner"
            let _92 := var_oldOwner_5001
            let expr_5009 := _92
            /// @src 0:2844:2852  "newOwner"
            let _93 := var_newOwner_4997
            let expr_5010 := _93
            /// @src 0:2813:2853  "OwnershipTransferred(oldOwner, newOwner)"
            let _94 := 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0
            let _95 := convert_t_address_to_t_address(expr_5009)
            let _96 := convert_t_address_to_t_address(expr_5010)
            {
                let _97 := allocate_unbounded()
                let _98 := abi_encode_tuple__to__fromStack(_97 )
                log3(_97, sub(_98, _97) , _94, _95, _96)
            }
        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        function zero_value_for_split_t_bool() -> ret {
            ret := 0
        }

        /// @ast-id 5609
        /// @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
        function fun_isContract_5609(var_account_5597) -> var__5600 {
            /// @src 2:1246:1250  "bool"
            let zero_t_bool_99 := zero_value_for_split_t_bool()
            var__5600 := zero_t_bool_99

            /// @src 2:1476:1483  "account"
            let _100 := var_account_5597
            let expr_5602 := _100
            /// @src 2:1476:1495  "account.code.length"
            let expr_5604 := extcodesize(expr_5602)
            /// @src 2:1498:1499  "0"
            let expr_5605 := 0x00
            /// @src 2:1476:1499  "account.code.length > 0"
            let expr_5606 := gt(cleanup_t_uint256(expr_5604), convert_t_rational_0_by_1_to_t_uint256(expr_5605))
            /// @src 2:1469:1499  "return account.code.length > 0"
            var__5600 := expr_5606
            leave

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        /// @ast-id 7052
        /// @src 3:850:946  "function _msgSender() internal view virtual returns (address) {..."
        function fun__msgSender_7052() -> var__7046 {
            /// @src 3:903:910  "address"
            let zero_t_address_101 := zero_value_for_split_t_address()
            var__7046 := zero_t_address_101

            /// @src 3:929:939  "msg.sender"
            let expr_7049 := caller()
            /// @src 3:922:939  "return msg.sender"
            var__7046 := expr_7049
            leave

        }
        /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

    }
    /// @use-src 0:"./node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol", 1:"./node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol", 2:"./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol", 3:"./node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol", 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 14:"contracts/L1/SystemConfig.sol", 29:"contracts/universal/Semver.sol"
    object "SystemConfig_2797_deployed" {
        code {
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."
            mstore(64, memoryguard(128))

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x0c18c162
                {
                    // overhead()

                    external_fun_overhead_2417()
                }

                case 0x18d13918
                {
                    // setUnsafeBlockSigner(address)

                    external_fun_setUnsafeBlockSigner_2599()
                }

                case 0x1fd19ee1
                {
                    // unsafeBlockSigner()

                    external_fun_unsafeBlockSigner_2572()
                }

                case 0x4add321d
                {
                    // minimumGasLimit()

                    external_fun_minimumGasLimit_2555()
                }

                case 0x4f16540b
                {
                    // UNSAFE_BLOCK_SIGNER_SLOT()

                    external_fun_UNSAFE_BLOCK_SIGNER_SLOT_2414()
                }

                case 0x54fd4d50
                {
                    // version()

                    external_fun_version_1424()
                }

                case 0x715018a6
                {
                    // renounceOwnership()

                    external_fun_renounceOwnership_4971()
                }

                case 0x8da5cb5b
                {
                    // owner()

                    external_fun_owner_4943()
                }

                case 0x935f029e
                {
                    // setGasConfig(uint256,uint256)

                    external_fun_setGasConfig_2660()
                }

                case 0xb40a817c
                {
                    // setGasLimit(uint64)

                    external_fun_setGasLimit_2695()
                }

                case 0xc71973f6
                {
                    // setResourceConfig((uint32,uint8,uint8,uint32,uint32,uint128))

                    external_fun_setResourceConfig_2731()
                }

                case 0xc9b26f61
                {
                    // setBatcherHash(bytes32)

                    external_fun_setBatcherHash_2626()
                }

                case 0xcc731b02
                {
                    // resourceConfig()

                    external_fun_resourceConfig_2717()
                }

                case 0xe81b2c6d
                {
                    // batcherHash()

                    external_fun_batcherHash_2423()
                }

                case 0xf2fde38b
                {
                    // transferOwnership(address)

                    external_fun_transferOwnership_4994()
                }

                case 0xf45e65d8
                {
                    // scalar()

                    external_fun_scalar_2420()
                }

                case 0xf68016b7
                {
                    // gasLimit()

                    external_fun_gasLimit_2426()
                }

                case 0xf975e925
                {
                    // initialize(address,uint256,uint256,bytes32,uint64,address,(uint32,uint8,uint8,uint32,uint32,uint128))

                    external_fun_initialize_2536()
                }

                case 0xffa1ad74
                {
                    // VERSION()

                    external_fun_VERSION_2408()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function shift_right_unsigned_dynamic(bits, value) -> newValue {
                newValue :=

                shr(bits, value)

            }

            function cleanup_from_storage_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value {
                value := cleanup_from_storage_t_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_uint256(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)

            }

            /// @ast-id 2417
            /// @src 14:1792:1815  "uint256 public overhead"
            function getter_fun_overhead_2417() -> ret {

                let slot := 101
                let offset := 0

                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint256(value))
            }

            function abi_encode_tuple_t_uint256__to_t_uint256__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_overhead_2417() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_overhead_2417()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
                revert(0, 0)
            }

            function cleanup_t_uint160(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function cleanup_t_address(value) -> cleaned {
                cleaned := cleanup_t_uint160(value)
            }

            function validator_revert_t_address(value) {
                if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }
            }

            function abi_decode_t_address(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_address(value)
            }

            function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function external_fun_setUnsafeBlockSigner_2599() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_address(4, calldatasize())
                fun_setUnsafeBlockSigner_2599(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_t_address_to_t_address_fromStack(value, pos) {
                mstore(pos, cleanup_t_address(value))
            }

            function abi_encode_tuple_t_address__to_t_address__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_unsafeBlockSigner_2572() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_unsafeBlockSigner_2572()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }

            function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {
                mstore(pos, cleanup_t_uint64(value))
            }

            function abi_encode_tuple_t_uint64__to_t_uint64__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_minimumGasLimit_2555() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_minimumGasLimit_2555()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            /// @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
            function constant_UNSAFE_BLOCK_SIGNER_SLOT_2414() -> ret {
                /// @src 14:1648:1691  "keccak256(\"systemconfig.unsafeblocksigner\")"
                let expr_2413 := 0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08
                let _1 := expr_2413

                ret := _1
            }

            /// @ast-id 2414
            /// @src 14:1597:1691  "bytes32 public constant UNSAFE_BLOCK_SIGNER_SLOT = keccak256(\"systemconfig.unsafeblocksigner\")"
            function getter_fun_UNSAFE_BLOCK_SIGNER_SLOT_2414() -> ret_0 {
                ret_0 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2414()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function cleanup_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {
                mstore(pos, cleanup_t_bytes32(value))
            }

            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_UNSAFE_BLOCK_SIGNER_SLOT_2414() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_UNSAFE_BLOCK_SIGNER_SLOT_2414()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length)
                {
                    // clear end
                    mstore(add(dst, length), 0)
                }
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_version_1424() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_version_1424()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_renounceOwnership_4971() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                fun_renounceOwnership_4971()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_owner_4943() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_owner_4943()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_address__to_t_address__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function validator_revert_t_uint256(value) {
                if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint256(value)
            }

            function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {
                if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_setGasConfig_2660() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0, param_1 :=  abi_decode_tuple_t_uint256t_uint256(4, calldatasize())
                fun_setGasConfig_2660(param_0, param_1)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function validator_revert_t_uint64(value) {
                if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint64(value)
            }

            function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_setGasLimit_2695() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_uint64(4, calldatasize())
                fun_setGasLimit_2695(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {
                revert(0, 0)
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {
                revert(0, 0)
            }

            function cleanup_t_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }

            function validator_revert_t_uint32(value) {
                if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint32(value)
            }

            function cleanup_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function validator_revert_t_uint8(value) {
                if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint8(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint8(value)
            }

            function cleanup_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function validator_revert_t_uint128(value) {
                if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }
            }

            function abi_decode_t_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_uint128(value)
            }

            // struct ResourceMetering.ResourceConfig
            function abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr(headStart, end) -> value {
                if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }
                value := allocate_memory(0xc0)

                {
                    // maxResourceLimit

                    let offset := 0

                    mstore(add(value, 0x00), abi_decode_t_uint32(add(headStart, offset), end))

                }

                {
                    // elasticityMultiplier

                    let offset := 32

                    mstore(add(value, 0x20), abi_decode_t_uint8(add(headStart, offset), end))

                }

                {
                    // baseFeeMaxChangeDenominator

                    let offset := 64

                    mstore(add(value, 0x40), abi_decode_t_uint8(add(headStart, offset), end))

                }

                {
                    // minimumBaseFee

                    let offset := 96

                    mstore(add(value, 0x60), abi_decode_t_uint32(add(headStart, offset), end))

                }

                {
                    // systemTxMaxGas

                    let offset := 128

                    mstore(add(value, 0x80), abi_decode_t_uint32(add(headStart, offset), end))

                }

                {
                    // maximumBaseFee

                    let offset := 160

                    mstore(add(value, 0xa0), abi_decode_t_uint128(add(headStart, offset), end))

                }

            }

            function abi_decode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_setResourceConfig_2731() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr(4, calldatasize())
                fun_setResourceConfig_2731(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function validator_revert_t_bytes32(value) {
                if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }
            }

            function abi_decode_t_bytes32(offset, end) -> value {
                value := calldataload(offset)
                validator_revert_t_bytes32(value)
            }

            function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {
                if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_setBatcherHash_2626() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_bytes32(4, calldatasize())
                fun_setBatcherHash_2626(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function abi_encode_t_uint32_to_t_uint32(value, pos) {
                mstore(pos, cleanup_t_uint32(value))
            }

            function abi_encode_t_uint8_to_t_uint8(value, pos) {
                mstore(pos, cleanup_t_uint8(value))
            }

            function abi_encode_t_uint128_to_t_uint128(value, pos) {
                mstore(pos, cleanup_t_uint128(value))
            }

            // struct ResourceMetering.ResourceConfig -> struct ResourceMetering.ResourceConfig
            function abi_encode_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_memory_ptr_fromStack(value, pos)  {
                let tail := add(pos, 0xc0)

                {
                    // maxResourceLimit

                    let memberValue0 := mload(add(value, 0x00))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x00))
                }

                {
                    // elasticityMultiplier

                    let memberValue0 := mload(add(value, 0x20))
                    abi_encode_t_uint8_to_t_uint8(memberValue0, add(pos, 0x20))
                }

                {
                    // baseFeeMaxChangeDenominator

                    let memberValue0 := mload(add(value, 0x40))
                    abi_encode_t_uint8_to_t_uint8(memberValue0, add(pos, 0x40))
                }

                {
                    // minimumBaseFee

                    let memberValue0 := mload(add(value, 0x60))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x60))
                }

                {
                    // systemTxMaxGas

                    let memberValue0 := mload(add(value, 0x80))
                    abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x80))
                }

                {
                    // maximumBaseFee

                    let memberValue0 := mload(add(value, 0xa0))
                    abi_encode_t_uint128_to_t_uint128(memberValue0, add(pos, 0xa0))
                }

            }

            function abi_encode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr__to_t_struct$_ResourceConfig_$2070_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 192)

                abi_encode_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_memory_ptr_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_resourceConfig_2717() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_resourceConfig_2717()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_struct$_ResourceConfig_$2070_memory_ptr__to_t_struct$_ResourceConfig_$2070_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_from_storage_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value {
                value := cleanup_from_storage_t_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_bytes32(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)

            }

            /// @ast-id 2423
            /// @src 14:2127:2153  "bytes32 public batcherHash"
            function getter_fun_batcherHash_2423() -> ret {

                let slot := 103
                let offset := 0

                ret := read_from_storage_split_dynamic_t_bytes32(slot, offset)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function external_fun_batcherHash_2423() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_batcherHash_2423()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function external_fun_transferOwnership_4994() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0 :=  abi_decode_tuple_t_address(4, calldatasize())
                fun_transferOwnership_4994(param_0)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            /// @ast-id 2420
            /// @src 14:1918:1939  "uint256 public scalar"
            function getter_fun_scalar_2420() -> ret {

                let slot := 102
                let offset := 0

                ret := read_from_storage_split_dynamic_t_uint256(slot, offset)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function external_fun_scalar_2420() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_scalar_2420()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_from_storage_t_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }

            function extract_from_storage_value_dynamict_uint64(slot_value, offset) -> value {
                value := cleanup_from_storage_t_uint64(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))
            }

            function read_from_storage_split_dynamic_t_uint64(slot, offset) -> value {
                value := extract_from_storage_value_dynamict_uint64(sload(slot), offset)

            }

            /// @ast-id 2426
            /// @src 14:2211:2233  "uint64 public gasLimit"
            function getter_fun_gasLimit_2426() -> ret {

                let slot := 104
                let offset := 0

                ret := read_from_storage_split_dynamic_t_uint64(slot, offset)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function external_fun_gasLimit_2426() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_gasLimit_2426()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2070_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {
                if slt(sub(dataEnd, headStart), 384) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

                {

                    let offset := 0

                    value0 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 32

                    value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 64

                    value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 96

                    value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 128

                    value4 := abi_decode_t_uint64(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 160

                    value5 := abi_decode_t_address(add(headStart, offset), dataEnd)
                }

                {

                    let offset := 192

                    value6 := abi_decode_t_struct$_ResourceConfig_$2070_memory_ptr(add(headStart, offset), dataEnd)
                }

            }

            function external_fun_initialize_2536() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                let param_0, param_1, param_2, param_3, param_4, param_5, param_6 :=  abi_decode_tuple_t_addresst_uint256t_uint256t_bytes32t_uint64t_addresst_struct$_ResourceConfig_$2070_memory_ptr(4, calldatasize())
                fun_initialize_2536(param_0, param_1, param_2, param_3, param_4, param_5, param_6)
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                return(memPos, sub(memEnd, memPos))

            }

            function cleanup_t_rational_0_by_1(value) -> cleaned {
                cleaned := value
            }

            function identity(value) -> ret {
                ret := value
            }

            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }

            /// @src 14:1252:1287  "uint256 public constant VERSION = 0"
            function constant_VERSION_2408() -> ret {
                /// @src 14:1286:1287  "0"
                let expr_2407 := 0x00
                let _2 := convert_t_rational_0_by_1_to_t_uint256(expr_2407)

                ret := _2
            }

            /// @ast-id 2408
            /// @src 14:1252:1287  "uint256 public constant VERSION = 0"
            function getter_fun_VERSION_2408() -> ret_0 {
                ret_0 := constant_VERSION_2408()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function external_fun_VERSION_2408() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  getter_fun_VERSION_2408()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_uint256__to_t_uint256__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {

                mstore(add(memPtr, 0), ".")

            }

            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }

            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2) -> end {

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)

                end := pos
            }

            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted  {
                converted := value

            }

            /// @ast-id 1424
            /// @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1424() -> var__1400_mpos {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_3_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1400_mpos := zero_t_string_memory_ptr_3_mpos

                /// @src 29:1203:1210  "Strings"
                let expr_1406_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _4 := loadimmutable("1367")
                let expr_1408 := _4
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1409_mpos := fun_toString_3827(expr_1408)
                /// @src 29:1281:1288  "Strings"
                let expr_1411_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _5 := loadimmutable("1370")
                let expr_1413 := _5
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1414_mpos := fun_toString_3827(expr_1413)
                /// @src 29:1359:1366  "Strings"
                let expr_1416_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _6 := loadimmutable("1373")
                let expr_1418 := _6
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1419_mpos := fun_toString_3827(expr_1418)
                /// @src 29:1165:1408  "abi.encodePacked(..."

                let expr_1420_mpos := allocate_unbounded()
                let _7 := add(expr_1420_mpos, 0x20)

                let _8 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_7, expr_1409_mpos, expr_1414_mpos, expr_1419_mpos)
                mstore(expr_1420_mpos, sub(_8, add(expr_1420_mpos, 0x20)))
                finalize_allocation(expr_1420_mpos, sub(_8, expr_1420_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1421_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1420_mpos)
                /// @src 29:1122:1422  "return..."
                var__1400_mpos := expr_1421_mpos
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function shift_right_8_unsigned(value) -> newValue {
                newValue :=

                shr(8, value)

            }

            function cleanup_from_storage_t_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_1t_bool(slot_value) -> value {
                value := cleanup_from_storage_t_bool(shift_right_8_unsigned(slot_value))
            }

            function read_from_storage_split_offset_1_t_bool(slot) -> value {
                value := extract_from_storage_value_offset_1t_bool(sload(slot))

            }

            function cleanup_t_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }

            function shift_right_0_unsigned(value) -> newValue {
                newValue :=

                shr(0, value)

            }

            function cleanup_from_storage_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function extract_from_storage_value_offset_0t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint8(sload(slot))

            }

            function cleanup_t_rational_1_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))
            }

            function convert_t_uint160_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
            }

            function convert_t_uint160_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_uint160(value)
            }

            function convert_t_contract$_Initializable_$3446_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is alrea")

                mstore(add(memPtr, 32), "dy initialized")

            }

            function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)
                store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function shift_left_0(value) -> newValue {
                newValue :=

                shl(0, value)

            }

            function update_byte_slice_1_shift_0(value, toInsert) -> result {
                let mask := 255
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint8_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint8(value)))
            }

            function prepare_store_t_uint8(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_0(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_8(value) -> newValue {
                newValue :=

                shl(8, value)

            }

            function update_byte_slice_1_shift_1(value, toInsert) -> result {
                let mask := 65280
                toInsert := shift_left_8(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_bool_to_t_bool(value) -> converted {
                converted := cleanup_t_bool(value)
            }

            function prepare_store_t_bool(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_1t_bool_to_t_bool(slot, value_0) {
                let convertedValue_0 := convert_t_bool_to_t_bool(value_0)
                sstore(slot, update_byte_slice_1_shift_1(sload(slot), prepare_store_t_bool(convertedValue_0)))
            }

            function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {
                mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))
            }

            function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))

            }

            /// @ast-id 3366
            /// @src 1:3078:3584  "modifier initializer() {..."
            function modifier_initializer_2494(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

                /// @src 1:3134:3147  "_initializing"
                let _9 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3315 := _9
                /// @src 1:3133:3147  "!_initializing"
                let expr_3316 := cleanup_t_bool(iszero(expr_3315))
                /// @src 1:3111:3147  "bool isTopLevelCall = !_initializing"
                let var_isTopLevelCall_3314 := expr_3316
                /// @src 1:3179:3193  "isTopLevelCall"
                let _10 := var_isTopLevelCall_3314
                let expr_3319 := _10
                /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                let expr_3323 := expr_3319
                if expr_3323 {
                    /// @src 1:3197:3209  "_initialized"
                    let _11 := read_from_storage_split_offset_0_t_uint8(0x00)
                    let expr_3320 := _11
                    /// @src 1:3212:3213  "1"
                    let expr_3321 := 0x01
                    /// @src 1:3197:3213  "_initialized < 1"
                    let expr_3322 := lt(cleanup_t_uint8(expr_3320), convert_t_rational_1_by_1_to_t_uint8(expr_3321))
                    /// @src 1:3179:3213  "isTopLevelCall && _initialized < 1"
                    expr_3323 := expr_3322
                }
                /// @src 1:3178:3214  "(isTopLevelCall && _initialized < 1)"
                let expr_3324 := expr_3323
                /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                let expr_3338 := expr_3324
                if iszero(expr_3338) {
                    /// @src 1:3220:3238  "AddressUpgradeable"
                    let expr_3325_address := linkersymbol("./node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable")
                    /// @src 1:3258:3262  "this"
                    let expr_3329_address := address()
                    /// @src 1:3250:3263  "address(this)"
                    let expr_3330 := convert_t_contract$_Initializable_$3446_to_t_address(expr_3329_address)
                    /// @src 1:3220:3264  "AddressUpgradeable.isContract(address(this))"
                    let expr_3331 := fun_isContract_5609(expr_3330)
                    /// @src 1:3219:3264  "!AddressUpgradeable.isContract(address(this))"
                    let expr_3332 := cleanup_t_bool(iszero(expr_3331))
                    /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                    let expr_3336 := expr_3332
                    if expr_3336 {
                        /// @src 1:3268:3280  "_initialized"
                        let _12 := read_from_storage_split_offset_0_t_uint8(0x00)
                        let expr_3333 := _12
                        /// @src 1:3284:3285  "1"
                        let expr_3334 := 0x01
                        /// @src 1:3268:3285  "_initialized == 1"
                        let expr_3335 := eq(cleanup_t_uint8(expr_3333), convert_t_rational_1_by_1_to_t_uint8(expr_3334))
                        /// @src 1:3219:3285  "!AddressUpgradeable.isContract(address(this)) && _initialized == 1"
                        expr_3336 := expr_3335
                    }
                    /// @src 1:3218:3286  "(!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    let expr_3337 := expr_3336
                    /// @src 1:3178:3286  "(isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)"
                    expr_3338 := expr_3337
                }
                /// @src 1:3157:3358  "require(..."
                require_helper_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(expr_3338)
                /// @src 1:3383:3384  "1"
                let expr_3343 := 0x01
                /// @src 1:3368:3384  "_initialized = 1"
                let _13 := convert_t_rational_1_by_1_to_t_uint8(expr_3343)
                update_storage_value_offset_0t_uint8_to_t_uint8(0x00, _13)
                let expr_3344 := _13
                /// @src 1:3398:3412  "isTopLevelCall"
                let _14 := var_isTopLevelCall_3314
                let expr_3346 := _14
                /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                if expr_3346 {
                    /// @src 1:3444:3448  "true"
                    let expr_3348 := 0x01
                    /// @src 1:3428:3448  "_initializing = true"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3348)
                    let expr_3349 := expr_3348
                    /// @src 1:3394:3459  "if (isTopLevelCall) {..."
                }
                /// @src 1:3468:3469  "_"
                fun_initialize_2536_inner(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos)
                /// @src 1:3483:3497  "isTopLevelCall"
                let _15 := var_isTopLevelCall_3314
                let expr_3354 := _15
                /// @src 1:3479:3578  "if (isTopLevelCall) {..."
                if expr_3354 {
                    /// @src 1:3529:3534  "false"
                    let expr_3356 := 0x00
                    /// @src 1:3513:3534  "_initializing = false"
                    update_storage_value_offset_1t_bool_to_t_bool(0x00, expr_3356)
                    let expr_3357 := expr_3356
                    /// @src 1:3565:3566  "1"
                    let expr_3360 := 0x01
                    /// @src 1:3553:3567  "Initialized(1)"
                    let _16 := 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498
                    {
                        let _17 := allocate_unbounded()
                        let _18 := abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack(_17 , expr_3360)
                        log1(_17, sub(_18, _17) , _16)
                    }/// @src 1:3479:3578  "if (isTopLevelCall) {..."
                }

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function update_byte_slice_32_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint256_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))
            }

            function prepare_store_t_uint256(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint256_to_t_uint256(slot, value_0) {
                let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_uint256(convertedValue_0)))
            }

            function convert_t_bytes32_to_t_bytes32(value) -> converted {
                converted := cleanup_t_bytes32(value)
            }

            function prepare_store_t_bytes32(value) -> ret {
                ret := shift_right_0_unsigned(value)
            }

            function update_storage_value_offset_0t_bytes32_to_t_bytes32(slot, value_0) {
                let convertedValue_0 := convert_t_bytes32_to_t_bytes32(value_0)
                sstore(slot, update_byte_slice_32_shift_0(sload(slot), prepare_store_t_bytes32(convertedValue_0)))
            }

            function update_byte_slice_8_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint64_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint64(value)))
            }

            function prepare_store_t_uint64(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint64_to_t_uint64(slot, value_0) {
                let convertedValue_0 := convert_t_uint64_to_t_uint64(value_0)
                sstore(slot, update_byte_slice_8_shift_0(sload(slot), prepare_store_t_uint64(convertedValue_0)))
            }

            function store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(memPtr) {

                mstore(add(memPtr, 0), "SystemConfig: gas limit too low")

            }

            function abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)
                store_literal_in_memory_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @src 14:4422:5053  "function initialize(..."
            function fun_initialize_2536_inner(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

                fun___Ownable_init_4915()
                /// @src 14:4745:4751  "_owner"
                let _19 := var__owner_2478
                let expr_2500 := _19
                fun_transferOwnership_4994(expr_2500)
                /// @src 14:4773:4782  "_overhead"
                let _20 := var__overhead_2480
                let expr_2504 := _20
                /// @src 14:4762:4782  "overhead = _overhead"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2504)
                let expr_2505 := expr_2504
                /// @src 14:4801:4808  "_scalar"
                let _21 := var__scalar_2482
                let expr_2508 := _21
                /// @src 14:4792:4808  "scalar = _scalar"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2508)
                let expr_2509 := expr_2508
                /// @src 14:4832:4844  "_batcherHash"
                let _22 := var__batcherHash_2484
                let expr_2512 := _22
                /// @src 14:4818:4844  "batcherHash = _batcherHash"
                update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2512)
                let expr_2513 := expr_2512
                /// @src 14:4865:4874  "_gasLimit"
                let _23 := var__gasLimit_2486
                let expr_2516 := _23
                /// @src 14:4854:4874  "gasLimit = _gasLimit"
                update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2516)
                let expr_2517 := expr_2516
                /// @src 14:4906:4924  "_unsafeBlockSigner"
                let _24 := var__unsafeBlockSigner_2488
                let expr_2520 := _24
                fun__setUnsafeBlockSigner_2707(expr_2520)
                /// @src 14:4954:4961  "_config"
                let _25_mpos := var__config_2491_mpos
                let expr_2524_mpos := _25_mpos
                fun__setResourceConfig_2796(expr_2524_mpos)
                /// @src 14:4980:4989  "_gasLimit"
                let _26 := var__gasLimit_2486
                let expr_2528 := _26
                /// @src 14:4993:5010  "minimumGasLimit()"
                let expr_2530 := fun_minimumGasLimit_2555()
                /// @src 14:4980:5010  "_gasLimit >= minimumGasLimit()"
                let expr_2531 := iszero(lt(cleanup_t_uint64(expr_2528), cleanup_t_uint64(expr_2530)))
                /// @src 14:4972:5046  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2531)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2536
            /// @src 14:4422:5053  "function initialize(..."
            function fun_initialize_2536(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos) {

                modifier_initializer_2494(var__owner_2478, var__overhead_2480, var__scalar_2482, var__batcherHash_2484, var__gasLimit_2486, var__unsafeBlockSigner_2488, var__config_2491_mpos)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function zero_value_for_split_t_uint64() -> ret {
                ret := 0
            }

            function cleanup_from_storage_t_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }

            function extract_from_storage_value_offset_0t_uint32(slot_value) -> value {
                value := cleanup_from_storage_t_uint32(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint32(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint32(sload(slot))

            }

            function convert_t_uint32_to_t_uint64(value) -> converted {
                converted := cleanup_t_uint64(identity(cleanup_t_uint32(value)))
            }

            function shift_right_80_unsigned(value) -> newValue {
                newValue :=

                shr(80, value)

            }

            function extract_from_storage_value_offset_10t_uint32(slot_value) -> value {
                value := cleanup_from_storage_t_uint32(shift_right_80_unsigned(slot_value))
            }

            function read_from_storage_split_offset_10_t_uint32(slot) -> value {
                value := extract_from_storage_value_offset_10t_uint32(sload(slot))

            }

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function checked_add_t_uint64(x, y) -> sum {
                x := cleanup_t_uint64(x)
                y := cleanup_t_uint64(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            /// @ast-id 2555
            /// @src 14:5509:5670  "function minimumGasLimit() public view returns (uint64) {..."
            function fun_minimumGasLimit_2555() -> var__2540 {
                /// @src 14:5557:5563  "uint64"
                let zero_t_uint64_27 := zero_value_for_split_t_uint64()
                var__2540 := zero_t_uint64_27

                /// @src 14:5589:5604  "_resourceConfig"
                let _28_slot := 0x69
                let expr_2544_slot := _28_slot
                /// @src 14:5589:5621  "_resourceConfig.maxResourceLimit"
                let _29 := add(expr_2544_slot, 0)
                let _30 := read_from_storage_split_offset_0_t_uint32(_29)
                let expr_2545 := _30
                /// @src 14:5582:5622  "uint64(_resourceConfig.maxResourceLimit)"
                let expr_2546 := convert_t_uint32_to_t_uint64(expr_2545)
                /// @src 14:5632:5647  "_resourceConfig"
                let _31_slot := 0x69
                let expr_2549_slot := _31_slot
                /// @src 14:5632:5662  "_resourceConfig.systemTxMaxGas"
                let _32 := add(expr_2549_slot, 0)
                let _33 := read_from_storage_split_offset_10_t_uint32(_32)
                let expr_2550 := _33
                /// @src 14:5625:5663  "uint64(_resourceConfig.systemTxMaxGas)"
                let expr_2551 := convert_t_uint32_to_t_uint64(expr_2550)
                /// @src 14:5582:5663  "uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
                let expr_2552 := checked_add_t_uint64(expr_2546, expr_2551)

                /// @src 14:5575:5663  "return uint64(_resourceConfig.maxResourceLimit) + uint64(_resourceConfig.systemTxMaxGas)"
                var__2540 := expr_2552
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function zero_value_for_split_t_address() -> ret {
                ret := 0
            }

            /// @ast-id 2572
            /// @src 14:6008:6229  "function unsafeBlockSigner() external view returns (address) {..."
            function fun_unsafeBlockSigner_2572() -> var__2559 {
                /// @src 14:6060:6067  "address"
                let zero_t_address_34 := zero_value_for_split_t_address()
                var__2559 := zero_t_address_34

                /// @src 14:6079:6091  "address addr"
                let var_addr_2562
                let zero_t_address_35 := zero_value_for_split_t_address()
                var_addr_2562 := zero_t_address_35
                /// @src 14:6116:6140  "UNSAFE_BLOCK_SIGNER_SLOT"
                let expr_2566 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2414()
                /// @src 14:6101:6140  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
                let var_slot_2565 := expr_2566
                /// @src 14:6150:6202  "assembly {..."
                {
                    var_addr_2562 := sload(var_slot_2565)
                }
                /// @src 14:6218:6222  "addr"
                let _36 := var_addr_2562
                let expr_2569 := _36
                /// @src 14:6211:6222  "return addr"
                var__2559 := expr_2569
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2578(var__unsafeBlockSigner_2575) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_setUnsafeBlockSigner_2599_inner(var__unsafeBlockSigner_2575)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function panic_error_0x21() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x21)
                revert(0, 0x24)
            }

            function validator_assert_t_enum$_UpdateType_$2404(value) {
                if iszero(lt(value, 4)) { panic_error_0x21() }
            }

            function cleanup_t_enum$_UpdateType_$2404(value) -> cleaned {
                cleaned := value validator_assert_t_enum$_UpdateType_$2404(value)
            }

            function convert_t_enum$_UpdateType_$2404_to_t_enum$_UpdateType_$2404(value) -> converted {
                converted := cleanup_t_enum$_UpdateType_$2404(value)
            }

            function array_length_t_bytes_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_bytes_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)

            }

            /// @src 14:6380:6650  "function setUnsafeBlockSigner(address _unsafeBlockSigner) external onlyOwner {..."
            function fun_setUnsafeBlockSigner_2599_inner(var__unsafeBlockSigner_2575) {

                /// @src 14:6489:6507  "_unsafeBlockSigner"
                let _37 := var__unsafeBlockSigner_2575
                let expr_2581 := _37
                fun__setUnsafeBlockSigner_2707(expr_2581)
                /// @src 14:6550:6568  "_unsafeBlockSigner"
                let _38 := var__unsafeBlockSigner_2575
                let expr_2588 := _38
                /// @src 14:6539:6569  "abi.encode(_unsafeBlockSigner)"

                let expr_2589_mpos := allocate_unbounded()
                let _39 := add(expr_2589_mpos, 0x20)

                let _40 := abi_encode_tuple_t_address__to_t_address__fromStack(_39, expr_2588)
                mstore(expr_2589_mpos, sub(_40, add(expr_2589_mpos, 0x20)))
                finalize_allocation(expr_2589_mpos, sub(_40, expr_2589_mpos))
                /// @src 14:6519:6569  "bytes memory data = abi.encode(_unsafeBlockSigner)"
                let var_data_2585_mpos := expr_2589_mpos
                /// @src 14:6597:6604  "VERSION"
                let expr_2592 := constant_VERSION_2408()
                /// @src 14:6606:6636  "UpdateType.UNSAFE_BLOCK_SIGNER"
                let expr_2594 := 3
                /// @src 14:6638:6642  "data"
                let _41_mpos := var_data_2585_mpos
                let expr_2595_mpos := _41_mpos
                /// @src 14:6584:6643  "ConfigUpdate(VERSION, UpdateType.UNSAFE_BLOCK_SIGNER, data)"
                let _42 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _43 := convert_t_uint256_to_t_uint256(expr_2592)
                let _44 := convert_t_enum$_UpdateType_$2404_to_t_enum$_UpdateType_$2404(expr_2594)
                {
                    let _45 := allocate_unbounded()
                    let _46 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_45 , expr_2595_mpos)
                    log3(_45, sub(_46, _45) , _42, _43, _44)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2599
            /// @src 14:6380:6650  "function setUnsafeBlockSigner(address _unsafeBlockSigner) external onlyOwner {..."
            function fun_setUnsafeBlockSigner_2599(var__unsafeBlockSigner_2575) {

                modifier_onlyOwner_2578(var__unsafeBlockSigner_2575)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2605(var__batcherHash_2602) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_setBatcherHash_2626_inner(var__batcherHash_2602)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @src 14:6765:6990  "function setBatcherHash(bytes32 _batcherHash) external onlyOwner {..."
            function fun_setBatcherHash_2626_inner(var__batcherHash_2602) {

                /// @src 14:6854:6866  "_batcherHash"
                let _47 := var__batcherHash_2602
                let expr_2608 := _47
                /// @src 14:6840:6866  "batcherHash = _batcherHash"
                update_storage_value_offset_0t_bytes32_to_t_bytes32(0x67, expr_2608)
                let expr_2609 := expr_2608
                /// @src 14:6908:6920  "_batcherHash"
                let _48 := var__batcherHash_2602
                let expr_2615 := _48
                /// @src 14:6897:6921  "abi.encode(_batcherHash)"

                let expr_2616_mpos := allocate_unbounded()
                let _49 := add(expr_2616_mpos, 0x20)

                let _50 := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(_49, expr_2615)
                mstore(expr_2616_mpos, sub(_50, add(expr_2616_mpos, 0x20)))
                finalize_allocation(expr_2616_mpos, sub(_50, expr_2616_mpos))
                /// @src 14:6877:6921  "bytes memory data = abi.encode(_batcherHash)"
                let var_data_2612_mpos := expr_2616_mpos
                /// @src 14:6949:6956  "VERSION"
                let expr_2619 := constant_VERSION_2408()
                /// @src 14:6958:6976  "UpdateType.BATCHER"
                let expr_2621 := 0
                /// @src 14:6978:6982  "data"
                let _51_mpos := var_data_2612_mpos
                let expr_2622_mpos := _51_mpos
                /// @src 14:6936:6983  "ConfigUpdate(VERSION, UpdateType.BATCHER, data)"
                let _52 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _53 := convert_t_uint256_to_t_uint256(expr_2619)
                let _54 := convert_t_enum$_UpdateType_$2404_to_t_enum$_UpdateType_$2404(expr_2621)
                {
                    let _55 := allocate_unbounded()
                    let _56 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_55 , expr_2622_mpos)
                    log3(_55, sub(_56, _55) , _52, _53, _54)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2626
            /// @src 14:6765:6990  "function setBatcherHash(bytes32 _batcherHash) external onlyOwner {..."
            function fun_setBatcherHash_2626(var__batcherHash_2602) {

                modifier_onlyOwner_2605(var__batcherHash_2602)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2634(var__overhead_2629, var__scalar_2631) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_setGasConfig_2660_inner(var__overhead_2629, var__scalar_2631)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(headStart , value0, value1) -> tail {
                tail := add(headStart, 64)

                abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))

                abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))

            }

            /// @src 14:7140:7406  "function setGasConfig(uint256 _overhead, uint256 _scalar) external onlyOwner {..."
            function fun_setGasConfig_2660_inner(var__overhead_2629, var__scalar_2631) {

                /// @src 14:7238:7247  "_overhead"
                let _57 := var__overhead_2629
                let expr_2637 := _57
                /// @src 14:7227:7247  "overhead = _overhead"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x65, expr_2637)
                let expr_2638 := expr_2637
                /// @src 14:7266:7273  "_scalar"
                let _58 := var__scalar_2631
                let expr_2641 := _58
                /// @src 14:7257:7273  "scalar = _scalar"
                update_storage_value_offset_0t_uint256_to_t_uint256(0x66, expr_2641)
                let expr_2642 := expr_2641
                /// @src 14:7315:7324  "_overhead"
                let _59 := var__overhead_2629
                let expr_2648 := _59
                /// @src 14:7326:7333  "_scalar"
                let _60 := var__scalar_2631
                let expr_2649 := _60
                /// @src 14:7304:7334  "abi.encode(_overhead, _scalar)"

                let expr_2650_mpos := allocate_unbounded()
                let _61 := add(expr_2650_mpos, 0x20)

                let _62 := abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack(_61, expr_2648, expr_2649)
                mstore(expr_2650_mpos, sub(_62, add(expr_2650_mpos, 0x20)))
                finalize_allocation(expr_2650_mpos, sub(_62, expr_2650_mpos))
                /// @src 14:7284:7334  "bytes memory data = abi.encode(_overhead, _scalar)"
                let var_data_2645_mpos := expr_2650_mpos
                /// @src 14:7362:7369  "VERSION"
                let expr_2653 := constant_VERSION_2408()
                /// @src 14:7371:7392  "UpdateType.GAS_CONFIG"
                let expr_2655 := 1
                /// @src 14:7394:7398  "data"
                let _63_mpos := var_data_2645_mpos
                let expr_2656_mpos := _63_mpos
                /// @src 14:7349:7399  "ConfigUpdate(VERSION, UpdateType.GAS_CONFIG, data)"
                let _64 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _65 := convert_t_uint256_to_t_uint256(expr_2653)
                let _66 := convert_t_enum$_UpdateType_$2404_to_t_enum$_UpdateType_$2404(expr_2655)
                {
                    let _67 := allocate_unbounded()
                    let _68 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_67 , expr_2656_mpos)
                    log3(_67, sub(_68, _67) , _64, _65, _66)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2660
            /// @src 14:7140:7406  "function setGasConfig(uint256 _overhead, uint256 _scalar) external onlyOwner {..."
            function fun_setGasConfig_2660(var__overhead_2629, var__scalar_2631) {

                modifier_onlyOwner_2634(var__overhead_2629, var__scalar_2631)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2666(var__gasLimit_2663) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_setGasLimit_2695_inner(var__gasLimit_2663)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @src 14:7515:7810  "function setGasLimit(uint64 _gasLimit) external onlyOwner {..."
            function fun_setGasLimit_2695_inner(var__gasLimit_2663) {

                /// @src 14:7591:7600  "_gasLimit"
                let _69 := var__gasLimit_2663
                let expr_2669 := _69
                /// @src 14:7604:7621  "minimumGasLimit()"
                let expr_2671 := fun_minimumGasLimit_2555()
                /// @src 14:7591:7621  "_gasLimit >= minimumGasLimit()"
                let expr_2672 := iszero(lt(cleanup_t_uint64(expr_2669), cleanup_t_uint64(expr_2671)))
                /// @src 14:7583:7657  "require(_gasLimit >= minimumGasLimit(), \"SystemConfig: gas limit too low\")"
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2672)
                /// @src 14:7678:7687  "_gasLimit"
                let _70 := var__gasLimit_2663
                let expr_2677 := _70
                /// @src 14:7667:7687  "gasLimit = _gasLimit"
                update_storage_value_offset_0t_uint64_to_t_uint64(0x68, expr_2677)
                let expr_2678 := expr_2677
                /// @src 14:7729:7738  "_gasLimit"
                let _71 := var__gasLimit_2663
                let expr_2684 := _71
                /// @src 14:7718:7739  "abi.encode(_gasLimit)"

                let expr_2685_mpos := allocate_unbounded()
                let _72 := add(expr_2685_mpos, 0x20)

                let _73 := abi_encode_tuple_t_uint64__to_t_uint64__fromStack(_72, expr_2684)
                mstore(expr_2685_mpos, sub(_73, add(expr_2685_mpos, 0x20)))
                finalize_allocation(expr_2685_mpos, sub(_73, expr_2685_mpos))
                /// @src 14:7698:7739  "bytes memory data = abi.encode(_gasLimit)"
                let var_data_2681_mpos := expr_2685_mpos
                /// @src 14:7767:7774  "VERSION"
                let expr_2688 := constant_VERSION_2408()
                /// @src 14:7776:7796  "UpdateType.GAS_LIMIT"
                let expr_2690 := 2
                /// @src 14:7798:7802  "data"
                let _74_mpos := var_data_2681_mpos
                let expr_2691_mpos := _74_mpos
                /// @src 14:7754:7803  "ConfigUpdate(VERSION, UpdateType.GAS_LIMIT, data)"
                let _75 := 0x1d2b0bda21d56b8bd12d4f94ebacffdfb35f5e226f84b461103bb8beab6353be
                let _76 := convert_t_uint256_to_t_uint256(expr_2688)
                let _77 := convert_t_enum$_UpdateType_$2404_to_t_enum$_UpdateType_$2404(expr_2690)
                {
                    let _78 := allocate_unbounded()
                    let _79 := abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack(_78 , expr_2691_mpos)
                    log3(_78, sub(_79, _78) , _75, _76, _77)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2695
            /// @src 14:7515:7810  "function setGasLimit(uint64 _gasLimit) external onlyOwner {..."
            function fun_setGasLimit_2695(var__gasLimit_2663) {

                modifier_onlyOwner_2666(var__gasLimit_2663)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2707
            /// @src 14:8083:8281  "function _setUnsafeBlockSigner(address _unsafeBlockSigner) internal {..."
            function fun__setUnsafeBlockSigner_2707(var__unsafeBlockSigner_2698) {

                /// @src 14:8176:8200  "UNSAFE_BLOCK_SIGNER_SLOT"
                let expr_2703 := constant_UNSAFE_BLOCK_SIGNER_SLOT_2414()
                /// @src 14:8161:8200  "bytes32 slot = UNSAFE_BLOCK_SIGNER_SLOT"
                let var_slot_2702 := expr_2703
                /// @src 14:8210:8275  "assembly {..."
                {
                    sstore(var_slot_2702, var__unsafeBlockSigner_2698)
                }

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function allocate_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr() -> memPtr {
                memPtr := allocate_memory(192)
            }

            function zero_value_for_t_uint32() -> ret {
                ret := 0
            }

            function zero_value_for_t_uint8() -> ret {
                ret := 0
            }

            function zero_value_for_t_uint128() -> ret {
                ret := 0
            }

            function allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr() -> memPtr {
                memPtr := allocate_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr()
                let offset := memPtr

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint8())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint32())
                offset := add(offset, 32)

                mstore(offset, zero_value_for_t_uint128())
                offset := add(offset, 32)

            }

            function zero_value_for_split_t_struct$_ResourceConfig_$2070_memory_ptr() -> ret {
                ret := allocate_and_zero_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr()
            }

            function write_to_memory_t_uint32(memPtr, value) {
                mstore(memPtr, cleanup_t_uint32(value))
            }

            function shift_right_32_unsigned(value) -> newValue {
                newValue :=

                shr(32, value)

            }

            function extract_from_storage_value_offset_4t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_32_unsigned(slot_value))
            }

            function read_from_storage_split_offset_4_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_4t_uint8(sload(slot))

            }

            function write_to_memory_t_uint8(memPtr, value) {
                mstore(memPtr, cleanup_t_uint8(value))
            }

            function shift_right_40_unsigned(value) -> newValue {
                newValue :=

                shr(40, value)

            }

            function extract_from_storage_value_offset_5t_uint8(slot_value) -> value {
                value := cleanup_from_storage_t_uint8(shift_right_40_unsigned(slot_value))
            }

            function read_from_storage_split_offset_5_t_uint8(slot) -> value {
                value := extract_from_storage_value_offset_5t_uint8(sload(slot))

            }

            function shift_right_48_unsigned(value) -> newValue {
                newValue :=

                shr(48, value)

            }

            function extract_from_storage_value_offset_6t_uint32(slot_value) -> value {
                value := cleanup_from_storage_t_uint32(shift_right_48_unsigned(slot_value))
            }

            function read_from_storage_split_offset_6_t_uint32(slot) -> value {
                value := extract_from_storage_value_offset_6t_uint32(sload(slot))

            }

            function shift_right_112_unsigned(value) -> newValue {
                newValue :=

                shr(112, value)

            }

            function cleanup_from_storage_t_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_14t_uint128(slot_value) -> value {
                value := cleanup_from_storage_t_uint128(shift_right_112_unsigned(slot_value))
            }

            function read_from_storage_split_offset_14_t_uint128(slot) -> value {
                value := extract_from_storage_value_offset_14t_uint128(sload(slot))

            }

            function write_to_memory_t_uint128(memPtr, value) {
                mstore(memPtr, cleanup_t_uint128(value))
            }

            function read_from_storage_reference_type_t_struct$_ResourceConfig_$2070_memory_ptr(slot) -> value {
                value := allocate_memory_struct_t_struct$_ResourceConfig_$2070_memory_ptr()

                {
                    let memberValue_0 := read_from_storage_split_offset_0_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 0), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_4_t_uint8(add(slot, 0))
                    write_to_memory_t_uint8(add(value, 32), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_5_t_uint8(add(slot, 0))
                    write_to_memory_t_uint8(add(value, 64), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_6_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 96), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_10_t_uint32(add(slot, 0))
                    write_to_memory_t_uint32(add(value, 128), memberValue_0)
                }

                {
                    let memberValue_0 := read_from_storage_split_offset_14_t_uint128(add(slot, 0))
                    write_to_memory_t_uint128(add(value, 160), memberValue_0)
                }

            }

            function convert_t_struct$_ResourceConfig_$2070_storage_to_t_struct$_ResourceConfig_$2070_memory_ptr(value) -> converted {

                converted := read_from_storage_reference_type_t_struct$_ResourceConfig_$2070_memory_ptr(value)

            }

            /// @ast-id 2717
            /// @src 14:8460:8588  "function resourceConfig() external view returns (ResourceMetering.ResourceConfig memory) {..."
            function fun_resourceConfig_2717() -> var__2712_mpos {
                /// @src 14:8509:8547  "ResourceMetering.ResourceConfig memory"
                let zero_t_struct$_ResourceConfig_$2070_memory_ptr_80_mpos := zero_value_for_split_t_struct$_ResourceConfig_$2070_memory_ptr()
                var__2712_mpos := zero_t_struct$_ResourceConfig_$2070_memory_ptr_80_mpos

                /// @src 14:8566:8581  "_resourceConfig"
                let _81_slot := 0x69
                let expr_2714_slot := _81_slot
                /// @src 14:8559:8581  "return _resourceConfig"
                var__2712_mpos := convert_t_struct$_ResourceConfig_$2070_storage_to_t_struct$_ResourceConfig_$2070_memory_ptr(expr_2714_slot)
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_2724(var__config_2721_mpos) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_setResourceConfig_2731_inner(var__config_2721_mpos)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @src 14:8874:9012  "function setResourceConfig(ResourceMetering.ResourceConfig memory _config) external onlyOwner {..."
            function fun_setResourceConfig_2731_inner(var__config_2721_mpos) {

                /// @src 14:8997:9004  "_config"
                let _82_mpos := var__config_2721_mpos
                let expr_2727_mpos := _82_mpos
                fun__setResourceConfig_2796(expr_2727_mpos)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 2731
            /// @src 14:8874:9012  "function setResourceConfig(ResourceMetering.ResourceConfig memory _config) external onlyOwner {..."
            function fun_setResourceConfig_2731(var__config_2721_mpos) {

                modifier_onlyOwner_2724(var__config_2721_mpos)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function read_from_memoryt_uint32(ptr) -> returnValue {

                let value := cleanup_t_uint32(mload(ptr))

                returnValue :=

                value

            }

            function read_from_memoryt_uint128(ptr) -> returnValue {

                let value := cleanup_t_uint128(mload(ptr))

                returnValue :=

                value

            }

            function convert_t_uint32_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint32(value)))
            }

            function store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(memPtr) {

                mstore(add(memPtr, 0), "SystemConfig: min base fee must ")

                mstore(add(memPtr, 32), "be less than max base")

            }

            function abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)
                store_literal_in_memory_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function read_from_memoryt_uint8(ptr) -> returnValue {

                let value := cleanup_t_uint8(mload(ptr))

                returnValue :=

                value

            }

            function store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(memPtr) {

                mstore(add(memPtr, 0), "SystemConfig: denominator must b")

                mstore(add(memPtr, 32), "e larger than 1")

            }

            function abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
                store_literal_in_memory_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function checked_add_t_uint32(x, y) -> sum {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function extract_from_storage_value_offset_0t_uint64(slot_value) -> value {
                value := cleanup_from_storage_t_uint64(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_uint64(slot) -> value {
                value := extract_from_storage_value_offset_0t_uint64(sload(slot))

            }

            function convert_t_rational_0_by_1_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_rational_0_by_1(value)))
            }

            function store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(memPtr) {

                mstore(add(memPtr, 0), "SystemConfig: elasticity multipl")

                mstore(add(memPtr, 32), "ier cannot be 0")

            }

            function abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)
                store_literal_in_memory_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function convert_t_uint8_to_t_uint32(value) -> converted {
                converted := cleanup_t_uint32(identity(cleanup_t_uint8(value)))
            }

            function panic_error_0x12() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }

            function checked_div_t_uint32(x, y) -> r {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function checked_mul_t_uint32(x, y) -> product {
                x := cleanup_t_uint32(x)
                y := cleanup_t_uint32(y)

                // overflow, if x != 0 and y > (maxValue / x)
                if and(iszero(iszero(x)), gt(y, div(0xffffffff, x))) { panic_error_0x11() }

                product := mul(x, y)
            }

            function store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(memPtr) {

                mstore(add(memPtr, 0), "SystemConfig: precision loss wit")

                mstore(add(memPtr, 32), "h target resource limit")

            }

            function abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 55)
                store_literal_in_memory_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            function panic_error_0x00() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x00)
                revert(0, 0x24)
            }

            function update_byte_slice_4_shift_0(value, toInsert) -> result {
                let mask := 0xffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint32_to_t_uint32(value) -> converted {
                converted := cleanup_t_uint32(identity(cleanup_t_uint32(value)))
            }

            function prepare_store_t_uint32(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_uint32_to_t_uint32(slot, value_0) {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_0(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }

            function shift_left_32(value) -> newValue {
                newValue :=

                shl(32, value)

            }

            function update_byte_slice_1_shift_4(value, toInsert) -> result {
                let mask := 0xff00000000
                toInsert := shift_left_32(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_4t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_4(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_40(value) -> newValue {
                newValue :=

                shl(40, value)

            }

            function update_byte_slice_1_shift_5(value, toInsert) -> result {
                let mask := 0xff0000000000
                toInsert := shift_left_40(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_5t_uint8_to_t_uint8(slot, value_0) {
                let convertedValue_0 := convert_t_uint8_to_t_uint8(value_0)
                sstore(slot, update_byte_slice_1_shift_5(sload(slot), prepare_store_t_uint8(convertedValue_0)))
            }

            function shift_left_48(value) -> newValue {
                newValue :=

                shl(48, value)

            }

            function update_byte_slice_4_shift_6(value, toInsert) -> result {
                let mask := 0xffffffff000000000000
                toInsert := shift_left_48(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_6t_uint32_to_t_uint32(slot, value_0) {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_6(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }

            function shift_left_80(value) -> newValue {
                newValue :=

                shl(80, value)

            }

            function update_byte_slice_4_shift_10(value, toInsert) -> result {
                let mask := 0xffffffff00000000000000000000
                toInsert := shift_left_80(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function update_storage_value_offset_10t_uint32_to_t_uint32(slot, value_0) {
                let convertedValue_0 := convert_t_uint32_to_t_uint32(value_0)
                sstore(slot, update_byte_slice_4_shift_10(sload(slot), prepare_store_t_uint32(convertedValue_0)))
            }

            function shift_left_112(value) -> newValue {
                newValue :=

                shl(112, value)

            }

            function update_byte_slice_16_shift_14(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffff0000000000000000000000000000
                toInsert := shift_left_112(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_uint128_to_t_uint128(value) -> converted {
                converted := cleanup_t_uint128(identity(cleanup_t_uint128(value)))
            }

            function prepare_store_t_uint128(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_14t_uint128_to_t_uint128(slot, value_0) {
                let convertedValue_0 := convert_t_uint128_to_t_uint128(value_0)
                sstore(slot, update_byte_slice_16_shift_14(sload(slot), prepare_store_t_uint128(convertedValue_0)))
            }

            function copy_struct_to_storage_from_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value) {

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 0)

                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                    update_storage_value_offset_0t_uint32_to_t_uint32(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 32)

                    let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)

                    update_storage_value_offset_4t_uint8_to_t_uint8(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 64)

                    let memberValue_0 := read_from_memoryt_uint8(memberSrcPtr)

                    update_storage_value_offset_5t_uint8_to_t_uint8(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 96)

                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                    update_storage_value_offset_6t_uint32_to_t_uint32(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 128)

                    let memberValue_0 := read_from_memoryt_uint32(memberSrcPtr)

                    update_storage_value_offset_10t_uint32_to_t_uint32(memberSlot, memberValue_0)

                }

                {

                    let memberSlot := add(slot, 0)
                    let memberSrcPtr := add(value, 160)

                    let memberValue_0 := read_from_memoryt_uint128(memberSrcPtr)

                    update_storage_value_offset_14t_uint128_to_t_uint128(memberSlot, memberValue_0)

                }

            }

            function update_storage_value_offset_0t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value_0) {

                copy_struct_to_storage_from_t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(slot, value_0)
            }

            /// @ast-id 2796
            /// @src 14:9240:10633  "function _setResourceConfig(ResourceMetering.ResourceConfig memory _config) internal {..."
            function fun__setResourceConfig_2796(var__config_2735_mpos) {

                /// @src 14:9424:9431  "_config"
                let _83_mpos := var__config_2735_mpos
                let expr_2739_mpos := _83_mpos
                /// @src 14:9424:9446  "_config.minimumBaseFee"
                let _84 := add(expr_2739_mpos, 96)
                let _85 := read_from_memoryt_uint32(_84)
                let expr_2740 := _85
                /// @src 14:9450:9457  "_config"
                let _86_mpos := var__config_2735_mpos
                let expr_2741_mpos := _86_mpos
                /// @src 14:9450:9472  "_config.maximumBaseFee"
                let _87 := add(expr_2741_mpos, 160)
                let _88 := read_from_memoryt_uint128(_87)
                let expr_2742 := _88
                /// @src 14:9424:9472  "_config.minimumBaseFee <= _config.maximumBaseFee"
                let expr_2743 := iszero(gt(convert_t_uint32_to_t_uint128(expr_2740), cleanup_t_uint128(expr_2742)))
                /// @src 14:9403:9551  "require(..."
                require_helper_t_stringliteral_16806173f08c8c6ae15c41ada2868e19f22d95483ee444a690f5c71e256ae59c(expr_2743)
                /// @src 14:9645:9652  "_config"
                let _89_mpos := var__config_2735_mpos
                let expr_2748_mpos := _89_mpos
                /// @src 14:9645:9680  "_config.baseFeeMaxChangeDenominator"
                let _90 := add(expr_2748_mpos, 64)
                let _91 := read_from_memoryt_uint8(_90)
                let expr_2749 := _91
                /// @src 14:9683:9684  "1"
                let expr_2750 := 0x01
                /// @src 14:9645:9684  "_config.baseFeeMaxChangeDenominator > 1"
                let expr_2751 := gt(cleanup_t_uint8(expr_2749), convert_t_rational_1_by_1_to_t_uint8(expr_2750))
                /// @src 14:9624:9757  "require(..."
                require_helper_t_stringliteral_c0a2fada1fe2708845c3612912d722eb6febd82dcb64b4a98ff41143480c2d7e(expr_2751)
                /// @src 14:9966:9973  "_config"
                let _92_mpos := var__config_2735_mpos
                let expr_2756_mpos := _92_mpos
                /// @src 14:9966:9990  "_config.maxResourceLimit"
                let _93 := add(expr_2756_mpos, 0)
                let _94 := read_from_memoryt_uint32(_93)
                let expr_2757 := _94
                /// @src 14:9993:10000  "_config"
                let _95_mpos := var__config_2735_mpos
                let expr_2758_mpos := _95_mpos
                /// @src 14:9993:10015  "_config.systemTxMaxGas"
                let _96 := add(expr_2758_mpos, 128)
                let _97 := read_from_memoryt_uint32(_96)
                let expr_2759 := _97
                /// @src 14:9966:10015  "_config.maxResourceLimit + _config.systemTxMaxGas"
                let expr_2760 := checked_add_t_uint32(expr_2757, expr_2759)

                /// @src 14:10019:10027  "gasLimit"
                let _98 := read_from_storage_split_offset_0_t_uint64(0x68)
                let expr_2761 := _98
                /// @src 14:9966:10027  "_config.maxResourceLimit + _config.systemTxMaxGas <= gasLimit"
                let expr_2762 := iszero(gt(convert_t_uint32_to_t_uint64(expr_2760), cleanup_t_uint64(expr_2761)))
                /// @src 14:9945:10084  "require(..."
                require_helper_t_stringliteral_8e802b99b7871665ffc01e67ec99efdd73637cc03d3134ef893ffd574a9c611a(expr_2762)
                /// @src 14:10172:10179  "_config"
                let _99_mpos := var__config_2735_mpos
                let expr_2767_mpos := _99_mpos
                /// @src 14:10172:10200  "_config.elasticityMultiplier"
                let _100 := add(expr_2767_mpos, 32)
                let _101 := read_from_memoryt_uint8(_100)
                let expr_2768 := _101
                /// @src 14:10203:10204  "0"
                let expr_2769 := 0x00
                /// @src 14:10172:10204  "_config.elasticityMultiplier > 0"
                let expr_2770 := gt(cleanup_t_uint8(expr_2768), convert_t_rational_0_by_1_to_t_uint8(expr_2769))
                /// @src 14:10151:10277  "require(..."
                require_helper_t_stringliteral_59a820cce0ebef6a669f57c5972b936f0f32ddecc515ae6b733585a6a86ccb87(expr_2770)
                /// @src 14:10377:10384  "_config"
                let _102_mpos := var__config_2735_mpos
                let expr_2775_mpos := _102_mpos
                /// @src 14:10377:10401  "_config.maxResourceLimit"
                let _103 := add(expr_2775_mpos, 0)
                let _104 := read_from_memoryt_uint32(_103)
                let expr_2776 := _104
                /// @src 14:10404:10411  "_config"
                let _105_mpos := var__config_2735_mpos
                let expr_2777_mpos := _105_mpos
                /// @src 14:10404:10432  "_config.elasticityMultiplier"
                let _106 := add(expr_2777_mpos, 32)
                let _107 := read_from_memoryt_uint8(_106)
                let expr_2778 := _107
                /// @src 14:10377:10432  "_config.maxResourceLimit / _config.elasticityMultiplier"
                let expr_2779 := checked_div_t_uint32(expr_2776, convert_t_uint8_to_t_uint32(expr_2778))

                /// @src 14:10376:10433  "(_config.maxResourceLimit / _config.elasticityMultiplier)"
                let expr_2780 := expr_2779
                /// @src 14:10452:10459  "_config"
                let _108_mpos := var__config_2735_mpos
                let expr_2781_mpos := _108_mpos
                /// @src 14:10452:10480  "_config.elasticityMultiplier"
                let _109 := add(expr_2781_mpos, 32)
                let _110 := read_from_memoryt_uint8(_109)
                let expr_2782 := _110
                /// @src 14:10376:10480  "(_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2783 := checked_mul_t_uint32(expr_2780, convert_t_uint8_to_t_uint32(expr_2782))

                /// @src 14:10375:10481  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2784 := expr_2783
                /// @src 14:10485:10492  "_config"
                let _111_mpos := var__config_2735_mpos
                let expr_2785_mpos := _111_mpos
                /// @src 14:10485:10509  "_config.maxResourceLimit"
                let _112 := add(expr_2785_mpos, 0)
                let _113 := read_from_memoryt_uint32(_112)
                let expr_2786 := _113
                /// @src 14:10375:10509  "((_config.maxResourceLimit / _config.elasticityMultiplier) *..."
                let expr_2787 := eq(cleanup_t_uint32(expr_2784), cleanup_t_uint32(expr_2786))
                /// @src 14:10354:10590  "require(..."
                require_helper_t_stringliteral_fef4ef4eda0ba4ff507d3db7d2e0ca5d7440f98c636615806e09e69039b34a5e(expr_2787)
                /// @src 14:10619:10626  "_config"
                let _114_mpos := var__config_2735_mpos
                let expr_2792_mpos := _114_mpos
                /// @src 14:10601:10626  "_resourceConfig = _config"
                update_storage_value_offset_0t_struct$_ResourceConfig_$2070_memory_ptr_to_t_struct$_ResourceConfig_$2070_storage(0x69, expr_2792_mpos)
                let _115_slot := 0x69
                let expr_2793_slot := _115_slot

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr) {

                mstore(add(memPtr, 0), "0")

            }

            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }

            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }

            function zero_value_for_split_t_uint256() -> ret {
                ret := 0
            }

            function increment_t_uint256(value) -> ret {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }

            function cleanup_t_rational_10_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }

            function checked_div_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function array_allocation_size_t_bytes_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes) {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }

            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }

            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }

            function checked_sub_t_uint256(x, y) -> diff {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function mod_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function cleanup_t_rational_48_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function convert_t_uint256_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }

            function cleanup_t_bytes1(value) -> cleaned {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }

            function shift_left_248(value) -> newValue {
                newValue :=

                shl(248, value)

            }

            function convert_t_uint8_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }

            function panic_error_0x32() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }

            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 1)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            /// @ast-id 3827
            /// @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3827(var_value_3751) -> var__3754_mpos {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_116_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3754_mpos := zero_t_string_memory_ptr_116_mpos

                /// @src 6:665:670  "value"
                let _117 := var_value_3751
                let expr_3756 := _117
                /// @src 6:674:675  "0"
                let expr_3757 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3758 := eq(cleanup_t_uint256(expr_3756), convert_t_rational_0_by_1_to_t_uint256(expr_3757))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3758 {
                    /// @src 6:691:701  "return \"0\""
                    var__3754_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                    /// @src 6:661:712  "if (value == 0) {..."
                }
                /// @src 6:736:741  "value"
                let _118 := var_value_3751
                let expr_3765 := _118
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3764 := expr_3765
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3768
                let zero_t_uint256_119 := zero_value_for_split_t_uint256()
                var_digits_3768 := zero_t_uint256_119
                /// @src 6:775:850  "while (temp != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:782:786  "temp"
                    let _120 := var_temp_3764
                    let expr_3770 := _120
                    /// @src 6:790:791  "0"
                    let expr_3771 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3772 := iszero(eq(cleanup_t_uint256(expr_3770), convert_t_rational_0_by_1_to_t_uint256(expr_3771)))
                    if iszero(expr_3772) { break }
                    /// @src 6:807:815  "digits++"
                    let _122 := var_digits_3768
                    let _121 := increment_t_uint256(_122)
                    var_digits_3768 := _121
                    let expr_3774 := _122
                    /// @src 6:837:839  "10"
                    let expr_3777 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _123 := convert_t_rational_10_by_1_to_t_uint256(expr_3777)
                    let _124 := var_temp_3764
                    let expr_3778 := checked_div_t_uint256(_124, _123)

                    var_temp_3764 := expr_3778
                }
                /// @src 6:891:897  "digits"
                let _125 := var_digits_3768
                let expr_3786 := _125
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3787_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3786)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3783_mpos := expr_3787_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:915:920  "value"
                    let _126 := var_value_3751
                    let expr_3789 := _126
                    /// @src 6:924:925  "0"
                    let expr_3790 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3791 := iszero(eq(cleanup_t_uint256(expr_3789), convert_t_rational_0_by_1_to_t_uint256(expr_3790)))
                    if iszero(expr_3791) { break }
                    /// @src 6:951:952  "1"
                    let expr_3793 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _127 := convert_t_rational_1_by_1_to_t_uint256(expr_3793)
                    let _128 := var_digits_3768
                    let expr_3794 := checked_sub_t_uint256(_128, _127)

                    var_digits_3768 := expr_3794
                    /// @src 6:996:998  "48"
                    let expr_3803 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _129 := var_value_3751
                    let expr_3806 := _129
                    /// @src 6:1017:1019  "10"
                    let expr_3807 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3808 := mod_t_uint256(expr_3806, convert_t_rational_10_by_1_to_t_uint256(expr_3807))

                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3809 := expr_3808
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3810 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3803), expr_3809)

                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3811 := convert_t_uint256_to_t_uint8(expr_3810)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3812 := convert_t_uint8_to_t_bytes1(expr_3811)
                    /// @src 6:966:972  "buffer"
                    let _130_mpos := var_buffer_3783_mpos
                    let expr_3796_mpos := _130_mpos
                    /// @src 6:973:979  "digits"
                    let _131 := var_digits_3768
                    let expr_3797 := _131
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _132 := expr_3812
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3796_mpos, expr_3797), byte(0, _132))
                    let expr_3813 := expr_3812
                    /// @src 6:1045:1047  "10"
                    let expr_3816 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _133 := convert_t_rational_10_by_1_to_t_uint256(expr_3816)
                    let _134 := var_value_3751
                    let expr_3817 := checked_div_t_uint256(_134, _133)

                    var_value_3751 := expr_3817
                }
                /// @src 6:1081:1087  "buffer"
                let _135_mpos := var_buffer_3783_mpos
                let expr_3823_mpos := _135_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3824_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3823_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3754_mpos := expr_3824_mpos
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {

                mstore(add(memPtr, 0), "Initializable: contract is not i")

                mstore(add(memPtr, 32), "nitializing")

            }

            function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)
                store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 3409
            /// @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_4909() {

                /// @src 1:4910:4923  "_initializing"
                let _136 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3403 := _136
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
                /// @src 1:4981:4982  "_"
                fun___Ownable_init_4915_inner()

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
            function fun___Ownable_init_4915_inner() {

                fun___Ownable_init_unchained_4926()

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4915
            /// @src 0:1003:1098  "function __Ownable_init() internal onlyInitializing {..."
            function fun___Ownable_init_4915() {

                modifier_onlyInitializing_4909()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 3409
            /// @src 1:4864:4989  "modifier onlyInitializing() {..."
            function modifier_onlyInitializing_4918() {

                /// @src 1:4910:4923  "_initializing"
                let _137 := read_from_storage_split_offset_1_t_bool(0x00)
                let expr_3403 := _137
                /// @src 1:4902:4971  "require(_initializing, \"Initializable: contract is not initializing\")"
                require_helper_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(expr_3403)
                /// @src 1:4981:4982  "_"
                fun___Ownable_init_unchained_4926_inner()

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
            function fun___Ownable_init_unchained_4926_inner() {

                /// @src 0:1195:1207  "_msgSender()"
                let expr_4922 := fun__msgSender_7052()
                fun__transferOwnership_5014(expr_4922)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4926
            /// @src 0:1104:1215  "function __Ownable_init_unchained() internal onlyInitializing {..."
            function fun___Ownable_init_unchained_4926() {

                modifier_onlyInitializing_4918()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function cleanup_from_storage_t_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }

            function extract_from_storage_value_offset_0t_address(slot_value) -> value {
                value := cleanup_from_storage_t_address(shift_right_0_unsigned(slot_value))
            }

            function read_from_storage_split_offset_0_t_address(slot) -> value {
                value := extract_from_storage_value_offset_0t_address(sload(slot))

            }

            /// @ast-id 4943
            /// @src 0:1441:1526  "function owner() public view virtual returns (address) {..."
            function fun_owner_4943() -> var__4938 {
                /// @src 0:1487:1494  "address"
                let zero_t_address_138 := zero_value_for_split_t_address()
                var__4938 := zero_t_address_138

                /// @src 0:1513:1519  "_owner"
                let _139 := read_from_storage_split_offset_0_t_address(0x33)
                let expr_4940 := _139
                /// @src 0:1506:1519  "return _owner"
                var__4938 := expr_4940
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {

                mstore(add(memPtr, 0), "Ownable: caller is not the owner")

            }

            function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)
                store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)
                end := add(pos, 32)
            }

            function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @ast-id 4957
            /// @src 0:1599:1729  "function _checkOwner() internal view virtual {..."
            function fun__checkOwner_4957() {

                /// @src 0:1662:1669  "owner()"
                let expr_4949 := fun_owner_4943()
                /// @src 0:1673:1685  "_msgSender()"
                let expr_4951 := fun__msgSender_7052()
                /// @src 0:1662:1685  "owner() == _msgSender()"
                let expr_4952 := eq(cleanup_t_address(expr_4949), cleanup_t_address(expr_4951))
                /// @src 0:1654:1722  "require(owner() == _msgSender(), \"Ownable: caller is not the owner\")"
                require_helper_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(expr_4952)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_4961() {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_renounceOwnership_4971_inner()

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function convert_t_rational_0_by_1_to_t_uint160(value) -> converted {
                converted := cleanup_t_uint160(identity(cleanup_t_rational_0_by_1(value)))
            }

            function convert_t_rational_0_by_1_to_t_address(value) -> converted {
                converted := convert_t_rational_0_by_1_to_t_uint160(value)
            }

            /// @src 0:2071:2172  "function renounceOwnership() public virtual onlyOwner {..."
            function fun_renounceOwnership_4971_inner() {

                /// @src 0:2162:2163  "0"
                let expr_4966 := 0x00
                /// @src 0:2154:2164  "address(0)"
                let expr_4967 := convert_t_rational_0_by_1_to_t_address(expr_4966)
                fun__transferOwnership_5014(expr_4967)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4971
            /// @src 0:2071:2172  "function renounceOwnership() public virtual onlyOwner {..."
            function fun_renounceOwnership_4971() {

                modifier_onlyOwner_4961()
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4934
            /// @src 0:1303:1365  "modifier onlyOwner() {..."
            function modifier_onlyOwner_4977(var_newOwner_4974) {

                fun__checkOwner_4957()
                /// @src 0:1357:1358  "_"
                fun_transferOwnership_4994_inner(var_newOwner_4974)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {

                mstore(add(memPtr, 0), "Ownable: new owner is the zero a")

                mstore(add(memPtr, 32), "ddress")

            }

            function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)
                store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)
                end := add(pos, 64)
            }

            function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(headStart ) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)

            }

            function require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(condition ) {
                if iszero(condition) {
                    let memPtr := allocate_unbounded()
                    mstore(memPtr, 0x08c379a000000000000000000000000000000000000000000000000000000000)
                    let end := abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack(add(memPtr, 4) )
                    revert(memPtr, sub(end, memPtr))
                }
            }

            /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
            function fun_transferOwnership_4994_inner(var_newOwner_4974) {

                /// @src 0:2409:2417  "newOwner"
                let _140 := var_newOwner_4974
                let expr_4980 := _140
                /// @src 0:2429:2430  "0"
                let expr_4983 := 0x00
                /// @src 0:2421:2431  "address(0)"
                let expr_4984 := convert_t_rational_0_by_1_to_t_address(expr_4983)
                /// @src 0:2409:2431  "newOwner != address(0)"
                let expr_4985 := iszero(eq(cleanup_t_address(expr_4980), cleanup_t_address(expr_4984)))
                /// @src 0:2401:2474  "require(newOwner != address(0), \"Ownable: new owner is the zero address\")"
                require_helper_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(expr_4985)
                /// @src 0:2503:2511  "newOwner"
                let _141 := var_newOwner_4974
                let expr_4990 := _141
                fun__transferOwnership_5014(expr_4990)

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 4994
            /// @src 0:2321:2519  "function transferOwnership(address newOwner) public virtual onlyOwner {..."
            function fun_transferOwnership_4994(var_newOwner_4974) {

                modifier_onlyOwner_4977(var_newOwner_4974)
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function update_byte_slice_20_shift_0(value, toInsert) -> result {
                let mask := 0xffffffffffffffffffffffffffffffffffffffff
                toInsert := shift_left_0(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }

            function convert_t_address_to_t_address(value) -> converted {
                converted := convert_t_uint160_to_t_address(value)
            }

            function prepare_store_t_address(value) -> ret {
                ret := value
            }

            function update_storage_value_offset_0t_address_to_t_address(slot, value_0) {
                let convertedValue_0 := convert_t_address_to_t_address(value_0)
                sstore(slot, update_byte_slice_20_shift_0(sload(slot), prepare_store_t_address(convertedValue_0)))
            }

            /// @ast-id 5014
            /// @src 0:2673:2860  "function _transferOwnership(address newOwner) internal virtual {..."
            function fun__transferOwnership_5014(var_newOwner_4997) {

                /// @src 0:2765:2771  "_owner"
                let _142 := read_from_storage_split_offset_0_t_address(0x33)
                let expr_5002 := _142
                /// @src 0:2746:2771  "address oldOwner = _owner"
                let var_oldOwner_5001 := expr_5002
                /// @src 0:2790:2798  "newOwner"
                let _143 := var_newOwner_4997
                let expr_5005 := _143
                /// @src 0:2781:2798  "_owner = newOwner"
                update_storage_value_offset_0t_address_to_t_address(0x33, expr_5005)
                let expr_5006 := expr_5005
                /// @src 0:2834:2842  "oldOwner"
                let _144 := var_oldOwner_5001
                let expr_5009 := _144
                /// @src 0:2844:2852  "newOwner"
                let _145 := var_newOwner_4997
                let expr_5010 := _145
                /// @src 0:2813:2853  "OwnershipTransferred(oldOwner, newOwner)"
                let _146 := 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0
                let _147 := convert_t_address_to_t_address(expr_5009)
                let _148 := convert_t_address_to_t_address(expr_5010)
                {
                    let _149 := allocate_unbounded()
                    let _150 := abi_encode_tuple__to__fromStack(_149 )
                    log3(_149, sub(_150, _149) , _146, _147, _148)
                }
            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            function zero_value_for_split_t_bool() -> ret {
                ret := 0
            }

            /// @ast-id 5609
            /// @src 2:1186:1506  "function isContract(address account) internal view returns (bool) {..."
            function fun_isContract_5609(var_account_5597) -> var__5600 {
                /// @src 2:1246:1250  "bool"
                let zero_t_bool_151 := zero_value_for_split_t_bool()
                var__5600 := zero_t_bool_151

                /// @src 2:1476:1483  "account"
                let _152 := var_account_5597
                let expr_5602 := _152
                /// @src 2:1476:1495  "account.code.length"
                let expr_5604 := extcodesize(expr_5602)
                /// @src 2:1498:1499  "0"
                let expr_5605 := 0x00
                /// @src 2:1476:1499  "account.code.length > 0"
                let expr_5606 := gt(cleanup_t_uint256(expr_5604), convert_t_rational_0_by_1_to_t_uint256(expr_5605))
                /// @src 2:1469:1499  "return account.code.length > 0"
                var__5600 := expr_5606
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

            /// @ast-id 7052
            /// @src 3:850:946  "function _msgSender() internal view virtual returns (address) {..."
            function fun__msgSender_7052() -> var__7046 {
                /// @src 3:903:910  "address"
                let zero_t_address_153 := zero_value_for_split_t_address()
                var__7046 := zero_t_address_153

                /// @src 3:929:939  "msg.sender"
                let expr_7049 := caller()
                /// @src 3:922:939  "return msg.sender"
                var__7046 := expr_7049
                leave

            }
            /// @src 14:518:10635  "contract SystemConfig is OwnableUpgradeable, Semver {..."

        }

        data ".metadata" hex"a26469706673582212206d27e4a1c1dad7de701c542f6b6e3008b44c30cb8a9b3ef71b0d403581ce1ee964736f6c634300080f0033"
    }

}


IR:

/// @use-src 15:"contracts/libraries/Arithmetic.sol"
object "Arithmetic_4827" {
    code {
        /// @src 15:297:1413  "library Arithmetic {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Arithmetic_4827_deployed"), datasize("Arithmetic_4827_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Arithmetic_4827_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 15:297:1413  "library Arithmetic {..."
        function constructor_Arithmetic_4827() {

            /// @src 15:297:1413  "library Arithmetic {..."

        }
        /// @src 15:297:1413  "library Arithmetic {..."

    }
    /// @use-src 15:"contracts/libraries/Arithmetic.sol"
    object "Arithmetic_4827_deployed" {
        code {
            /// @src 15:297:1413  "library Arithmetic {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122021c00ebfab5786efa94fad4f08adfa5f658f5f64b7a98f77fb9a87082523dfb564736f6c634300080f0033"
    }

}


IR:

/// @use-src 16:"contracts/libraries/Burn.sol"
object "Burn_4872" {
    code {
        /// @src 16:120:633  "library Burn {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Burn_4872_deployed"), datasize("Burn_4872_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Burn_4872_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 16:120:633  "library Burn {..."
        function constructor_Burn_4872() {

            /// @src 16:120:633  "library Burn {..."

        }
        /// @src 16:120:633  "library Burn {..."

    }
    /// @use-src 16:"contracts/libraries/Burn.sol"
    object "Burn_4872_deployed" {
        code {
            /// @src 16:120:633  "library Burn {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122029f66c57d89b14d2902e029561ee3149d1922984856073cb647a32bc03df047064736f6c634300080f0033"
    }

}


IR:

/// @use-src 16:"contracts/libraries/Burn.sol"
object "Burner_4888" {
    code {
        /// @src 16:900:999  "contract Burner {..."
        mstore(64, memoryguard(128))

        constructor_Burner_4888()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Burner_4888_deployed"), datasize("Burner_4888_deployed"))

        return(_1, datasize("Burner_4888_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function cleanup_t_uint160(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
        }

        function identity(value) -> ret {
            ret := value
        }

        function convert_t_uint160_to_t_uint160(value) -> converted {
            converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))
        }

        function convert_t_uint160_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_contract$_Burner_$4888_to_t_address(value) -> converted {
            converted := convert_t_uint160_to_t_address(value)
        }

        function convert_t_uint160_to_t_address_payable(value) -> converted {
            converted := convert_t_uint160_to_t_uint160(value)
        }

        function convert_t_address_to_t_address_payable(value) -> converted {
            converted := convert_t_uint160_to_t_address_payable(value)
        }

        /// @ast-id 4887
        /// @src 16:922:997  "constructor() payable {..."
        function constructor_Burner_4888() {

            /// @src 16:922:997  "constructor() payable {..."

            /// @src 16:983:987  "this"
            let expr_4881_address := address()
            /// @src 16:975:988  "address(this)"
            let expr_4882 := convert_t_contract$_Burner_$4888_to_t_address(expr_4881_address)
            /// @src 16:967:989  "payable(address(this))"
            let expr_4883 := convert_t_address_to_t_address_payable(expr_4882)
            selfdestruct(expr_4883)

        }
        /// @src 16:900:999  "contract Burner {..."

    }
    /// @use-src 16:"contracts/libraries/Burn.sol"
    object "Burner_4888_deployed" {
        code {
            /// @src 16:900:999  "contract Burner {..."
            mstore(64, memoryguard(128))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220c249b140e236f7ebbb95adffe88c1a59123cb1c25a384c07051621238932459d64736f6c634300080f0033"
    }

}


IR:

/// @use-src 17:"contracts/libraries/Bytes.sol"
object "Bytes_7238" {
    code {
        /// @src 17:141:5369  "library Bytes {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Bytes_7238_deployed"), datasize("Bytes_7238_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Bytes_7238_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 17:141:5369  "library Bytes {..."
        function constructor_Bytes_7238() {

            /// @src 17:141:5369  "library Bytes {..."

        }
        /// @src 17:141:5369  "library Bytes {..."

    }
    /// @use-src 17:"contracts/libraries/Bytes.sol"
    object "Bytes_7238_deployed" {
        code {
            /// @src 17:141:5369  "library Bytes {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122070c6ab2a3c03933554d3d8171690a96d03b8a71a9d4be885b10456f22e4081ad64736f6c634300080f0033"
    }

}


IR:

/// @use-src 18:"contracts/libraries/Constants.sol"
object "Constants_2843" {
    code {
        /// @src 18:400:2074  "library Constants {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Constants_2843_deployed"), datasize("Constants_2843_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Constants_2843_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 18:400:2074  "library Constants {..."
        function constructor_Constants_2843() {

            /// @src 18:400:2074  "library Constants {..."

        }
        /// @src 18:400:2074  "library Constants {..."

    }
    /// @use-src 18:"contracts/libraries/Constants.sol"
    object "Constants_2843_deployed" {
        code {
            /// @src 18:400:2074  "library Constants {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212206d11b2c44cbe1cd1b05109086575142f864c2815bd28d1f3dbe60958ae8299e064736f6c634300080f0033"
    }

}


IR:

/// @use-src 19:"contracts/libraries/Encoding.sol"
object "Encoding_3739" {
    code {
        /// @src 19:287:5715  "library Encoding {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Encoding_3739_deployed"), datasize("Encoding_3739_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Encoding_3739_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 19:287:5715  "library Encoding {..."
        function constructor_Encoding_3739() {

            /// @src 19:287:5715  "library Encoding {..."

        }
        /// @src 19:287:5715  "library Encoding {..."

    }
    /// @use-src 19:"contracts/libraries/Encoding.sol"
    object "Encoding_3739_deployed" {
        code {
            /// @src 19:287:5715  "library Encoding {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122099d9cefabbabfee5248160c59826ef61fcaeedbdb140f2a2998f8f96b1f1745b64736f6c634300080f0033"
    }

}


IR:

/// @use-src 20:"contracts/libraries/Hashing.sol"
object "Hashing_3065" {
    code {
        /// @src 20:237:5788  "library Hashing {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Hashing_3065_deployed"), datasize("Hashing_3065_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Hashing_3065_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 20:237:5788  "library Hashing {..."
        function constructor_Hashing_3065() {

            /// @src 20:237:5788  "library Hashing {..."

        }
        /// @src 20:237:5788  "library Hashing {..."

    }
    /// @use-src 20:"contracts/libraries/Hashing.sol"
    object "Hashing_3065_deployed" {
        code {
            /// @src 20:237:5788  "library Hashing {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212201928796d27d9b1175d042388c4e834761d8816a1c0029e347fc09d94ccf9d94a64736f6c634300080f0033"
    }

}


IR:

/// @use-src 21:"contracts/libraries/Predeploys.sol"
object "Predeploys_851" {
    code {
        /// @src 21:179:4036  "library Predeploys {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Predeploys_851_deployed"), datasize("Predeploys_851_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Predeploys_851_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 21:179:4036  "library Predeploys {..."
        function constructor_Predeploys_851() {

            /// @src 21:179:4036  "library Predeploys {..."

        }
        /// @src 21:179:4036  "library Predeploys {..."

    }
    /// @use-src 21:"contracts/libraries/Predeploys.sol"
    object "Predeploys_851_deployed" {
        code {
            /// @src 21:179:4036  "library Predeploys {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122047f3a3a476f87c9608a66b36cf0e211134b150095f608204291e366a600c143664736f6c634300080f0033"
    }

}


IR:

/// @use-src 22:"contracts/libraries/SafeCall.sol"
object "SafeCall_3111" {
    code {
        /// @src 22:124:4348  "library SafeCall {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SafeCall_3111_deployed"), datasize("SafeCall_3111_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("SafeCall_3111_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 22:124:4348  "library SafeCall {..."
        function constructor_SafeCall_3111() {

            /// @src 22:124:4348  "library SafeCall {..."

        }
        /// @src 22:124:4348  "library SafeCall {..."

    }
    /// @use-src 22:"contracts/libraries/SafeCall.sol"
    object "SafeCall_3111_deployed" {
        code {
            /// @src 22:124:4348  "library SafeCall {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220a2e71da3b936ccc480d913a649f15fb176f8da576f1a120974136d1cd15b20ab64736f6c634300080f0033"
    }

}


IR:

/// @use-src 23:"contracts/libraries/Types.sol"
object "Types_3163" {
    code {
        /// @src 23:161:3327  "library Types {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("Types_3163_deployed"), datasize("Types_3163_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("Types_3163_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 23:161:3327  "library Types {..."
        function constructor_Types_3163() {

            /// @src 23:161:3327  "library Types {..."

        }
        /// @src 23:161:3327  "library Types {..."

    }
    /// @use-src 23:"contracts/libraries/Types.sol"
    object "Types_3163_deployed" {
        code {
            /// @src 23:161:3327  "library Types {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220468766842e9af21b9a6224aaa583d886d59c00455e55f0119a208fe2980c0e2b64736f6c634300080f0033"
    }

}


IR:

/// @use-src 24:"contracts/libraries/rlp/RLPReader.sol"
object "RLPReader_7768" {
    code {
        /// @src 24:394:11216  "library RLPReader {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("RLPReader_7768_deployed"), datasize("RLPReader_7768_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("RLPReader_7768_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 24:394:11216  "library RLPReader {..."
        function constructor_RLPReader_7768() {

            /// @src 24:394:11216  "library RLPReader {..."

        }
        /// @src 24:394:11216  "library RLPReader {..."

    }
    /// @use-src 24:"contracts/libraries/rlp/RLPReader.sol"
    object "RLPReader_7768_deployed" {
        code {
            /// @src 24:394:11216  "library RLPReader {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212202b3a389f9e573f83caed87a2b80ba9c46711a43519efe26be3d93d375efcfda964736f6c634300080f0033"
    }

}


IR:

/// @use-src 25:"contracts/libraries/rlp/RLPWriter.sol"
object "RLPWriter_6341" {
    code {
        /// @src 25:388:6136  "library RLPWriter {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("RLPWriter_6341_deployed"), datasize("RLPWriter_6341_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("RLPWriter_6341_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 25:388:6136  "library RLPWriter {..."
        function constructor_RLPWriter_6341() {

            /// @src 25:388:6136  "library RLPWriter {..."

        }
        /// @src 25:388:6136  "library RLPWriter {..."

    }
    /// @use-src 25:"contracts/libraries/rlp/RLPWriter.sol"
    object "RLPWriter_6341_deployed" {
        code {
            /// @src 25:388:6136  "library RLPWriter {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122072a64daaa2cc080b82b97c038bc89f2c580add577a63bade8b93494a19dcb86e64736f6c634300080f0033"
    }

}


IR:

/// @use-src 26:"contracts/libraries/trie/MerkleTrie.sol"
object "MerkleTrie_5591" {
    code {
        /// @src 26:427:11923  "library MerkleTrie {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("MerkleTrie_5591_deployed"), datasize("MerkleTrie_5591_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("MerkleTrie_5591_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 26:427:11923  "library MerkleTrie {..."
        function constructor_MerkleTrie_5591() {

            /// @src 26:427:11923  "library MerkleTrie {..."

        }
        /// @src 26:427:11923  "library MerkleTrie {..."

    }
    /// @use-src 26:"contracts/libraries/trie/MerkleTrie.sol"
    object "MerkleTrie_5591_deployed" {
        code {
            /// @src 26:427:11923  "library MerkleTrie {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a264697066735822122062bf519237e8b62744bfa742cab40050381b72927424f4a5ce3c399b47a32bd464736f6c634300080f0033"
    }

}


IR:

/// @use-src 27:"contracts/libraries/trie/SecureMerkleTrie.sol"
object "SecureMerkleTrie_3242" {
    code {
        /// @src 27:338:2253  "library SecureMerkleTrie {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("SecureMerkleTrie_3242_deployed"), datasize("SecureMerkleTrie_3242_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("SecureMerkleTrie_3242_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 27:338:2253  "library SecureMerkleTrie {..."
        function constructor_SecureMerkleTrie_3242() {

            /// @src 27:338:2253  "library SecureMerkleTrie {..."

        }
        /// @src 27:338:2253  "library SecureMerkleTrie {..."

    }
    /// @use-src 27:"contracts/libraries/trie/SecureMerkleTrie.sol"
    object "SecureMerkleTrie_3242_deployed" {
        code {
            /// @src 27:338:2253  "library SecureMerkleTrie {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220870a28e39c0669f23148665dab3f44765c94b22fc88e5073295c28b65984d7a364736f6c634300080f0033"
    }

}


IR:

IR:

/// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
object "CrossDomainMessengerLegacySpacer0_868" {
    code {
        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        constructor_CrossDomainMessengerLegacySpacer0_868()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("CrossDomainMessengerLegacySpacer0_868_deployed"), datasize("CrossDomainMessengerLegacySpacer0_868_deployed"))

        return(_1, datasize("CrossDomainMessengerLegacySpacer0_868_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
        function constructor_CrossDomainMessengerLegacySpacer0_868() {

            /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."

        }
        /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."

    }
    /// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
    object "CrossDomainMessengerLegacySpacer0_868_deployed" {
        code {
            /// @src 28:673:883  "contract CrossDomainMessengerLegacySpacer0 {..."
            mstore(64, memoryguard(128))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220480af8ee91ce1fd0c23fdf4a4796ae82a04e78c57c15f44c41f01d79782ef90a64736f6c634300080f0033"
    }

}


IR:

/// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
object "CrossDomainMessengerLegacySpacer1_909" {
    code {
        /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        constructor_CrossDomainMessengerLegacySpacer1_909()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("CrossDomainMessengerLegacySpacer1_909_deployed"), datasize("CrossDomainMessengerLegacySpacer1_909_deployed"))

        return(_1, datasize("CrossDomainMessengerLegacySpacer1_909_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."
        function constructor_CrossDomainMessengerLegacySpacer1_909() {

            /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."

        }
        /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."

    }
    /// @use-src 28:"contracts/universal/CrossDomainMessenger.sol"
    object "CrossDomainMessengerLegacySpacer1_909_deployed" {
        code {
            /// @src 28:1210:3110  "contract CrossDomainMessengerLegacySpacer1 {..."
            mstore(64, memoryguard(128))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a26469706673582212204b6ed5f546e50dc264c5eb3e4a9701d264da9cb9cb4b77aacdfb768f39a011c464736f6c634300080f0033"
    }

}


IR:

/// @use-src 29:"contracts/universal/Semver.sol"
object "Semver_1425" {
    code {
        /// @src 29:223:1431  "contract Semver {..."
        mstore(64, memoryguard(224))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1, _2, _3 := copy_arguments_for_constructor_1396_object_Semver_1425()
        constructor_Semver_1425(_1, _2, _3)

        let _4 := allocate_unbounded()
        codecopy(_4, dataoffset("Semver_1425_deployed"), datasize("Semver_1425_deployed"))

        setimmutable(_4, "1367", mload(128))

        setimmutable(_4, "1370", mload(160))

        setimmutable(_4, "1373", mload(192))

        return(_4, datasize("Semver_1425_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        function round_up_to_mul_of_32(value) -> result {
            result := and(add(value, 31), not(31))
        }

        function panic_error_0x41() {
            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
            mstore(4, 0x41)
            revert(0, 0x24)
        }

        function finalize_allocation(memPtr, size) {
            let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
            // protect against overflow
            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
            mstore(64, newFreePtr)
        }

        function allocate_memory(size) -> memPtr {
            memPtr := allocate_unbounded()
            finalize_allocation(memPtr, size)
        }

        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
            revert(0, 0)
        }

        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {
            revert(0, 0)
        }

        function cleanup_t_uint256(value) -> cleaned {
            cleaned := value
        }

        function validator_revert_t_uint256(value) {
            if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }
        }

        function abi_decode_t_uint256_fromMemory(offset, end) -> value {
            value := mload(offset)
            validator_revert_t_uint256(value)
        }

        function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {
            if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            {

                let offset := 0

                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 32

                value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

            {

                let offset := 64

                value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)
            }

        }

        function copy_arguments_for_constructor_1396_object_Semver_1425() -> ret_param_0, ret_param_1, ret_param_2 {
            let programSize := datasize("Semver_1425")
            let argSize := sub(codesize(), programSize)

            let memoryDataOffset := allocate_memory(argSize)
            codecopy(memoryDataOffset, programSize, argSize)

            ret_param_0, ret_param_1, ret_param_2 := abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))
        }

        /// @ast-id 1396
        /// @src 29:726:919  "constructor(..."
        function constructor_Semver_1425(var__major_1376, var__minor_1378, var__patch_1380) {

            /// @src 29:726:919  "constructor(..."

            /// @src 29:842:848  "_major"
            let _5 := var__major_1376
            let expr_1384 := _5
            /// @src 29:826:848  "MAJOR_VERSION = _major"
            let _6 := expr_1384
            mstore(128, _6)
            let expr_1385 := expr_1384
            /// @src 29:874:880  "_minor"
            let _7 := var__minor_1378
            let expr_1388 := _7
            /// @src 29:858:880  "MINOR_VERSION = _minor"
            let _8 := expr_1388
            mstore(160, _8)
            let expr_1389 := expr_1388
            /// @src 29:906:912  "_patch"
            let _9 := var__patch_1380
            let expr_1392 := _9
            /// @src 29:890:912  "PATCH_VERSION = _patch"
            let _10 := expr_1392
            mstore(192, _10)
            let expr_1393 := expr_1392

        }
        /// @src 29:223:1431  "contract Semver {..."

    }
    /// @use-src 6:"./node_modules/@openzeppelin/contracts/utils/Strings.sol", 29:"contracts/universal/Semver.sol"
    object "Semver_1425_deployed" {
        code {
            /// @src 29:223:1431  "contract Semver {..."
            mstore(64, memoryguard(128))

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x54fd4d50
                {
                    // version()

                    external_fun_version_1424()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function array_length_t_string_memory_ptr(value) -> length {

                length := mload(value)

            }

            function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {
                mstore(pos, length)
                updated_pos := add(pos, 0x20)
            }

            function copy_memory_to_memory(src, dst, length) {
                let i := 0
                for { } lt(i, length) { i := add(i, 32) }
                {
                    mstore(add(dst, i), mload(add(src, i)))
                }
                if gt(i, length)
                {
                    // clear end
                    mstore(add(dst, length), 0)
                }
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, round_up_to_mul_of_32(length))
            }

            function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)

            }

            function external_fun_version_1424() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_version_1424()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function zero_value_for_split_t_string_memory_ptr() -> ret {
                ret := 96
            }

            function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {
                updated_pos := pos
            }

            function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {
                let length := array_length_t_string_memory_ptr(value)
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)
                copy_memory_to_memory(add(value, 0x20), pos, length)
                end := add(pos, length)
            }

            function store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(memPtr) {

                mstore(add(memPtr, 0), ".")

            }

            function abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {
                pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)
                store_literal_in_memory_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf(pos)
                end := add(pos, 1)
            }

            function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(pos , value0, value1, value2) -> end {

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)

                pos := abi_encode_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)

                pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)

                end := pos
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(value) -> converted  {
                converted := value

            }

            /// @ast-id 1424
            /// @src 29:1057:1429  "function version() public view returns (string memory) {..."
            function fun_version_1424() -> var__1400_mpos {
                /// @src 29:1097:1110  "string memory"
                let zero_t_string_memory_ptr_1_mpos := zero_value_for_split_t_string_memory_ptr()
                var__1400_mpos := zero_t_string_memory_ptr_1_mpos

                /// @src 29:1203:1210  "Strings"
                let expr_1406_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1220:1233  "MAJOR_VERSION"
                let _2 := loadimmutable("1367")
                let expr_1408 := _2
                /// @src 29:1203:1234  "Strings.toString(MAJOR_VERSION)"
                let expr_1409_mpos := fun_toString_3827(expr_1408)
                /// @src 29:1281:1288  "Strings"
                let expr_1411_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1298:1311  "MINOR_VERSION"
                let _3 := loadimmutable("1370")
                let expr_1413 := _3
                /// @src 29:1281:1312  "Strings.toString(MINOR_VERSION)"
                let expr_1414_mpos := fun_toString_3827(expr_1413)
                /// @src 29:1359:1366  "Strings"
                let expr_1416_address := linkersymbol("./node_modules/@openzeppelin/contracts/utils/Strings.sol:Strings")
                /// @src 29:1376:1389  "PATCH_VERSION"
                let _4 := loadimmutable("1373")
                let expr_1418 := _4
                /// @src 29:1359:1390  "Strings.toString(PATCH_VERSION)"
                let expr_1419_mpos := fun_toString_3827(expr_1418)
                /// @src 29:1165:1408  "abi.encodePacked(..."

                let expr_1420_mpos := allocate_unbounded()
                let _5 := add(expr_1420_mpos, 0x20)

                let _6 := abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack(_5, expr_1409_mpos, expr_1414_mpos, expr_1419_mpos)
                mstore(expr_1420_mpos, sub(_6, add(expr_1420_mpos, 0x20)))
                finalize_allocation(expr_1420_mpos, sub(_6, expr_1420_mpos))
                /// @src 29:1141:1422  "string(..."
                let expr_1421_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_1420_mpos)
                /// @src 29:1122:1422  "return..."
                var__1400_mpos := expr_1421_mpos
                leave

            }
            /// @src 29:223:1431  "contract Semver {..."

            function cleanup_t_uint256(value) -> cleaned {
                cleaned := value
            }

            function cleanup_t_rational_0_by_1(value) -> cleaned {
                cleaned := value
            }

            function identity(value) -> ret {
                ret := value
            }

            function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function array_allocation_size_t_string_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_string_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_string_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(memPtr) {

                mstore(add(memPtr, 0), "0")

            }

            function copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d() -> memPtr {
                memPtr := allocate_memory_array_t_string_memory_ptr(1)
                store_literal_in_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d(add(memPtr, 32))
            }

            function convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr() -> converted {
                converted := copy_literal_to_memory_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d()
            }

            function zero_value_for_split_t_uint256() -> ret {
                ret := 0
            }

            function panic_error_0x11() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x11)
                revert(0, 0x24)
            }

            function increment_t_uint256(value) -> ret {
                value := cleanup_t_uint256(value)
                if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }
                ret := add(value, 1)
            }

            function cleanup_t_rational_10_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_10_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_10_by_1(value)))
            }

            function panic_error_0x12() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x12)
                revert(0, 0x24)
            }

            function checked_div_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }

                r := div(x, y)
            }

            function array_allocation_size_t_bytes_memory_ptr(length) -> size {
                // Make sure we can allocate memory without overflow
                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }

                size := round_up_to_mul_of_32(length)

                // add length slot
                size := add(size, 0x20)

            }

            function allocate_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                let allocSize := array_allocation_size_t_bytes_memory_ptr(length)
                memPtr := allocate_memory(allocSize)

                mstore(memPtr, length)

            }

            function zero_memory_chunk_t_bytes1(dataStart, dataSizeInBytes) {
                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)
            }

            function allocate_and_zero_memory_array_t_bytes_memory_ptr(length) -> memPtr {
                memPtr := allocate_memory_array_t_bytes_memory_ptr(length)
                let dataStart := memPtr
                let dataSize := array_allocation_size_t_bytes_memory_ptr(length)

                dataStart := add(dataStart, 32)
                dataSize := sub(dataSize, 32)

                zero_memory_chunk_t_bytes1(dataStart, dataSize)
            }

            function cleanup_t_rational_1_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_1_by_1(value)))
            }

            function checked_sub_t_uint256(x, y) -> diff {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                if lt(x, y) { panic_error_0x11() }

                diff := sub(x, y)
            }

            function mod_t_uint256(x, y) -> r {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)
                if iszero(y) { panic_error_0x12() }
                r := mod(x, y)
            }

            function cleanup_t_rational_48_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_48_by_1_to_t_uint256(value) -> converted {
                converted := cleanup_t_uint256(identity(cleanup_t_rational_48_by_1(value)))
            }

            function checked_add_t_uint256(x, y) -> sum {
                x := cleanup_t_uint256(x)
                y := cleanup_t_uint256(y)

                // overflow, if x > (maxValue - y)
                if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }

                sum := add(x, y)
            }

            function cleanup_t_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }

            function convert_t_uint256_to_t_uint8(value) -> converted {
                converted := cleanup_t_uint8(identity(cleanup_t_uint256(value)))
            }

            function cleanup_t_bytes1(value) -> cleaned {
                cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)
            }

            function shift_left_248(value) -> newValue {
                newValue :=

                shl(248, value)

            }

            function convert_t_uint8_to_t_bytes1(value) -> converted {
                converted := cleanup_t_bytes1(shift_left_248(cleanup_t_uint8(value)))
            }

            function panic_error_0x32() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x32)
                revert(0, 0x24)
            }

            function array_length_t_bytes_memory_ptr(value) -> length {

                length := mload(value)

            }

            function memory_array_index_access_t_bytes_memory_ptr(baseRef, index) -> addr {
                if iszero(lt(index, array_length_t_bytes_memory_ptr(baseRef))) {
                    panic_error_0x32()
                }

                let offset := mul(index, 1)

                offset := add(offset, 32)

                addr := add(baseRef, offset)
            }

            /// @ast-id 3827
            /// @src 6:392:1095  "function toString(uint256 value) internal pure returns (string memory) {..."
            function fun_toString_3827(var_value_3751) -> var__3754_mpos {
                /// @src 6:448:461  "string memory"
                let zero_t_string_memory_ptr_7_mpos := zero_value_for_split_t_string_memory_ptr()
                var__3754_mpos := zero_t_string_memory_ptr_7_mpos

                /// @src 6:665:670  "value"
                let _8 := var_value_3751
                let expr_3756 := _8
                /// @src 6:674:675  "0"
                let expr_3757 := 0x00
                /// @src 6:665:675  "value == 0"
                let expr_3758 := eq(cleanup_t_uint256(expr_3756), convert_t_rational_0_by_1_to_t_uint256(expr_3757))
                /// @src 6:661:712  "if (value == 0) {..."
                if expr_3758 {
                    /// @src 6:691:701  "return \"0\""
                    var__3754_mpos := convert_t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d_to_t_string_memory_ptr()
                    leave
                    /// @src 6:661:712  "if (value == 0) {..."
                }
                /// @src 6:736:741  "value"
                let _9 := var_value_3751
                let expr_3765 := _9
                /// @src 6:721:741  "uint256 temp = value"
                let var_temp_3764 := expr_3765
                /// @src 6:751:765  "uint256 digits"
                let var_digits_3768
                let zero_t_uint256_10 := zero_value_for_split_t_uint256()
                var_digits_3768 := zero_t_uint256_10
                /// @src 6:775:850  "while (temp != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:782:786  "temp"
                    let _11 := var_temp_3764
                    let expr_3770 := _11
                    /// @src 6:790:791  "0"
                    let expr_3771 := 0x00
                    /// @src 6:782:791  "temp != 0"
                    let expr_3772 := iszero(eq(cleanup_t_uint256(expr_3770), convert_t_rational_0_by_1_to_t_uint256(expr_3771)))
                    if iszero(expr_3772) { break }
                    /// @src 6:807:815  "digits++"
                    let _13 := var_digits_3768
                    let _12 := increment_t_uint256(_13)
                    var_digits_3768 := _12
                    let expr_3774 := _13
                    /// @src 6:837:839  "10"
                    let expr_3777 := 0x0a
                    /// @src 6:829:839  "temp /= 10"
                    let _14 := convert_t_rational_10_by_1_to_t_uint256(expr_3777)
                    let _15 := var_temp_3764
                    let expr_3778 := checked_div_t_uint256(_15, _14)

                    var_temp_3764 := expr_3778
                }
                /// @src 6:891:897  "digits"
                let _16 := var_digits_3768
                let expr_3786 := _16
                /// @src 6:881:898  "new bytes(digits)"
                let expr_3787_mpos := allocate_and_zero_memory_array_t_bytes_memory_ptr(expr_3786)
                /// @src 6:859:898  "bytes memory buffer = new bytes(digits)"
                let var_buffer_3783_mpos := expr_3787_mpos
                /// @src 6:908:1058  "while (value != 0) {..."
                for {
                    } 1 {
                }
                {
                    /// @src 6:915:920  "value"
                    let _17 := var_value_3751
                    let expr_3789 := _17
                    /// @src 6:924:925  "0"
                    let expr_3790 := 0x00
                    /// @src 6:915:925  "value != 0"
                    let expr_3791 := iszero(eq(cleanup_t_uint256(expr_3789), convert_t_rational_0_by_1_to_t_uint256(expr_3790)))
                    if iszero(expr_3791) { break }
                    /// @src 6:951:952  "1"
                    let expr_3793 := 0x01
                    /// @src 6:941:952  "digits -= 1"
                    let _18 := convert_t_rational_1_by_1_to_t_uint256(expr_3793)
                    let _19 := var_digits_3768
                    let expr_3794 := checked_sub_t_uint256(_19, _18)

                    var_digits_3768 := expr_3794
                    /// @src 6:996:998  "48"
                    let expr_3803 := 0x30
                    /// @src 6:1009:1014  "value"
                    let _20 := var_value_3751
                    let expr_3806 := _20
                    /// @src 6:1017:1019  "10"
                    let expr_3807 := 0x0a
                    /// @src 6:1009:1019  "value % 10"
                    let expr_3808 := mod_t_uint256(expr_3806, convert_t_rational_10_by_1_to_t_uint256(expr_3807))

                    /// @src 6:1001:1020  "uint256(value % 10)"
                    let expr_3809 := expr_3808
                    /// @src 6:996:1020  "48 + uint256(value % 10)"
                    let expr_3810 := checked_add_t_uint256(convert_t_rational_48_by_1_to_t_uint256(expr_3803), expr_3809)

                    /// @src 6:990:1021  "uint8(48 + uint256(value % 10))"
                    let expr_3811 := convert_t_uint256_to_t_uint8(expr_3810)
                    /// @src 6:983:1022  "bytes1(uint8(48 + uint256(value % 10)))"
                    let expr_3812 := convert_t_uint8_to_t_bytes1(expr_3811)
                    /// @src 6:966:972  "buffer"
                    let _21_mpos := var_buffer_3783_mpos
                    let expr_3796_mpos := _21_mpos
                    /// @src 6:973:979  "digits"
                    let _22 := var_digits_3768
                    let expr_3797 := _22
                    /// @src 6:966:1022  "buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))"
                    let _23 := expr_3812
                    mstore8(memory_array_index_access_t_bytes_memory_ptr(expr_3796_mpos, expr_3797), byte(0, _23))
                    let expr_3813 := expr_3812
                    /// @src 6:1045:1047  "10"
                    let expr_3816 := 0x0a
                    /// @src 6:1036:1047  "value /= 10"
                    let _24 := convert_t_rational_10_by_1_to_t_uint256(expr_3816)
                    let _25 := var_value_3751
                    let expr_3817 := checked_div_t_uint256(_25, _24)

                    var_value_3751 := expr_3817
                }
                /// @src 6:1081:1087  "buffer"
                let _26_mpos := var_buffer_3783_mpos
                let expr_3823_mpos := _26_mpos
                /// @src 6:1074:1088  "string(buffer)"
                let expr_3824_mpos := convert_array_t_bytes_memory_ptr_to_t_string_memory_ptr(expr_3823_mpos)
                /// @src 6:1067:1088  "return string(buffer)"
                var__3754_mpos := expr_3824_mpos
                leave

            }
            /// @src 29:223:1431  "contract Semver {..."

        }

        data ".metadata" hex"a26469706673582212205560938468ae24a1d742f2dd2d854bcbc20f27507cb92a398ccd97d39e4ab22d64736f6c634300080f0033"
    }

}


IR:

/// @use-src 30:"contracts/vendor/AddressAliasHelper.sol"
object "AddressAliasHelper_3295" {
    code {
        /// @src 30:674:1732  "library AddressAliasHelper {..."
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset("AddressAliasHelper_3295_deployed"), datasize("AddressAliasHelper_3295_deployed"))

        setimmutable(_1, "library_deploy_address", address())

        return(_1, datasize("AddressAliasHelper_3295_deployed"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 30:674:1732  "library AddressAliasHelper {..."
        function constructor_AddressAliasHelper_3295() {

            /// @src 30:674:1732  "library AddressAliasHelper {..."

        }
        /// @src 30:674:1732  "library AddressAliasHelper {..."

    }
    /// @use-src 30:"contracts/vendor/AddressAliasHelper.sol"
    object "AddressAliasHelper_3295_deployed" {
        code {
            /// @src 30:674:1732  "library AddressAliasHelper {..."
            mstore(64, memoryguard(128))

            let called_via_delegatecall := iszero(eq(loadimmutable("library_deploy_address"), address()))

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

        }

        data ".metadata" hex"a2646970667358221220be2decf563b8aab2375182e756cb41fa2b7e6dc7e4f116987b8d4c733d8121d164736f6c634300080f0033"
    }

}



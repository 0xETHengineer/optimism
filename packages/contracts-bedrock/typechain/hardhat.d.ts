/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "L1CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1StandardBridge__factory>;
    getContractFactory(
      name: "L2OutputOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2OutputOracle__factory>;
    getContractFactory(
      name: "OptimismPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismPortal__factory>;
    getContractFactory(
      name: "Burner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Burner__factory>;
    getContractFactory(
      name: "DeployerWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployerWhitelist__factory>;
    getContractFactory(
      name: "GasPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasPriceOracle__factory>;
    getContractFactory(
      name: "L1Block",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1Block__factory>;
    getContractFactory(
      name: "L1BlockNumber",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1BlockNumber__factory>;
    getContractFactory(
      name: "L2CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L2StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardBridge__factory>;
    getContractFactory(
      name: "L2ToL1MessagePasser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ToL1MessagePasser__factory>;
    getContractFactory(
      name: "OVMETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OVMETH__factory>;
    getContractFactory(
      name: "SequencerFeeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerFeeVault__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainMessenger__factory>;
    getContractFactory(
      name: "OptimismMintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismMintableERC20__factory>;
    getContractFactory(
      name: "OptimismMintableTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismMintableTokenFactory__factory>;
    getContractFactory(
      name: "StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardBridge__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "L1CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CrossDomainMessenger>;
    getContractAt(
      name: "L1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1StandardBridge>;
    getContractAt(
      name: "L2OutputOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2OutputOracle>;
    getContractAt(
      name: "OptimismPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismPortal>;
    getContractAt(
      name: "Burner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Burner>;
    getContractAt(
      name: "DeployerWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployerWhitelist>;
    getContractAt(
      name: "GasPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasPriceOracle>;
    getContractAt(
      name: "L1Block",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1Block>;
    getContractAt(
      name: "L1BlockNumber",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1BlockNumber>;
    getContractAt(
      name: "L2CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CrossDomainMessenger>;
    getContractAt(
      name: "L2StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2StandardBridge>;
    getContractAt(
      name: "L2ToL1MessagePasser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ToL1MessagePasser>;
    getContractAt(
      name: "OVMETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OVMETH>;
    getContractAt(
      name: "SequencerFeeVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerFeeVault>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainMessenger>;
    getContractAt(
      name: "OptimismMintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismMintableERC20>;
    getContractAt(
      name: "OptimismMintableTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismMintableTokenFactory>;
    getContractAt(
      name: "StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardBridge>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OptimismPortalInterface extends ethers.utils.Interface {
  functions: {
    "FINALIZATION_PERIOD()": FunctionFragment;
    "L2_ORACLE()": FunctionFragment;
    "depositTransaction(address,uint256,uint64,bool,bytes)": FunctionFragment;
    "finalizeWithdrawalTransaction(uint256,address,address,uint256,uint256,bytes,uint256,(bytes32,bytes32,bytes32,bytes32),bytes)": FunctionFragment;
    "finalizedWithdrawals(bytes32)": FunctionFragment;
    "l2Sender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FINALIZATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "L2_ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTransaction",
    values: [string, BigNumberish, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalTransaction",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      {
        version: BytesLike;
        stateRoot: BytesLike;
        withdrawerStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "l2Sender", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FINALIZATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "L2_ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Sender", data: BytesLike): Result;

  events: {
    "TransactionDeposited(address,address,uint256,uint256,uint64,bool,bytes)": EventFragment;
    "WithdrawalFinalized(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransactionDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
}

export type TransactionDepositedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, boolean, string] & {
    from: string;
    to: string;
    mint: BigNumber;
    value: BigNumber;
    gasLimit: BigNumber;
    isCreation: boolean;
    data: string;
  }
>;

export type WithdrawalFinalizedEvent = TypedEvent<
  [string, boolean] & { arg0: string; success: boolean }
>;

export class OptimismPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimismPortalInterface;

  functions: {
    FINALIZATION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    L2_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    depositTransaction(
      _to: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeWithdrawalTransaction(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      _l2Timestamp: BigNumberish,
      _outputRootProof: {
        version: BytesLike;
        stateRoot: BytesLike;
        withdrawerStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
      },
      _withdrawalProof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l2Sender(overrides?: CallOverrides): Promise<[string]>;
  };

  FINALIZATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  L2_ORACLE(overrides?: CallOverrides): Promise<string>;

  depositTransaction(
    _to: string,
    _value: BigNumberish,
    _gasLimit: BigNumberish,
    _isCreation: boolean,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeWithdrawalTransaction(
    _nonce: BigNumberish,
    _sender: string,
    _target: string,
    _value: BigNumberish,
    _gasLimit: BigNumberish,
    _data: BytesLike,
    _l2Timestamp: BigNumberish,
    _outputRootProof: {
      version: BytesLike;
      stateRoot: BytesLike;
      withdrawerStorageRoot: BytesLike;
      latestBlockhash: BytesLike;
    },
    _withdrawalProof: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizedWithdrawals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2Sender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FINALIZATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    L2_ORACLE(overrides?: CallOverrides): Promise<string>;

    depositTransaction(
      _to: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawalTransaction(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      _l2Timestamp: BigNumberish,
      _outputRootProof: {
        version: BytesLike;
        stateRoot: BytesLike;
        withdrawerStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
      },
      _withdrawalProof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2Sender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TransactionDeposited(address,address,uint256,uint256,uint64,bool,bytes)"(
      from?: string | null,
      to?: string | null,
      mint?: null,
      value?: null,
      gasLimit?: null,
      isCreation?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, string],
      {
        from: string;
        to: string;
        mint: BigNumber;
        value: BigNumber;
        gasLimit: BigNumber;
        isCreation: boolean;
        data: string;
      }
    >;

    TransactionDeposited(
      from?: string | null,
      to?: string | null,
      mint?: null,
      value?: null,
      gasLimit?: null,
      isCreation?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, string],
      {
        from: string;
        to: string;
        mint: BigNumber;
        value: BigNumber;
        gasLimit: BigNumber;
        isCreation: boolean;
        data: string;
      }
    >;

    "WithdrawalFinalized(bytes32,bool)"(
      undefined?: BytesLike | null,
      success?: null
    ): TypedEventFilter<[string, boolean], { arg0: string; success: boolean }>;

    WithdrawalFinalized(
      undefined?: BytesLike | null,
      success?: null
    ): TypedEventFilter<[string, boolean], { arg0: string; success: boolean }>;
  };

  estimateGas: {
    FINALIZATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    L2_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    depositTransaction(
      _to: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeWithdrawalTransaction(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      _l2Timestamp: BigNumberish,
      _outputRootProof: {
        version: BytesLike;
        stateRoot: BytesLike;
        withdrawerStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
      },
      _withdrawalProof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2Sender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FINALIZATION_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    L2_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTransaction(
      _to: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalTransaction(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _data: BytesLike,
      _l2Timestamp: BigNumberish,
      _outputRootProof: {
        version: BytesLike;
        stateRoot: BytesLike;
        withdrawerStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
      },
      _withdrawalProof: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

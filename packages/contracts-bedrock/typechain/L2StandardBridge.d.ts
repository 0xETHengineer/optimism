/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface L2StandardBridgeInterface extends ethers.utils.Interface {
  functions: {
    "bridgeERC20(address,address,uint256,uint32,bytes)": FunctionFragment;
    "bridgeERC20To(address,address,address,uint256,uint32,bytes)": FunctionFragment;
    "bridgeETH(uint32,bytes)": FunctionFragment;
    "bridgeETHTo(address,uint32,bytes)": FunctionFragment;
    "completeOutboundTransfer(address,address,address,uint256)": FunctionFragment;
    "deposits(address,address)": FunctionFragment;
    "donateETH()": FunctionFragment;
    "finalizeBridgeERC20(address,address,address,address,uint256,bytes)": FunctionFragment;
    "finalizeBridgeETH(address,address,uint256,bytes)": FunctionFragment;
    "finalizeDeposit(address,address,address,address,uint256,bytes)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "messenger()": FunctionFragment;
    "otherBridge()": FunctionFragment;
    "withdraw(address,uint256,uint32,bytes)": FunctionFragment;
    "withdrawTo(address,address,uint256,uint32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridgeERC20",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC20To",
    values: [string, string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeETH",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeETHTo",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOutboundTransfer",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "donateETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeBridgeERC20",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBridgeETH",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDeposit",
    values: [string, string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeETHTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOutboundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donateETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBridgeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBridgeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "DepositFailed(address,address,address,address,uint256,bytes)": EventFragment;
    "DepositFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "ERC20BridgeFailed(address,address,address,address,uint256,bytes)": EventFragment;
    "ERC20BridgeFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "ERC20BridgeInitiated(address,address,address,address,uint256,bytes)": EventFragment;
    "ETHBridgeFinalized(address,address,uint256,bytes)": EventFragment;
    "ETHBridgeInitiated(address,address,uint256,bytes)": EventFragment;
    "WithdrawalInitiated(address,address,address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
}

export type DepositFailedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type DepositFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ERC20BridgeFailedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _localToken: string;
    _remoteToken: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ERC20BridgeFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _localToken: string;
    _remoteToken: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ERC20BridgeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _localToken: string;
    _remoteToken: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ETHBridgeFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type ETHBridgeInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string] & {
    _l1Token: string;
    _l2Token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
    _data: string;
  }
>;

export class L2StandardBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: L2StandardBridgeInterface;

  functions: {
    bridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bridgeERC20To(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bridgeETH(
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bridgeETHTo(
      _to: string,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeOutboundTransfer(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    donateETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeBridgeETH(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _otherBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    otherBridge(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeERC20(
    _localToken: string,
    _remoteToken: string,
    _amount: BigNumberish,
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bridgeERC20To(
    _localToken: string,
    _remoteToken: string,
    _to: string,
    _amount: BigNumberish,
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bridgeETH(
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bridgeETHTo(
    _to: string,
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeOutboundTransfer(
    _localToken: string,
    _remoteToken: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donateETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeBridgeERC20(
    _localToken: string,
    _remoteToken: string,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeBridgeETH(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeDeposit(
    _l1Token: string,
    _l2Token: string,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _otherBridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messenger(overrides?: CallOverrides): Promise<string>;

  otherBridge(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _l2Token: string,
    _amount: BigNumberish,
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    _l2Token: string,
    _to: string,
    _amount: BigNumberish,
    _minGasLimit: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeERC20To(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeETH(
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeETHTo(
      _to: string,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    completeOutboundTransfer(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donateETH(overrides?: CallOverrides): Promise<void>;

    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeBridgeETH(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_otherBridge: string, overrides?: CallOverrides): Promise<void>;

    messenger(overrides?: CallOverrides): Promise<string>;

    otherBridge(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositFailed(address,address,address,address,uint256,bytes)"(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    DepositFailed(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    "DepositFinalized(address,address,address,address,uint256,bytes)"(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    DepositFinalized(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    "ERC20BridgeFailed(address,address,address,address,uint256,bytes)"(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    ERC20BridgeFailed(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    "ERC20BridgeFinalized(address,address,address,address,uint256,bytes)"(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    ERC20BridgeFinalized(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    "ERC20BridgeInitiated(address,address,address,address,uint256,bytes)"(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    ERC20BridgeInitiated(
      _localToken?: string | null,
      _remoteToken?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _localToken: string;
        _remoteToken: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    "ETHBridgeFinalized(address,address,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _amount: BigNumber; _data: string }
    >;

    ETHBridgeFinalized(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _amount: BigNumber; _data: string }
    >;

    "ETHBridgeInitiated(address,address,uint256,bytes)"(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _amount: BigNumber; _data: string }
    >;

    ETHBridgeInitiated(
      _from?: string | null,
      _to?: string | null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _from: string; _to: string; _amount: BigNumber; _data: string }
    >;

    "WithdrawalInitiated(address,address,address,address,uint256,bytes)"(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;

    WithdrawalInitiated(
      _l1Token?: string | null,
      _l2Token?: string | null,
      _from?: string | null,
      _to?: null,
      _amount?: null,
      _data?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, string],
      {
        _l1Token: string;
        _l2Token: string;
        _from: string;
        _to: string;
        _amount: BigNumber;
        _data: string;
      }
    >;
  };

  estimateGas: {
    bridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bridgeERC20To(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bridgeETH(
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bridgeETHTo(
      _to: string,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeOutboundTransfer(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donateETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeBridgeETH(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _otherBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    otherBridge(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bridgeERC20To(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bridgeETH(
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bridgeETHTo(
      _to: string,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeOutboundTransfer(
      _localToken: string,
      _remoteToken: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donateETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeBridgeETH(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeDeposit(
      _l1Token: string,
      _l2Token: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _otherBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _l2Token: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      _l2Token: string,
      _to: string,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

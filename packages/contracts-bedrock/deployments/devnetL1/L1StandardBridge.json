{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ERC20BridgeFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ERC20BridgeFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ERC20BridgeInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ERC20DepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ERC20WithdrawalFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ETHBridgeFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ETHBridgeInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ETHDepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ETHWithdrawalFinalized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "bridgeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "bridgeERC20To",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "bridgeETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "bridgeETHTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "completeOutboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "depositERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "depositERC20To",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_minGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "depositETHTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donateETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_localToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "finalizeBridgeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "finalizeBridgeETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "finalizeERC20Withdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "finalizeETHWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_messenger",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2TokenBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract CrossDomainMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "otherBridge",
      "outputs": [
        {
          "internalType": "contract StandardBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5bc083191c2494dd80a60979cec714b2964ef05ad7de209e5dd8e32567426e11",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2071831",
    "logsBloom": "0x
    "blockHash": "0xf39887840322f0b48d28868d904b579ccbe789cd233cd608947d689169beae12",
    "transactionHash": "0x5bc083191c2494dd80a60979cec714b2964ef05ad7de209e5dd8e32567426e11",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2071831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f1b19ba097550efb2ca70fb1ff05547",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC20WithdrawalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ETHDepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ETHWithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"completeOutboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositERC20To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"depositETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeERC20Withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeETHWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TokenBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contract CrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherBridge\",\"outputs\":[{\"internalType\":\"contract StandardBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits and listening to it for newly finalized withdrawals.\",\"kind\":\"dev\",\"methods\":{\"depositERC20(address,address,uint256,uint32,bytes)\":{\"details\":\"deposit an amount of the ERC20 to the caller's balance on L2.\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit\",\"_data\":\"Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.\",\"_l1Token\":\"Address of the L1 ERC20 we are depositing\",\"_l2Token\":\"Address of the L1 respective L2 ERC20\",\"_minGasLimit\":\"limit required to complete the deposit on L2.\"}},\"depositERC20To(address,address,address,uint256,uint32,bytes)\":{\"details\":\"deposit an amount of ERC20 to a recipient's balance on L2.\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit.\",\"_data\":\"Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.\",\"_l1Token\":\"Address of the L1 ERC20 we are depositing\",\"_l2Token\":\"Address of the L1 respective L2 ERC20\",\"_minGasLimit\":\"Gas limit required to complete the deposit on L2.\",\"_to\":\"L2 address to credit the withdrawal to.\"}},\"depositETH(uint32,bytes)\":{\"details\":\"Deposit an amount of the ETH to the caller's balance on L2.\",\"params\":{\"_data\":\"Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.\",\"_minGasLimit\":\"limit required to complete the deposit on L2.\"}},\"depositETHTo(address,uint32,bytes)\":{\"details\":\"Deposit an amount of ETH to a recipient's balance on L2.\",\"params\":{\"_data\":\"Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.\",\"_minGasLimit\":\"Gas limit required to complete the deposit on L2.\",\"_to\":\"L2 address to credit the withdrawal to.\"}},\"finalizeERC20Withdrawal(address,address,address,address,uint256,bytes)\":{\"details\":\"Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the L1 ERC20 token. This call will fail if the initialized withdrawal from L2 has not been finalized.\",\"params\":{\"_amount\":\"Amount of the ERC20 to deposit.\",\"_data\":\"Data provided by the sender on L2. This data is provided   solely as a convenience for external contracts. Aside from enforcing a maximum   length, these contracts provide no guarantees about its content.\",\"_from\":\"L2 address initiating the transfer.\",\"_l1Token\":\"Address of L1 token to finalizeWithdrawal for.\",\"_l2Token\":\"Address of L2 token where withdrawal was initiated.\",\"_to\":\"L1 address to credit the withdrawal to.\"}},\"initialize(address)\":{\"details\":\"initialize the L1StandardBridge with the address of the      messenger in the same domain\"},\"l2TokenBridge()\":{\"details\":\"Get the address of the corresponding L2 bridge contract.      This is a legacy getter, provided for backwards compatibility.\",\"returns\":{\"_0\":\"Address of the corresponding L2 bridge contract.\"}}},\"title\":\"L1StandardBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridgeERC20(address,address,uint256,uint32,bytes)\":{\"notice\":\"Send an ERC20 to the message sender on the remote domain\"},\"bridgeERC20To(address,address,address,uint256,uint32,bytes)\":{\"notice\":\"Send an ERC20 to a specified account on the remote domain\"},\"bridgeETH(uint32,bytes)\":{\"notice\":\"Send ETH to the message sender on the remote domain\"},\"bridgeETHTo(address,uint32,bytes)\":{\"notice\":\"Send ETH to a specified account on the remote domain\"},\"donateETH()\":{\"notice\":\"Send ETH to this contract. This is used during upgrades\"},\"finalizeBridgeERC20(address,address,address,address,uint256,bytes)\":{\"notice\":\"Finalize an ERC20 sending transaction sent from a remote domain\"},\"finalizeBridgeETH(address,address,uint256,bytes)\":{\"notice\":\"Finalize an ETH sending transaction sent from a remote domain\"},\"messenger()\":{\"notice\":\"The messenger contract on the same domain\"},\"otherBridge()\":{\"notice\":\"The corresponding bridge on the other domain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1StandardBridge.sol\":\"L1StandardBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/libraries/bridge/Lib_CrossDomainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_CrossDomainUtils\\n */\\nlibrary Lib_CrossDomainUtils {\\n    /**\\n     * Generates the correct cross domain calldata for a message.\\n     * @param _target Target contract address.\\n     * @param _sender Message sender address.\\n     * @param _message Message to send to the target.\\n     * @param _messageNonce Nonce for the provided message.\\n     * @return ABI encoded cross domain calldata.\\n     */\\n    function encodeXDomainCalldata(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"relayMessage(address,address,bytes,uint256)\\\",\\n                _target,\\n                _sender,\\n                _message,\\n                _messageNonce\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbb7fc8ab995ec8f1abb7a8be6a6d26d765cf9bf2c2c895f65d0c482011f8f200\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/constants/Lib_DefaultValues.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_DefaultValues\\n */\\nlibrary Lib_DefaultValues {\\n    // The default x-domain message sender being set to a non-zero value makes\\n    // deployment a bit more expensive, but in exchange the refund on every call to\\n    // `relayMessage` by the L1 and L2 messengers will be higher.\\n    address internal constant DEFAULT_XDOMAIN_SENDER = 0x000000000000000000000000000000000000dEaD;\\n}\\n\",\"keccak256\":\"0xa4c6003e04da72f20adb9caed0f8fd3faf5402ad8aa6034e8d9b440e7c0dd227\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/constants/Lib_PredeployAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_PredeployAddresses\\n */\\nlibrary Lib_PredeployAddresses {\\n    address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;\\n    address internal constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;\\n    address internal constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;\\n    address payable internal constant OVM_ETH = payable(0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000);\\n    address internal constant L2_CROSS_DOMAIN_MESSENGER =\\n        0x4200000000000000000000000000000000000007;\\n    address internal constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;\\n    address internal constant PROXY_EOA = 0x4200000000000000000000000000000000000009;\\n    address internal constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;\\n    address internal constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;\\n    address internal constant L2_STANDARD_TOKEN_FACTORY =\\n        0x4200000000000000000000000000000000000012;\\n    address internal constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;\\n}\\n\",\"keccak256\":\"0x2bc28307af93e9716151a41a81694b56cbe513ef5eb335fb1d81f35e5db8edfa\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/rlp/Lib_RLPWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(bytes[] memory _in) internal pure returns (bytes memory) {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(string memory _in) internal pure returns (bytes memory) {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(address _in) internal pure returns (bytes memory) {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(uint256 _in) internal pure returns (bytes memory) {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(bool _in) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes1(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes1(uint8(lenLen) + uint8(_offset) + 55);\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes1(uint8((_len / (256**(lenLen - i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n\",\"keccak256\":\"0x215b90672ce126effc3f2df61ca0cdf52d2b1cc9be602877e637829b0bf229fd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1/L1StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {\\n    Lib_PredeployAddresses\\n} from \\\"@eth-optimism/contracts/libraries/constants/Lib_PredeployAddresses.sol\\\";\\nimport { StandardBridge } from \\\"../universal/StandardBridge.sol\\\";\\n\\n/**\\n * @title L1StandardBridge\\n * @dev The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard\\n * tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits\\n * and listening to it for newly finalized withdrawals.\\n */\\ncontract L1StandardBridge is StandardBridge {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event ETHDepositInitiated(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ETHWithdrawalFinalized(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20DepositInitiated(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20WithdrawalFinalized(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev initialize the L1StandardBridge with the address of the\\n     *      messenger in the same domain\\n     */\\n    function initialize(address payable _messenger) public {\\n        _initialize(_messenger, payable(Lib_PredeployAddresses.L2_STANDARD_BRIDGE));\\n    }\\n\\n    /**\\n     * @dev Get the address of the corresponding L2 bridge contract.\\n     *      This is a legacy getter, provided for backwards compatibility.\\n     * @return Address of the corresponding L2 bridge contract.\\n     */\\n    function l2TokenBridge() external returns (address) {\\n        return address(otherBridge);\\n    }\\n\\n    /**\\n     * @dev Deposit an amount of the ETH to the caller's balance on L2.\\n     * @param _minGasLimit limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositETH(uint32 _minGasLimit, bytes calldata _data) external payable onlyEOA {\\n        _initiateETHDeposit(msg.sender, msg.sender, _minGasLimit, _data);\\n    }\\n\\n    /**\\n     * @dev Deposit an amount of ETH to a recipient's balance on L2.\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _minGasLimit Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositETHTo(\\n        address _to,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) external payable {\\n        _initiateETHDeposit(msg.sender, _to, _minGasLimit, _data);\\n    }\\n\\n    /**\\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _amount Amount of the ERC20 to deposit\\n     * @param _minGasLimit limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) external virtual onlyEOA {\\n        _initiateERC20Deposit(\\n            _l1Token,\\n            _l2Token,\\n            msg.sender,\\n            msg.sender,\\n            _amount,\\n            _minGasLimit,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _minGasLimit Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20To(\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) external virtual {\\n        _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _minGasLimit, _data);\\n    }\\n\\n    function finalizeETHWithdrawal(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable onlyOtherBridge {\\n        emit ETHWithdrawalFinalized(_from, _to, _amount, _data);\\n        finalizeBridgeETH(_from, _to, _amount, _data);\\n    }\\n\\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ERC20 token.\\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\\n     *\\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Data provided by the sender on L2. This data is provided\\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *   length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeERC20Withdrawal(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external onlyOtherBridge {\\n        emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\\n        finalizeBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _data);\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function _initiateETHDeposit(\\n        address _from,\\n        address _to,\\n        uint32 _minGasLimit,\\n        bytes memory _data\\n    ) internal {\\n        emit ETHDepositInitiated(_from, _to, msg.value, _data);\\n        _initiateBridgeETH(_from, _to, msg.value, _minGasLimit, _data);\\n    }\\n\\n    function _initiateERC20Deposit(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) internal {\\n        emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);\\n        _initiateBridgeERC20(_l1Token, _l2Token, _from, _to, _amount, _minGasLimit, _data);\\n    }\\n}\\n\",\"keccak256\":\"0x55c2032a104dd4926fb2ec192217f5810a555c571dd080dd357405ad7f74b6e4\",\"license\":\"MIT\"},\"contracts/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// FROM: https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol\\n// TODO: Just use the original once we get our PR merged.\\nlibrary ExcessivelySafeCall {\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _value Ether value to send with the call\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint256 _value,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                _value, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n}\\n\",\"keccak256\":\"0xb123c7ac9b8428d41463e3d70eb30910c5c9238bcfc7633598f6b5092bea7ef0\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libraries/Lib_CrossDomainHashing.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {\\n    Lib_CrossDomainUtils\\n} from \\\"@eth-optimism/contracts/libraries/bridge/Lib_CrossDomainUtils.sol\\\";\\nimport { Lib_RLPWriter } from \\\"@eth-optimism/contracts/libraries/rlp/Lib_RLPWriter.sol\\\";\\n\\n/**\\n * @title CrossDomainHashing\\n * This library is responsible for holding cross domain utility\\n * functions.\\n * TODO(tynes): merge with Lib_CrossDomainUtils\\n * TODO(tynes): fill out more devdocs\\n */\\nlibrary CrossDomainHashing {\\n    /**\\n     * @notice Compute the L2 transaction hash given\\n     * data about an L1 deposit transaction. This is useful for\\n     * environments that do not have access to arbitrary\\n     * RLP encoding functionality but have access to the\\n     * standard web3 API\\n     * TODO: rearrange args in a sane way\\n     * @param _l1BlockHash The L1 block hash corresponding to the block\\n     * the deposit was included in\\n     * @param _logIndex The log index of the event that the deposit was\\n     * created from. This can be found on the transaction receipt\\n     * @param _from The sender of the deposit\\n     * @param _to The L2 contract to be called by the deposit transaction\\n     * @param _isCreate Indicates if the deposit creates a contract\\n     * @param _mint The amount of ETH being minted by the transaction\\n     * @param _value The amount of ETH send in the L2 call\\n     * @param _gas The gas limit for the L2 call\\n     */\\n    function L2TransactionHash(\\n        bytes32 _l1BlockHash,\\n        uint256 _logIndex,\\n        address _from,\\n        address _to,\\n        bool _isCreate,\\n        uint256 _mint,\\n        uint256 _value,\\n        uint256 _gas,\\n        bytes memory _data\\n    ) internal pure returns (bytes32) {\\n        bytes memory raw = L2Transaction(\\n            _l1BlockHash,\\n            _logIndex,\\n            _from,\\n            _to,\\n            _isCreate,\\n            _mint,\\n            _value,\\n            _gas,\\n            _data\\n        );\\n\\n        return keccak256(raw);\\n    }\\n\\n    /**\\n     * @notice Compute the deposit transaction source hash.\\n     * This value ensures that the L2 transaction hash is unique\\n     * and deterministic based on L1 execution\\n     * @param l1BlockHash The L1 blockhash corresponding to the block including\\n     * the deposit\\n     * @param logIndex The index of the log that created the deposit transaction\\n     */\\n    function sourceHash(bytes32 l1BlockHash, uint256 logIndex) internal pure returns (bytes32) {\\n        bytes32 depositId = keccak256(abi.encode(l1BlockHash, logIndex));\\n        return keccak256(abi.encode(bytes32(0), depositId));\\n    }\\n\\n    /**\\n     * @notice RLP encode a deposit transaction\\n     * This only works for user deposits, not system deposits\\n     * TODO: better name + rearrange the input param ordering?\\n     */\\n    function L2Transaction(\\n        bytes32 _l1BlockHash,\\n        uint256 _logIndex,\\n        address _from,\\n        address _to,\\n        bool _isCreate,\\n        uint256 _mint,\\n        uint256 _value,\\n        uint256 _gas,\\n        bytes memory _data\\n    ) internal pure returns (bytes memory) {\\n        bytes32 source = sourceHash(_l1BlockHash, _logIndex);\\n\\n        bytes[] memory raw = new bytes[](7);\\n\\n        raw[0] = Lib_RLPWriter.writeBytes(bytes32ToBytes(source));\\n        raw[1] = Lib_RLPWriter.writeAddress(_from);\\n\\n        if (_isCreate == true) {\\n            require(_to == address(0));\\n            raw[2] = Lib_RLPWriter.writeBytes(\\\"\\\");\\n        } else {\\n            raw[2] = Lib_RLPWriter.writeAddress(_to);\\n        }\\n\\n        raw[3] = Lib_RLPWriter.writeUint(_mint);\\n        raw[4] = Lib_RLPWriter.writeUint(_value);\\n        raw[5] = Lib_RLPWriter.writeUint(_gas);\\n        raw[6] = Lib_RLPWriter.writeBytes(_data);\\n\\n        bytes memory encoded = Lib_RLPWriter.writeList(raw);\\n        return abi.encodePacked(uint8(0x7e), encoded);\\n    }\\n\\n    /**\\n     * @notice Helper function to turn bytes32 into bytes\\n     */\\n    function bytes32ToBytes(bytes32 input) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), input) // set the bytes data\\n        }\\n        return b;\\n    }\\n\\n    /**\\n     * @notice Adds the version to the nonce\\n     */\\n    function addVersionToNonce(uint256 _nonce, uint16 _version)\\n        internal\\n        pure\\n        returns (uint256 nonce)\\n    {\\n        assembly {\\n            nonce := or(shl(240, _version), _nonce)\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the version out of the nonce\\n     */\\n    function getVersionFromNonce(uint256 _nonce) internal pure returns (uint16 version) {\\n        assembly {\\n            version := shr(240, _nonce)\\n        }\\n    }\\n\\n    /**\\n     * @notice Encodes the cross domain message based on the version that\\n     * is encoded in the nonce\\n     */\\n    function getVersionedEncoding(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal pure returns (bytes memory) {\\n        uint16 version = getVersionFromNonce(_nonce);\\n        if (version == 0) {\\n            return getEncodingV0(_target, _sender, _data, _nonce);\\n        } else if (version == 1) {\\n            return getEncodingV1(_nonce, _sender, _target, _value, _gasLimit, _data);\\n        }\\n\\n        revert(\\\"Unknown version.\\\");\\n    }\\n\\n    /**\\n     * @notice Compute the cross domain hash based on the versioned nonce\\n     */\\n    function getVersionedHash(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal pure returns (bytes32) {\\n        uint16 version = getVersionFromNonce(_nonce);\\n        if (version == 0) {\\n            return getHashV0(_target, _sender, _data, _nonce);\\n        } else if (version == 1) {\\n            return getHashV1(_nonce, _sender, _target, _value, _gasLimit, _data);\\n        }\\n\\n        revert(\\\"Unknown version.\\\");\\n    }\\n\\n    /**\\n     * @notice Compute the legacy cross domain serialization\\n     */\\n    function getEncodingV0(\\n        address _target,\\n        address _sender,\\n        bytes memory _data,\\n        uint256 _nonce\\n    ) internal pure returns (bytes memory) {\\n        return Lib_CrossDomainUtils.encodeXDomainCalldata(_target, _sender, _data, _nonce);\\n    }\\n\\n    /**\\n     * @notice Compute the V1 cross domain serialization\\n     */\\n    function getEncodingV1(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"relayMessage(uint256,address,address,uint256,uint256,bytes)\\\",\\n                _nonce,\\n                _sender,\\n                _target,\\n                _value,\\n                _gasLimit,\\n                _data\\n            );\\n    }\\n\\n    /**\\n     * @notice Compute the legacy hash of a cross domain message\\n     */\\n    function getHashV0(\\n        address _target,\\n        address _sender,\\n        bytes memory _data,\\n        uint256 _nonce\\n    ) internal pure returns (bytes32) {\\n        return keccak256(getEncodingV0(_target, _sender, _data, _nonce));\\n    }\\n\\n    /**\\n     * @notice Compute the V1 hash of a cross domain message\\n     */\\n    function getHashV1(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) internal pure returns (bytes32) {\\n        return keccak256(getEncodingV1(_nonce, _sender, _target, _value, _gasLimit, _data));\\n    }\\n}\\n\",\"keccak256\":\"0xdbdf93d2e60e6b16fd26a3271ad8900e6fbed5eb26f9c8e4208f2ce20ed949cc\",\"license\":\"MIT\"},\"contracts/universal/CrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// solhint-disable max-line-length\\n\\n/* Library Imports */\\nimport {\\n    Lib_DefaultValues\\n} from \\\"@eth-optimism/contracts/libraries/constants/Lib_DefaultValues.sol\\\";\\nimport { CrossDomainHashing } from \\\"../libraries/Lib_CrossDomainHashing.sol\\\";\\n\\n/* External Imports */\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    PausableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { ExcessivelySafeCall } from \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n// solhint-enable max-line-length\\n\\n/**\\n * @title CrossDomainMessenger\\n * @dev The CrossDomainMessenger contract delivers messages between two layers.\\n */\\nabstract contract CrossDomainMessenger is\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n\\n    event RelayedMessage(bytes32 indexed msgHash);\\n\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint16 public constant MESSAGE_VERSION = 1;\\n\\n    uint32 public constant MIN_GAS_DYNAMIC_OVERHEAD = 1;\\n\\n    uint32 public constant MIN_GAS_CONSTANT_OVERHEAD = 100000;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // blockedMessages in old L1CrossDomainMessenger\\n    bytes32 internal REMOVED_VARIABLE_SPACER_1;\\n\\n    // relayedMessages in old L1CrossDomainMessenger\\n    bytes32 internal REMOVED_VARIABLE_SPACER_2;\\n\\n    /// @notice Mapping of message hash to boolean success value.\\n    mapping(bytes32 => bool) public successfulMessages;\\n\\n    /// @notice Current x-domain message sender.\\n    address internal xDomainMsgSender;\\n\\n    /// @notice Nonce for the next message to be sent.\\n    uint256 internal msgNonce;\\n\\n    /// @notice Address of the CrossDomainMessenger on the other chain.\\n    address public otherMessenger;\\n\\n    /// @notice Mapping of message hash to boolean receipt value.\\n    mapping(bytes32 => bool) public receivedMessages;\\n\\n    /// @notice Blocked system addresses that cannot be called (for security reasons).\\n    mapping(address => bool) public blockedSystemAddresses;\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Pause relaying.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * Retrieves the address of the x-domain message sender. Will throw an error\\n     * if the sender is not currently set (equal to the default sender).\\n     * This function is meant to be called on the remote side of a cross domain\\n     * message so that the account that initiated the call can be known.\\n     *\\n     * @return Address of the x-domain message sender.\\n     */\\n    function xDomainMessageSender() external view returns (address) {\\n        require(\\n            xDomainMsgSender != Lib_DefaultValues.DEFAULT_XDOMAIN_SENDER,\\n            \\\"xDomainMessageSender is not set\\\"\\n        );\\n\\n        return xDomainMsgSender;\\n    }\\n\\n    /**\\n     * Retrieves the next message nonce. Adds the hash version to the nonce.\\n     *\\n     * @return Next message nonce with added hash version.\\n     */\\n    function messageNonce() public view returns (uint256) {\\n        return CrossDomainHashing.addVersionToNonce(msgNonce, MESSAGE_VERSION);\\n    }\\n\\n    /**\\n     * Base amount of gas required to make sure that the message will be received without\\n     * running out of gas. Amount of gas provided to the L2 call will be the gas requested by\\n     * the user PLUS this gas value so that if the message is not successful, it can always be\\n     * replayed on the other end.\\n     *\\n     * @param _message Message to compute base gas for.\\n     * @return Base gas required for message.\\n     */\\n    function baseGas(bytes memory _message) public pure returns (uint32) {\\n        // TODO: Values here are meant to be good enough to get a devnet running. We need to do\\n        // some simple experimentation with the smallest and largest possible message sizes to find\\n        // the correct constant and dynamic overhead values.\\n        return (uint32(_message.length) * MIN_GAS_DYNAMIC_OVERHEAD) + MIN_GAS_CONSTANT_OVERHEAD;\\n    }\\n\\n    /**\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _minGasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _minGasLimit\\n    ) external payable {\\n        // Triggers a message to the other messenger. Note that the amount of gas provided to the\\n        // message is the amount of gas requested by the user PLUS the base gas value. We want to\\n        // guarantee the property that the call to the target contract will always have at least\\n        // the minimum gas limit specified by the user.\\n        _sendMessage(\\n            otherMessenger,\\n            _minGasLimit + baseGas(_message),\\n            msg.value,\\n            abi.encodeWithSelector(\\n                this.relayMessage.selector,\\n                messageNonce(),\\n                msg.sender,\\n                _target,\\n                msg.value,\\n                _minGasLimit,\\n                _message\\n            )\\n        );\\n\\n        emit SentMessage(_target, msg.sender, _message, messageNonce(), _minGasLimit);\\n\\n        unchecked {\\n            ++msgNonce;\\n        }\\n    }\\n\\n    function relayMessage(\\n        uint256 _nonce,\\n        address _sender,\\n        address _target,\\n        uint256 _value,\\n        uint256 _minGasLimit,\\n        bytes calldata _message\\n    ) external payable nonReentrant whenNotPaused {\\n        bytes32 versionedHash = CrossDomainHashing.getVersionedHash(\\n            _nonce,\\n            _sender,\\n            _target,\\n            _value,\\n            _minGasLimit,\\n            _message\\n        );\\n\\n        if (_isSystemMessageSender()) {\\n            // Should never happen.\\n            require(msg.value == _value, \\\"Mismatched message value.\\\");\\n        } else {\\n            // TODO(tynes): could require that msg.value == 0 here\\n            // to prevent eth from getting stuck\\n            require(receivedMessages[versionedHash], \\\"Message cannot be replayed.\\\");\\n        }\\n\\n        // TODO: Should blocking happen on sending or receiving side?\\n        // TODO: Should this just return with an event instead of reverting?\\n        require(\\n            blockedSystemAddresses[_target] == false,\\n            \\\"Cannot send message to blocked system address.\\\"\\n        );\\n\\n        require(successfulMessages[versionedHash] == false, \\\"Message has already been relayed.\\\");\\n\\n        // TODO: Make sure this will always give us enough gas.\\n        require(gasleft() >= _minGasLimit + 45000, \\\"Insufficient gas to relay message.\\\");\\n\\n        xDomainMsgSender = _sender;\\n        (bool success, ) = ExcessivelySafeCall.excessivelySafeCall(\\n            _target,\\n            gasleft() - 40000,\\n            _value,\\n            0,\\n            _message\\n        );\\n        xDomainMsgSender = Lib_DefaultValues.DEFAULT_XDOMAIN_SENDER;\\n\\n        if (success == true) {\\n            successfulMessages[versionedHash] = true;\\n            emit RelayedMessage(versionedHash);\\n        } else {\\n            receivedMessages[versionedHash] = true;\\n            emit FailedRelayedMessage(versionedHash);\\n        }\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function _isSystemMessageSender() internal view virtual returns (bool);\\n\\n    function _sendMessage(\\n        address _to,\\n        uint64 _gasLimit,\\n        uint256 _value,\\n        bytes memory _data\\n    ) internal virtual;\\n\\n    /**\\n     * Initializes the contract.\\n     */\\n    function _initialize(address _otherMessenger, address[] memory _blockedSystemAddresses)\\n        internal\\n        initializer\\n    {\\n        xDomainMsgSender = Lib_DefaultValues.DEFAULT_XDOMAIN_SENDER;\\n        otherMessenger = _otherMessenger;\\n\\n        for (uint256 i = 0; i < _blockedSystemAddresses.length; i++) {\\n            blockedSystemAddresses[_blockedSystemAddresses[i]] = true;\\n        }\\n\\n        // TODO: ensure we know what these are doing and why they are here\\n        // Initialize upgradable OZ contracts\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n    }\\n}\\n\",\"keccak256\":\"0xba3ea6fea76fc260ac05b93861eee093fa34a4fbd0ceb154dbc6c1c659e2256d\",\"license\":\"MIT\"},\"contracts/universal/OptimismMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title OptimismMintableERC20\\n * This contract represents the remote representation\\n * of an ERC20 token. It is linked to the address of\\n * a token in another domain and tokens can be locked\\n * in the StandardBridge which will mint tokens in the\\n * other domain.\\n */\\ncontract OptimismMintableERC20 is ERC20 {\\n    event Mint(address indexed _account, uint256 _amount);\\n    event Burn(address indexed _account, uint256 _amount);\\n\\n    /**\\n     * @notice The address of the token in the remote domain\\n     */\\n    address public remoteToken;\\n\\n    /**\\n     * @notice The address of the bridge responsible for\\n     * minting. It is in the same domain.\\n     */\\n    address public bridge;\\n\\n    /**\\n     * @param _bridge Address of the L2 standard bridge.\\n     * @param _remoteToken Address of the corresponding L1 token.\\n     * @param _name ERC20 name.\\n     * @param _symbol ERC20 symbol.\\n     */\\n    constructor(\\n        address _bridge,\\n        address _remoteToken,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        remoteToken = _remoteToken;\\n        bridge = _bridge;\\n    }\\n\\n    /**\\n     * @notice Returns the corresponding L1 token address.\\n     * This is a legacy function and wraps the remoteToken value.\\n     */\\n    function l1Token() public view returns (address) {\\n        return remoteToken;\\n    }\\n\\n    /**\\n     * @notice The address of the bridge contract\\n     * responsible for minting tokens. This is a legacy\\n     * getter function\\n     */\\n    function l2Bridge() public view returns (address) {\\n        return bridge;\\n    }\\n\\n    /**\\n     * @notice A modifier that only allows the bridge to call\\n     */\\n    modifier onlyBridge() {\\n        require(msg.sender == bridge, \\\"Only L2 Bridge can mint and burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice ERC165\\n     */\\n    // slither-disable-next-line external-function\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        bytes4 iface1 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\")); // ERC165\\n        bytes4 iface2 = this.l1Token.selector ^ this.mint.selector ^ this.burn.selector;\\n        bytes4 iface3 = this.remoteToken.selector ^ this.mint.selector ^ this.burn.selector;\\n        return _interfaceId == iface1 || _interfaceId == iface3 || _interfaceId == iface2;\\n    }\\n\\n    /**\\n     * @notice The bridge can mint tokens\\n     */\\n    // slither-disable-next-line external-function\\n    function mint(address _to, uint256 _amount) public virtual onlyBridge {\\n        _mint(_to, _amount);\\n\\n        emit Mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice The bridge can burn tokens\\n     */\\n    // slither-disable-next-line external-function\\n    function burn(address _from, uint256 _amount) public virtual onlyBridge {\\n        _burn(_from, _amount);\\n\\n        emit Burn(_from, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa5c2470711f5bfad1c492378bd07d003d29401ef007cd1657c16095713e9bd7f\",\"license\":\"MIT\"},\"contracts/universal/StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Interface Imports */\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/* Library Imports */\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { CrossDomainMessenger } from \\\"./CrossDomainMessenger.sol\\\";\\nimport { OptimismMintableERC20 } from \\\"./OptimismMintableERC20.sol\\\";\\n\\n/**\\n * @title StandardBridge\\n * This contract can manage a 1:1 bridge between two domains for both\\n * ETH (native asset) and ERC20s.\\n * This contract should be deployed behind a proxy.\\n * TODO: do we want a donateERC20 function as well?\\n */\\nabstract contract StandardBridge {\\n    using SafeERC20 for IERC20;\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event ETHBridgeInitiated(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ETHBridgeFinalized(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20BridgeInitiated(\\n        address indexed _localToken,\\n        address indexed _remoteToken,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20BridgeFinalized(\\n        address indexed _localToken,\\n        address indexed _remoteToken,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20BridgeFailed(\\n        address indexed _localToken,\\n        address indexed _remoteToken,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /**\\n     * @notice The messenger contract on the same domain\\n     */\\n    CrossDomainMessenger public messenger;\\n\\n    /**\\n     * @notice The corresponding bridge on the other domain\\n     */\\n    StandardBridge public otherBridge;\\n\\n    mapping(address => mapping(address => uint256)) public deposits;\\n\\n    /*************\\n     * Modifiers *\\n     *************/\\n\\n    /**\\n     * @notice Only allow EOAs to call the functions. Note that this\\n     * is not safe against contracts calling code during their constructor\\n     */\\n    modifier onlyEOA() {\\n        require(!Address.isContract(msg.sender), \\\"Account not EOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures that the caller is the messenger, and that\\n     * it has the l2Sender value set to the address of the remote Token Bridge.\\n     */\\n    modifier onlyOtherBridge() {\\n        require(\\n            msg.sender == address(messenger) &&\\n                messenger.xDomainMessageSender() == address(otherBridge),\\n            \\\"Could not authenticate bridge message.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\\"Function can only be called by self.\\\");\\n        _;\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @notice Send ETH to this contract. This is used during upgrades\\n     */\\n    function donateETH() external payable {}\\n\\n    /**\\n     * @notice EOAs can simply send ETH to this contract to have it be deposited\\n     * to L2 through the standard bridge.\\n     */\\n    receive() external payable onlyEOA {\\n        _initiateBridgeETH(msg.sender, msg.sender, msg.value, 200_000, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @notice Send ETH to the message sender on the remote domain\\n     */\\n    function bridgeETH(uint32 _minGasLimit, bytes calldata _data) public payable onlyEOA {\\n        _initiateBridgeETH(msg.sender, msg.sender, msg.value, _minGasLimit, _data);\\n    }\\n\\n    /**\\n     * @notice Send ETH to a specified account on the remote domain\\n     */\\n    function bridgeETHTo(\\n        address _to,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) public payable {\\n        _initiateBridgeETH(msg.sender, _to, msg.value, _minGasLimit, _data);\\n    }\\n\\n    /**\\n     * @notice Send an ERC20 to the message sender on the remote domain\\n     */\\n    function bridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) public virtual onlyEOA {\\n        _initiateBridgeERC20(\\n            _localToken,\\n            _remoteToken,\\n            msg.sender,\\n            msg.sender,\\n            _amount,\\n            _minGasLimit,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @notice Send an ERC20 to a specified account on the remote domain\\n     */\\n    function bridgeERC20To(\\n        address _localToken,\\n        address _remoteToken,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) public virtual {\\n        _initiateBridgeERC20(\\n            _localToken,\\n            _remoteToken,\\n            msg.sender,\\n            _to,\\n            _amount,\\n            _minGasLimit,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @notice Finalize an ETH sending transaction sent from a remote domain\\n     */\\n    function finalizeBridgeETH(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) public payable onlyOtherBridge {\\n        require(msg.value == _amount, \\\"Amount sent does not match amount required.\\\");\\n        require(_to != address(this), \\\"Cannot send to self.\\\");\\n\\n        emit ETHBridgeFinalized(_from, _to, _amount, _data);\\n        (bool success, ) = _to.call{ value: _amount }(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice Finalize an ERC20 sending transaction sent from a remote domain\\n     */\\n    function finalizeBridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) public onlyOtherBridge {\\n        try this.completeOutboundTransfer(_localToken, _remoteToken, _to, _amount) {\\n            emit ERC20BridgeFinalized(_localToken, _remoteToken, _from, _to, _amount, _data);\\n        } catch {\\n            // Something went wrong during the bridging process, return to sender.\\n            // Can happen if a bridge UI specifies the wrong L2 token.\\n            _initiateBridgeERC20Unchecked(\\n                _remoteToken,\\n                _localToken,\\n                _from,\\n                _to,\\n                _amount,\\n                0, // _minGasLimit, 0 is fine here\\n                _data\\n            );\\n            emit ERC20BridgeFailed(_localToken, _remoteToken, _from, _to, _amount, _data);\\n        }\\n    }\\n\\n    function completeOutboundTransfer(\\n        address _localToken,\\n        address _remoteToken,\\n        address _to,\\n        uint256 _amount\\n    ) public onlySelf {\\n        // Make sure external function calls can't be used to trigger calls to\\n        // completeOutboundTransfer. We only make external (write) calls to _localToken.\\n        require(_localToken != address(this), \\\"Local token cannot be self\\\");\\n\\n        if (_isOptimismMintableERC20(_localToken)) {\\n            require(\\n                _isCorrectTokenPair(_localToken, _remoteToken),\\n                \\\"Wrong remote token for Optimism Mintable ERC20 local token\\\"\\n            );\\n\\n            OptimismMintableERC20(_localToken).mint(_to, _amount);\\n        } else {\\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] - _amount;\\n            IERC20(_localToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Initialize the StandardBridge contract with the address of\\n     * the messenger on the same domain as well as the address of the bridge\\n     * on the remote domain\\n     */\\n    function _initialize(address payable _messenger, address payable _otherBridge) internal {\\n        require(address(messenger) == address(0), \\\"Contract has already been initialized.\\\");\\n\\n        messenger = CrossDomainMessenger(_messenger);\\n        otherBridge = StandardBridge(_otherBridge);\\n    }\\n\\n    /**\\n     * @notice Bridge ETH to the remote chain through the messenger\\n     */\\n    function _initiateBridgeETH(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes memory _data\\n    ) internal {\\n        emit ETHBridgeInitiated(_from, _to, _amount, _data);\\n\\n        messenger.sendMessage{ value: _amount }(\\n            address(otherBridge),\\n            abi.encodeWithSelector(this.finalizeBridgeETH.selector, _from, _to, _amount, _data),\\n            _minGasLimit\\n        );\\n    }\\n\\n    /**\\n     * @notice Bridge an ERC20 to the remote chain through the messengers\\n     */\\n    function _initiateBridgeERC20(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) internal {\\n        // Make sure external function calls can't be used to trigger calls to\\n        // completeOutboundTransfer. We only make external (write) calls to _localToken.\\n        require(_localToken != address(this), \\\"Local token cannot be self\\\");\\n\\n        if (_isOptimismMintableERC20(_localToken)) {\\n            require(\\n                _isCorrectTokenPair(_localToken, _remoteToken),\\n                \\\"Wrong remote token for Optimism Mintable ERC20 local token\\\"\\n            );\\n\\n            OptimismMintableERC20(_localToken).burn(msg.sender, _amount);\\n        } else {\\n            // TODO: Do we need to confirm that the transfer was successful?\\n            IERC20(_localToken).safeTransferFrom(_from, address(this), _amount);\\n            deposits[_localToken][_remoteToken] = deposits[_localToken][_remoteToken] + _amount;\\n        }\\n\\n        _initiateBridgeERC20Unchecked(\\n            _localToken,\\n            _remoteToken,\\n            _from,\\n            _to,\\n            _amount,\\n            _minGasLimit,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @notice Bridge an ERC20 to the remote chain through the messengers\\n     */\\n    function _initiateBridgeERC20Unchecked(\\n        address _localToken,\\n        address _remoteToken,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _minGasLimit,\\n        bytes calldata _data\\n    ) internal {\\n        messenger.sendMessage(\\n            address(otherBridge),\\n            abi.encodeWithSelector(\\n                this.finalizeBridgeERC20.selector,\\n                _remoteToken,\\n                _localToken,\\n                _from,\\n                _to,\\n                _amount,\\n                _data\\n            ),\\n            _minGasLimit\\n        );\\n\\n        emit ERC20BridgeInitiated(_localToken, _remoteToken, _from, _to, _amount, _data);\\n    }\\n\\n    /**\\n     * Checks if a given address is an OptimismMintableERC20. Not perfect, but good enough.\\n     * Just the way we like it.\\n     *\\n     * @param _token Address of the token to check.\\n     * @return True if the token is an OptimismMintableERC20.\\n     */\\n    function _isOptimismMintableERC20(address _token) internal view returns (bool) {\\n        // 0x1d1d8b63 is mint ^ burn ^ l1Token\\n        return ERC165Checker.supportsInterface(_token, 0x1d1d8b63);\\n    }\\n\\n    /**\\n     * Checks if the \\\"other token\\\" is the correct pair token for the OptimismMintableERC20.\\n     *\\n     * @param _mintableToken OptimismMintableERC20 to check against.\\n     * @param _otherToken Pair token to check.\\n     * @return True if the other token is the correct pair token for the OptimismMintableERC20.\\n     */\\n    function _isCorrectTokenPair(address _mintableToken, address _otherToken)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _otherToken == OptimismMintableERC20(_mintableToken).l1Token();\\n    }\\n}\\n\",\"keccak256\":\"0xc3976052633edf9df40602f06a203dcd26ca44e9016620f4c36e678eb03e71a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124b6806100206000396000f3fe6080604052600436106101485760003560e01c80638b4c40b0116100c0578063af565a1311610074578063c4d66de811610059578063c4d66de8146103a7578063c89701a2146103c7578063e11013dd146103e757600080fd5b8063af565a1314610374578063b1a1a8821461039457600080fd5b806391c49bf8116100a557806391c49bf8146103235780639a2ac6d514610341578063a9f9e6751461035457600080fd5b80638b4c40b0146101c05780638f601f66146102dd57600080fd5b80633cb747bf1161011757806358a997f6116100fc57806358a997f61461027d578063838b25201461029d57806387087623146102bd57600080fd5b80633cb747bf14610220578063540abf731461025d57600080fd5b80630166a07a146101c757806309fc8843146101e75780631532ec34146101fa5780631635f5fd1461020d57600080fd5b366101c257333b156101a15760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f41000000000000000000000000000000000060448201526064015b60405180910390fd5b6101c033333462030d40604051806020016040528060008152506103fa565b005b600080fd5b3480156101d357600080fd5b506101c06101e2366004611e5b565b610569565b6101c06101f5366004611f0c565b6107e5565b6101c0610208366004611f5f565b61087c565b6101c061021b366004611f5f565b6109ff565b34801561022c57600080fd5b50600054610240906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026957600080fd5b506101c0610278366004611fd2565b610d27565b34801561028957600080fd5b506101c0610298366004612049565b610d37565b3480156102a957600080fd5b506101c06102b8366004611fd2565b610d96565b3480156102c957600080fd5b506101c06102d8366004612049565b610da6565b3480156102e957600080fd5b506103156102f83660046120cc565b600260209081526000928352604080842090915290825290205481565b604051908152602001610254565b34801561032f57600080fd5b506001546001600160a01b0316610240565b6101c061034f366004612105565b610e05565b34801561036057600080fd5b506101c061036f366004611e5b565b610e4d565b34801561038057600080fd5b506101c061038f366004612168565b610fd7565b6101c06103a2366004611f0c565b611216565b3480156103b357600080fd5b506101c06103c23660046121b9565b6112a7565b3480156103d357600080fd5b50600154610240906001600160a01b031681565b6101c06103f5366004612105565b6112c8565b836001600160a01b0316856001600160a01b03167f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5858460405161043f92919061224c565b60405180910390a36000546001546040516001600160a01b0392831692633dbb202b9287929116907f1635f5fd000000000000000000000000000000000000000000000000000000009061049d908b908b9086908a90602401612265565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b909216825261053092918890600401612297565b6000604051808303818588803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b0316331480156106175750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c91906122cf565b6001600160a01b0316145b6106895760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b6040517faf565a130000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301528516604482015260648101849052309063af565a1390608401600060405180830381600087803b1580156106fa57600080fd5b505af192505050801561070b575060015b6107805761072086888787876000888861130b565b846001600160a01b0316866001600160a01b0316886001600160a01b03167f2755817676249910615f0a6a240ad225abe5343df8d527f7294c4af36a92009a878787876040516107739493929190612335565b60405180910390a46107dc565b846001600160a01b0316866001600160a01b0316886001600160a01b03167fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd878787876040516107d39493929190612335565b60405180910390a45b50505050505050565b333b156108345760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b6108773333348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103fa92505050565b505050565b6000546001600160a01b03163314801561092a5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122cf565b6001600160a01b0316145b61099c5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b836001600160a01b0316856001600160a01b03167f2ac69ee804d9a7a0984249f508dfab7cb2534b465b6ce1580f99a38ba9c5e6318585856040516109e39392919061235e565b60405180910390a36109f885858585856109ff565b5050505050565b6000546001600160a01b031633148015610aad5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906122cf565b6001600160a01b0316145b610b1f5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b823414610b945760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e742073656e7420646f6573206e6f74206d6174636820616d6f756e60448201527f742072657175697265642e0000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b038416301415610bed5760405162461bcd60e51b815260206004820152601460248201527f43616e6e6f742073656e6420746f2073656c662e0000000000000000000000006044820152606401610198565b836001600160a01b0316856001600160a01b03167f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d858585604051610c349392919061235e565b60405180910390a3604080516000808252602082019092526001600160a01b038616908590604051610c669190612381565b60006040518083038185875af1925050503d8060008114610ca3576040519150601f19603f3d011682016040523d82523d6000602084013e610ca8565b606091505b5050905080610d1f5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610198565b505050505050565b6107dc878733888888888861148e565b333b15610d865760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b610d1f8686333388888888611676565b6107dc8787338888888888611676565b333b15610df55760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b610d1f868633338888888861148e565b610e4733858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116e192505050565b50505050565b6000546001600160a01b031633148015610efb5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef091906122cf565b6001600160a01b0316145b610f6d5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b846001600160a01b0316866001600160a01b0316886001600160a01b03167f3ceee06c1e37648fcbb6ed52e17b3e1f275a1f8c7b22a84b2b84732431e046b387878787604051610fc09493929190612335565b60405180910390a46107dc87878787878787610569565b33301461104b5760405162461bcd60e51b8152602060048201526024808201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207360448201527f656c662e000000000000000000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b0384163014156110a45760405162461bcd60e51b815260206004820152601a60248201527f4c6f63616c20746f6b656e2063616e6e6f742062652073656c660000000000006044820152606401610198565b6110ad8461173b565b156111ae576110bc848461176d565b61112e5760405162461bcd60e51b815260206004820152603a60248201527f57726f6e672072656d6f746520746f6b656e20666f72204f7074696d69736d2060448201527f4d696e7461626c65204552433230206c6f63616c20746f6b656e0000000000006064820152608401610198565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390528516906340c10f1990604401600060405180830381600087803b15801561119157600080fd5b505af11580156111a5573d6000803e3d6000fd5b50505050610e47565b6001600160a01b038085166000908152600260209081526040808320938716835292905220546111df9082906123cc565b6001600160a01b03808616600081815260026020908152604080832094891683529390529190912091909155610e479083836117ed565b333b156112655760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b61087733338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116e192505050565b6112c5817342000000000000000000000000000000000000106118b4565b50565b610e473385348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103fa92505050565b6000546001546040516001600160a01b0392831692633dbb202b9216907f0166a07a0000000000000000000000000000000000000000000000000000000090611364908c908e908d908d908d908c908c906024016123e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b90921682526113f792918890600401612297565b600060405180830381600087803b15801561141157600080fd5b505af1158015611425573d6000803e3d6000fd5b50505050856001600160a01b0316876001600160a01b0316896001600160a01b03167f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf8888878760405161147c9493929190612335565b60405180910390a45050505050505050565b6001600160a01b0388163014156114e75760405162461bcd60e51b815260206004820152601a60248201527f4c6f63616c20746f6b656e2063616e6e6f742062652073656c660000000000006044820152606401610198565b6114f08861173b565b156115ef576114ff888861176d565b6115715760405162461bcd60e51b815260206004820152603a60248201527f57726f6e672072656d6f746520746f6b656e20666f72204f7074696d69736d2060448201527f4d696e7461626c65204552433230206c6f63616c20746f6b656e0000000000006064820152608401610198565b6040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03891690639dc29fac90604401600060405180830381600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b5050505061165c565b6116046001600160a01b038916873087611979565b6001600160a01b038089166000908152600260209081526040808320938b1683529290522054611635908590612433565b6001600160a01b03808a166000908152600260209081526040808320938c16835292905220555b61166c888888888888888861130b565b5050505050505050565b856001600160a01b0316876001600160a01b0316896001600160a01b03167f718594027abd4eaed59f95162563e0cc6d0e8d5b86b1c7be8b1b0ac3343d0396888887876040516116c99493929190612335565b60405180910390a461166c888888888888888861148e565b826001600160a01b0316846001600160a01b03167f35d79ab81f2b2017e19afb5c5571778877782d7a8786f5907f93b0f4702f4f23348460405161172692919061224c565b60405180910390a3610e4784843485856103fa565b6000611767827f1d1d8b63000000000000000000000000000000000000000000000000000000006119ca565b92915050565b6000826001600160a01b031663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d191906122cf565b6001600160a01b0316826001600160a01b031614905092915050565b6040516001600160a01b0383166024820152604481018290526108779084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119ed565b6000546001600160a01b0316156119335760405162461bcd60e51b815260206004820152602660248201527f436f6e74726163742068617320616c7265616479206265656e20696e6974696160448201527f6c697a65642e00000000000000000000000000000000000000000000000000006064820152608401610198565b600080546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560018054929093169116179055565b6040516001600160a01b0380851660248301528316604482015260648101829052610e479085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611832565b60006119d583611ad2565b80156119e657506119e68383611b36565b9392505050565b6000611a42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c659092919063ffffffff16565b8051909150156108775780806020019051810190611a60919061244b565b6108775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610198565b6000611afe827f01ffc9a700000000000000000000000000000000000000000000000000000000611b36565b80156117675750611b2f827fffffffff00000000000000000000000000000000000000000000000000000000611b36565b1592915050565b604080517fffffffff00000000000000000000000000000000000000000000000000000000831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052905160009190829081906001600160a01b0387169061753090611be3908690612381565b6000604051808303818686fa925050503d8060008114611c1f576040519150601f19603f3d011682016040523d82523d6000602084013e611c24565b606091505b5091509150602081511015611c3f5760009350505050611767565b818015611c5b575080806020019051810190611c5b919061244b565b9695505050505050565b6060611c748484600085611c7c565b949350505050565b606082471015611cf45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b0385163b611d4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610198565b600080866001600160a01b03168587604051611d679190612381565b60006040518083038185875af1925050503d8060008114611da4576040519150601f19603f3d011682016040523d82523d6000602084013e611da9565b606091505b5091509150611db9828286611dc4565b979650505050505050565b60608315611dd35750816119e6565b825115611de35782518084602001fd5b8160405162461bcd60e51b8152600401610198919061246d565b6001600160a01b03811681146112c557600080fd5b60008083601f840112611e2457600080fd5b50813567ffffffffffffffff811115611e3c57600080fd5b602083019150836020828501011115611e5457600080fd5b9250929050565b600080600080600080600060c0888a031215611e7657600080fd5b8735611e8181611dfd565b96506020880135611e9181611dfd565b95506040880135611ea181611dfd565b94506060880135611eb181611dfd565b93506080880135925060a088013567ffffffffffffffff811115611ed457600080fd5b611ee08a828b01611e12565b989b979a50959850939692959293505050565b803563ffffffff81168114611f0757600080fd5b919050565b600080600060408486031215611f2157600080fd5b611f2a84611ef3565b9250602084013567ffffffffffffffff811115611f4657600080fd5b611f5286828701611e12565b9497909650939450505050565b600080600080600060808688031215611f7757600080fd5b8535611f8281611dfd565b94506020860135611f9281611dfd565b935060408601359250606086013567ffffffffffffffff811115611fb557600080fd5b611fc188828901611e12565b969995985093965092949392505050565b600080600080600080600060c0888a031215611fed57600080fd5b8735611ff881611dfd565b9650602088013561200881611dfd565b9550604088013561201881611dfd565b94506060880135935061202d60808901611ef3565b925060a088013567ffffffffffffffff811115611ed457600080fd5b60008060008060008060a0878903121561206257600080fd5b863561206d81611dfd565b9550602087013561207d81611dfd565b94506040870135935061209260608801611ef3565b9250608087013567ffffffffffffffff8111156120ae57600080fd5b6120ba89828a01611e12565b979a9699509497509295939492505050565b600080604083850312156120df57600080fd5b82356120ea81611dfd565b915060208301356120fa81611dfd565b809150509250929050565b6000806000806060858703121561211b57600080fd5b843561212681611dfd565b935061213460208601611ef3565b9250604085013567ffffffffffffffff81111561215057600080fd5b61215c87828801611e12565b95989497509550505050565b6000806000806080858703121561217e57600080fd5b843561218981611dfd565b9350602085013561219981611dfd565b925060408501356121a981611dfd565b9396929550929360600135925050565b6000602082840312156121cb57600080fd5b81356119e681611dfd565b60005b838110156121f15781810151838201526020016121d9565b83811115610e475750506000910152565b6000815180845261221a8160208601602086016121d6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b828152604060208201526000611c746040830184612202565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611c5b6080830184612202565b6001600160a01b03841681526060602082015260006122b96060830185612202565b905063ffffffff83166040830152949350505050565b6000602082840312156122e157600080fd5b81516119e681611dfd565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6001600160a01b0385168152836020820152606060408201526000611c5b6060830184866122ec565b8381526040602082015260006123786040830184866122ec565b95945050505050565b600082516123938184602087016121d6565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156123de576123de61239d565b500390565b60006001600160a01b03808a1683528089166020840152808816604084015280871660608401525084608083015260c060a083015261242660c0830184866122ec565b9998505050505050505050565b600082198211156124465761244661239d565b500190565b60006020828403121561245d57600080fd5b815180151581146119e657600080fd5b6020815260006119e6602083018461220256fea26469706673582212207297adc2a5d47fe01fe056e34e2333c254b9403e49380282bd570affa005125964736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c80638b4c40b0116100c0578063af565a1311610074578063c4d66de811610059578063c4d66de8146103a7578063c89701a2146103c7578063e11013dd146103e757600080fd5b8063af565a1314610374578063b1a1a8821461039457600080fd5b806391c49bf8116100a557806391c49bf8146103235780639a2ac6d514610341578063a9f9e6751461035457600080fd5b80638b4c40b0146101c05780638f601f66146102dd57600080fd5b80633cb747bf1161011757806358a997f6116100fc57806358a997f61461027d578063838b25201461029d57806387087623146102bd57600080fd5b80633cb747bf14610220578063540abf731461025d57600080fd5b80630166a07a146101c757806309fc8843146101e75780631532ec34146101fa5780631635f5fd1461020d57600080fd5b366101c257333b156101a15760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f41000000000000000000000000000000000060448201526064015b60405180910390fd5b6101c033333462030d40604051806020016040528060008152506103fa565b005b600080fd5b3480156101d357600080fd5b506101c06101e2366004611e5b565b610569565b6101c06101f5366004611f0c565b6107e5565b6101c0610208366004611f5f565b61087c565b6101c061021b366004611f5f565b6109ff565b34801561022c57600080fd5b50600054610240906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026957600080fd5b506101c0610278366004611fd2565b610d27565b34801561028957600080fd5b506101c0610298366004612049565b610d37565b3480156102a957600080fd5b506101c06102b8366004611fd2565b610d96565b3480156102c957600080fd5b506101c06102d8366004612049565b610da6565b3480156102e957600080fd5b506103156102f83660046120cc565b600260209081526000928352604080842090915290825290205481565b604051908152602001610254565b34801561032f57600080fd5b506001546001600160a01b0316610240565b6101c061034f366004612105565b610e05565b34801561036057600080fd5b506101c061036f366004611e5b565b610e4d565b34801561038057600080fd5b506101c061038f366004612168565b610fd7565b6101c06103a2366004611f0c565b611216565b3480156103b357600080fd5b506101c06103c23660046121b9565b6112a7565b3480156103d357600080fd5b50600154610240906001600160a01b031681565b6101c06103f5366004612105565b6112c8565b836001600160a01b0316856001600160a01b03167f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5858460405161043f92919061224c565b60405180910390a36000546001546040516001600160a01b0392831692633dbb202b9287929116907f1635f5fd000000000000000000000000000000000000000000000000000000009061049d908b908b9086908a90602401612265565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b909216825261053092918890600401612297565b6000604051808303818588803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b0316331480156106175750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa1580156105e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c91906122cf565b6001600160a01b0316145b6106895760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b6040517faf565a130000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015280881660248301528516604482015260648101849052309063af565a1390608401600060405180830381600087803b1580156106fa57600080fd5b505af192505050801561070b575060015b6107805761072086888787876000888861130b565b846001600160a01b0316866001600160a01b0316886001600160a01b03167f2755817676249910615f0a6a240ad225abe5343df8d527f7294c4af36a92009a878787876040516107739493929190612335565b60405180910390a46107dc565b846001600160a01b0316866001600160a01b0316886001600160a01b03167fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd878787876040516107d39493929190612335565b60405180910390a45b50505050505050565b333b156108345760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b6108773333348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103fa92505050565b505050565b6000546001600160a01b03163314801561092a5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122cf565b6001600160a01b0316145b61099c5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b836001600160a01b0316856001600160a01b03167f2ac69ee804d9a7a0984249f508dfab7cb2534b465b6ce1580f99a38ba9c5e6318585856040516109e39392919061235e565b60405180910390a36109f885858585856109ff565b5050505050565b6000546001600160a01b031633148015610aad5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa291906122cf565b6001600160a01b0316145b610b1f5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b823414610b945760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e742073656e7420646f6573206e6f74206d6174636820616d6f756e60448201527f742072657175697265642e0000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b038416301415610bed5760405162461bcd60e51b815260206004820152601460248201527f43616e6e6f742073656e6420746f2073656c662e0000000000000000000000006044820152606401610198565b836001600160a01b0316856001600160a01b03167f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d858585604051610c349392919061235e565b60405180910390a3604080516000808252602082019092526001600160a01b038616908590604051610c669190612381565b60006040518083038185875af1925050503d8060008114610ca3576040519150601f19603f3d011682016040523d82523d6000602084013e610ca8565b606091505b5050905080610d1f5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527f20455448207472616e73666572206661696c65640000000000000000000000006064820152608401610198565b505050505050565b6107dc878733888888888861148e565b333b15610d865760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b610d1f8686333388888888611676565b6107dc8787338888888888611676565b333b15610df55760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b610d1f868633338888888861148e565b610e4733858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116e192505050565b50505050565b6000546001600160a01b031633148015610efb5750600154600054604080517f6e296e4500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169390921691636e296e45916004808201926020929091908290030181865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef091906122cf565b6001600160a01b0316145b610f6d5760405162461bcd60e51b815260206004820152602660248201527f436f756c64206e6f742061757468656e74696361746520627269646765206d6560448201527f73736167652e00000000000000000000000000000000000000000000000000006064820152608401610198565b846001600160a01b0316866001600160a01b0316886001600160a01b03167f3ceee06c1e37648fcbb6ed52e17b3e1f275a1f8c7b22a84b2b84732431e046b387878787604051610fc09493929190612335565b60405180910390a46107dc87878787878787610569565b33301461104b5760405162461bcd60e51b8152602060048201526024808201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207360448201527f656c662e000000000000000000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b0384163014156110a45760405162461bcd60e51b815260206004820152601a60248201527f4c6f63616c20746f6b656e2063616e6e6f742062652073656c660000000000006044820152606401610198565b6110ad8461173b565b156111ae576110bc848461176d565b61112e5760405162461bcd60e51b815260206004820152603a60248201527f57726f6e672072656d6f746520746f6b656e20666f72204f7074696d69736d2060448201527f4d696e7461626c65204552433230206c6f63616c20746f6b656e0000000000006064820152608401610198565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390528516906340c10f1990604401600060405180830381600087803b15801561119157600080fd5b505af11580156111a5573d6000803e3d6000fd5b50505050610e47565b6001600160a01b038085166000908152600260209081526040808320938716835292905220546111df9082906123cc565b6001600160a01b03808616600081815260026020908152604080832094891683529390529190912091909155610e479083836117ed565b333b156112655760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206e6f7420454f4100000000000000000000000000000000006044820152606401610198565b61087733338585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116e192505050565b6112c5817342000000000000000000000000000000000000106118b4565b50565b610e473385348686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103fa92505050565b6000546001546040516001600160a01b0392831692633dbb202b9216907f0166a07a0000000000000000000000000000000000000000000000000000000090611364908c908e908d908d908d908c908c906024016123e3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b90921682526113f792918890600401612297565b600060405180830381600087803b15801561141157600080fd5b505af1158015611425573d6000803e3d6000fd5b50505050856001600160a01b0316876001600160a01b0316896001600160a01b03167f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf8888878760405161147c9493929190612335565b60405180910390a45050505050505050565b6001600160a01b0388163014156114e75760405162461bcd60e51b815260206004820152601a60248201527f4c6f63616c20746f6b656e2063616e6e6f742062652073656c660000000000006044820152606401610198565b6114f08861173b565b156115ef576114ff888861176d565b6115715760405162461bcd60e51b815260206004820152603a60248201527f57726f6e672072656d6f746520746f6b656e20666f72204f7074696d69736d2060448201527f4d696e7461626c65204552433230206c6f63616c20746f6b656e0000000000006064820152608401610198565b6040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03891690639dc29fac90604401600060405180830381600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b5050505061165c565b6116046001600160a01b038916873087611979565b6001600160a01b038089166000908152600260209081526040808320938b1683529290522054611635908590612433565b6001600160a01b03808a166000908152600260209081526040808320938c16835292905220555b61166c888888888888888861130b565b5050505050505050565b856001600160a01b0316876001600160a01b0316896001600160a01b03167f718594027abd4eaed59f95162563e0cc6d0e8d5b86b1c7be8b1b0ac3343d0396888887876040516116c99493929190612335565b60405180910390a461166c888888888888888861148e565b826001600160a01b0316846001600160a01b03167f35d79ab81f2b2017e19afb5c5571778877782d7a8786f5907f93b0f4702f4f23348460405161172692919061224c565b60405180910390a3610e4784843485856103fa565b6000611767827f1d1d8b63000000000000000000000000000000000000000000000000000000006119ca565b92915050565b6000826001600160a01b031663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d191906122cf565b6001600160a01b0316826001600160a01b031614905092915050565b6040516001600160a01b0383166024820152604481018290526108779084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119ed565b6000546001600160a01b0316156119335760405162461bcd60e51b815260206004820152602660248201527f436f6e74726163742068617320616c7265616479206265656e20696e6974696160448201527f6c697a65642e00000000000000000000000000000000000000000000000000006064820152608401610198565b600080546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560018054929093169116179055565b6040516001600160a01b0380851660248301528316604482015260648101829052610e479085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611832565b60006119d583611ad2565b80156119e657506119e68383611b36565b9392505050565b6000611a42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c659092919063ffffffff16565b8051909150156108775780806020019051810190611a60919061244b565b6108775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610198565b6000611afe827f01ffc9a700000000000000000000000000000000000000000000000000000000611b36565b80156117675750611b2f827fffffffff00000000000000000000000000000000000000000000000000000000611b36565b1592915050565b604080517fffffffff00000000000000000000000000000000000000000000000000000000831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052905160009190829081906001600160a01b0387169061753090611be3908690612381565b6000604051808303818686fa925050503d8060008114611c1f576040519150601f19603f3d011682016040523d82523d6000602084013e611c24565b606091505b5091509150602081511015611c3f5760009350505050611767565b818015611c5b575080806020019051810190611c5b919061244b565b9695505050505050565b6060611c748484600085611c7c565b949350505050565b606082471015611cf45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610198565b6001600160a01b0385163b611d4b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610198565b600080866001600160a01b03168587604051611d679190612381565b60006040518083038185875af1925050503d8060008114611da4576040519150601f19603f3d011682016040523d82523d6000602084013e611da9565b606091505b5091509150611db9828286611dc4565b979650505050505050565b60608315611dd35750816119e6565b825115611de35782518084602001fd5b8160405162461bcd60e51b8152600401610198919061246d565b6001600160a01b03811681146112c557600080fd5b60008083601f840112611e2457600080fd5b50813567ffffffffffffffff811115611e3c57600080fd5b602083019150836020828501011115611e5457600080fd5b9250929050565b600080600080600080600060c0888a031215611e7657600080fd5b8735611e8181611dfd565b96506020880135611e9181611dfd565b95506040880135611ea181611dfd565b94506060880135611eb181611dfd565b93506080880135925060a088013567ffffffffffffffff811115611ed457600080fd5b611ee08a828b01611e12565b989b979a50959850939692959293505050565b803563ffffffff81168114611f0757600080fd5b919050565b600080600060408486031215611f2157600080fd5b611f2a84611ef3565b9250602084013567ffffffffffffffff811115611f4657600080fd5b611f5286828701611e12565b9497909650939450505050565b600080600080600060808688031215611f7757600080fd5b8535611f8281611dfd565b94506020860135611f9281611dfd565b935060408601359250606086013567ffffffffffffffff811115611fb557600080fd5b611fc188828901611e12565b969995985093965092949392505050565b600080600080600080600060c0888a031215611fed57600080fd5b8735611ff881611dfd565b9650602088013561200881611dfd565b9550604088013561201881611dfd565b94506060880135935061202d60808901611ef3565b925060a088013567ffffffffffffffff811115611ed457600080fd5b60008060008060008060a0878903121561206257600080fd5b863561206d81611dfd565b9550602087013561207d81611dfd565b94506040870135935061209260608801611ef3565b9250608087013567ffffffffffffffff8111156120ae57600080fd5b6120ba89828a01611e12565b979a9699509497509295939492505050565b600080604083850312156120df57600080fd5b82356120ea81611dfd565b915060208301356120fa81611dfd565b809150509250929050565b6000806000806060858703121561211b57600080fd5b843561212681611dfd565b935061213460208601611ef3565b9250604085013567ffffffffffffffff81111561215057600080fd5b61215c87828801611e12565b95989497509550505050565b6000806000806080858703121561217e57600080fd5b843561218981611dfd565b9350602085013561219981611dfd565b925060408501356121a981611dfd565b9396929550929360600135925050565b6000602082840312156121cb57600080fd5b81356119e681611dfd565b60005b838110156121f15781810151838201526020016121d9565b83811115610e475750506000910152565b6000815180845261221a8160208601602086016121d6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b828152604060208201526000611c746040830184612202565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611c5b6080830184612202565b6001600160a01b03841681526060602082015260006122b96060830185612202565b905063ffffffff83166040830152949350505050565b6000602082840312156122e157600080fd5b81516119e681611dfd565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6001600160a01b0385168152836020820152606060408201526000611c5b6060830184866122ec565b8381526040602082015260006123786040830184866122ec565b95945050505050565b600082516123938184602087016121d6565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156123de576123de61239d565b500390565b60006001600160a01b03808a1683528089166020840152808816604084015280871660608401525084608083015260c060a083015261242660c0830184866122ec565b9998505050505050505050565b600082198211156124465761244661239d565b500190565b60006020828403121561245d57600080fd5b815180151581146119e657600080fd5b6020815260006119e6602083018461220256fea26469706673582212207297adc2a5d47fe01fe056e34e2333c254b9403e49380282bd570affa005125964736f6c634300080a0033",
  "devdoc": {
    "details": "The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits and listening to it for newly finalized withdrawals.",
    "kind": "dev",
    "methods": {
      "depositERC20(address,address,uint256,uint32,bytes)": {
        "details": "deposit an amount of the ERC20 to the caller's balance on L2.",
        "params": {
          "_amount": "Amount of the ERC20 to deposit",
          "_data": "Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.",
          "_l1Token": "Address of the L1 ERC20 we are depositing",
          "_l2Token": "Address of the L1 respective L2 ERC20",
          "_minGasLimit": "limit required to complete the deposit on L2."
        }
      },
      "depositERC20To(address,address,address,uint256,uint32,bytes)": {
        "details": "deposit an amount of ERC20 to a recipient's balance on L2.",
        "params": {
          "_amount": "Amount of the ERC20 to deposit.",
          "_data": "Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.",
          "_l1Token": "Address of the L1 ERC20 we are depositing",
          "_l2Token": "Address of the L1 respective L2 ERC20",
          "_minGasLimit": "Gas limit required to complete the deposit on L2.",
          "_to": "L2 address to credit the withdrawal to."
        }
      },
      "depositETH(uint32,bytes)": {
        "details": "Deposit an amount of the ETH to the caller's balance on L2.",
        "params": {
          "_data": "Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.",
          "_minGasLimit": "limit required to complete the deposit on L2."
        }
      },
      "depositETHTo(address,uint32,bytes)": {
        "details": "Deposit an amount of ETH to a recipient's balance on L2.",
        "params": {
          "_data": "Optional data to forward to L2. This data is provided        solely as a convenience for external contracts. Aside from enforcing a maximum        length, these contracts provide no guarantees about its content.",
          "_minGasLimit": "Gas limit required to complete the deposit on L2.",
          "_to": "L2 address to credit the withdrawal to."
        }
      },
      "finalizeERC20Withdrawal(address,address,address,address,uint256,bytes)": {
        "details": "Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the L1 ERC20 token. This call will fail if the initialized withdrawal from L2 has not been finalized.",
        "params": {
          "_amount": "Amount of the ERC20 to deposit.",
          "_data": "Data provided by the sender on L2. This data is provided   solely as a convenience for external contracts. Aside from enforcing a maximum   length, these contracts provide no guarantees about its content.",
          "_from": "L2 address initiating the transfer.",
          "_l1Token": "Address of L1 token to finalizeWithdrawal for.",
          "_l2Token": "Address of L2 token where withdrawal was initiated.",
          "_to": "L1 address to credit the withdrawal to."
        }
      },
      "initialize(address)": {
        "details": "initialize the L1StandardBridge with the address of the      messenger in the same domain"
      },
      "l2TokenBridge()": {
        "details": "Get the address of the corresponding L2 bridge contract.      This is a legacy getter, provided for backwards compatibility.",
        "returns": {
          "_0": "Address of the corresponding L2 bridge contract."
        }
      }
    },
    "title": "L1StandardBridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridgeERC20(address,address,uint256,uint32,bytes)": {
        "notice": "Send an ERC20 to the message sender on the remote domain"
      },
      "bridgeERC20To(address,address,address,uint256,uint32,bytes)": {
        "notice": "Send an ERC20 to a specified account on the remote domain"
      },
      "bridgeETH(uint32,bytes)": {
        "notice": "Send ETH to the message sender on the remote domain"
      },
      "bridgeETHTo(address,uint32,bytes)": {
        "notice": "Send ETH to a specified account on the remote domain"
      },
      "donateETH()": {
        "notice": "Send ETH to this contract. This is used during upgrades"
      },
      "finalizeBridgeERC20(address,address,address,address,uint256,bytes)": {
        "notice": "Finalize an ERC20 sending transaction sent from a remote domain"
      },
      "finalizeBridgeETH(address,address,uint256,bytes)": {
        "notice": "Finalize an ETH sending transaction sent from a remote domain"
      },
      "messenger()": {
        "notice": "The messenger contract on the same domain"
      },
      "otherBridge()": {
        "notice": "The corresponding bridge on the other domain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8012,
        "contract": "contracts/L1/L1StandardBridge.sol:L1StandardBridge",
        "label": "messenger",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(CrossDomainMessenger)7632"
      },
      {
        "astId": 8016,
        "contract": "contracts/L1/L1StandardBridge.sol:L1StandardBridge",
        "label": "otherBridge",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(StandardBridge)8638"
      },
      {
        "astId": 8022,
        "contract": "contracts/L1/L1StandardBridge.sol:L1StandardBridge",
        "label": "deposits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CrossDomainMessenger)7632": {
        "encoding": "inplace",
        "label": "contract CrossDomainMessenger",
        "numberOfBytes": "20"
      },
      "t_contract(StandardBridge)8638": {
        "encoding": "inplace",
        "label": "contract StandardBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}